
ADCTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dd0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08007e90  08007e90  00017e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008020  08008020  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08008020  08008020  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008020  08008020  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008020  08008020  00018020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008024  08008024  00018024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008028  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf4  20000088  080080ac  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001c7c  080080ac  00021c7c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001885b  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033c3  00000000  00000000  00038907  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001620  00000000  00000000  0003bcd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001488  00000000  00000000  0003d2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001889f  00000000  00000000  0003e778  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000115dd  00000000  00000000  00057017  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e033  00000000  00000000  000685f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f6627  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005164  00000000  00000000  000f66a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007e78 	.word	0x08007e78

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	08007e78 	.word	0x08007e78

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 fef1 	bl	8001018 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fe49 	bl	8000ed8 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fee3 	bl	8001018 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 fed9 	bl	8001018 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 fe6b 	bl	8000f50 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fe61 	bl	8000f50 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_dadd>:
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	464f      	mov	r7, r9
 80002a0:	4646      	mov	r6, r8
 80002a2:	46d6      	mov	lr, sl
 80002a4:	000c      	movs	r4, r1
 80002a6:	0309      	lsls	r1, r1, #12
 80002a8:	b5c0      	push	{r6, r7, lr}
 80002aa:	0a49      	lsrs	r1, r1, #9
 80002ac:	0f47      	lsrs	r7, r0, #29
 80002ae:	005e      	lsls	r6, r3, #1
 80002b0:	4339      	orrs	r1, r7
 80002b2:	031f      	lsls	r7, r3, #12
 80002b4:	0fdb      	lsrs	r3, r3, #31
 80002b6:	469c      	mov	ip, r3
 80002b8:	0065      	lsls	r5, r4, #1
 80002ba:	0a7b      	lsrs	r3, r7, #9
 80002bc:	0f57      	lsrs	r7, r2, #29
 80002be:	431f      	orrs	r7, r3
 80002c0:	0d6d      	lsrs	r5, r5, #21
 80002c2:	0fe4      	lsrs	r4, r4, #31
 80002c4:	0d76      	lsrs	r6, r6, #21
 80002c6:	46a1      	mov	r9, r4
 80002c8:	00c0      	lsls	r0, r0, #3
 80002ca:	46b8      	mov	r8, r7
 80002cc:	00d2      	lsls	r2, r2, #3
 80002ce:	1bab      	subs	r3, r5, r6
 80002d0:	4564      	cmp	r4, ip
 80002d2:	d07b      	beq.n	80003cc <__aeabi_dadd+0x130>
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	dd5f      	ble.n	8000398 <__aeabi_dadd+0xfc>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d000      	beq.n	80002de <__aeabi_dadd+0x42>
 80002dc:	e0a4      	b.n	8000428 <__aeabi_dadd+0x18c>
 80002de:	003e      	movs	r6, r7
 80002e0:	4316      	orrs	r6, r2
 80002e2:	d100      	bne.n	80002e6 <__aeabi_dadd+0x4a>
 80002e4:	e112      	b.n	800050c <__aeabi_dadd+0x270>
 80002e6:	1e5e      	subs	r6, r3, #1
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d000      	beq.n	80002ee <__aeabi_dadd+0x52>
 80002ec:	e19e      	b.n	800062c <__aeabi_dadd+0x390>
 80002ee:	1a87      	subs	r7, r0, r2
 80002f0:	4643      	mov	r3, r8
 80002f2:	42b8      	cmp	r0, r7
 80002f4:	4180      	sbcs	r0, r0
 80002f6:	2501      	movs	r5, #1
 80002f8:	1ac9      	subs	r1, r1, r3
 80002fa:	4240      	negs	r0, r0
 80002fc:	1a09      	subs	r1, r1, r0
 80002fe:	020b      	lsls	r3, r1, #8
 8000300:	d400      	bmi.n	8000304 <__aeabi_dadd+0x68>
 8000302:	e131      	b.n	8000568 <__aeabi_dadd+0x2cc>
 8000304:	0249      	lsls	r1, r1, #9
 8000306:	0a4e      	lsrs	r6, r1, #9
 8000308:	2e00      	cmp	r6, #0
 800030a:	d100      	bne.n	800030e <__aeabi_dadd+0x72>
 800030c:	e16e      	b.n	80005ec <__aeabi_dadd+0x350>
 800030e:	0030      	movs	r0, r6
 8000310:	f001 fd10 	bl	8001d34 <__clzsi2>
 8000314:	0003      	movs	r3, r0
 8000316:	3b08      	subs	r3, #8
 8000318:	2b1f      	cmp	r3, #31
 800031a:	dd00      	ble.n	800031e <__aeabi_dadd+0x82>
 800031c:	e161      	b.n	80005e2 <__aeabi_dadd+0x346>
 800031e:	2220      	movs	r2, #32
 8000320:	0039      	movs	r1, r7
 8000322:	1ad2      	subs	r2, r2, r3
 8000324:	409e      	lsls	r6, r3
 8000326:	40d1      	lsrs	r1, r2
 8000328:	409f      	lsls	r7, r3
 800032a:	430e      	orrs	r6, r1
 800032c:	429d      	cmp	r5, r3
 800032e:	dd00      	ble.n	8000332 <__aeabi_dadd+0x96>
 8000330:	e151      	b.n	80005d6 <__aeabi_dadd+0x33a>
 8000332:	1b5d      	subs	r5, r3, r5
 8000334:	1c6b      	adds	r3, r5, #1
 8000336:	2b1f      	cmp	r3, #31
 8000338:	dd00      	ble.n	800033c <__aeabi_dadd+0xa0>
 800033a:	e17c      	b.n	8000636 <__aeabi_dadd+0x39a>
 800033c:	2120      	movs	r1, #32
 800033e:	1ac9      	subs	r1, r1, r3
 8000340:	003d      	movs	r5, r7
 8000342:	0030      	movs	r0, r6
 8000344:	408f      	lsls	r7, r1
 8000346:	4088      	lsls	r0, r1
 8000348:	40dd      	lsrs	r5, r3
 800034a:	1e79      	subs	r1, r7, #1
 800034c:	418f      	sbcs	r7, r1
 800034e:	0031      	movs	r1, r6
 8000350:	2207      	movs	r2, #7
 8000352:	4328      	orrs	r0, r5
 8000354:	40d9      	lsrs	r1, r3
 8000356:	2500      	movs	r5, #0
 8000358:	4307      	orrs	r7, r0
 800035a:	403a      	ands	r2, r7
 800035c:	2a00      	cmp	r2, #0
 800035e:	d009      	beq.n	8000374 <__aeabi_dadd+0xd8>
 8000360:	230f      	movs	r3, #15
 8000362:	403b      	ands	r3, r7
 8000364:	2b04      	cmp	r3, #4
 8000366:	d005      	beq.n	8000374 <__aeabi_dadd+0xd8>
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	42bb      	cmp	r3, r7
 800036c:	41bf      	sbcs	r7, r7
 800036e:	427f      	negs	r7, r7
 8000370:	19c9      	adds	r1, r1, r7
 8000372:	001f      	movs	r7, r3
 8000374:	020b      	lsls	r3, r1, #8
 8000376:	d400      	bmi.n	800037a <__aeabi_dadd+0xde>
 8000378:	e226      	b.n	80007c8 <__aeabi_dadd+0x52c>
 800037a:	1c6a      	adds	r2, r5, #1
 800037c:	4bc6      	ldr	r3, [pc, #792]	; (8000698 <__aeabi_dadd+0x3fc>)
 800037e:	0555      	lsls	r5, r2, #21
 8000380:	0d6d      	lsrs	r5, r5, #21
 8000382:	429a      	cmp	r2, r3
 8000384:	d100      	bne.n	8000388 <__aeabi_dadd+0xec>
 8000386:	e106      	b.n	8000596 <__aeabi_dadd+0x2fa>
 8000388:	4ac4      	ldr	r2, [pc, #784]	; (800069c <__aeabi_dadd+0x400>)
 800038a:	08ff      	lsrs	r7, r7, #3
 800038c:	400a      	ands	r2, r1
 800038e:	0753      	lsls	r3, r2, #29
 8000390:	0252      	lsls	r2, r2, #9
 8000392:	433b      	orrs	r3, r7
 8000394:	0b12      	lsrs	r2, r2, #12
 8000396:	e08e      	b.n	80004b6 <__aeabi_dadd+0x21a>
 8000398:	2b00      	cmp	r3, #0
 800039a:	d000      	beq.n	800039e <__aeabi_dadd+0x102>
 800039c:	e0b8      	b.n	8000510 <__aeabi_dadd+0x274>
 800039e:	1c6b      	adds	r3, r5, #1
 80003a0:	055b      	lsls	r3, r3, #21
 80003a2:	0d5b      	lsrs	r3, r3, #21
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	dc00      	bgt.n	80003aa <__aeabi_dadd+0x10e>
 80003a8:	e130      	b.n	800060c <__aeabi_dadd+0x370>
 80003aa:	1a87      	subs	r7, r0, r2
 80003ac:	4643      	mov	r3, r8
 80003ae:	42b8      	cmp	r0, r7
 80003b0:	41b6      	sbcs	r6, r6
 80003b2:	1acb      	subs	r3, r1, r3
 80003b4:	4276      	negs	r6, r6
 80003b6:	1b9e      	subs	r6, r3, r6
 80003b8:	0233      	lsls	r3, r6, #8
 80003ba:	d500      	bpl.n	80003be <__aeabi_dadd+0x122>
 80003bc:	e14c      	b.n	8000658 <__aeabi_dadd+0x3bc>
 80003be:	003b      	movs	r3, r7
 80003c0:	4333      	orrs	r3, r6
 80003c2:	d1a1      	bne.n	8000308 <__aeabi_dadd+0x6c>
 80003c4:	2200      	movs	r2, #0
 80003c6:	2400      	movs	r4, #0
 80003c8:	2500      	movs	r5, #0
 80003ca:	e070      	b.n	80004ae <__aeabi_dadd+0x212>
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	dc00      	bgt.n	80003d2 <__aeabi_dadd+0x136>
 80003d0:	e0e5      	b.n	800059e <__aeabi_dadd+0x302>
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d100      	bne.n	80003d8 <__aeabi_dadd+0x13c>
 80003d6:	e083      	b.n	80004e0 <__aeabi_dadd+0x244>
 80003d8:	4eaf      	ldr	r6, [pc, #700]	; (8000698 <__aeabi_dadd+0x3fc>)
 80003da:	42b5      	cmp	r5, r6
 80003dc:	d060      	beq.n	80004a0 <__aeabi_dadd+0x204>
 80003de:	2680      	movs	r6, #128	; 0x80
 80003e0:	0436      	lsls	r6, r6, #16
 80003e2:	4337      	orrs	r7, r6
 80003e4:	46b8      	mov	r8, r7
 80003e6:	2b38      	cmp	r3, #56	; 0x38
 80003e8:	dc00      	bgt.n	80003ec <__aeabi_dadd+0x150>
 80003ea:	e13e      	b.n	800066a <__aeabi_dadd+0x3ce>
 80003ec:	4643      	mov	r3, r8
 80003ee:	4313      	orrs	r3, r2
 80003f0:	001f      	movs	r7, r3
 80003f2:	1e7a      	subs	r2, r7, #1
 80003f4:	4197      	sbcs	r7, r2
 80003f6:	183f      	adds	r7, r7, r0
 80003f8:	4287      	cmp	r7, r0
 80003fa:	4180      	sbcs	r0, r0
 80003fc:	4240      	negs	r0, r0
 80003fe:	1809      	adds	r1, r1, r0
 8000400:	020b      	lsls	r3, r1, #8
 8000402:	d400      	bmi.n	8000406 <__aeabi_dadd+0x16a>
 8000404:	e0b0      	b.n	8000568 <__aeabi_dadd+0x2cc>
 8000406:	4ba4      	ldr	r3, [pc, #656]	; (8000698 <__aeabi_dadd+0x3fc>)
 8000408:	3501      	adds	r5, #1
 800040a:	429d      	cmp	r5, r3
 800040c:	d100      	bne.n	8000410 <__aeabi_dadd+0x174>
 800040e:	e0c3      	b.n	8000598 <__aeabi_dadd+0x2fc>
 8000410:	4aa2      	ldr	r2, [pc, #648]	; (800069c <__aeabi_dadd+0x400>)
 8000412:	087b      	lsrs	r3, r7, #1
 8000414:	400a      	ands	r2, r1
 8000416:	2101      	movs	r1, #1
 8000418:	400f      	ands	r7, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	0851      	lsrs	r1, r2, #1
 800041e:	07d3      	lsls	r3, r2, #31
 8000420:	2207      	movs	r2, #7
 8000422:	431f      	orrs	r7, r3
 8000424:	403a      	ands	r2, r7
 8000426:	e799      	b.n	800035c <__aeabi_dadd+0xc0>
 8000428:	4e9b      	ldr	r6, [pc, #620]	; (8000698 <__aeabi_dadd+0x3fc>)
 800042a:	42b5      	cmp	r5, r6
 800042c:	d038      	beq.n	80004a0 <__aeabi_dadd+0x204>
 800042e:	2680      	movs	r6, #128	; 0x80
 8000430:	0436      	lsls	r6, r6, #16
 8000432:	4337      	orrs	r7, r6
 8000434:	46b8      	mov	r8, r7
 8000436:	2b38      	cmp	r3, #56	; 0x38
 8000438:	dd00      	ble.n	800043c <__aeabi_dadd+0x1a0>
 800043a:	e0dc      	b.n	80005f6 <__aeabi_dadd+0x35a>
 800043c:	2b1f      	cmp	r3, #31
 800043e:	dc00      	bgt.n	8000442 <__aeabi_dadd+0x1a6>
 8000440:	e130      	b.n	80006a4 <__aeabi_dadd+0x408>
 8000442:	001e      	movs	r6, r3
 8000444:	4647      	mov	r7, r8
 8000446:	3e20      	subs	r6, #32
 8000448:	40f7      	lsrs	r7, r6
 800044a:	46bc      	mov	ip, r7
 800044c:	2b20      	cmp	r3, #32
 800044e:	d004      	beq.n	800045a <__aeabi_dadd+0x1be>
 8000450:	2640      	movs	r6, #64	; 0x40
 8000452:	1af3      	subs	r3, r6, r3
 8000454:	4646      	mov	r6, r8
 8000456:	409e      	lsls	r6, r3
 8000458:	4332      	orrs	r2, r6
 800045a:	0017      	movs	r7, r2
 800045c:	4663      	mov	r3, ip
 800045e:	1e7a      	subs	r2, r7, #1
 8000460:	4197      	sbcs	r7, r2
 8000462:	431f      	orrs	r7, r3
 8000464:	e0cc      	b.n	8000600 <__aeabi_dadd+0x364>
 8000466:	2b00      	cmp	r3, #0
 8000468:	d100      	bne.n	800046c <__aeabi_dadd+0x1d0>
 800046a:	e204      	b.n	8000876 <__aeabi_dadd+0x5da>
 800046c:	4643      	mov	r3, r8
 800046e:	4313      	orrs	r3, r2
 8000470:	d100      	bne.n	8000474 <__aeabi_dadd+0x1d8>
 8000472:	e159      	b.n	8000728 <__aeabi_dadd+0x48c>
 8000474:	074b      	lsls	r3, r1, #29
 8000476:	08c0      	lsrs	r0, r0, #3
 8000478:	4318      	orrs	r0, r3
 800047a:	2380      	movs	r3, #128	; 0x80
 800047c:	08c9      	lsrs	r1, r1, #3
 800047e:	031b      	lsls	r3, r3, #12
 8000480:	4219      	tst	r1, r3
 8000482:	d008      	beq.n	8000496 <__aeabi_dadd+0x1fa>
 8000484:	4645      	mov	r5, r8
 8000486:	08ed      	lsrs	r5, r5, #3
 8000488:	421d      	tst	r5, r3
 800048a:	d104      	bne.n	8000496 <__aeabi_dadd+0x1fa>
 800048c:	4643      	mov	r3, r8
 800048e:	08d0      	lsrs	r0, r2, #3
 8000490:	0759      	lsls	r1, r3, #29
 8000492:	4308      	orrs	r0, r1
 8000494:	0029      	movs	r1, r5
 8000496:	0f42      	lsrs	r2, r0, #29
 8000498:	00c9      	lsls	r1, r1, #3
 800049a:	4d7f      	ldr	r5, [pc, #508]	; (8000698 <__aeabi_dadd+0x3fc>)
 800049c:	4311      	orrs	r1, r2
 800049e:	00c0      	lsls	r0, r0, #3
 80004a0:	074b      	lsls	r3, r1, #29
 80004a2:	08ca      	lsrs	r2, r1, #3
 80004a4:	497c      	ldr	r1, [pc, #496]	; (8000698 <__aeabi_dadd+0x3fc>)
 80004a6:	08c0      	lsrs	r0, r0, #3
 80004a8:	4303      	orrs	r3, r0
 80004aa:	428d      	cmp	r5, r1
 80004ac:	d068      	beq.n	8000580 <__aeabi_dadd+0x2e4>
 80004ae:	0312      	lsls	r2, r2, #12
 80004b0:	056d      	lsls	r5, r5, #21
 80004b2:	0b12      	lsrs	r2, r2, #12
 80004b4:	0d6d      	lsrs	r5, r5, #21
 80004b6:	2100      	movs	r1, #0
 80004b8:	0312      	lsls	r2, r2, #12
 80004ba:	0018      	movs	r0, r3
 80004bc:	0b13      	lsrs	r3, r2, #12
 80004be:	0d0a      	lsrs	r2, r1, #20
 80004c0:	0512      	lsls	r2, r2, #20
 80004c2:	431a      	orrs	r2, r3
 80004c4:	4b76      	ldr	r3, [pc, #472]	; (80006a0 <__aeabi_dadd+0x404>)
 80004c6:	052d      	lsls	r5, r5, #20
 80004c8:	4013      	ands	r3, r2
 80004ca:	432b      	orrs	r3, r5
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	07e4      	lsls	r4, r4, #31
 80004d0:	085b      	lsrs	r3, r3, #1
 80004d2:	4323      	orrs	r3, r4
 80004d4:	0019      	movs	r1, r3
 80004d6:	bc1c      	pop	{r2, r3, r4}
 80004d8:	4690      	mov	r8, r2
 80004da:	4699      	mov	r9, r3
 80004dc:	46a2      	mov	sl, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	003e      	movs	r6, r7
 80004e2:	4316      	orrs	r6, r2
 80004e4:	d012      	beq.n	800050c <__aeabi_dadd+0x270>
 80004e6:	1e5e      	subs	r6, r3, #1
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d000      	beq.n	80004ee <__aeabi_dadd+0x252>
 80004ec:	e100      	b.n	80006f0 <__aeabi_dadd+0x454>
 80004ee:	1887      	adds	r7, r0, r2
 80004f0:	4287      	cmp	r7, r0
 80004f2:	4180      	sbcs	r0, r0
 80004f4:	4441      	add	r1, r8
 80004f6:	4240      	negs	r0, r0
 80004f8:	1809      	adds	r1, r1, r0
 80004fa:	2501      	movs	r5, #1
 80004fc:	020b      	lsls	r3, r1, #8
 80004fe:	d533      	bpl.n	8000568 <__aeabi_dadd+0x2cc>
 8000500:	2502      	movs	r5, #2
 8000502:	e785      	b.n	8000410 <__aeabi_dadd+0x174>
 8000504:	4664      	mov	r4, ip
 8000506:	0033      	movs	r3, r6
 8000508:	4641      	mov	r1, r8
 800050a:	0010      	movs	r0, r2
 800050c:	001d      	movs	r5, r3
 800050e:	e7c7      	b.n	80004a0 <__aeabi_dadd+0x204>
 8000510:	2d00      	cmp	r5, #0
 8000512:	d000      	beq.n	8000516 <__aeabi_dadd+0x27a>
 8000514:	e0da      	b.n	80006cc <__aeabi_dadd+0x430>
 8000516:	000c      	movs	r4, r1
 8000518:	4304      	orrs	r4, r0
 800051a:	d0f3      	beq.n	8000504 <__aeabi_dadd+0x268>
 800051c:	1c5c      	adds	r4, r3, #1
 800051e:	d100      	bne.n	8000522 <__aeabi_dadd+0x286>
 8000520:	e19f      	b.n	8000862 <__aeabi_dadd+0x5c6>
 8000522:	4c5d      	ldr	r4, [pc, #372]	; (8000698 <__aeabi_dadd+0x3fc>)
 8000524:	42a6      	cmp	r6, r4
 8000526:	d100      	bne.n	800052a <__aeabi_dadd+0x28e>
 8000528:	e12f      	b.n	800078a <__aeabi_dadd+0x4ee>
 800052a:	43db      	mvns	r3, r3
 800052c:	2b38      	cmp	r3, #56	; 0x38
 800052e:	dd00      	ble.n	8000532 <__aeabi_dadd+0x296>
 8000530:	e166      	b.n	8000800 <__aeabi_dadd+0x564>
 8000532:	2b1f      	cmp	r3, #31
 8000534:	dd00      	ble.n	8000538 <__aeabi_dadd+0x29c>
 8000536:	e183      	b.n	8000840 <__aeabi_dadd+0x5a4>
 8000538:	2420      	movs	r4, #32
 800053a:	0005      	movs	r5, r0
 800053c:	1ae4      	subs	r4, r4, r3
 800053e:	000f      	movs	r7, r1
 8000540:	40dd      	lsrs	r5, r3
 8000542:	40d9      	lsrs	r1, r3
 8000544:	40a0      	lsls	r0, r4
 8000546:	4643      	mov	r3, r8
 8000548:	40a7      	lsls	r7, r4
 800054a:	1a5b      	subs	r3, r3, r1
 800054c:	1e44      	subs	r4, r0, #1
 800054e:	41a0      	sbcs	r0, r4
 8000550:	4698      	mov	r8, r3
 8000552:	432f      	orrs	r7, r5
 8000554:	4338      	orrs	r0, r7
 8000556:	1a17      	subs	r7, r2, r0
 8000558:	42ba      	cmp	r2, r7
 800055a:	4192      	sbcs	r2, r2
 800055c:	4643      	mov	r3, r8
 800055e:	4252      	negs	r2, r2
 8000560:	1a99      	subs	r1, r3, r2
 8000562:	4664      	mov	r4, ip
 8000564:	0035      	movs	r5, r6
 8000566:	e6ca      	b.n	80002fe <__aeabi_dadd+0x62>
 8000568:	2207      	movs	r2, #7
 800056a:	403a      	ands	r2, r7
 800056c:	2a00      	cmp	r2, #0
 800056e:	d000      	beq.n	8000572 <__aeabi_dadd+0x2d6>
 8000570:	e6f6      	b.n	8000360 <__aeabi_dadd+0xc4>
 8000572:	074b      	lsls	r3, r1, #29
 8000574:	08ca      	lsrs	r2, r1, #3
 8000576:	4948      	ldr	r1, [pc, #288]	; (8000698 <__aeabi_dadd+0x3fc>)
 8000578:	08ff      	lsrs	r7, r7, #3
 800057a:	433b      	orrs	r3, r7
 800057c:	428d      	cmp	r5, r1
 800057e:	d196      	bne.n	80004ae <__aeabi_dadd+0x212>
 8000580:	0019      	movs	r1, r3
 8000582:	4311      	orrs	r1, r2
 8000584:	d100      	bne.n	8000588 <__aeabi_dadd+0x2ec>
 8000586:	e19e      	b.n	80008c6 <__aeabi_dadd+0x62a>
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	0309      	lsls	r1, r1, #12
 800058c:	430a      	orrs	r2, r1
 800058e:	0312      	lsls	r2, r2, #12
 8000590:	0b12      	lsrs	r2, r2, #12
 8000592:	4d41      	ldr	r5, [pc, #260]	; (8000698 <__aeabi_dadd+0x3fc>)
 8000594:	e78f      	b.n	80004b6 <__aeabi_dadd+0x21a>
 8000596:	0015      	movs	r5, r2
 8000598:	2200      	movs	r2, #0
 800059a:	2300      	movs	r3, #0
 800059c:	e78b      	b.n	80004b6 <__aeabi_dadd+0x21a>
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d000      	beq.n	80005a4 <__aeabi_dadd+0x308>
 80005a2:	e0c7      	b.n	8000734 <__aeabi_dadd+0x498>
 80005a4:	1c6b      	adds	r3, r5, #1
 80005a6:	055f      	lsls	r7, r3, #21
 80005a8:	0d7f      	lsrs	r7, r7, #21
 80005aa:	2f01      	cmp	r7, #1
 80005ac:	dc00      	bgt.n	80005b0 <__aeabi_dadd+0x314>
 80005ae:	e0f1      	b.n	8000794 <__aeabi_dadd+0x4f8>
 80005b0:	4d39      	ldr	r5, [pc, #228]	; (8000698 <__aeabi_dadd+0x3fc>)
 80005b2:	42ab      	cmp	r3, r5
 80005b4:	d100      	bne.n	80005b8 <__aeabi_dadd+0x31c>
 80005b6:	e0b9      	b.n	800072c <__aeabi_dadd+0x490>
 80005b8:	1885      	adds	r5, r0, r2
 80005ba:	000a      	movs	r2, r1
 80005bc:	4285      	cmp	r5, r0
 80005be:	4189      	sbcs	r1, r1
 80005c0:	4442      	add	r2, r8
 80005c2:	4249      	negs	r1, r1
 80005c4:	1851      	adds	r1, r2, r1
 80005c6:	2207      	movs	r2, #7
 80005c8:	07cf      	lsls	r7, r1, #31
 80005ca:	086d      	lsrs	r5, r5, #1
 80005cc:	432f      	orrs	r7, r5
 80005ce:	0849      	lsrs	r1, r1, #1
 80005d0:	403a      	ands	r2, r7
 80005d2:	001d      	movs	r5, r3
 80005d4:	e6c2      	b.n	800035c <__aeabi_dadd+0xc0>
 80005d6:	2207      	movs	r2, #7
 80005d8:	4930      	ldr	r1, [pc, #192]	; (800069c <__aeabi_dadd+0x400>)
 80005da:	1aed      	subs	r5, r5, r3
 80005dc:	4031      	ands	r1, r6
 80005de:	403a      	ands	r2, r7
 80005e0:	e6bc      	b.n	800035c <__aeabi_dadd+0xc0>
 80005e2:	003e      	movs	r6, r7
 80005e4:	3828      	subs	r0, #40	; 0x28
 80005e6:	4086      	lsls	r6, r0
 80005e8:	2700      	movs	r7, #0
 80005ea:	e69f      	b.n	800032c <__aeabi_dadd+0x90>
 80005ec:	0038      	movs	r0, r7
 80005ee:	f001 fba1 	bl	8001d34 <__clzsi2>
 80005f2:	3020      	adds	r0, #32
 80005f4:	e68e      	b.n	8000314 <__aeabi_dadd+0x78>
 80005f6:	4643      	mov	r3, r8
 80005f8:	4313      	orrs	r3, r2
 80005fa:	001f      	movs	r7, r3
 80005fc:	1e7a      	subs	r2, r7, #1
 80005fe:	4197      	sbcs	r7, r2
 8000600:	1bc7      	subs	r7, r0, r7
 8000602:	42b8      	cmp	r0, r7
 8000604:	4180      	sbcs	r0, r0
 8000606:	4240      	negs	r0, r0
 8000608:	1a09      	subs	r1, r1, r0
 800060a:	e678      	b.n	80002fe <__aeabi_dadd+0x62>
 800060c:	000e      	movs	r6, r1
 800060e:	003b      	movs	r3, r7
 8000610:	4306      	orrs	r6, r0
 8000612:	4313      	orrs	r3, r2
 8000614:	2d00      	cmp	r5, #0
 8000616:	d161      	bne.n	80006dc <__aeabi_dadd+0x440>
 8000618:	2e00      	cmp	r6, #0
 800061a:	d000      	beq.n	800061e <__aeabi_dadd+0x382>
 800061c:	e0f4      	b.n	8000808 <__aeabi_dadd+0x56c>
 800061e:	2b00      	cmp	r3, #0
 8000620:	d100      	bne.n	8000624 <__aeabi_dadd+0x388>
 8000622:	e11b      	b.n	800085c <__aeabi_dadd+0x5c0>
 8000624:	4664      	mov	r4, ip
 8000626:	0039      	movs	r1, r7
 8000628:	0010      	movs	r0, r2
 800062a:	e739      	b.n	80004a0 <__aeabi_dadd+0x204>
 800062c:	4f1a      	ldr	r7, [pc, #104]	; (8000698 <__aeabi_dadd+0x3fc>)
 800062e:	42bb      	cmp	r3, r7
 8000630:	d07a      	beq.n	8000728 <__aeabi_dadd+0x48c>
 8000632:	0033      	movs	r3, r6
 8000634:	e6ff      	b.n	8000436 <__aeabi_dadd+0x19a>
 8000636:	0030      	movs	r0, r6
 8000638:	3d1f      	subs	r5, #31
 800063a:	40e8      	lsrs	r0, r5
 800063c:	2b20      	cmp	r3, #32
 800063e:	d003      	beq.n	8000648 <__aeabi_dadd+0x3ac>
 8000640:	2140      	movs	r1, #64	; 0x40
 8000642:	1acb      	subs	r3, r1, r3
 8000644:	409e      	lsls	r6, r3
 8000646:	4337      	orrs	r7, r6
 8000648:	1e7b      	subs	r3, r7, #1
 800064a:	419f      	sbcs	r7, r3
 800064c:	2207      	movs	r2, #7
 800064e:	4307      	orrs	r7, r0
 8000650:	403a      	ands	r2, r7
 8000652:	2100      	movs	r1, #0
 8000654:	2500      	movs	r5, #0
 8000656:	e789      	b.n	800056c <__aeabi_dadd+0x2d0>
 8000658:	1a17      	subs	r7, r2, r0
 800065a:	4643      	mov	r3, r8
 800065c:	42ba      	cmp	r2, r7
 800065e:	41b6      	sbcs	r6, r6
 8000660:	1a59      	subs	r1, r3, r1
 8000662:	4276      	negs	r6, r6
 8000664:	1b8e      	subs	r6, r1, r6
 8000666:	4664      	mov	r4, ip
 8000668:	e64e      	b.n	8000308 <__aeabi_dadd+0x6c>
 800066a:	2b1f      	cmp	r3, #31
 800066c:	dd00      	ble.n	8000670 <__aeabi_dadd+0x3d4>
 800066e:	e0ad      	b.n	80007cc <__aeabi_dadd+0x530>
 8000670:	2620      	movs	r6, #32
 8000672:	4647      	mov	r7, r8
 8000674:	1af6      	subs	r6, r6, r3
 8000676:	40b7      	lsls	r7, r6
 8000678:	46b9      	mov	r9, r7
 800067a:	0017      	movs	r7, r2
 800067c:	46b2      	mov	sl, r6
 800067e:	40df      	lsrs	r7, r3
 8000680:	464e      	mov	r6, r9
 8000682:	433e      	orrs	r6, r7
 8000684:	0037      	movs	r7, r6
 8000686:	4656      	mov	r6, sl
 8000688:	40b2      	lsls	r2, r6
 800068a:	1e56      	subs	r6, r2, #1
 800068c:	41b2      	sbcs	r2, r6
 800068e:	4317      	orrs	r7, r2
 8000690:	4642      	mov	r2, r8
 8000692:	40da      	lsrs	r2, r3
 8000694:	1889      	adds	r1, r1, r2
 8000696:	e6ae      	b.n	80003f6 <__aeabi_dadd+0x15a>
 8000698:	000007ff 	.word	0x000007ff
 800069c:	ff7fffff 	.word	0xff7fffff
 80006a0:	800fffff 	.word	0x800fffff
 80006a4:	2620      	movs	r6, #32
 80006a6:	4647      	mov	r7, r8
 80006a8:	1af6      	subs	r6, r6, r3
 80006aa:	40b7      	lsls	r7, r6
 80006ac:	46b9      	mov	r9, r7
 80006ae:	0017      	movs	r7, r2
 80006b0:	46b2      	mov	sl, r6
 80006b2:	40df      	lsrs	r7, r3
 80006b4:	464e      	mov	r6, r9
 80006b6:	433e      	orrs	r6, r7
 80006b8:	0037      	movs	r7, r6
 80006ba:	4656      	mov	r6, sl
 80006bc:	40b2      	lsls	r2, r6
 80006be:	1e56      	subs	r6, r2, #1
 80006c0:	41b2      	sbcs	r2, r6
 80006c2:	4317      	orrs	r7, r2
 80006c4:	4642      	mov	r2, r8
 80006c6:	40da      	lsrs	r2, r3
 80006c8:	1a89      	subs	r1, r1, r2
 80006ca:	e799      	b.n	8000600 <__aeabi_dadd+0x364>
 80006cc:	4c7f      	ldr	r4, [pc, #508]	; (80008cc <__aeabi_dadd+0x630>)
 80006ce:	42a6      	cmp	r6, r4
 80006d0:	d05b      	beq.n	800078a <__aeabi_dadd+0x4ee>
 80006d2:	2480      	movs	r4, #128	; 0x80
 80006d4:	0424      	lsls	r4, r4, #16
 80006d6:	425b      	negs	r3, r3
 80006d8:	4321      	orrs	r1, r4
 80006da:	e727      	b.n	800052c <__aeabi_dadd+0x290>
 80006dc:	2e00      	cmp	r6, #0
 80006de:	d10c      	bne.n	80006fa <__aeabi_dadd+0x45e>
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x44a>
 80006e4:	e0cb      	b.n	800087e <__aeabi_dadd+0x5e2>
 80006e6:	4664      	mov	r4, ip
 80006e8:	0039      	movs	r1, r7
 80006ea:	0010      	movs	r0, r2
 80006ec:	4d77      	ldr	r5, [pc, #476]	; (80008cc <__aeabi_dadd+0x630>)
 80006ee:	e6d7      	b.n	80004a0 <__aeabi_dadd+0x204>
 80006f0:	4f76      	ldr	r7, [pc, #472]	; (80008cc <__aeabi_dadd+0x630>)
 80006f2:	42bb      	cmp	r3, r7
 80006f4:	d018      	beq.n	8000728 <__aeabi_dadd+0x48c>
 80006f6:	0033      	movs	r3, r6
 80006f8:	e675      	b.n	80003e6 <__aeabi_dadd+0x14a>
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d014      	beq.n	8000728 <__aeabi_dadd+0x48c>
 80006fe:	074b      	lsls	r3, r1, #29
 8000700:	08c0      	lsrs	r0, r0, #3
 8000702:	4318      	orrs	r0, r3
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	08c9      	lsrs	r1, r1, #3
 8000708:	031b      	lsls	r3, r3, #12
 800070a:	4219      	tst	r1, r3
 800070c:	d007      	beq.n	800071e <__aeabi_dadd+0x482>
 800070e:	08fc      	lsrs	r4, r7, #3
 8000710:	421c      	tst	r4, r3
 8000712:	d104      	bne.n	800071e <__aeabi_dadd+0x482>
 8000714:	0779      	lsls	r1, r7, #29
 8000716:	08d0      	lsrs	r0, r2, #3
 8000718:	4308      	orrs	r0, r1
 800071a:	46e1      	mov	r9, ip
 800071c:	0021      	movs	r1, r4
 800071e:	464c      	mov	r4, r9
 8000720:	0f42      	lsrs	r2, r0, #29
 8000722:	00c9      	lsls	r1, r1, #3
 8000724:	4311      	orrs	r1, r2
 8000726:	00c0      	lsls	r0, r0, #3
 8000728:	4d68      	ldr	r5, [pc, #416]	; (80008cc <__aeabi_dadd+0x630>)
 800072a:	e6b9      	b.n	80004a0 <__aeabi_dadd+0x204>
 800072c:	001d      	movs	r5, r3
 800072e:	2200      	movs	r2, #0
 8000730:	2300      	movs	r3, #0
 8000732:	e6c0      	b.n	80004b6 <__aeabi_dadd+0x21a>
 8000734:	2d00      	cmp	r5, #0
 8000736:	d15b      	bne.n	80007f0 <__aeabi_dadd+0x554>
 8000738:	000d      	movs	r5, r1
 800073a:	4305      	orrs	r5, r0
 800073c:	d100      	bne.n	8000740 <__aeabi_dadd+0x4a4>
 800073e:	e6e2      	b.n	8000506 <__aeabi_dadd+0x26a>
 8000740:	1c5d      	adds	r5, r3, #1
 8000742:	d100      	bne.n	8000746 <__aeabi_dadd+0x4aa>
 8000744:	e0b0      	b.n	80008a8 <__aeabi_dadd+0x60c>
 8000746:	4d61      	ldr	r5, [pc, #388]	; (80008cc <__aeabi_dadd+0x630>)
 8000748:	42ae      	cmp	r6, r5
 800074a:	d01f      	beq.n	800078c <__aeabi_dadd+0x4f0>
 800074c:	43db      	mvns	r3, r3
 800074e:	2b38      	cmp	r3, #56	; 0x38
 8000750:	dc71      	bgt.n	8000836 <__aeabi_dadd+0x59a>
 8000752:	2b1f      	cmp	r3, #31
 8000754:	dd00      	ble.n	8000758 <__aeabi_dadd+0x4bc>
 8000756:	e096      	b.n	8000886 <__aeabi_dadd+0x5ea>
 8000758:	2520      	movs	r5, #32
 800075a:	000f      	movs	r7, r1
 800075c:	1aed      	subs	r5, r5, r3
 800075e:	40af      	lsls	r7, r5
 8000760:	46b9      	mov	r9, r7
 8000762:	0007      	movs	r7, r0
 8000764:	46aa      	mov	sl, r5
 8000766:	40df      	lsrs	r7, r3
 8000768:	464d      	mov	r5, r9
 800076a:	433d      	orrs	r5, r7
 800076c:	002f      	movs	r7, r5
 800076e:	4655      	mov	r5, sl
 8000770:	40a8      	lsls	r0, r5
 8000772:	40d9      	lsrs	r1, r3
 8000774:	1e45      	subs	r5, r0, #1
 8000776:	41a8      	sbcs	r0, r5
 8000778:	4488      	add	r8, r1
 800077a:	4307      	orrs	r7, r0
 800077c:	18bf      	adds	r7, r7, r2
 800077e:	4297      	cmp	r7, r2
 8000780:	4192      	sbcs	r2, r2
 8000782:	4251      	negs	r1, r2
 8000784:	4441      	add	r1, r8
 8000786:	0035      	movs	r5, r6
 8000788:	e63a      	b.n	8000400 <__aeabi_dadd+0x164>
 800078a:	4664      	mov	r4, ip
 800078c:	0035      	movs	r5, r6
 800078e:	4641      	mov	r1, r8
 8000790:	0010      	movs	r0, r2
 8000792:	e685      	b.n	80004a0 <__aeabi_dadd+0x204>
 8000794:	000b      	movs	r3, r1
 8000796:	4303      	orrs	r3, r0
 8000798:	2d00      	cmp	r5, #0
 800079a:	d000      	beq.n	800079e <__aeabi_dadd+0x502>
 800079c:	e663      	b.n	8000466 <__aeabi_dadd+0x1ca>
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0f5      	beq.n	800078e <__aeabi_dadd+0x4f2>
 80007a2:	4643      	mov	r3, r8
 80007a4:	4313      	orrs	r3, r2
 80007a6:	d100      	bne.n	80007aa <__aeabi_dadd+0x50e>
 80007a8:	e67a      	b.n	80004a0 <__aeabi_dadd+0x204>
 80007aa:	1887      	adds	r7, r0, r2
 80007ac:	4287      	cmp	r7, r0
 80007ae:	4180      	sbcs	r0, r0
 80007b0:	2207      	movs	r2, #7
 80007b2:	4441      	add	r1, r8
 80007b4:	4240      	negs	r0, r0
 80007b6:	1809      	adds	r1, r1, r0
 80007b8:	403a      	ands	r2, r7
 80007ba:	020b      	lsls	r3, r1, #8
 80007bc:	d400      	bmi.n	80007c0 <__aeabi_dadd+0x524>
 80007be:	e6d5      	b.n	800056c <__aeabi_dadd+0x2d0>
 80007c0:	4b43      	ldr	r3, [pc, #268]	; (80008d0 <__aeabi_dadd+0x634>)
 80007c2:	3501      	adds	r5, #1
 80007c4:	4019      	ands	r1, r3
 80007c6:	e5c9      	b.n	800035c <__aeabi_dadd+0xc0>
 80007c8:	0038      	movs	r0, r7
 80007ca:	e669      	b.n	80004a0 <__aeabi_dadd+0x204>
 80007cc:	001e      	movs	r6, r3
 80007ce:	4647      	mov	r7, r8
 80007d0:	3e20      	subs	r6, #32
 80007d2:	40f7      	lsrs	r7, r6
 80007d4:	46bc      	mov	ip, r7
 80007d6:	2b20      	cmp	r3, #32
 80007d8:	d004      	beq.n	80007e4 <__aeabi_dadd+0x548>
 80007da:	2640      	movs	r6, #64	; 0x40
 80007dc:	1af3      	subs	r3, r6, r3
 80007de:	4646      	mov	r6, r8
 80007e0:	409e      	lsls	r6, r3
 80007e2:	4332      	orrs	r2, r6
 80007e4:	0017      	movs	r7, r2
 80007e6:	4663      	mov	r3, ip
 80007e8:	1e7a      	subs	r2, r7, #1
 80007ea:	4197      	sbcs	r7, r2
 80007ec:	431f      	orrs	r7, r3
 80007ee:	e602      	b.n	80003f6 <__aeabi_dadd+0x15a>
 80007f0:	4d36      	ldr	r5, [pc, #216]	; (80008cc <__aeabi_dadd+0x630>)
 80007f2:	42ae      	cmp	r6, r5
 80007f4:	d0ca      	beq.n	800078c <__aeabi_dadd+0x4f0>
 80007f6:	2580      	movs	r5, #128	; 0x80
 80007f8:	042d      	lsls	r5, r5, #16
 80007fa:	425b      	negs	r3, r3
 80007fc:	4329      	orrs	r1, r5
 80007fe:	e7a6      	b.n	800074e <__aeabi_dadd+0x4b2>
 8000800:	4308      	orrs	r0, r1
 8000802:	1e41      	subs	r1, r0, #1
 8000804:	4188      	sbcs	r0, r1
 8000806:	e6a6      	b.n	8000556 <__aeabi_dadd+0x2ba>
 8000808:	2b00      	cmp	r3, #0
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0x572>
 800080c:	e648      	b.n	80004a0 <__aeabi_dadd+0x204>
 800080e:	1a87      	subs	r7, r0, r2
 8000810:	4643      	mov	r3, r8
 8000812:	42b8      	cmp	r0, r7
 8000814:	41b6      	sbcs	r6, r6
 8000816:	1acb      	subs	r3, r1, r3
 8000818:	4276      	negs	r6, r6
 800081a:	1b9e      	subs	r6, r3, r6
 800081c:	0233      	lsls	r3, r6, #8
 800081e:	d54b      	bpl.n	80008b8 <__aeabi_dadd+0x61c>
 8000820:	1a17      	subs	r7, r2, r0
 8000822:	4643      	mov	r3, r8
 8000824:	42ba      	cmp	r2, r7
 8000826:	4192      	sbcs	r2, r2
 8000828:	1a59      	subs	r1, r3, r1
 800082a:	4252      	negs	r2, r2
 800082c:	1a89      	subs	r1, r1, r2
 800082e:	2207      	movs	r2, #7
 8000830:	4664      	mov	r4, ip
 8000832:	403a      	ands	r2, r7
 8000834:	e592      	b.n	800035c <__aeabi_dadd+0xc0>
 8000836:	4301      	orrs	r1, r0
 8000838:	000f      	movs	r7, r1
 800083a:	1e79      	subs	r1, r7, #1
 800083c:	418f      	sbcs	r7, r1
 800083e:	e79d      	b.n	800077c <__aeabi_dadd+0x4e0>
 8000840:	001c      	movs	r4, r3
 8000842:	000f      	movs	r7, r1
 8000844:	3c20      	subs	r4, #32
 8000846:	40e7      	lsrs	r7, r4
 8000848:	2b20      	cmp	r3, #32
 800084a:	d003      	beq.n	8000854 <__aeabi_dadd+0x5b8>
 800084c:	2440      	movs	r4, #64	; 0x40
 800084e:	1ae3      	subs	r3, r4, r3
 8000850:	4099      	lsls	r1, r3
 8000852:	4308      	orrs	r0, r1
 8000854:	1e41      	subs	r1, r0, #1
 8000856:	4188      	sbcs	r0, r1
 8000858:	4338      	orrs	r0, r7
 800085a:	e67c      	b.n	8000556 <__aeabi_dadd+0x2ba>
 800085c:	2200      	movs	r2, #0
 800085e:	2400      	movs	r4, #0
 8000860:	e625      	b.n	80004ae <__aeabi_dadd+0x212>
 8000862:	1a17      	subs	r7, r2, r0
 8000864:	4643      	mov	r3, r8
 8000866:	42ba      	cmp	r2, r7
 8000868:	4192      	sbcs	r2, r2
 800086a:	1a59      	subs	r1, r3, r1
 800086c:	4252      	negs	r2, r2
 800086e:	1a89      	subs	r1, r1, r2
 8000870:	4664      	mov	r4, ip
 8000872:	0035      	movs	r5, r6
 8000874:	e543      	b.n	80002fe <__aeabi_dadd+0x62>
 8000876:	4641      	mov	r1, r8
 8000878:	0010      	movs	r0, r2
 800087a:	4d14      	ldr	r5, [pc, #80]	; (80008cc <__aeabi_dadd+0x630>)
 800087c:	e610      	b.n	80004a0 <__aeabi_dadd+0x204>
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	2400      	movs	r4, #0
 8000882:	0312      	lsls	r2, r2, #12
 8000884:	e680      	b.n	8000588 <__aeabi_dadd+0x2ec>
 8000886:	001d      	movs	r5, r3
 8000888:	000f      	movs	r7, r1
 800088a:	3d20      	subs	r5, #32
 800088c:	40ef      	lsrs	r7, r5
 800088e:	46bc      	mov	ip, r7
 8000890:	2b20      	cmp	r3, #32
 8000892:	d003      	beq.n	800089c <__aeabi_dadd+0x600>
 8000894:	2540      	movs	r5, #64	; 0x40
 8000896:	1aeb      	subs	r3, r5, r3
 8000898:	4099      	lsls	r1, r3
 800089a:	4308      	orrs	r0, r1
 800089c:	0007      	movs	r7, r0
 800089e:	4663      	mov	r3, ip
 80008a0:	1e78      	subs	r0, r7, #1
 80008a2:	4187      	sbcs	r7, r0
 80008a4:	431f      	orrs	r7, r3
 80008a6:	e769      	b.n	800077c <__aeabi_dadd+0x4e0>
 80008a8:	1887      	adds	r7, r0, r2
 80008aa:	4297      	cmp	r7, r2
 80008ac:	419b      	sbcs	r3, r3
 80008ae:	4441      	add	r1, r8
 80008b0:	425b      	negs	r3, r3
 80008b2:	18c9      	adds	r1, r1, r3
 80008b4:	0035      	movs	r5, r6
 80008b6:	e5a3      	b.n	8000400 <__aeabi_dadd+0x164>
 80008b8:	003b      	movs	r3, r7
 80008ba:	4333      	orrs	r3, r6
 80008bc:	d0ce      	beq.n	800085c <__aeabi_dadd+0x5c0>
 80008be:	2207      	movs	r2, #7
 80008c0:	0031      	movs	r1, r6
 80008c2:	403a      	ands	r2, r7
 80008c4:	e652      	b.n	800056c <__aeabi_dadd+0x2d0>
 80008c6:	2300      	movs	r3, #0
 80008c8:	001a      	movs	r2, r3
 80008ca:	e5f4      	b.n	80004b6 <__aeabi_dadd+0x21a>
 80008cc:	000007ff 	.word	0x000007ff
 80008d0:	ff7fffff 	.word	0xff7fffff

080008d4 <__aeabi_ddiv>:
 80008d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d6:	4657      	mov	r7, sl
 80008d8:	46de      	mov	lr, fp
 80008da:	464e      	mov	r6, r9
 80008dc:	4645      	mov	r5, r8
 80008de:	b5e0      	push	{r5, r6, r7, lr}
 80008e0:	4683      	mov	fp, r0
 80008e2:	0007      	movs	r7, r0
 80008e4:	030e      	lsls	r6, r1, #12
 80008e6:	0048      	lsls	r0, r1, #1
 80008e8:	b085      	sub	sp, #20
 80008ea:	4692      	mov	sl, r2
 80008ec:	001c      	movs	r4, r3
 80008ee:	0b36      	lsrs	r6, r6, #12
 80008f0:	0d40      	lsrs	r0, r0, #21
 80008f2:	0fcd      	lsrs	r5, r1, #31
 80008f4:	2800      	cmp	r0, #0
 80008f6:	d100      	bne.n	80008fa <__aeabi_ddiv+0x26>
 80008f8:	e09d      	b.n	8000a36 <__aeabi_ddiv+0x162>
 80008fa:	4b95      	ldr	r3, [pc, #596]	; (8000b50 <__aeabi_ddiv+0x27c>)
 80008fc:	4298      	cmp	r0, r3
 80008fe:	d039      	beq.n	8000974 <__aeabi_ddiv+0xa0>
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	00f6      	lsls	r6, r6, #3
 8000904:	041b      	lsls	r3, r3, #16
 8000906:	431e      	orrs	r6, r3
 8000908:	4a92      	ldr	r2, [pc, #584]	; (8000b54 <__aeabi_ddiv+0x280>)
 800090a:	0f7b      	lsrs	r3, r7, #29
 800090c:	4333      	orrs	r3, r6
 800090e:	4699      	mov	r9, r3
 8000910:	4694      	mov	ip, r2
 8000912:	0003      	movs	r3, r0
 8000914:	4463      	add	r3, ip
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	2300      	movs	r3, #0
 800091a:	2600      	movs	r6, #0
 800091c:	00ff      	lsls	r7, r7, #3
 800091e:	9302      	str	r3, [sp, #8]
 8000920:	0323      	lsls	r3, r4, #12
 8000922:	0b1b      	lsrs	r3, r3, #12
 8000924:	4698      	mov	r8, r3
 8000926:	0063      	lsls	r3, r4, #1
 8000928:	0fe4      	lsrs	r4, r4, #31
 800092a:	4652      	mov	r2, sl
 800092c:	0d5b      	lsrs	r3, r3, #21
 800092e:	9401      	str	r4, [sp, #4]
 8000930:	d100      	bne.n	8000934 <__aeabi_ddiv+0x60>
 8000932:	e0b3      	b.n	8000a9c <__aeabi_ddiv+0x1c8>
 8000934:	4986      	ldr	r1, [pc, #536]	; (8000b50 <__aeabi_ddiv+0x27c>)
 8000936:	428b      	cmp	r3, r1
 8000938:	d100      	bne.n	800093c <__aeabi_ddiv+0x68>
 800093a:	e09e      	b.n	8000a7a <__aeabi_ddiv+0x1a6>
 800093c:	4642      	mov	r2, r8
 800093e:	00d1      	lsls	r1, r2, #3
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	0412      	lsls	r2, r2, #16
 8000944:	430a      	orrs	r2, r1
 8000946:	4651      	mov	r1, sl
 8000948:	0f49      	lsrs	r1, r1, #29
 800094a:	4311      	orrs	r1, r2
 800094c:	468b      	mov	fp, r1
 800094e:	4981      	ldr	r1, [pc, #516]	; (8000b54 <__aeabi_ddiv+0x280>)
 8000950:	4652      	mov	r2, sl
 8000952:	468c      	mov	ip, r1
 8000954:	9900      	ldr	r1, [sp, #0]
 8000956:	4463      	add	r3, ip
 8000958:	1acb      	subs	r3, r1, r3
 800095a:	2100      	movs	r1, #0
 800095c:	00d2      	lsls	r2, r2, #3
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	002b      	movs	r3, r5
 8000962:	4063      	eors	r3, r4
 8000964:	469a      	mov	sl, r3
 8000966:	2e0f      	cmp	r6, #15
 8000968:	d900      	bls.n	800096c <__aeabi_ddiv+0x98>
 800096a:	e105      	b.n	8000b78 <__aeabi_ddiv+0x2a4>
 800096c:	4b7a      	ldr	r3, [pc, #488]	; (8000b58 <__aeabi_ddiv+0x284>)
 800096e:	00b6      	lsls	r6, r6, #2
 8000970:	599b      	ldr	r3, [r3, r6]
 8000972:	469f      	mov	pc, r3
 8000974:	465b      	mov	r3, fp
 8000976:	4333      	orrs	r3, r6
 8000978:	4699      	mov	r9, r3
 800097a:	d000      	beq.n	800097e <__aeabi_ddiv+0xaa>
 800097c:	e0b8      	b.n	8000af0 <__aeabi_ddiv+0x21c>
 800097e:	2302      	movs	r3, #2
 8000980:	2608      	movs	r6, #8
 8000982:	2700      	movs	r7, #0
 8000984:	9000      	str	r0, [sp, #0]
 8000986:	9302      	str	r3, [sp, #8]
 8000988:	e7ca      	b.n	8000920 <__aeabi_ddiv+0x4c>
 800098a:	46cb      	mov	fp, r9
 800098c:	003a      	movs	r2, r7
 800098e:	9902      	ldr	r1, [sp, #8]
 8000990:	9501      	str	r5, [sp, #4]
 8000992:	9b01      	ldr	r3, [sp, #4]
 8000994:	469a      	mov	sl, r3
 8000996:	2902      	cmp	r1, #2
 8000998:	d027      	beq.n	80009ea <__aeabi_ddiv+0x116>
 800099a:	2903      	cmp	r1, #3
 800099c:	d100      	bne.n	80009a0 <__aeabi_ddiv+0xcc>
 800099e:	e280      	b.n	8000ea2 <__aeabi_ddiv+0x5ce>
 80009a0:	2901      	cmp	r1, #1
 80009a2:	d044      	beq.n	8000a2e <__aeabi_ddiv+0x15a>
 80009a4:	496d      	ldr	r1, [pc, #436]	; (8000b5c <__aeabi_ddiv+0x288>)
 80009a6:	9b00      	ldr	r3, [sp, #0]
 80009a8:	468c      	mov	ip, r1
 80009aa:	4463      	add	r3, ip
 80009ac:	001c      	movs	r4, r3
 80009ae:	2c00      	cmp	r4, #0
 80009b0:	dd38      	ble.n	8000a24 <__aeabi_ddiv+0x150>
 80009b2:	0753      	lsls	r3, r2, #29
 80009b4:	d000      	beq.n	80009b8 <__aeabi_ddiv+0xe4>
 80009b6:	e213      	b.n	8000de0 <__aeabi_ddiv+0x50c>
 80009b8:	08d2      	lsrs	r2, r2, #3
 80009ba:	465b      	mov	r3, fp
 80009bc:	01db      	lsls	r3, r3, #7
 80009be:	d509      	bpl.n	80009d4 <__aeabi_ddiv+0x100>
 80009c0:	4659      	mov	r1, fp
 80009c2:	4b67      	ldr	r3, [pc, #412]	; (8000b60 <__aeabi_ddiv+0x28c>)
 80009c4:	4019      	ands	r1, r3
 80009c6:	468b      	mov	fp, r1
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	00c9      	lsls	r1, r1, #3
 80009cc:	468c      	mov	ip, r1
 80009ce:	9b00      	ldr	r3, [sp, #0]
 80009d0:	4463      	add	r3, ip
 80009d2:	001c      	movs	r4, r3
 80009d4:	4b63      	ldr	r3, [pc, #396]	; (8000b64 <__aeabi_ddiv+0x290>)
 80009d6:	429c      	cmp	r4, r3
 80009d8:	dc07      	bgt.n	80009ea <__aeabi_ddiv+0x116>
 80009da:	465b      	mov	r3, fp
 80009dc:	0564      	lsls	r4, r4, #21
 80009de:	075f      	lsls	r7, r3, #29
 80009e0:	025b      	lsls	r3, r3, #9
 80009e2:	4317      	orrs	r7, r2
 80009e4:	0b1b      	lsrs	r3, r3, #12
 80009e6:	0d62      	lsrs	r2, r4, #21
 80009e8:	e002      	b.n	80009f0 <__aeabi_ddiv+0x11c>
 80009ea:	2300      	movs	r3, #0
 80009ec:	2700      	movs	r7, #0
 80009ee:	4a58      	ldr	r2, [pc, #352]	; (8000b50 <__aeabi_ddiv+0x27c>)
 80009f0:	2100      	movs	r1, #0
 80009f2:	031b      	lsls	r3, r3, #12
 80009f4:	0b1c      	lsrs	r4, r3, #12
 80009f6:	0d0b      	lsrs	r3, r1, #20
 80009f8:	051b      	lsls	r3, r3, #20
 80009fa:	4323      	orrs	r3, r4
 80009fc:	0514      	lsls	r4, r2, #20
 80009fe:	4a5a      	ldr	r2, [pc, #360]	; (8000b68 <__aeabi_ddiv+0x294>)
 8000a00:	0038      	movs	r0, r7
 8000a02:	4013      	ands	r3, r2
 8000a04:	431c      	orrs	r4, r3
 8000a06:	4653      	mov	r3, sl
 8000a08:	0064      	lsls	r4, r4, #1
 8000a0a:	07db      	lsls	r3, r3, #31
 8000a0c:	0864      	lsrs	r4, r4, #1
 8000a0e:	431c      	orrs	r4, r3
 8000a10:	0021      	movs	r1, r4
 8000a12:	b005      	add	sp, #20
 8000a14:	bc3c      	pop	{r2, r3, r4, r5}
 8000a16:	4690      	mov	r8, r2
 8000a18:	4699      	mov	r9, r3
 8000a1a:	46a2      	mov	sl, r4
 8000a1c:	46ab      	mov	fp, r5
 8000a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a20:	2201      	movs	r2, #1
 8000a22:	4252      	negs	r2, r2
 8000a24:	2301      	movs	r3, #1
 8000a26:	1b1b      	subs	r3, r3, r4
 8000a28:	2b38      	cmp	r3, #56	; 0x38
 8000a2a:	dc00      	bgt.n	8000a2e <__aeabi_ddiv+0x15a>
 8000a2c:	e1ad      	b.n	8000d8a <__aeabi_ddiv+0x4b6>
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2300      	movs	r3, #0
 8000a32:	2700      	movs	r7, #0
 8000a34:	e7dc      	b.n	80009f0 <__aeabi_ddiv+0x11c>
 8000a36:	465b      	mov	r3, fp
 8000a38:	4333      	orrs	r3, r6
 8000a3a:	4699      	mov	r9, r3
 8000a3c:	d05e      	beq.n	8000afc <__aeabi_ddiv+0x228>
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	d100      	bne.n	8000a44 <__aeabi_ddiv+0x170>
 8000a42:	e18a      	b.n	8000d5a <__aeabi_ddiv+0x486>
 8000a44:	0030      	movs	r0, r6
 8000a46:	f001 f975 	bl	8001d34 <__clzsi2>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	3b0b      	subs	r3, #11
 8000a4e:	2b1c      	cmp	r3, #28
 8000a50:	dd00      	ble.n	8000a54 <__aeabi_ddiv+0x180>
 8000a52:	e17b      	b.n	8000d4c <__aeabi_ddiv+0x478>
 8000a54:	221d      	movs	r2, #29
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	465a      	mov	r2, fp
 8000a5a:	0001      	movs	r1, r0
 8000a5c:	40da      	lsrs	r2, r3
 8000a5e:	3908      	subs	r1, #8
 8000a60:	408e      	lsls	r6, r1
 8000a62:	0013      	movs	r3, r2
 8000a64:	465f      	mov	r7, fp
 8000a66:	4333      	orrs	r3, r6
 8000a68:	4699      	mov	r9, r3
 8000a6a:	408f      	lsls	r7, r1
 8000a6c:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <__aeabi_ddiv+0x298>)
 8000a6e:	2600      	movs	r6, #0
 8000a70:	1a1b      	subs	r3, r3, r0
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	2300      	movs	r3, #0
 8000a76:	9302      	str	r3, [sp, #8]
 8000a78:	e752      	b.n	8000920 <__aeabi_ddiv+0x4c>
 8000a7a:	4641      	mov	r1, r8
 8000a7c:	4653      	mov	r3, sl
 8000a7e:	430b      	orrs	r3, r1
 8000a80:	493b      	ldr	r1, [pc, #236]	; (8000b70 <__aeabi_ddiv+0x29c>)
 8000a82:	469b      	mov	fp, r3
 8000a84:	468c      	mov	ip, r1
 8000a86:	9b00      	ldr	r3, [sp, #0]
 8000a88:	4463      	add	r3, ip
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	465b      	mov	r3, fp
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d13b      	bne.n	8000b0a <__aeabi_ddiv+0x236>
 8000a92:	2302      	movs	r3, #2
 8000a94:	2200      	movs	r2, #0
 8000a96:	431e      	orrs	r6, r3
 8000a98:	2102      	movs	r1, #2
 8000a9a:	e761      	b.n	8000960 <__aeabi_ddiv+0x8c>
 8000a9c:	4643      	mov	r3, r8
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	469b      	mov	fp, r3
 8000aa2:	d037      	beq.n	8000b14 <__aeabi_ddiv+0x240>
 8000aa4:	4643      	mov	r3, r8
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d100      	bne.n	8000aac <__aeabi_ddiv+0x1d8>
 8000aaa:	e162      	b.n	8000d72 <__aeabi_ddiv+0x49e>
 8000aac:	4640      	mov	r0, r8
 8000aae:	f001 f941 	bl	8001d34 <__clzsi2>
 8000ab2:	0003      	movs	r3, r0
 8000ab4:	3b0b      	subs	r3, #11
 8000ab6:	2b1c      	cmp	r3, #28
 8000ab8:	dd00      	ble.n	8000abc <__aeabi_ddiv+0x1e8>
 8000aba:	e153      	b.n	8000d64 <__aeabi_ddiv+0x490>
 8000abc:	0002      	movs	r2, r0
 8000abe:	4641      	mov	r1, r8
 8000ac0:	3a08      	subs	r2, #8
 8000ac2:	4091      	lsls	r1, r2
 8000ac4:	4688      	mov	r8, r1
 8000ac6:	211d      	movs	r1, #29
 8000ac8:	1acb      	subs	r3, r1, r3
 8000aca:	4651      	mov	r1, sl
 8000acc:	40d9      	lsrs	r1, r3
 8000ace:	000b      	movs	r3, r1
 8000ad0:	4641      	mov	r1, r8
 8000ad2:	430b      	orrs	r3, r1
 8000ad4:	469b      	mov	fp, r3
 8000ad6:	4653      	mov	r3, sl
 8000ad8:	4093      	lsls	r3, r2
 8000ada:	001a      	movs	r2, r3
 8000adc:	9b00      	ldr	r3, [sp, #0]
 8000ade:	4925      	ldr	r1, [pc, #148]	; (8000b74 <__aeabi_ddiv+0x2a0>)
 8000ae0:	469c      	mov	ip, r3
 8000ae2:	4460      	add	r0, ip
 8000ae4:	0003      	movs	r3, r0
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4463      	add	r3, ip
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2100      	movs	r1, #0
 8000aee:	e737      	b.n	8000960 <__aeabi_ddiv+0x8c>
 8000af0:	2303      	movs	r3, #3
 8000af2:	46b1      	mov	r9, r6
 8000af4:	9000      	str	r0, [sp, #0]
 8000af6:	260c      	movs	r6, #12
 8000af8:	9302      	str	r3, [sp, #8]
 8000afa:	e711      	b.n	8000920 <__aeabi_ddiv+0x4c>
 8000afc:	2300      	movs	r3, #0
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	3301      	adds	r3, #1
 8000b02:	2604      	movs	r6, #4
 8000b04:	2700      	movs	r7, #0
 8000b06:	9302      	str	r3, [sp, #8]
 8000b08:	e70a      	b.n	8000920 <__aeabi_ddiv+0x4c>
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	46c3      	mov	fp, r8
 8000b0e:	431e      	orrs	r6, r3
 8000b10:	2103      	movs	r1, #3
 8000b12:	e725      	b.n	8000960 <__aeabi_ddiv+0x8c>
 8000b14:	3301      	adds	r3, #1
 8000b16:	431e      	orrs	r6, r3
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	e720      	b.n	8000960 <__aeabi_ddiv+0x8c>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	469a      	mov	sl, r3
 8000b22:	2380      	movs	r3, #128	; 0x80
 8000b24:	2700      	movs	r7, #0
 8000b26:	031b      	lsls	r3, r3, #12
 8000b28:	4a09      	ldr	r2, [pc, #36]	; (8000b50 <__aeabi_ddiv+0x27c>)
 8000b2a:	e761      	b.n	80009f0 <__aeabi_ddiv+0x11c>
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	4649      	mov	r1, r9
 8000b30:	031b      	lsls	r3, r3, #12
 8000b32:	4219      	tst	r1, r3
 8000b34:	d100      	bne.n	8000b38 <__aeabi_ddiv+0x264>
 8000b36:	e0e2      	b.n	8000cfe <__aeabi_ddiv+0x42a>
 8000b38:	4659      	mov	r1, fp
 8000b3a:	4219      	tst	r1, r3
 8000b3c:	d000      	beq.n	8000b40 <__aeabi_ddiv+0x26c>
 8000b3e:	e0de      	b.n	8000cfe <__aeabi_ddiv+0x42a>
 8000b40:	430b      	orrs	r3, r1
 8000b42:	031b      	lsls	r3, r3, #12
 8000b44:	0017      	movs	r7, r2
 8000b46:	0b1b      	lsrs	r3, r3, #12
 8000b48:	46a2      	mov	sl, r4
 8000b4a:	4a01      	ldr	r2, [pc, #4]	; (8000b50 <__aeabi_ddiv+0x27c>)
 8000b4c:	e750      	b.n	80009f0 <__aeabi_ddiv+0x11c>
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	000007ff 	.word	0x000007ff
 8000b54:	fffffc01 	.word	0xfffffc01
 8000b58:	08007ef4 	.word	0x08007ef4
 8000b5c:	000003ff 	.word	0x000003ff
 8000b60:	feffffff 	.word	0xfeffffff
 8000b64:	000007fe 	.word	0x000007fe
 8000b68:	800fffff 	.word	0x800fffff
 8000b6c:	fffffc0d 	.word	0xfffffc0d
 8000b70:	fffff801 	.word	0xfffff801
 8000b74:	000003f3 	.word	0x000003f3
 8000b78:	45d9      	cmp	r9, fp
 8000b7a:	d900      	bls.n	8000b7e <__aeabi_ddiv+0x2aa>
 8000b7c:	e0cb      	b.n	8000d16 <__aeabi_ddiv+0x442>
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_ddiv+0x2ae>
 8000b80:	e0c6      	b.n	8000d10 <__aeabi_ddiv+0x43c>
 8000b82:	003c      	movs	r4, r7
 8000b84:	4648      	mov	r0, r9
 8000b86:	2700      	movs	r7, #0
 8000b88:	9b00      	ldr	r3, [sp, #0]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	465b      	mov	r3, fp
 8000b90:	0e16      	lsrs	r6, r2, #24
 8000b92:	021b      	lsls	r3, r3, #8
 8000b94:	431e      	orrs	r6, r3
 8000b96:	0213      	lsls	r3, r2, #8
 8000b98:	4698      	mov	r8, r3
 8000b9a:	0433      	lsls	r3, r6, #16
 8000b9c:	0c1b      	lsrs	r3, r3, #16
 8000b9e:	4699      	mov	r9, r3
 8000ba0:	0c31      	lsrs	r1, r6, #16
 8000ba2:	9101      	str	r1, [sp, #4]
 8000ba4:	f7ff fb36 	bl	8000214 <__aeabi_uidivmod>
 8000ba8:	464a      	mov	r2, r9
 8000baa:	4342      	muls	r2, r0
 8000bac:	040b      	lsls	r3, r1, #16
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	0005      	movs	r5, r0
 8000bb2:	4319      	orrs	r1, r3
 8000bb4:	428a      	cmp	r2, r1
 8000bb6:	d907      	bls.n	8000bc8 <__aeabi_ddiv+0x2f4>
 8000bb8:	1989      	adds	r1, r1, r6
 8000bba:	3d01      	subs	r5, #1
 8000bbc:	428e      	cmp	r6, r1
 8000bbe:	d803      	bhi.n	8000bc8 <__aeabi_ddiv+0x2f4>
 8000bc0:	428a      	cmp	r2, r1
 8000bc2:	d901      	bls.n	8000bc8 <__aeabi_ddiv+0x2f4>
 8000bc4:	1e85      	subs	r5, r0, #2
 8000bc6:	1989      	adds	r1, r1, r6
 8000bc8:	1a88      	subs	r0, r1, r2
 8000bca:	9901      	ldr	r1, [sp, #4]
 8000bcc:	f7ff fb22 	bl	8000214 <__aeabi_uidivmod>
 8000bd0:	0409      	lsls	r1, r1, #16
 8000bd2:	468c      	mov	ip, r1
 8000bd4:	464a      	mov	r2, r9
 8000bd6:	0421      	lsls	r1, r4, #16
 8000bd8:	4664      	mov	r4, ip
 8000bda:	4342      	muls	r2, r0
 8000bdc:	0c09      	lsrs	r1, r1, #16
 8000bde:	0003      	movs	r3, r0
 8000be0:	4321      	orrs	r1, r4
 8000be2:	428a      	cmp	r2, r1
 8000be4:	d904      	bls.n	8000bf0 <__aeabi_ddiv+0x31c>
 8000be6:	1989      	adds	r1, r1, r6
 8000be8:	3b01      	subs	r3, #1
 8000bea:	428e      	cmp	r6, r1
 8000bec:	d800      	bhi.n	8000bf0 <__aeabi_ddiv+0x31c>
 8000bee:	e0f1      	b.n	8000dd4 <__aeabi_ddiv+0x500>
 8000bf0:	042d      	lsls	r5, r5, #16
 8000bf2:	431d      	orrs	r5, r3
 8000bf4:	46ab      	mov	fp, r5
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	1a89      	subs	r1, r1, r2
 8000bfa:	4642      	mov	r2, r8
 8000bfc:	0c28      	lsrs	r0, r5, #16
 8000bfe:	0412      	lsls	r2, r2, #16
 8000c00:	0c1d      	lsrs	r5, r3, #16
 8000c02:	465b      	mov	r3, fp
 8000c04:	0c14      	lsrs	r4, r2, #16
 8000c06:	0022      	movs	r2, r4
 8000c08:	041b      	lsls	r3, r3, #16
 8000c0a:	0c1b      	lsrs	r3, r3, #16
 8000c0c:	435a      	muls	r2, r3
 8000c0e:	9403      	str	r4, [sp, #12]
 8000c10:	436b      	muls	r3, r5
 8000c12:	4344      	muls	r4, r0
 8000c14:	9502      	str	r5, [sp, #8]
 8000c16:	4368      	muls	r0, r5
 8000c18:	191b      	adds	r3, r3, r4
 8000c1a:	0c15      	lsrs	r5, r2, #16
 8000c1c:	18eb      	adds	r3, r5, r3
 8000c1e:	429c      	cmp	r4, r3
 8000c20:	d903      	bls.n	8000c2a <__aeabi_ddiv+0x356>
 8000c22:	2480      	movs	r4, #128	; 0x80
 8000c24:	0264      	lsls	r4, r4, #9
 8000c26:	46a4      	mov	ip, r4
 8000c28:	4460      	add	r0, ip
 8000c2a:	0c1c      	lsrs	r4, r3, #16
 8000c2c:	0415      	lsls	r5, r2, #16
 8000c2e:	041b      	lsls	r3, r3, #16
 8000c30:	0c2d      	lsrs	r5, r5, #16
 8000c32:	1820      	adds	r0, r4, r0
 8000c34:	195d      	adds	r5, r3, r5
 8000c36:	4281      	cmp	r1, r0
 8000c38:	d377      	bcc.n	8000d2a <__aeabi_ddiv+0x456>
 8000c3a:	d073      	beq.n	8000d24 <__aeabi_ddiv+0x450>
 8000c3c:	1a0c      	subs	r4, r1, r0
 8000c3e:	4aa2      	ldr	r2, [pc, #648]	; (8000ec8 <__aeabi_ddiv+0x5f4>)
 8000c40:	1b7d      	subs	r5, r7, r5
 8000c42:	42af      	cmp	r7, r5
 8000c44:	41bf      	sbcs	r7, r7
 8000c46:	4694      	mov	ip, r2
 8000c48:	9b00      	ldr	r3, [sp, #0]
 8000c4a:	427f      	negs	r7, r7
 8000c4c:	4463      	add	r3, ip
 8000c4e:	1be0      	subs	r0, r4, r7
 8000c50:	001c      	movs	r4, r3
 8000c52:	4286      	cmp	r6, r0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_ddiv+0x384>
 8000c56:	e0db      	b.n	8000e10 <__aeabi_ddiv+0x53c>
 8000c58:	9901      	ldr	r1, [sp, #4]
 8000c5a:	f7ff fadb 	bl	8000214 <__aeabi_uidivmod>
 8000c5e:	464a      	mov	r2, r9
 8000c60:	4342      	muls	r2, r0
 8000c62:	040b      	lsls	r3, r1, #16
 8000c64:	0c29      	lsrs	r1, r5, #16
 8000c66:	0007      	movs	r7, r0
 8000c68:	4319      	orrs	r1, r3
 8000c6a:	428a      	cmp	r2, r1
 8000c6c:	d907      	bls.n	8000c7e <__aeabi_ddiv+0x3aa>
 8000c6e:	1989      	adds	r1, r1, r6
 8000c70:	3f01      	subs	r7, #1
 8000c72:	428e      	cmp	r6, r1
 8000c74:	d803      	bhi.n	8000c7e <__aeabi_ddiv+0x3aa>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	d901      	bls.n	8000c7e <__aeabi_ddiv+0x3aa>
 8000c7a:	1e87      	subs	r7, r0, #2
 8000c7c:	1989      	adds	r1, r1, r6
 8000c7e:	1a88      	subs	r0, r1, r2
 8000c80:	9901      	ldr	r1, [sp, #4]
 8000c82:	f7ff fac7 	bl	8000214 <__aeabi_uidivmod>
 8000c86:	0409      	lsls	r1, r1, #16
 8000c88:	464a      	mov	r2, r9
 8000c8a:	4689      	mov	r9, r1
 8000c8c:	0429      	lsls	r1, r5, #16
 8000c8e:	464d      	mov	r5, r9
 8000c90:	4342      	muls	r2, r0
 8000c92:	0c09      	lsrs	r1, r1, #16
 8000c94:	0003      	movs	r3, r0
 8000c96:	4329      	orrs	r1, r5
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	d907      	bls.n	8000cac <__aeabi_ddiv+0x3d8>
 8000c9c:	1989      	adds	r1, r1, r6
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	428e      	cmp	r6, r1
 8000ca2:	d803      	bhi.n	8000cac <__aeabi_ddiv+0x3d8>
 8000ca4:	428a      	cmp	r2, r1
 8000ca6:	d901      	bls.n	8000cac <__aeabi_ddiv+0x3d8>
 8000ca8:	1e83      	subs	r3, r0, #2
 8000caa:	1989      	adds	r1, r1, r6
 8000cac:	043f      	lsls	r7, r7, #16
 8000cae:	1a89      	subs	r1, r1, r2
 8000cb0:	003a      	movs	r2, r7
 8000cb2:	9f03      	ldr	r7, [sp, #12]
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	0038      	movs	r0, r7
 8000cb8:	0413      	lsls	r3, r2, #16
 8000cba:	0c1b      	lsrs	r3, r3, #16
 8000cbc:	4358      	muls	r0, r3
 8000cbe:	4681      	mov	r9, r0
 8000cc0:	9802      	ldr	r0, [sp, #8]
 8000cc2:	0c15      	lsrs	r5, r2, #16
 8000cc4:	436f      	muls	r7, r5
 8000cc6:	4343      	muls	r3, r0
 8000cc8:	4345      	muls	r5, r0
 8000cca:	4648      	mov	r0, r9
 8000ccc:	0c00      	lsrs	r0, r0, #16
 8000cce:	4684      	mov	ip, r0
 8000cd0:	19db      	adds	r3, r3, r7
 8000cd2:	4463      	add	r3, ip
 8000cd4:	429f      	cmp	r7, r3
 8000cd6:	d903      	bls.n	8000ce0 <__aeabi_ddiv+0x40c>
 8000cd8:	2080      	movs	r0, #128	; 0x80
 8000cda:	0240      	lsls	r0, r0, #9
 8000cdc:	4684      	mov	ip, r0
 8000cde:	4465      	add	r5, ip
 8000ce0:	4648      	mov	r0, r9
 8000ce2:	0c1f      	lsrs	r7, r3, #16
 8000ce4:	0400      	lsls	r0, r0, #16
 8000ce6:	041b      	lsls	r3, r3, #16
 8000ce8:	0c00      	lsrs	r0, r0, #16
 8000cea:	197d      	adds	r5, r7, r5
 8000cec:	1818      	adds	r0, r3, r0
 8000cee:	42a9      	cmp	r1, r5
 8000cf0:	d200      	bcs.n	8000cf4 <__aeabi_ddiv+0x420>
 8000cf2:	e084      	b.n	8000dfe <__aeabi_ddiv+0x52a>
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_ddiv+0x424>
 8000cf6:	e07f      	b.n	8000df8 <__aeabi_ddiv+0x524>
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	e657      	b.n	80009ae <__aeabi_ddiv+0xda>
 8000cfe:	2380      	movs	r3, #128	; 0x80
 8000d00:	464a      	mov	r2, r9
 8000d02:	031b      	lsls	r3, r3, #12
 8000d04:	4313      	orrs	r3, r2
 8000d06:	031b      	lsls	r3, r3, #12
 8000d08:	0b1b      	lsrs	r3, r3, #12
 8000d0a:	46aa      	mov	sl, r5
 8000d0c:	4a6f      	ldr	r2, [pc, #444]	; (8000ecc <__aeabi_ddiv+0x5f8>)
 8000d0e:	e66f      	b.n	80009f0 <__aeabi_ddiv+0x11c>
 8000d10:	42ba      	cmp	r2, r7
 8000d12:	d900      	bls.n	8000d16 <__aeabi_ddiv+0x442>
 8000d14:	e735      	b.n	8000b82 <__aeabi_ddiv+0x2ae>
 8000d16:	464b      	mov	r3, r9
 8000d18:	07dc      	lsls	r4, r3, #31
 8000d1a:	0858      	lsrs	r0, r3, #1
 8000d1c:	087b      	lsrs	r3, r7, #1
 8000d1e:	431c      	orrs	r4, r3
 8000d20:	07ff      	lsls	r7, r7, #31
 8000d22:	e734      	b.n	8000b8e <__aeabi_ddiv+0x2ba>
 8000d24:	2400      	movs	r4, #0
 8000d26:	42af      	cmp	r7, r5
 8000d28:	d289      	bcs.n	8000c3e <__aeabi_ddiv+0x36a>
 8000d2a:	4447      	add	r7, r8
 8000d2c:	4547      	cmp	r7, r8
 8000d2e:	41a4      	sbcs	r4, r4
 8000d30:	465b      	mov	r3, fp
 8000d32:	4264      	negs	r4, r4
 8000d34:	19a4      	adds	r4, r4, r6
 8000d36:	1864      	adds	r4, r4, r1
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	42a6      	cmp	r6, r4
 8000d3c:	d21e      	bcs.n	8000d7c <__aeabi_ddiv+0x4a8>
 8000d3e:	42a0      	cmp	r0, r4
 8000d40:	d86d      	bhi.n	8000e1e <__aeabi_ddiv+0x54a>
 8000d42:	d100      	bne.n	8000d46 <__aeabi_ddiv+0x472>
 8000d44:	e0b6      	b.n	8000eb4 <__aeabi_ddiv+0x5e0>
 8000d46:	1a24      	subs	r4, r4, r0
 8000d48:	469b      	mov	fp, r3
 8000d4a:	e778      	b.n	8000c3e <__aeabi_ddiv+0x36a>
 8000d4c:	0003      	movs	r3, r0
 8000d4e:	465a      	mov	r2, fp
 8000d50:	3b28      	subs	r3, #40	; 0x28
 8000d52:	409a      	lsls	r2, r3
 8000d54:	2700      	movs	r7, #0
 8000d56:	4691      	mov	r9, r2
 8000d58:	e688      	b.n	8000a6c <__aeabi_ddiv+0x198>
 8000d5a:	4658      	mov	r0, fp
 8000d5c:	f000 ffea 	bl	8001d34 <__clzsi2>
 8000d60:	3020      	adds	r0, #32
 8000d62:	e672      	b.n	8000a4a <__aeabi_ddiv+0x176>
 8000d64:	0003      	movs	r3, r0
 8000d66:	4652      	mov	r2, sl
 8000d68:	3b28      	subs	r3, #40	; 0x28
 8000d6a:	409a      	lsls	r2, r3
 8000d6c:	4693      	mov	fp, r2
 8000d6e:	2200      	movs	r2, #0
 8000d70:	e6b4      	b.n	8000adc <__aeabi_ddiv+0x208>
 8000d72:	4650      	mov	r0, sl
 8000d74:	f000 ffde 	bl	8001d34 <__clzsi2>
 8000d78:	3020      	adds	r0, #32
 8000d7a:	e69a      	b.n	8000ab2 <__aeabi_ddiv+0x1de>
 8000d7c:	42a6      	cmp	r6, r4
 8000d7e:	d1e2      	bne.n	8000d46 <__aeabi_ddiv+0x472>
 8000d80:	45b8      	cmp	r8, r7
 8000d82:	d9dc      	bls.n	8000d3e <__aeabi_ddiv+0x46a>
 8000d84:	1a34      	subs	r4, r6, r0
 8000d86:	469b      	mov	fp, r3
 8000d88:	e759      	b.n	8000c3e <__aeabi_ddiv+0x36a>
 8000d8a:	2b1f      	cmp	r3, #31
 8000d8c:	dc65      	bgt.n	8000e5a <__aeabi_ddiv+0x586>
 8000d8e:	4c50      	ldr	r4, [pc, #320]	; (8000ed0 <__aeabi_ddiv+0x5fc>)
 8000d90:	9900      	ldr	r1, [sp, #0]
 8000d92:	46a4      	mov	ip, r4
 8000d94:	465c      	mov	r4, fp
 8000d96:	4461      	add	r1, ip
 8000d98:	0008      	movs	r0, r1
 8000d9a:	408c      	lsls	r4, r1
 8000d9c:	0011      	movs	r1, r2
 8000d9e:	4082      	lsls	r2, r0
 8000da0:	40d9      	lsrs	r1, r3
 8000da2:	1e50      	subs	r0, r2, #1
 8000da4:	4182      	sbcs	r2, r0
 8000da6:	430c      	orrs	r4, r1
 8000da8:	4314      	orrs	r4, r2
 8000daa:	465a      	mov	r2, fp
 8000dac:	40da      	lsrs	r2, r3
 8000dae:	0013      	movs	r3, r2
 8000db0:	0762      	lsls	r2, r4, #29
 8000db2:	d009      	beq.n	8000dc8 <__aeabi_ddiv+0x4f4>
 8000db4:	220f      	movs	r2, #15
 8000db6:	4022      	ands	r2, r4
 8000db8:	2a04      	cmp	r2, #4
 8000dba:	d005      	beq.n	8000dc8 <__aeabi_ddiv+0x4f4>
 8000dbc:	0022      	movs	r2, r4
 8000dbe:	1d14      	adds	r4, r2, #4
 8000dc0:	4294      	cmp	r4, r2
 8000dc2:	4189      	sbcs	r1, r1
 8000dc4:	4249      	negs	r1, r1
 8000dc6:	185b      	adds	r3, r3, r1
 8000dc8:	021a      	lsls	r2, r3, #8
 8000dca:	d562      	bpl.n	8000e92 <__aeabi_ddiv+0x5be>
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2300      	movs	r3, #0
 8000dd0:	2700      	movs	r7, #0
 8000dd2:	e60d      	b.n	80009f0 <__aeabi_ddiv+0x11c>
 8000dd4:	428a      	cmp	r2, r1
 8000dd6:	d800      	bhi.n	8000dda <__aeabi_ddiv+0x506>
 8000dd8:	e70a      	b.n	8000bf0 <__aeabi_ddiv+0x31c>
 8000dda:	1e83      	subs	r3, r0, #2
 8000ddc:	1989      	adds	r1, r1, r6
 8000dde:	e707      	b.n	8000bf0 <__aeabi_ddiv+0x31c>
 8000de0:	230f      	movs	r3, #15
 8000de2:	4013      	ands	r3, r2
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d100      	bne.n	8000dea <__aeabi_ddiv+0x516>
 8000de8:	e5e6      	b.n	80009b8 <__aeabi_ddiv+0xe4>
 8000dea:	1d17      	adds	r7, r2, #4
 8000dec:	4297      	cmp	r7, r2
 8000dee:	4192      	sbcs	r2, r2
 8000df0:	4253      	negs	r3, r2
 8000df2:	449b      	add	fp, r3
 8000df4:	08fa      	lsrs	r2, r7, #3
 8000df6:	e5e0      	b.n	80009ba <__aeabi_ddiv+0xe6>
 8000df8:	2800      	cmp	r0, #0
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_ddiv+0x52a>
 8000dfc:	e5d7      	b.n	80009ae <__aeabi_ddiv+0xda>
 8000dfe:	1871      	adds	r1, r6, r1
 8000e00:	1e53      	subs	r3, r2, #1
 8000e02:	42b1      	cmp	r1, r6
 8000e04:	d327      	bcc.n	8000e56 <__aeabi_ddiv+0x582>
 8000e06:	42a9      	cmp	r1, r5
 8000e08:	d315      	bcc.n	8000e36 <__aeabi_ddiv+0x562>
 8000e0a:	d058      	beq.n	8000ebe <__aeabi_ddiv+0x5ea>
 8000e0c:	001a      	movs	r2, r3
 8000e0e:	e773      	b.n	8000cf8 <__aeabi_ddiv+0x424>
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	dc00      	bgt.n	8000e16 <__aeabi_ddiv+0x542>
 8000e14:	e604      	b.n	8000a20 <__aeabi_ddiv+0x14c>
 8000e16:	2301      	movs	r3, #1
 8000e18:	2200      	movs	r2, #0
 8000e1a:	449b      	add	fp, r3
 8000e1c:	e5cd      	b.n	80009ba <__aeabi_ddiv+0xe6>
 8000e1e:	2302      	movs	r3, #2
 8000e20:	4447      	add	r7, r8
 8000e22:	4547      	cmp	r7, r8
 8000e24:	4189      	sbcs	r1, r1
 8000e26:	425b      	negs	r3, r3
 8000e28:	469c      	mov	ip, r3
 8000e2a:	4249      	negs	r1, r1
 8000e2c:	1989      	adds	r1, r1, r6
 8000e2e:	190c      	adds	r4, r1, r4
 8000e30:	44e3      	add	fp, ip
 8000e32:	1a24      	subs	r4, r4, r0
 8000e34:	e703      	b.n	8000c3e <__aeabi_ddiv+0x36a>
 8000e36:	4643      	mov	r3, r8
 8000e38:	005f      	lsls	r7, r3, #1
 8000e3a:	4547      	cmp	r7, r8
 8000e3c:	419b      	sbcs	r3, r3
 8000e3e:	46b8      	mov	r8, r7
 8000e40:	425b      	negs	r3, r3
 8000e42:	199e      	adds	r6, r3, r6
 8000e44:	3a02      	subs	r2, #2
 8000e46:	1989      	adds	r1, r1, r6
 8000e48:	42a9      	cmp	r1, r5
 8000e4a:	d000      	beq.n	8000e4e <__aeabi_ddiv+0x57a>
 8000e4c:	e754      	b.n	8000cf8 <__aeabi_ddiv+0x424>
 8000e4e:	4540      	cmp	r0, r8
 8000e50:	d000      	beq.n	8000e54 <__aeabi_ddiv+0x580>
 8000e52:	e751      	b.n	8000cf8 <__aeabi_ddiv+0x424>
 8000e54:	e5ab      	b.n	80009ae <__aeabi_ddiv+0xda>
 8000e56:	001a      	movs	r2, r3
 8000e58:	e7f6      	b.n	8000e48 <__aeabi_ddiv+0x574>
 8000e5a:	211f      	movs	r1, #31
 8000e5c:	465f      	mov	r7, fp
 8000e5e:	4249      	negs	r1, r1
 8000e60:	1b0c      	subs	r4, r1, r4
 8000e62:	40e7      	lsrs	r7, r4
 8000e64:	2b20      	cmp	r3, #32
 8000e66:	d007      	beq.n	8000e78 <__aeabi_ddiv+0x5a4>
 8000e68:	491a      	ldr	r1, [pc, #104]	; (8000ed4 <__aeabi_ddiv+0x600>)
 8000e6a:	9b00      	ldr	r3, [sp, #0]
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	4463      	add	r3, ip
 8000e70:	0018      	movs	r0, r3
 8000e72:	465b      	mov	r3, fp
 8000e74:	4083      	lsls	r3, r0
 8000e76:	431a      	orrs	r2, r3
 8000e78:	1e50      	subs	r0, r2, #1
 8000e7a:	4182      	sbcs	r2, r0
 8000e7c:	433a      	orrs	r2, r7
 8000e7e:	2707      	movs	r7, #7
 8000e80:	2300      	movs	r3, #0
 8000e82:	4017      	ands	r7, r2
 8000e84:	d009      	beq.n	8000e9a <__aeabi_ddiv+0x5c6>
 8000e86:	210f      	movs	r1, #15
 8000e88:	2300      	movs	r3, #0
 8000e8a:	4011      	ands	r1, r2
 8000e8c:	0014      	movs	r4, r2
 8000e8e:	2904      	cmp	r1, #4
 8000e90:	d195      	bne.n	8000dbe <__aeabi_ddiv+0x4ea>
 8000e92:	0022      	movs	r2, r4
 8000e94:	075f      	lsls	r7, r3, #29
 8000e96:	025b      	lsls	r3, r3, #9
 8000e98:	0b1b      	lsrs	r3, r3, #12
 8000e9a:	08d2      	lsrs	r2, r2, #3
 8000e9c:	4317      	orrs	r7, r2
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	e5a6      	b.n	80009f0 <__aeabi_ddiv+0x11c>
 8000ea2:	2380      	movs	r3, #128	; 0x80
 8000ea4:	4659      	mov	r1, fp
 8000ea6:	031b      	lsls	r3, r3, #12
 8000ea8:	430b      	orrs	r3, r1
 8000eaa:	031b      	lsls	r3, r3, #12
 8000eac:	0017      	movs	r7, r2
 8000eae:	0b1b      	lsrs	r3, r3, #12
 8000eb0:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <__aeabi_ddiv+0x5f8>)
 8000eb2:	e59d      	b.n	80009f0 <__aeabi_ddiv+0x11c>
 8000eb4:	42bd      	cmp	r5, r7
 8000eb6:	d8b2      	bhi.n	8000e1e <__aeabi_ddiv+0x54a>
 8000eb8:	469b      	mov	fp, r3
 8000eba:	2400      	movs	r4, #0
 8000ebc:	e6bf      	b.n	8000c3e <__aeabi_ddiv+0x36a>
 8000ebe:	4580      	cmp	r8, r0
 8000ec0:	d3b9      	bcc.n	8000e36 <__aeabi_ddiv+0x562>
 8000ec2:	001a      	movs	r2, r3
 8000ec4:	e7c3      	b.n	8000e4e <__aeabi_ddiv+0x57a>
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	000003ff 	.word	0x000003ff
 8000ecc:	000007ff 	.word	0x000007ff
 8000ed0:	0000041e 	.word	0x0000041e
 8000ed4:	0000043e 	.word	0x0000043e

08000ed8 <__eqdf2>:
 8000ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eda:	464f      	mov	r7, r9
 8000edc:	4646      	mov	r6, r8
 8000ede:	46d6      	mov	lr, sl
 8000ee0:	4684      	mov	ip, r0
 8000ee2:	b5c0      	push	{r6, r7, lr}
 8000ee4:	4680      	mov	r8, r0
 8000ee6:	4e19      	ldr	r6, [pc, #100]	; (8000f4c <__eqdf2+0x74>)
 8000ee8:	0318      	lsls	r0, r3, #12
 8000eea:	030f      	lsls	r7, r1, #12
 8000eec:	004d      	lsls	r5, r1, #1
 8000eee:	0b00      	lsrs	r0, r0, #12
 8000ef0:	005c      	lsls	r4, r3, #1
 8000ef2:	4682      	mov	sl, r0
 8000ef4:	0b3f      	lsrs	r7, r7, #12
 8000ef6:	0d6d      	lsrs	r5, r5, #21
 8000ef8:	0fc9      	lsrs	r1, r1, #31
 8000efa:	4691      	mov	r9, r2
 8000efc:	0d64      	lsrs	r4, r4, #21
 8000efe:	0fdb      	lsrs	r3, r3, #31
 8000f00:	2001      	movs	r0, #1
 8000f02:	42b5      	cmp	r5, r6
 8000f04:	d00a      	beq.n	8000f1c <__eqdf2+0x44>
 8000f06:	42b4      	cmp	r4, r6
 8000f08:	d003      	beq.n	8000f12 <__eqdf2+0x3a>
 8000f0a:	42a5      	cmp	r5, r4
 8000f0c:	d101      	bne.n	8000f12 <__eqdf2+0x3a>
 8000f0e:	4557      	cmp	r7, sl
 8000f10:	d00c      	beq.n	8000f2c <__eqdf2+0x54>
 8000f12:	bc1c      	pop	{r2, r3, r4}
 8000f14:	4690      	mov	r8, r2
 8000f16:	4699      	mov	r9, r3
 8000f18:	46a2      	mov	sl, r4
 8000f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f1c:	4666      	mov	r6, ip
 8000f1e:	433e      	orrs	r6, r7
 8000f20:	d1f7      	bne.n	8000f12 <__eqdf2+0x3a>
 8000f22:	42ac      	cmp	r4, r5
 8000f24:	d1f5      	bne.n	8000f12 <__eqdf2+0x3a>
 8000f26:	4654      	mov	r4, sl
 8000f28:	4314      	orrs	r4, r2
 8000f2a:	d1f2      	bne.n	8000f12 <__eqdf2+0x3a>
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d1ef      	bne.n	8000f12 <__eqdf2+0x3a>
 8000f32:	4299      	cmp	r1, r3
 8000f34:	d007      	beq.n	8000f46 <__eqdf2+0x6e>
 8000f36:	2d00      	cmp	r5, #0
 8000f38:	d1eb      	bne.n	8000f12 <__eqdf2+0x3a>
 8000f3a:	4663      	mov	r3, ip
 8000f3c:	431f      	orrs	r7, r3
 8000f3e:	0038      	movs	r0, r7
 8000f40:	1e47      	subs	r7, r0, #1
 8000f42:	41b8      	sbcs	r0, r7
 8000f44:	e7e5      	b.n	8000f12 <__eqdf2+0x3a>
 8000f46:	2000      	movs	r0, #0
 8000f48:	e7e3      	b.n	8000f12 <__eqdf2+0x3a>
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	000007ff 	.word	0x000007ff

08000f50 <__gedf2>:
 8000f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f52:	464f      	mov	r7, r9
 8000f54:	4646      	mov	r6, r8
 8000f56:	46d6      	mov	lr, sl
 8000f58:	004d      	lsls	r5, r1, #1
 8000f5a:	b5c0      	push	{r6, r7, lr}
 8000f5c:	030e      	lsls	r6, r1, #12
 8000f5e:	0fc9      	lsrs	r1, r1, #31
 8000f60:	468a      	mov	sl, r1
 8000f62:	492c      	ldr	r1, [pc, #176]	; (8001014 <__gedf2+0xc4>)
 8000f64:	031f      	lsls	r7, r3, #12
 8000f66:	005c      	lsls	r4, r3, #1
 8000f68:	4680      	mov	r8, r0
 8000f6a:	0b36      	lsrs	r6, r6, #12
 8000f6c:	0d6d      	lsrs	r5, r5, #21
 8000f6e:	4691      	mov	r9, r2
 8000f70:	0b3f      	lsrs	r7, r7, #12
 8000f72:	0d64      	lsrs	r4, r4, #21
 8000f74:	0fdb      	lsrs	r3, r3, #31
 8000f76:	428d      	cmp	r5, r1
 8000f78:	d01e      	beq.n	8000fb8 <__gedf2+0x68>
 8000f7a:	428c      	cmp	r4, r1
 8000f7c:	d016      	beq.n	8000fac <__gedf2+0x5c>
 8000f7e:	2d00      	cmp	r5, #0
 8000f80:	d11e      	bne.n	8000fc0 <__gedf2+0x70>
 8000f82:	4330      	orrs	r0, r6
 8000f84:	4684      	mov	ip, r0
 8000f86:	2c00      	cmp	r4, #0
 8000f88:	d101      	bne.n	8000f8e <__gedf2+0x3e>
 8000f8a:	433a      	orrs	r2, r7
 8000f8c:	d023      	beq.n	8000fd6 <__gedf2+0x86>
 8000f8e:	4662      	mov	r2, ip
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	d01a      	beq.n	8000fca <__gedf2+0x7a>
 8000f94:	459a      	cmp	sl, r3
 8000f96:	d029      	beq.n	8000fec <__gedf2+0x9c>
 8000f98:	4651      	mov	r1, sl
 8000f9a:	2002      	movs	r0, #2
 8000f9c:	3901      	subs	r1, #1
 8000f9e:	4008      	ands	r0, r1
 8000fa0:	3801      	subs	r0, #1
 8000fa2:	bc1c      	pop	{r2, r3, r4}
 8000fa4:	4690      	mov	r8, r2
 8000fa6:	4699      	mov	r9, r3
 8000fa8:	46a2      	mov	sl, r4
 8000faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fac:	0039      	movs	r1, r7
 8000fae:	4311      	orrs	r1, r2
 8000fb0:	d0e5      	beq.n	8000f7e <__gedf2+0x2e>
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	4240      	negs	r0, r0
 8000fb6:	e7f4      	b.n	8000fa2 <__gedf2+0x52>
 8000fb8:	4330      	orrs	r0, r6
 8000fba:	d1fa      	bne.n	8000fb2 <__gedf2+0x62>
 8000fbc:	42ac      	cmp	r4, r5
 8000fbe:	d00f      	beq.n	8000fe0 <__gedf2+0x90>
 8000fc0:	2c00      	cmp	r4, #0
 8000fc2:	d10f      	bne.n	8000fe4 <__gedf2+0x94>
 8000fc4:	433a      	orrs	r2, r7
 8000fc6:	d0e7      	beq.n	8000f98 <__gedf2+0x48>
 8000fc8:	e00c      	b.n	8000fe4 <__gedf2+0x94>
 8000fca:	2201      	movs	r2, #1
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	4393      	bics	r3, r2
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	3001      	adds	r0, #1
 8000fd4:	e7e5      	b.n	8000fa2 <__gedf2+0x52>
 8000fd6:	4663      	mov	r3, ip
 8000fd8:	2000      	movs	r0, #0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0e1      	beq.n	8000fa2 <__gedf2+0x52>
 8000fde:	e7db      	b.n	8000f98 <__gedf2+0x48>
 8000fe0:	433a      	orrs	r2, r7
 8000fe2:	d1e6      	bne.n	8000fb2 <__gedf2+0x62>
 8000fe4:	459a      	cmp	sl, r3
 8000fe6:	d1d7      	bne.n	8000f98 <__gedf2+0x48>
 8000fe8:	42a5      	cmp	r5, r4
 8000fea:	dcd5      	bgt.n	8000f98 <__gedf2+0x48>
 8000fec:	42a5      	cmp	r5, r4
 8000fee:	db05      	blt.n	8000ffc <__gedf2+0xac>
 8000ff0:	42be      	cmp	r6, r7
 8000ff2:	d8d1      	bhi.n	8000f98 <__gedf2+0x48>
 8000ff4:	d008      	beq.n	8001008 <__gedf2+0xb8>
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	42be      	cmp	r6, r7
 8000ffa:	d2d2      	bcs.n	8000fa2 <__gedf2+0x52>
 8000ffc:	4650      	mov	r0, sl
 8000ffe:	2301      	movs	r3, #1
 8001000:	3801      	subs	r0, #1
 8001002:	4398      	bics	r0, r3
 8001004:	3001      	adds	r0, #1
 8001006:	e7cc      	b.n	8000fa2 <__gedf2+0x52>
 8001008:	45c8      	cmp	r8, r9
 800100a:	d8c5      	bhi.n	8000f98 <__gedf2+0x48>
 800100c:	2000      	movs	r0, #0
 800100e:	45c8      	cmp	r8, r9
 8001010:	d3f4      	bcc.n	8000ffc <__gedf2+0xac>
 8001012:	e7c6      	b.n	8000fa2 <__gedf2+0x52>
 8001014:	000007ff 	.word	0x000007ff

08001018 <__ledf2>:
 8001018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800101a:	464f      	mov	r7, r9
 800101c:	4646      	mov	r6, r8
 800101e:	46d6      	mov	lr, sl
 8001020:	004d      	lsls	r5, r1, #1
 8001022:	b5c0      	push	{r6, r7, lr}
 8001024:	030e      	lsls	r6, r1, #12
 8001026:	0fc9      	lsrs	r1, r1, #31
 8001028:	468a      	mov	sl, r1
 800102a:	492e      	ldr	r1, [pc, #184]	; (80010e4 <__ledf2+0xcc>)
 800102c:	031f      	lsls	r7, r3, #12
 800102e:	005c      	lsls	r4, r3, #1
 8001030:	4680      	mov	r8, r0
 8001032:	0b36      	lsrs	r6, r6, #12
 8001034:	0d6d      	lsrs	r5, r5, #21
 8001036:	4691      	mov	r9, r2
 8001038:	0b3f      	lsrs	r7, r7, #12
 800103a:	0d64      	lsrs	r4, r4, #21
 800103c:	0fdb      	lsrs	r3, r3, #31
 800103e:	428d      	cmp	r5, r1
 8001040:	d018      	beq.n	8001074 <__ledf2+0x5c>
 8001042:	428c      	cmp	r4, r1
 8001044:	d011      	beq.n	800106a <__ledf2+0x52>
 8001046:	2d00      	cmp	r5, #0
 8001048:	d118      	bne.n	800107c <__ledf2+0x64>
 800104a:	4330      	orrs	r0, r6
 800104c:	4684      	mov	ip, r0
 800104e:	2c00      	cmp	r4, #0
 8001050:	d11e      	bne.n	8001090 <__ledf2+0x78>
 8001052:	433a      	orrs	r2, r7
 8001054:	d11c      	bne.n	8001090 <__ledf2+0x78>
 8001056:	4663      	mov	r3, ip
 8001058:	2000      	movs	r0, #0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d030      	beq.n	80010c0 <__ledf2+0xa8>
 800105e:	4651      	mov	r1, sl
 8001060:	2002      	movs	r0, #2
 8001062:	3901      	subs	r1, #1
 8001064:	4008      	ands	r0, r1
 8001066:	3801      	subs	r0, #1
 8001068:	e02a      	b.n	80010c0 <__ledf2+0xa8>
 800106a:	0039      	movs	r1, r7
 800106c:	4311      	orrs	r1, r2
 800106e:	d0ea      	beq.n	8001046 <__ledf2+0x2e>
 8001070:	2002      	movs	r0, #2
 8001072:	e025      	b.n	80010c0 <__ledf2+0xa8>
 8001074:	4330      	orrs	r0, r6
 8001076:	d1fb      	bne.n	8001070 <__ledf2+0x58>
 8001078:	42ac      	cmp	r4, r5
 800107a:	d026      	beq.n	80010ca <__ledf2+0xb2>
 800107c:	2c00      	cmp	r4, #0
 800107e:	d126      	bne.n	80010ce <__ledf2+0xb6>
 8001080:	433a      	orrs	r2, r7
 8001082:	d124      	bne.n	80010ce <__ledf2+0xb6>
 8001084:	4651      	mov	r1, sl
 8001086:	2002      	movs	r0, #2
 8001088:	3901      	subs	r1, #1
 800108a:	4008      	ands	r0, r1
 800108c:	3801      	subs	r0, #1
 800108e:	e017      	b.n	80010c0 <__ledf2+0xa8>
 8001090:	4662      	mov	r2, ip
 8001092:	2a00      	cmp	r2, #0
 8001094:	d00f      	beq.n	80010b6 <__ledf2+0x9e>
 8001096:	459a      	cmp	sl, r3
 8001098:	d1e1      	bne.n	800105e <__ledf2+0x46>
 800109a:	42a5      	cmp	r5, r4
 800109c:	db05      	blt.n	80010aa <__ledf2+0x92>
 800109e:	42be      	cmp	r6, r7
 80010a0:	d8dd      	bhi.n	800105e <__ledf2+0x46>
 80010a2:	d019      	beq.n	80010d8 <__ledf2+0xc0>
 80010a4:	2000      	movs	r0, #0
 80010a6:	42be      	cmp	r6, r7
 80010a8:	d20a      	bcs.n	80010c0 <__ledf2+0xa8>
 80010aa:	4650      	mov	r0, sl
 80010ac:	2301      	movs	r3, #1
 80010ae:	3801      	subs	r0, #1
 80010b0:	4398      	bics	r0, r3
 80010b2:	3001      	adds	r0, #1
 80010b4:	e004      	b.n	80010c0 <__ledf2+0xa8>
 80010b6:	2201      	movs	r2, #1
 80010b8:	3b01      	subs	r3, #1
 80010ba:	4393      	bics	r3, r2
 80010bc:	0018      	movs	r0, r3
 80010be:	3001      	adds	r0, #1
 80010c0:	bc1c      	pop	{r2, r3, r4}
 80010c2:	4690      	mov	r8, r2
 80010c4:	4699      	mov	r9, r3
 80010c6:	46a2      	mov	sl, r4
 80010c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ca:	433a      	orrs	r2, r7
 80010cc:	d1d0      	bne.n	8001070 <__ledf2+0x58>
 80010ce:	459a      	cmp	sl, r3
 80010d0:	d1c5      	bne.n	800105e <__ledf2+0x46>
 80010d2:	42a5      	cmp	r5, r4
 80010d4:	dcc3      	bgt.n	800105e <__ledf2+0x46>
 80010d6:	e7e0      	b.n	800109a <__ledf2+0x82>
 80010d8:	45c8      	cmp	r8, r9
 80010da:	d8c0      	bhi.n	800105e <__ledf2+0x46>
 80010dc:	2000      	movs	r0, #0
 80010de:	45c8      	cmp	r8, r9
 80010e0:	d3e3      	bcc.n	80010aa <__ledf2+0x92>
 80010e2:	e7ed      	b.n	80010c0 <__ledf2+0xa8>
 80010e4:	000007ff 	.word	0x000007ff

080010e8 <__aeabi_dmul>:
 80010e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ea:	4657      	mov	r7, sl
 80010ec:	46de      	mov	lr, fp
 80010ee:	464e      	mov	r6, r9
 80010f0:	4645      	mov	r5, r8
 80010f2:	b5e0      	push	{r5, r6, r7, lr}
 80010f4:	4683      	mov	fp, r0
 80010f6:	0006      	movs	r6, r0
 80010f8:	030f      	lsls	r7, r1, #12
 80010fa:	0048      	lsls	r0, r1, #1
 80010fc:	b087      	sub	sp, #28
 80010fe:	4692      	mov	sl, r2
 8001100:	001d      	movs	r5, r3
 8001102:	0b3f      	lsrs	r7, r7, #12
 8001104:	0d40      	lsrs	r0, r0, #21
 8001106:	0fcc      	lsrs	r4, r1, #31
 8001108:	2800      	cmp	r0, #0
 800110a:	d100      	bne.n	800110e <__aeabi_dmul+0x26>
 800110c:	e06f      	b.n	80011ee <__aeabi_dmul+0x106>
 800110e:	4bde      	ldr	r3, [pc, #888]	; (8001488 <__aeabi_dmul+0x3a0>)
 8001110:	4298      	cmp	r0, r3
 8001112:	d038      	beq.n	8001186 <__aeabi_dmul+0x9e>
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	00ff      	lsls	r7, r7, #3
 8001118:	041b      	lsls	r3, r3, #16
 800111a:	431f      	orrs	r7, r3
 800111c:	0f73      	lsrs	r3, r6, #29
 800111e:	433b      	orrs	r3, r7
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	4bda      	ldr	r3, [pc, #872]	; (800148c <__aeabi_dmul+0x3a4>)
 8001124:	2700      	movs	r7, #0
 8001126:	4699      	mov	r9, r3
 8001128:	2300      	movs	r3, #0
 800112a:	469b      	mov	fp, r3
 800112c:	00f6      	lsls	r6, r6, #3
 800112e:	4481      	add	r9, r0
 8001130:	032b      	lsls	r3, r5, #12
 8001132:	0069      	lsls	r1, r5, #1
 8001134:	0b1b      	lsrs	r3, r3, #12
 8001136:	4652      	mov	r2, sl
 8001138:	4698      	mov	r8, r3
 800113a:	0d49      	lsrs	r1, r1, #21
 800113c:	0fed      	lsrs	r5, r5, #31
 800113e:	2900      	cmp	r1, #0
 8001140:	d100      	bne.n	8001144 <__aeabi_dmul+0x5c>
 8001142:	e085      	b.n	8001250 <__aeabi_dmul+0x168>
 8001144:	4bd0      	ldr	r3, [pc, #832]	; (8001488 <__aeabi_dmul+0x3a0>)
 8001146:	4299      	cmp	r1, r3
 8001148:	d100      	bne.n	800114c <__aeabi_dmul+0x64>
 800114a:	e073      	b.n	8001234 <__aeabi_dmul+0x14c>
 800114c:	4643      	mov	r3, r8
 800114e:	00da      	lsls	r2, r3, #3
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	041b      	lsls	r3, r3, #16
 8001154:	4313      	orrs	r3, r2
 8001156:	4652      	mov	r2, sl
 8001158:	48cc      	ldr	r0, [pc, #816]	; (800148c <__aeabi_dmul+0x3a4>)
 800115a:	0f52      	lsrs	r2, r2, #29
 800115c:	4684      	mov	ip, r0
 800115e:	4313      	orrs	r3, r2
 8001160:	4652      	mov	r2, sl
 8001162:	2000      	movs	r0, #0
 8001164:	4461      	add	r1, ip
 8001166:	00d2      	lsls	r2, r2, #3
 8001168:	4489      	add	r9, r1
 800116a:	0021      	movs	r1, r4
 800116c:	4069      	eors	r1, r5
 800116e:	9100      	str	r1, [sp, #0]
 8001170:	468c      	mov	ip, r1
 8001172:	2101      	movs	r1, #1
 8001174:	4449      	add	r1, r9
 8001176:	468a      	mov	sl, r1
 8001178:	2f0f      	cmp	r7, #15
 800117a:	d900      	bls.n	800117e <__aeabi_dmul+0x96>
 800117c:	e090      	b.n	80012a0 <__aeabi_dmul+0x1b8>
 800117e:	49c4      	ldr	r1, [pc, #784]	; (8001490 <__aeabi_dmul+0x3a8>)
 8001180:	00bf      	lsls	r7, r7, #2
 8001182:	59cf      	ldr	r7, [r1, r7]
 8001184:	46bf      	mov	pc, r7
 8001186:	465b      	mov	r3, fp
 8001188:	433b      	orrs	r3, r7
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	d000      	beq.n	8001190 <__aeabi_dmul+0xa8>
 800118e:	e16a      	b.n	8001466 <__aeabi_dmul+0x37e>
 8001190:	2302      	movs	r3, #2
 8001192:	2708      	movs	r7, #8
 8001194:	2600      	movs	r6, #0
 8001196:	4681      	mov	r9, r0
 8001198:	469b      	mov	fp, r3
 800119a:	e7c9      	b.n	8001130 <__aeabi_dmul+0x48>
 800119c:	0032      	movs	r2, r6
 800119e:	4658      	mov	r0, fp
 80011a0:	9b01      	ldr	r3, [sp, #4]
 80011a2:	4661      	mov	r1, ip
 80011a4:	9100      	str	r1, [sp, #0]
 80011a6:	2802      	cmp	r0, #2
 80011a8:	d100      	bne.n	80011ac <__aeabi_dmul+0xc4>
 80011aa:	e075      	b.n	8001298 <__aeabi_dmul+0x1b0>
 80011ac:	2803      	cmp	r0, #3
 80011ae:	d100      	bne.n	80011b2 <__aeabi_dmul+0xca>
 80011b0:	e1fe      	b.n	80015b0 <__aeabi_dmul+0x4c8>
 80011b2:	2801      	cmp	r0, #1
 80011b4:	d000      	beq.n	80011b8 <__aeabi_dmul+0xd0>
 80011b6:	e12c      	b.n	8001412 <__aeabi_dmul+0x32a>
 80011b8:	2300      	movs	r3, #0
 80011ba:	2700      	movs	r7, #0
 80011bc:	2600      	movs	r6, #0
 80011be:	2500      	movs	r5, #0
 80011c0:	033f      	lsls	r7, r7, #12
 80011c2:	0d2a      	lsrs	r2, r5, #20
 80011c4:	0b3f      	lsrs	r7, r7, #12
 80011c6:	48b3      	ldr	r0, [pc, #716]	; (8001494 <__aeabi_dmul+0x3ac>)
 80011c8:	0512      	lsls	r2, r2, #20
 80011ca:	433a      	orrs	r2, r7
 80011cc:	4002      	ands	r2, r0
 80011ce:	051b      	lsls	r3, r3, #20
 80011d0:	4313      	orrs	r3, r2
 80011d2:	9a00      	ldr	r2, [sp, #0]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	07d1      	lsls	r1, r2, #31
 80011d8:	085b      	lsrs	r3, r3, #1
 80011da:	430b      	orrs	r3, r1
 80011dc:	0030      	movs	r0, r6
 80011de:	0019      	movs	r1, r3
 80011e0:	b007      	add	sp, #28
 80011e2:	bc3c      	pop	{r2, r3, r4, r5}
 80011e4:	4690      	mov	r8, r2
 80011e6:	4699      	mov	r9, r3
 80011e8:	46a2      	mov	sl, r4
 80011ea:	46ab      	mov	fp, r5
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ee:	465b      	mov	r3, fp
 80011f0:	433b      	orrs	r3, r7
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	d100      	bne.n	80011f8 <__aeabi_dmul+0x110>
 80011f6:	e12f      	b.n	8001458 <__aeabi_dmul+0x370>
 80011f8:	2f00      	cmp	r7, #0
 80011fa:	d100      	bne.n	80011fe <__aeabi_dmul+0x116>
 80011fc:	e1a5      	b.n	800154a <__aeabi_dmul+0x462>
 80011fe:	0038      	movs	r0, r7
 8001200:	f000 fd98 	bl	8001d34 <__clzsi2>
 8001204:	0003      	movs	r3, r0
 8001206:	3b0b      	subs	r3, #11
 8001208:	2b1c      	cmp	r3, #28
 800120a:	dd00      	ble.n	800120e <__aeabi_dmul+0x126>
 800120c:	e196      	b.n	800153c <__aeabi_dmul+0x454>
 800120e:	221d      	movs	r2, #29
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	465a      	mov	r2, fp
 8001214:	0001      	movs	r1, r0
 8001216:	40da      	lsrs	r2, r3
 8001218:	465e      	mov	r6, fp
 800121a:	3908      	subs	r1, #8
 800121c:	408f      	lsls	r7, r1
 800121e:	0013      	movs	r3, r2
 8001220:	408e      	lsls	r6, r1
 8001222:	433b      	orrs	r3, r7
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	4b9c      	ldr	r3, [pc, #624]	; (8001498 <__aeabi_dmul+0x3b0>)
 8001228:	2700      	movs	r7, #0
 800122a:	1a1b      	subs	r3, r3, r0
 800122c:	4699      	mov	r9, r3
 800122e:	2300      	movs	r3, #0
 8001230:	469b      	mov	fp, r3
 8001232:	e77d      	b.n	8001130 <__aeabi_dmul+0x48>
 8001234:	4641      	mov	r1, r8
 8001236:	4653      	mov	r3, sl
 8001238:	430b      	orrs	r3, r1
 800123a:	4993      	ldr	r1, [pc, #588]	; (8001488 <__aeabi_dmul+0x3a0>)
 800123c:	468c      	mov	ip, r1
 800123e:	44e1      	add	r9, ip
 8001240:	2b00      	cmp	r3, #0
 8001242:	d000      	beq.n	8001246 <__aeabi_dmul+0x15e>
 8001244:	e11a      	b.n	800147c <__aeabi_dmul+0x394>
 8001246:	2202      	movs	r2, #2
 8001248:	2002      	movs	r0, #2
 800124a:	4317      	orrs	r7, r2
 800124c:	2200      	movs	r2, #0
 800124e:	e78c      	b.n	800116a <__aeabi_dmul+0x82>
 8001250:	4313      	orrs	r3, r2
 8001252:	d100      	bne.n	8001256 <__aeabi_dmul+0x16e>
 8001254:	e10d      	b.n	8001472 <__aeabi_dmul+0x38a>
 8001256:	4643      	mov	r3, r8
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <__aeabi_dmul+0x176>
 800125c:	e181      	b.n	8001562 <__aeabi_dmul+0x47a>
 800125e:	4640      	mov	r0, r8
 8001260:	f000 fd68 	bl	8001d34 <__clzsi2>
 8001264:	0002      	movs	r2, r0
 8001266:	3a0b      	subs	r2, #11
 8001268:	2a1c      	cmp	r2, #28
 800126a:	dd00      	ble.n	800126e <__aeabi_dmul+0x186>
 800126c:	e172      	b.n	8001554 <__aeabi_dmul+0x46c>
 800126e:	0001      	movs	r1, r0
 8001270:	4643      	mov	r3, r8
 8001272:	3908      	subs	r1, #8
 8001274:	408b      	lsls	r3, r1
 8001276:	4698      	mov	r8, r3
 8001278:	231d      	movs	r3, #29
 800127a:	1a9a      	subs	r2, r3, r2
 800127c:	4653      	mov	r3, sl
 800127e:	40d3      	lsrs	r3, r2
 8001280:	001a      	movs	r2, r3
 8001282:	4643      	mov	r3, r8
 8001284:	4313      	orrs	r3, r2
 8001286:	4652      	mov	r2, sl
 8001288:	408a      	lsls	r2, r1
 800128a:	4649      	mov	r1, r9
 800128c:	1a08      	subs	r0, r1, r0
 800128e:	4982      	ldr	r1, [pc, #520]	; (8001498 <__aeabi_dmul+0x3b0>)
 8001290:	4689      	mov	r9, r1
 8001292:	4481      	add	r9, r0
 8001294:	2000      	movs	r0, #0
 8001296:	e768      	b.n	800116a <__aeabi_dmul+0x82>
 8001298:	4b7b      	ldr	r3, [pc, #492]	; (8001488 <__aeabi_dmul+0x3a0>)
 800129a:	2700      	movs	r7, #0
 800129c:	2600      	movs	r6, #0
 800129e:	e78e      	b.n	80011be <__aeabi_dmul+0xd6>
 80012a0:	0c14      	lsrs	r4, r2, #16
 80012a2:	0412      	lsls	r2, r2, #16
 80012a4:	0c12      	lsrs	r2, r2, #16
 80012a6:	0011      	movs	r1, r2
 80012a8:	0c37      	lsrs	r7, r6, #16
 80012aa:	0436      	lsls	r6, r6, #16
 80012ac:	0c35      	lsrs	r5, r6, #16
 80012ae:	4379      	muls	r1, r7
 80012b0:	0028      	movs	r0, r5
 80012b2:	468c      	mov	ip, r1
 80012b4:	002e      	movs	r6, r5
 80012b6:	4360      	muls	r0, r4
 80012b8:	4460      	add	r0, ip
 80012ba:	4683      	mov	fp, r0
 80012bc:	4356      	muls	r6, r2
 80012be:	0021      	movs	r1, r4
 80012c0:	0c30      	lsrs	r0, r6, #16
 80012c2:	4680      	mov	r8, r0
 80012c4:	4658      	mov	r0, fp
 80012c6:	4379      	muls	r1, r7
 80012c8:	4440      	add	r0, r8
 80012ca:	9102      	str	r1, [sp, #8]
 80012cc:	4584      	cmp	ip, r0
 80012ce:	d906      	bls.n	80012de <__aeabi_dmul+0x1f6>
 80012d0:	4688      	mov	r8, r1
 80012d2:	2180      	movs	r1, #128	; 0x80
 80012d4:	0249      	lsls	r1, r1, #9
 80012d6:	468c      	mov	ip, r1
 80012d8:	44e0      	add	r8, ip
 80012da:	4641      	mov	r1, r8
 80012dc:	9102      	str	r1, [sp, #8]
 80012de:	0436      	lsls	r6, r6, #16
 80012e0:	0c01      	lsrs	r1, r0, #16
 80012e2:	0c36      	lsrs	r6, r6, #16
 80012e4:	0400      	lsls	r0, r0, #16
 80012e6:	468b      	mov	fp, r1
 80012e8:	1981      	adds	r1, r0, r6
 80012ea:	0c1e      	lsrs	r6, r3, #16
 80012ec:	041b      	lsls	r3, r3, #16
 80012ee:	0c1b      	lsrs	r3, r3, #16
 80012f0:	9103      	str	r1, [sp, #12]
 80012f2:	0019      	movs	r1, r3
 80012f4:	4379      	muls	r1, r7
 80012f6:	468c      	mov	ip, r1
 80012f8:	0028      	movs	r0, r5
 80012fa:	4375      	muls	r5, r6
 80012fc:	4465      	add	r5, ip
 80012fe:	46a8      	mov	r8, r5
 8001300:	4358      	muls	r0, r3
 8001302:	0c05      	lsrs	r5, r0, #16
 8001304:	4445      	add	r5, r8
 8001306:	4377      	muls	r7, r6
 8001308:	42a9      	cmp	r1, r5
 800130a:	d903      	bls.n	8001314 <__aeabi_dmul+0x22c>
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	0249      	lsls	r1, r1, #9
 8001310:	468c      	mov	ip, r1
 8001312:	4467      	add	r7, ip
 8001314:	0c29      	lsrs	r1, r5, #16
 8001316:	468c      	mov	ip, r1
 8001318:	0039      	movs	r1, r7
 800131a:	0400      	lsls	r0, r0, #16
 800131c:	0c00      	lsrs	r0, r0, #16
 800131e:	042d      	lsls	r5, r5, #16
 8001320:	182d      	adds	r5, r5, r0
 8001322:	4461      	add	r1, ip
 8001324:	44ab      	add	fp, r5
 8001326:	9105      	str	r1, [sp, #20]
 8001328:	4659      	mov	r1, fp
 800132a:	9104      	str	r1, [sp, #16]
 800132c:	9901      	ldr	r1, [sp, #4]
 800132e:	040f      	lsls	r7, r1, #16
 8001330:	0c3f      	lsrs	r7, r7, #16
 8001332:	0c08      	lsrs	r0, r1, #16
 8001334:	0039      	movs	r1, r7
 8001336:	4351      	muls	r1, r2
 8001338:	4342      	muls	r2, r0
 800133a:	4690      	mov	r8, r2
 800133c:	0002      	movs	r2, r0
 800133e:	468c      	mov	ip, r1
 8001340:	0c09      	lsrs	r1, r1, #16
 8001342:	468b      	mov	fp, r1
 8001344:	4362      	muls	r2, r4
 8001346:	437c      	muls	r4, r7
 8001348:	4444      	add	r4, r8
 800134a:	445c      	add	r4, fp
 800134c:	45a0      	cmp	r8, r4
 800134e:	d903      	bls.n	8001358 <__aeabi_dmul+0x270>
 8001350:	2180      	movs	r1, #128	; 0x80
 8001352:	0249      	lsls	r1, r1, #9
 8001354:	4688      	mov	r8, r1
 8001356:	4442      	add	r2, r8
 8001358:	0c21      	lsrs	r1, r4, #16
 800135a:	4688      	mov	r8, r1
 800135c:	4661      	mov	r1, ip
 800135e:	0409      	lsls	r1, r1, #16
 8001360:	0c09      	lsrs	r1, r1, #16
 8001362:	468c      	mov	ip, r1
 8001364:	0039      	movs	r1, r7
 8001366:	4359      	muls	r1, r3
 8001368:	4343      	muls	r3, r0
 800136a:	4370      	muls	r0, r6
 800136c:	437e      	muls	r6, r7
 800136e:	0c0f      	lsrs	r7, r1, #16
 8001370:	18f6      	adds	r6, r6, r3
 8001372:	0424      	lsls	r4, r4, #16
 8001374:	19be      	adds	r6, r7, r6
 8001376:	4464      	add	r4, ip
 8001378:	4442      	add	r2, r8
 800137a:	468c      	mov	ip, r1
 800137c:	42b3      	cmp	r3, r6
 800137e:	d903      	bls.n	8001388 <__aeabi_dmul+0x2a0>
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	025b      	lsls	r3, r3, #9
 8001384:	4698      	mov	r8, r3
 8001386:	4440      	add	r0, r8
 8001388:	9b02      	ldr	r3, [sp, #8]
 800138a:	4661      	mov	r1, ip
 800138c:	4698      	mov	r8, r3
 800138e:	9b04      	ldr	r3, [sp, #16]
 8001390:	0437      	lsls	r7, r6, #16
 8001392:	4443      	add	r3, r8
 8001394:	469b      	mov	fp, r3
 8001396:	45ab      	cmp	fp, r5
 8001398:	41ad      	sbcs	r5, r5
 800139a:	426b      	negs	r3, r5
 800139c:	040d      	lsls	r5, r1, #16
 800139e:	9905      	ldr	r1, [sp, #20]
 80013a0:	0c2d      	lsrs	r5, r5, #16
 80013a2:	468c      	mov	ip, r1
 80013a4:	197f      	adds	r7, r7, r5
 80013a6:	4467      	add	r7, ip
 80013a8:	18fd      	adds	r5, r7, r3
 80013aa:	46a8      	mov	r8, r5
 80013ac:	465d      	mov	r5, fp
 80013ae:	192d      	adds	r5, r5, r4
 80013b0:	42a5      	cmp	r5, r4
 80013b2:	41a4      	sbcs	r4, r4
 80013b4:	4693      	mov	fp, r2
 80013b6:	4264      	negs	r4, r4
 80013b8:	46a4      	mov	ip, r4
 80013ba:	44c3      	add	fp, r8
 80013bc:	44dc      	add	ip, fp
 80013be:	428f      	cmp	r7, r1
 80013c0:	41bf      	sbcs	r7, r7
 80013c2:	4598      	cmp	r8, r3
 80013c4:	419b      	sbcs	r3, r3
 80013c6:	4593      	cmp	fp, r2
 80013c8:	4192      	sbcs	r2, r2
 80013ca:	45a4      	cmp	ip, r4
 80013cc:	41a4      	sbcs	r4, r4
 80013ce:	425b      	negs	r3, r3
 80013d0:	427f      	negs	r7, r7
 80013d2:	431f      	orrs	r7, r3
 80013d4:	0c36      	lsrs	r6, r6, #16
 80013d6:	4252      	negs	r2, r2
 80013d8:	4264      	negs	r4, r4
 80013da:	19bf      	adds	r7, r7, r6
 80013dc:	4322      	orrs	r2, r4
 80013de:	18bf      	adds	r7, r7, r2
 80013e0:	4662      	mov	r2, ip
 80013e2:	1838      	adds	r0, r7, r0
 80013e4:	0243      	lsls	r3, r0, #9
 80013e6:	0dd2      	lsrs	r2, r2, #23
 80013e8:	9903      	ldr	r1, [sp, #12]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	026a      	lsls	r2, r5, #9
 80013ee:	430a      	orrs	r2, r1
 80013f0:	1e50      	subs	r0, r2, #1
 80013f2:	4182      	sbcs	r2, r0
 80013f4:	4661      	mov	r1, ip
 80013f6:	0ded      	lsrs	r5, r5, #23
 80013f8:	432a      	orrs	r2, r5
 80013fa:	024e      	lsls	r6, r1, #9
 80013fc:	4332      	orrs	r2, r6
 80013fe:	01d9      	lsls	r1, r3, #7
 8001400:	d400      	bmi.n	8001404 <__aeabi_dmul+0x31c>
 8001402:	e0b3      	b.n	800156c <__aeabi_dmul+0x484>
 8001404:	2601      	movs	r6, #1
 8001406:	0850      	lsrs	r0, r2, #1
 8001408:	4032      	ands	r2, r6
 800140a:	4302      	orrs	r2, r0
 800140c:	07de      	lsls	r6, r3, #31
 800140e:	4332      	orrs	r2, r6
 8001410:	085b      	lsrs	r3, r3, #1
 8001412:	4c22      	ldr	r4, [pc, #136]	; (800149c <__aeabi_dmul+0x3b4>)
 8001414:	4454      	add	r4, sl
 8001416:	2c00      	cmp	r4, #0
 8001418:	dd62      	ble.n	80014e0 <__aeabi_dmul+0x3f8>
 800141a:	0751      	lsls	r1, r2, #29
 800141c:	d009      	beq.n	8001432 <__aeabi_dmul+0x34a>
 800141e:	200f      	movs	r0, #15
 8001420:	4010      	ands	r0, r2
 8001422:	2804      	cmp	r0, #4
 8001424:	d005      	beq.n	8001432 <__aeabi_dmul+0x34a>
 8001426:	1d10      	adds	r0, r2, #4
 8001428:	4290      	cmp	r0, r2
 800142a:	4192      	sbcs	r2, r2
 800142c:	4252      	negs	r2, r2
 800142e:	189b      	adds	r3, r3, r2
 8001430:	0002      	movs	r2, r0
 8001432:	01d9      	lsls	r1, r3, #7
 8001434:	d504      	bpl.n	8001440 <__aeabi_dmul+0x358>
 8001436:	2480      	movs	r4, #128	; 0x80
 8001438:	4819      	ldr	r0, [pc, #100]	; (80014a0 <__aeabi_dmul+0x3b8>)
 800143a:	00e4      	lsls	r4, r4, #3
 800143c:	4003      	ands	r3, r0
 800143e:	4454      	add	r4, sl
 8001440:	4818      	ldr	r0, [pc, #96]	; (80014a4 <__aeabi_dmul+0x3bc>)
 8001442:	4284      	cmp	r4, r0
 8001444:	dd00      	ble.n	8001448 <__aeabi_dmul+0x360>
 8001446:	e727      	b.n	8001298 <__aeabi_dmul+0x1b0>
 8001448:	075e      	lsls	r6, r3, #29
 800144a:	025b      	lsls	r3, r3, #9
 800144c:	08d2      	lsrs	r2, r2, #3
 800144e:	0b1f      	lsrs	r7, r3, #12
 8001450:	0563      	lsls	r3, r4, #21
 8001452:	4316      	orrs	r6, r2
 8001454:	0d5b      	lsrs	r3, r3, #21
 8001456:	e6b2      	b.n	80011be <__aeabi_dmul+0xd6>
 8001458:	2300      	movs	r3, #0
 800145a:	4699      	mov	r9, r3
 800145c:	3301      	adds	r3, #1
 800145e:	2704      	movs	r7, #4
 8001460:	2600      	movs	r6, #0
 8001462:	469b      	mov	fp, r3
 8001464:	e664      	b.n	8001130 <__aeabi_dmul+0x48>
 8001466:	2303      	movs	r3, #3
 8001468:	9701      	str	r7, [sp, #4]
 800146a:	4681      	mov	r9, r0
 800146c:	270c      	movs	r7, #12
 800146e:	469b      	mov	fp, r3
 8001470:	e65e      	b.n	8001130 <__aeabi_dmul+0x48>
 8001472:	2201      	movs	r2, #1
 8001474:	2001      	movs	r0, #1
 8001476:	4317      	orrs	r7, r2
 8001478:	2200      	movs	r2, #0
 800147a:	e676      	b.n	800116a <__aeabi_dmul+0x82>
 800147c:	2303      	movs	r3, #3
 800147e:	2003      	movs	r0, #3
 8001480:	431f      	orrs	r7, r3
 8001482:	4643      	mov	r3, r8
 8001484:	e671      	b.n	800116a <__aeabi_dmul+0x82>
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	000007ff 	.word	0x000007ff
 800148c:	fffffc01 	.word	0xfffffc01
 8001490:	08007f34 	.word	0x08007f34
 8001494:	800fffff 	.word	0x800fffff
 8001498:	fffffc0d 	.word	0xfffffc0d
 800149c:	000003ff 	.word	0x000003ff
 80014a0:	feffffff 	.word	0xfeffffff
 80014a4:	000007fe 	.word	0x000007fe
 80014a8:	2300      	movs	r3, #0
 80014aa:	2780      	movs	r7, #128	; 0x80
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	033f      	lsls	r7, r7, #12
 80014b0:	2600      	movs	r6, #0
 80014b2:	4b43      	ldr	r3, [pc, #268]	; (80015c0 <__aeabi_dmul+0x4d8>)
 80014b4:	e683      	b.n	80011be <__aeabi_dmul+0xd6>
 80014b6:	9b01      	ldr	r3, [sp, #4]
 80014b8:	0032      	movs	r2, r6
 80014ba:	46a4      	mov	ip, r4
 80014bc:	4658      	mov	r0, fp
 80014be:	e670      	b.n	80011a2 <__aeabi_dmul+0xba>
 80014c0:	46ac      	mov	ip, r5
 80014c2:	e66e      	b.n	80011a2 <__aeabi_dmul+0xba>
 80014c4:	2780      	movs	r7, #128	; 0x80
 80014c6:	9901      	ldr	r1, [sp, #4]
 80014c8:	033f      	lsls	r7, r7, #12
 80014ca:	4239      	tst	r1, r7
 80014cc:	d02d      	beq.n	800152a <__aeabi_dmul+0x442>
 80014ce:	423b      	tst	r3, r7
 80014d0:	d12b      	bne.n	800152a <__aeabi_dmul+0x442>
 80014d2:	431f      	orrs	r7, r3
 80014d4:	033f      	lsls	r7, r7, #12
 80014d6:	0b3f      	lsrs	r7, r7, #12
 80014d8:	9500      	str	r5, [sp, #0]
 80014da:	0016      	movs	r6, r2
 80014dc:	4b38      	ldr	r3, [pc, #224]	; (80015c0 <__aeabi_dmul+0x4d8>)
 80014de:	e66e      	b.n	80011be <__aeabi_dmul+0xd6>
 80014e0:	2501      	movs	r5, #1
 80014e2:	1b2d      	subs	r5, r5, r4
 80014e4:	2d38      	cmp	r5, #56	; 0x38
 80014e6:	dd00      	ble.n	80014ea <__aeabi_dmul+0x402>
 80014e8:	e666      	b.n	80011b8 <__aeabi_dmul+0xd0>
 80014ea:	2d1f      	cmp	r5, #31
 80014ec:	dc40      	bgt.n	8001570 <__aeabi_dmul+0x488>
 80014ee:	4835      	ldr	r0, [pc, #212]	; (80015c4 <__aeabi_dmul+0x4dc>)
 80014f0:	001c      	movs	r4, r3
 80014f2:	4450      	add	r0, sl
 80014f4:	0016      	movs	r6, r2
 80014f6:	4082      	lsls	r2, r0
 80014f8:	4084      	lsls	r4, r0
 80014fa:	40ee      	lsrs	r6, r5
 80014fc:	1e50      	subs	r0, r2, #1
 80014fe:	4182      	sbcs	r2, r0
 8001500:	4334      	orrs	r4, r6
 8001502:	4314      	orrs	r4, r2
 8001504:	40eb      	lsrs	r3, r5
 8001506:	0762      	lsls	r2, r4, #29
 8001508:	d009      	beq.n	800151e <__aeabi_dmul+0x436>
 800150a:	220f      	movs	r2, #15
 800150c:	4022      	ands	r2, r4
 800150e:	2a04      	cmp	r2, #4
 8001510:	d005      	beq.n	800151e <__aeabi_dmul+0x436>
 8001512:	0022      	movs	r2, r4
 8001514:	1d14      	adds	r4, r2, #4
 8001516:	4294      	cmp	r4, r2
 8001518:	4180      	sbcs	r0, r0
 800151a:	4240      	negs	r0, r0
 800151c:	181b      	adds	r3, r3, r0
 800151e:	021a      	lsls	r2, r3, #8
 8001520:	d53e      	bpl.n	80015a0 <__aeabi_dmul+0x4b8>
 8001522:	2301      	movs	r3, #1
 8001524:	2700      	movs	r7, #0
 8001526:	2600      	movs	r6, #0
 8001528:	e649      	b.n	80011be <__aeabi_dmul+0xd6>
 800152a:	2780      	movs	r7, #128	; 0x80
 800152c:	9b01      	ldr	r3, [sp, #4]
 800152e:	033f      	lsls	r7, r7, #12
 8001530:	431f      	orrs	r7, r3
 8001532:	033f      	lsls	r7, r7, #12
 8001534:	0b3f      	lsrs	r7, r7, #12
 8001536:	9400      	str	r4, [sp, #0]
 8001538:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <__aeabi_dmul+0x4d8>)
 800153a:	e640      	b.n	80011be <__aeabi_dmul+0xd6>
 800153c:	0003      	movs	r3, r0
 800153e:	465a      	mov	r2, fp
 8001540:	3b28      	subs	r3, #40	; 0x28
 8001542:	409a      	lsls	r2, r3
 8001544:	2600      	movs	r6, #0
 8001546:	9201      	str	r2, [sp, #4]
 8001548:	e66d      	b.n	8001226 <__aeabi_dmul+0x13e>
 800154a:	4658      	mov	r0, fp
 800154c:	f000 fbf2 	bl	8001d34 <__clzsi2>
 8001550:	3020      	adds	r0, #32
 8001552:	e657      	b.n	8001204 <__aeabi_dmul+0x11c>
 8001554:	0003      	movs	r3, r0
 8001556:	4652      	mov	r2, sl
 8001558:	3b28      	subs	r3, #40	; 0x28
 800155a:	409a      	lsls	r2, r3
 800155c:	0013      	movs	r3, r2
 800155e:	2200      	movs	r2, #0
 8001560:	e693      	b.n	800128a <__aeabi_dmul+0x1a2>
 8001562:	4650      	mov	r0, sl
 8001564:	f000 fbe6 	bl	8001d34 <__clzsi2>
 8001568:	3020      	adds	r0, #32
 800156a:	e67b      	b.n	8001264 <__aeabi_dmul+0x17c>
 800156c:	46ca      	mov	sl, r9
 800156e:	e750      	b.n	8001412 <__aeabi_dmul+0x32a>
 8001570:	201f      	movs	r0, #31
 8001572:	001e      	movs	r6, r3
 8001574:	4240      	negs	r0, r0
 8001576:	1b04      	subs	r4, r0, r4
 8001578:	40e6      	lsrs	r6, r4
 800157a:	2d20      	cmp	r5, #32
 800157c:	d003      	beq.n	8001586 <__aeabi_dmul+0x49e>
 800157e:	4c12      	ldr	r4, [pc, #72]	; (80015c8 <__aeabi_dmul+0x4e0>)
 8001580:	4454      	add	r4, sl
 8001582:	40a3      	lsls	r3, r4
 8001584:	431a      	orrs	r2, r3
 8001586:	1e50      	subs	r0, r2, #1
 8001588:	4182      	sbcs	r2, r0
 800158a:	4332      	orrs	r2, r6
 800158c:	2607      	movs	r6, #7
 800158e:	2700      	movs	r7, #0
 8001590:	4016      	ands	r6, r2
 8001592:	d009      	beq.n	80015a8 <__aeabi_dmul+0x4c0>
 8001594:	200f      	movs	r0, #15
 8001596:	2300      	movs	r3, #0
 8001598:	4010      	ands	r0, r2
 800159a:	0014      	movs	r4, r2
 800159c:	2804      	cmp	r0, #4
 800159e:	d1b9      	bne.n	8001514 <__aeabi_dmul+0x42c>
 80015a0:	0022      	movs	r2, r4
 80015a2:	075e      	lsls	r6, r3, #29
 80015a4:	025b      	lsls	r3, r3, #9
 80015a6:	0b1f      	lsrs	r7, r3, #12
 80015a8:	08d2      	lsrs	r2, r2, #3
 80015aa:	4316      	orrs	r6, r2
 80015ac:	2300      	movs	r3, #0
 80015ae:	e606      	b.n	80011be <__aeabi_dmul+0xd6>
 80015b0:	2780      	movs	r7, #128	; 0x80
 80015b2:	033f      	lsls	r7, r7, #12
 80015b4:	431f      	orrs	r7, r3
 80015b6:	033f      	lsls	r7, r7, #12
 80015b8:	0b3f      	lsrs	r7, r7, #12
 80015ba:	0016      	movs	r6, r2
 80015bc:	4b00      	ldr	r3, [pc, #0]	; (80015c0 <__aeabi_dmul+0x4d8>)
 80015be:	e5fe      	b.n	80011be <__aeabi_dmul+0xd6>
 80015c0:	000007ff 	.word	0x000007ff
 80015c4:	0000041e 	.word	0x0000041e
 80015c8:	0000043e 	.word	0x0000043e

080015cc <__aeabi_dsub>:
 80015cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ce:	4657      	mov	r7, sl
 80015d0:	464e      	mov	r6, r9
 80015d2:	4645      	mov	r5, r8
 80015d4:	46de      	mov	lr, fp
 80015d6:	000c      	movs	r4, r1
 80015d8:	0309      	lsls	r1, r1, #12
 80015da:	b5e0      	push	{r5, r6, r7, lr}
 80015dc:	0a49      	lsrs	r1, r1, #9
 80015de:	0f46      	lsrs	r6, r0, #29
 80015e0:	005f      	lsls	r7, r3, #1
 80015e2:	4331      	orrs	r1, r6
 80015e4:	031e      	lsls	r6, r3, #12
 80015e6:	0fdb      	lsrs	r3, r3, #31
 80015e8:	0a76      	lsrs	r6, r6, #9
 80015ea:	469b      	mov	fp, r3
 80015ec:	0f53      	lsrs	r3, r2, #29
 80015ee:	4333      	orrs	r3, r6
 80015f0:	4ec8      	ldr	r6, [pc, #800]	; (8001914 <__aeabi_dsub+0x348>)
 80015f2:	0065      	lsls	r5, r4, #1
 80015f4:	00c0      	lsls	r0, r0, #3
 80015f6:	0fe4      	lsrs	r4, r4, #31
 80015f8:	00d2      	lsls	r2, r2, #3
 80015fa:	0d6d      	lsrs	r5, r5, #21
 80015fc:	46a2      	mov	sl, r4
 80015fe:	4681      	mov	r9, r0
 8001600:	0d7f      	lsrs	r7, r7, #21
 8001602:	469c      	mov	ip, r3
 8001604:	4690      	mov	r8, r2
 8001606:	42b7      	cmp	r7, r6
 8001608:	d100      	bne.n	800160c <__aeabi_dsub+0x40>
 800160a:	e0b9      	b.n	8001780 <__aeabi_dsub+0x1b4>
 800160c:	465b      	mov	r3, fp
 800160e:	2601      	movs	r6, #1
 8001610:	4073      	eors	r3, r6
 8001612:	469b      	mov	fp, r3
 8001614:	1bee      	subs	r6, r5, r7
 8001616:	45a3      	cmp	fp, r4
 8001618:	d100      	bne.n	800161c <__aeabi_dsub+0x50>
 800161a:	e083      	b.n	8001724 <__aeabi_dsub+0x158>
 800161c:	2e00      	cmp	r6, #0
 800161e:	dd63      	ble.n	80016e8 <__aeabi_dsub+0x11c>
 8001620:	2f00      	cmp	r7, #0
 8001622:	d000      	beq.n	8001626 <__aeabi_dsub+0x5a>
 8001624:	e0b1      	b.n	800178a <__aeabi_dsub+0x1be>
 8001626:	4663      	mov	r3, ip
 8001628:	4313      	orrs	r3, r2
 800162a:	d100      	bne.n	800162e <__aeabi_dsub+0x62>
 800162c:	e123      	b.n	8001876 <__aeabi_dsub+0x2aa>
 800162e:	1e73      	subs	r3, r6, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d000      	beq.n	8001636 <__aeabi_dsub+0x6a>
 8001634:	e1ba      	b.n	80019ac <__aeabi_dsub+0x3e0>
 8001636:	1a86      	subs	r6, r0, r2
 8001638:	4663      	mov	r3, ip
 800163a:	42b0      	cmp	r0, r6
 800163c:	4180      	sbcs	r0, r0
 800163e:	2501      	movs	r5, #1
 8001640:	1ac9      	subs	r1, r1, r3
 8001642:	4240      	negs	r0, r0
 8001644:	1a09      	subs	r1, r1, r0
 8001646:	020b      	lsls	r3, r1, #8
 8001648:	d400      	bmi.n	800164c <__aeabi_dsub+0x80>
 800164a:	e147      	b.n	80018dc <__aeabi_dsub+0x310>
 800164c:	0249      	lsls	r1, r1, #9
 800164e:	0a4b      	lsrs	r3, r1, #9
 8001650:	4698      	mov	r8, r3
 8001652:	4643      	mov	r3, r8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d100      	bne.n	800165a <__aeabi_dsub+0x8e>
 8001658:	e189      	b.n	800196e <__aeabi_dsub+0x3a2>
 800165a:	4640      	mov	r0, r8
 800165c:	f000 fb6a 	bl	8001d34 <__clzsi2>
 8001660:	0003      	movs	r3, r0
 8001662:	3b08      	subs	r3, #8
 8001664:	2b1f      	cmp	r3, #31
 8001666:	dd00      	ble.n	800166a <__aeabi_dsub+0x9e>
 8001668:	e17c      	b.n	8001964 <__aeabi_dsub+0x398>
 800166a:	2220      	movs	r2, #32
 800166c:	0030      	movs	r0, r6
 800166e:	1ad2      	subs	r2, r2, r3
 8001670:	4641      	mov	r1, r8
 8001672:	40d0      	lsrs	r0, r2
 8001674:	4099      	lsls	r1, r3
 8001676:	0002      	movs	r2, r0
 8001678:	409e      	lsls	r6, r3
 800167a:	430a      	orrs	r2, r1
 800167c:	429d      	cmp	r5, r3
 800167e:	dd00      	ble.n	8001682 <__aeabi_dsub+0xb6>
 8001680:	e16a      	b.n	8001958 <__aeabi_dsub+0x38c>
 8001682:	1b5d      	subs	r5, r3, r5
 8001684:	1c6b      	adds	r3, r5, #1
 8001686:	2b1f      	cmp	r3, #31
 8001688:	dd00      	ble.n	800168c <__aeabi_dsub+0xc0>
 800168a:	e194      	b.n	80019b6 <__aeabi_dsub+0x3ea>
 800168c:	2120      	movs	r1, #32
 800168e:	0010      	movs	r0, r2
 8001690:	0035      	movs	r5, r6
 8001692:	1ac9      	subs	r1, r1, r3
 8001694:	408e      	lsls	r6, r1
 8001696:	40da      	lsrs	r2, r3
 8001698:	4088      	lsls	r0, r1
 800169a:	40dd      	lsrs	r5, r3
 800169c:	1e71      	subs	r1, r6, #1
 800169e:	418e      	sbcs	r6, r1
 80016a0:	0011      	movs	r1, r2
 80016a2:	2207      	movs	r2, #7
 80016a4:	4328      	orrs	r0, r5
 80016a6:	2500      	movs	r5, #0
 80016a8:	4306      	orrs	r6, r0
 80016aa:	4032      	ands	r2, r6
 80016ac:	2a00      	cmp	r2, #0
 80016ae:	d009      	beq.n	80016c4 <__aeabi_dsub+0xf8>
 80016b0:	230f      	movs	r3, #15
 80016b2:	4033      	ands	r3, r6
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d005      	beq.n	80016c4 <__aeabi_dsub+0xf8>
 80016b8:	1d33      	adds	r3, r6, #4
 80016ba:	42b3      	cmp	r3, r6
 80016bc:	41b6      	sbcs	r6, r6
 80016be:	4276      	negs	r6, r6
 80016c0:	1989      	adds	r1, r1, r6
 80016c2:	001e      	movs	r6, r3
 80016c4:	020b      	lsls	r3, r1, #8
 80016c6:	d400      	bmi.n	80016ca <__aeabi_dsub+0xfe>
 80016c8:	e23d      	b.n	8001b46 <__aeabi_dsub+0x57a>
 80016ca:	1c6a      	adds	r2, r5, #1
 80016cc:	4b91      	ldr	r3, [pc, #580]	; (8001914 <__aeabi_dsub+0x348>)
 80016ce:	0555      	lsls	r5, r2, #21
 80016d0:	0d6d      	lsrs	r5, r5, #21
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d100      	bne.n	80016d8 <__aeabi_dsub+0x10c>
 80016d6:	e119      	b.n	800190c <__aeabi_dsub+0x340>
 80016d8:	4a8f      	ldr	r2, [pc, #572]	; (8001918 <__aeabi_dsub+0x34c>)
 80016da:	08f6      	lsrs	r6, r6, #3
 80016dc:	400a      	ands	r2, r1
 80016de:	0757      	lsls	r7, r2, #29
 80016e0:	0252      	lsls	r2, r2, #9
 80016e2:	4337      	orrs	r7, r6
 80016e4:	0b12      	lsrs	r2, r2, #12
 80016e6:	e09b      	b.n	8001820 <__aeabi_dsub+0x254>
 80016e8:	2e00      	cmp	r6, #0
 80016ea:	d000      	beq.n	80016ee <__aeabi_dsub+0x122>
 80016ec:	e0c5      	b.n	800187a <__aeabi_dsub+0x2ae>
 80016ee:	1c6e      	adds	r6, r5, #1
 80016f0:	0576      	lsls	r6, r6, #21
 80016f2:	0d76      	lsrs	r6, r6, #21
 80016f4:	2e01      	cmp	r6, #1
 80016f6:	dc00      	bgt.n	80016fa <__aeabi_dsub+0x12e>
 80016f8:	e148      	b.n	800198c <__aeabi_dsub+0x3c0>
 80016fa:	4667      	mov	r7, ip
 80016fc:	1a86      	subs	r6, r0, r2
 80016fe:	1bcb      	subs	r3, r1, r7
 8001700:	42b0      	cmp	r0, r6
 8001702:	41bf      	sbcs	r7, r7
 8001704:	427f      	negs	r7, r7
 8001706:	46b8      	mov	r8, r7
 8001708:	001f      	movs	r7, r3
 800170a:	4643      	mov	r3, r8
 800170c:	1aff      	subs	r7, r7, r3
 800170e:	003b      	movs	r3, r7
 8001710:	46b8      	mov	r8, r7
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	d500      	bpl.n	8001718 <__aeabi_dsub+0x14c>
 8001716:	e15f      	b.n	80019d8 <__aeabi_dsub+0x40c>
 8001718:	4337      	orrs	r7, r6
 800171a:	d19a      	bne.n	8001652 <__aeabi_dsub+0x86>
 800171c:	2200      	movs	r2, #0
 800171e:	2400      	movs	r4, #0
 8001720:	2500      	movs	r5, #0
 8001722:	e079      	b.n	8001818 <__aeabi_dsub+0x24c>
 8001724:	2e00      	cmp	r6, #0
 8001726:	dc00      	bgt.n	800172a <__aeabi_dsub+0x15e>
 8001728:	e0fa      	b.n	8001920 <__aeabi_dsub+0x354>
 800172a:	2f00      	cmp	r7, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_dsub+0x164>
 800172e:	e08d      	b.n	800184c <__aeabi_dsub+0x280>
 8001730:	4b78      	ldr	r3, [pc, #480]	; (8001914 <__aeabi_dsub+0x348>)
 8001732:	429d      	cmp	r5, r3
 8001734:	d067      	beq.n	8001806 <__aeabi_dsub+0x23a>
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	4667      	mov	r7, ip
 800173a:	041b      	lsls	r3, r3, #16
 800173c:	431f      	orrs	r7, r3
 800173e:	46bc      	mov	ip, r7
 8001740:	2e38      	cmp	r6, #56	; 0x38
 8001742:	dc00      	bgt.n	8001746 <__aeabi_dsub+0x17a>
 8001744:	e152      	b.n	80019ec <__aeabi_dsub+0x420>
 8001746:	4663      	mov	r3, ip
 8001748:	4313      	orrs	r3, r2
 800174a:	1e5a      	subs	r2, r3, #1
 800174c:	4193      	sbcs	r3, r2
 800174e:	181e      	adds	r6, r3, r0
 8001750:	4286      	cmp	r6, r0
 8001752:	4180      	sbcs	r0, r0
 8001754:	4240      	negs	r0, r0
 8001756:	1809      	adds	r1, r1, r0
 8001758:	020b      	lsls	r3, r1, #8
 800175a:	d400      	bmi.n	800175e <__aeabi_dsub+0x192>
 800175c:	e0be      	b.n	80018dc <__aeabi_dsub+0x310>
 800175e:	4b6d      	ldr	r3, [pc, #436]	; (8001914 <__aeabi_dsub+0x348>)
 8001760:	3501      	adds	r5, #1
 8001762:	429d      	cmp	r5, r3
 8001764:	d100      	bne.n	8001768 <__aeabi_dsub+0x19c>
 8001766:	e0d2      	b.n	800190e <__aeabi_dsub+0x342>
 8001768:	4a6b      	ldr	r2, [pc, #428]	; (8001918 <__aeabi_dsub+0x34c>)
 800176a:	0873      	lsrs	r3, r6, #1
 800176c:	400a      	ands	r2, r1
 800176e:	2101      	movs	r1, #1
 8001770:	400e      	ands	r6, r1
 8001772:	431e      	orrs	r6, r3
 8001774:	0851      	lsrs	r1, r2, #1
 8001776:	07d3      	lsls	r3, r2, #31
 8001778:	2207      	movs	r2, #7
 800177a:	431e      	orrs	r6, r3
 800177c:	4032      	ands	r2, r6
 800177e:	e795      	b.n	80016ac <__aeabi_dsub+0xe0>
 8001780:	001e      	movs	r6, r3
 8001782:	4316      	orrs	r6, r2
 8001784:	d000      	beq.n	8001788 <__aeabi_dsub+0x1bc>
 8001786:	e745      	b.n	8001614 <__aeabi_dsub+0x48>
 8001788:	e740      	b.n	800160c <__aeabi_dsub+0x40>
 800178a:	4b62      	ldr	r3, [pc, #392]	; (8001914 <__aeabi_dsub+0x348>)
 800178c:	429d      	cmp	r5, r3
 800178e:	d03a      	beq.n	8001806 <__aeabi_dsub+0x23a>
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	4667      	mov	r7, ip
 8001794:	041b      	lsls	r3, r3, #16
 8001796:	431f      	orrs	r7, r3
 8001798:	46bc      	mov	ip, r7
 800179a:	2e38      	cmp	r6, #56	; 0x38
 800179c:	dd00      	ble.n	80017a0 <__aeabi_dsub+0x1d4>
 800179e:	e0eb      	b.n	8001978 <__aeabi_dsub+0x3ac>
 80017a0:	2e1f      	cmp	r6, #31
 80017a2:	dc00      	bgt.n	80017a6 <__aeabi_dsub+0x1da>
 80017a4:	e13a      	b.n	8001a1c <__aeabi_dsub+0x450>
 80017a6:	0033      	movs	r3, r6
 80017a8:	4667      	mov	r7, ip
 80017aa:	3b20      	subs	r3, #32
 80017ac:	40df      	lsrs	r7, r3
 80017ae:	003b      	movs	r3, r7
 80017b0:	2e20      	cmp	r6, #32
 80017b2:	d005      	beq.n	80017c0 <__aeabi_dsub+0x1f4>
 80017b4:	2740      	movs	r7, #64	; 0x40
 80017b6:	1bbf      	subs	r7, r7, r6
 80017b8:	4666      	mov	r6, ip
 80017ba:	40be      	lsls	r6, r7
 80017bc:	4332      	orrs	r2, r6
 80017be:	4690      	mov	r8, r2
 80017c0:	4646      	mov	r6, r8
 80017c2:	1e72      	subs	r2, r6, #1
 80017c4:	4196      	sbcs	r6, r2
 80017c6:	4333      	orrs	r3, r6
 80017c8:	e0da      	b.n	8001980 <__aeabi_dsub+0x3b4>
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d100      	bne.n	80017d0 <__aeabi_dsub+0x204>
 80017ce:	e214      	b.n	8001bfa <__aeabi_dsub+0x62e>
 80017d0:	4663      	mov	r3, ip
 80017d2:	4313      	orrs	r3, r2
 80017d4:	d100      	bne.n	80017d8 <__aeabi_dsub+0x20c>
 80017d6:	e168      	b.n	8001aaa <__aeabi_dsub+0x4de>
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	074e      	lsls	r6, r1, #29
 80017dc:	08c0      	lsrs	r0, r0, #3
 80017de:	08c9      	lsrs	r1, r1, #3
 80017e0:	031b      	lsls	r3, r3, #12
 80017e2:	4306      	orrs	r6, r0
 80017e4:	4219      	tst	r1, r3
 80017e6:	d008      	beq.n	80017fa <__aeabi_dsub+0x22e>
 80017e8:	4660      	mov	r0, ip
 80017ea:	08c0      	lsrs	r0, r0, #3
 80017ec:	4218      	tst	r0, r3
 80017ee:	d104      	bne.n	80017fa <__aeabi_dsub+0x22e>
 80017f0:	4663      	mov	r3, ip
 80017f2:	0001      	movs	r1, r0
 80017f4:	08d2      	lsrs	r2, r2, #3
 80017f6:	075e      	lsls	r6, r3, #29
 80017f8:	4316      	orrs	r6, r2
 80017fa:	00f3      	lsls	r3, r6, #3
 80017fc:	4699      	mov	r9, r3
 80017fe:	00c9      	lsls	r1, r1, #3
 8001800:	0f72      	lsrs	r2, r6, #29
 8001802:	4d44      	ldr	r5, [pc, #272]	; (8001914 <__aeabi_dsub+0x348>)
 8001804:	4311      	orrs	r1, r2
 8001806:	464b      	mov	r3, r9
 8001808:	08de      	lsrs	r6, r3, #3
 800180a:	4b42      	ldr	r3, [pc, #264]	; (8001914 <__aeabi_dsub+0x348>)
 800180c:	074f      	lsls	r7, r1, #29
 800180e:	4337      	orrs	r7, r6
 8001810:	08ca      	lsrs	r2, r1, #3
 8001812:	429d      	cmp	r5, r3
 8001814:	d100      	bne.n	8001818 <__aeabi_dsub+0x24c>
 8001816:	e06e      	b.n	80018f6 <__aeabi_dsub+0x32a>
 8001818:	0312      	lsls	r2, r2, #12
 800181a:	056d      	lsls	r5, r5, #21
 800181c:	0b12      	lsrs	r2, r2, #12
 800181e:	0d6d      	lsrs	r5, r5, #21
 8001820:	2100      	movs	r1, #0
 8001822:	0312      	lsls	r2, r2, #12
 8001824:	0b13      	lsrs	r3, r2, #12
 8001826:	0d0a      	lsrs	r2, r1, #20
 8001828:	0512      	lsls	r2, r2, #20
 800182a:	431a      	orrs	r2, r3
 800182c:	4b3b      	ldr	r3, [pc, #236]	; (800191c <__aeabi_dsub+0x350>)
 800182e:	052d      	lsls	r5, r5, #20
 8001830:	4013      	ands	r3, r2
 8001832:	432b      	orrs	r3, r5
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	07e4      	lsls	r4, r4, #31
 8001838:	085b      	lsrs	r3, r3, #1
 800183a:	4323      	orrs	r3, r4
 800183c:	0038      	movs	r0, r7
 800183e:	0019      	movs	r1, r3
 8001840:	bc3c      	pop	{r2, r3, r4, r5}
 8001842:	4690      	mov	r8, r2
 8001844:	4699      	mov	r9, r3
 8001846:	46a2      	mov	sl, r4
 8001848:	46ab      	mov	fp, r5
 800184a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800184c:	4663      	mov	r3, ip
 800184e:	4313      	orrs	r3, r2
 8001850:	d011      	beq.n	8001876 <__aeabi_dsub+0x2aa>
 8001852:	1e73      	subs	r3, r6, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d000      	beq.n	800185a <__aeabi_dsub+0x28e>
 8001858:	e107      	b.n	8001a6a <__aeabi_dsub+0x49e>
 800185a:	1886      	adds	r6, r0, r2
 800185c:	4286      	cmp	r6, r0
 800185e:	4180      	sbcs	r0, r0
 8001860:	4461      	add	r1, ip
 8001862:	4240      	negs	r0, r0
 8001864:	1809      	adds	r1, r1, r0
 8001866:	2501      	movs	r5, #1
 8001868:	020b      	lsls	r3, r1, #8
 800186a:	d537      	bpl.n	80018dc <__aeabi_dsub+0x310>
 800186c:	2502      	movs	r5, #2
 800186e:	e77b      	b.n	8001768 <__aeabi_dsub+0x19c>
 8001870:	003e      	movs	r6, r7
 8001872:	4661      	mov	r1, ip
 8001874:	4691      	mov	r9, r2
 8001876:	0035      	movs	r5, r6
 8001878:	e7c5      	b.n	8001806 <__aeabi_dsub+0x23a>
 800187a:	465c      	mov	r4, fp
 800187c:	2d00      	cmp	r5, #0
 800187e:	d000      	beq.n	8001882 <__aeabi_dsub+0x2b6>
 8001880:	e0e1      	b.n	8001a46 <__aeabi_dsub+0x47a>
 8001882:	000b      	movs	r3, r1
 8001884:	4303      	orrs	r3, r0
 8001886:	d0f3      	beq.n	8001870 <__aeabi_dsub+0x2a4>
 8001888:	1c73      	adds	r3, r6, #1
 800188a:	d100      	bne.n	800188e <__aeabi_dsub+0x2c2>
 800188c:	e1ac      	b.n	8001be8 <__aeabi_dsub+0x61c>
 800188e:	4b21      	ldr	r3, [pc, #132]	; (8001914 <__aeabi_dsub+0x348>)
 8001890:	429f      	cmp	r7, r3
 8001892:	d100      	bne.n	8001896 <__aeabi_dsub+0x2ca>
 8001894:	e13a      	b.n	8001b0c <__aeabi_dsub+0x540>
 8001896:	43f3      	mvns	r3, r6
 8001898:	2b38      	cmp	r3, #56	; 0x38
 800189a:	dd00      	ble.n	800189e <__aeabi_dsub+0x2d2>
 800189c:	e16f      	b.n	8001b7e <__aeabi_dsub+0x5b2>
 800189e:	2b1f      	cmp	r3, #31
 80018a0:	dd00      	ble.n	80018a4 <__aeabi_dsub+0x2d8>
 80018a2:	e18c      	b.n	8001bbe <__aeabi_dsub+0x5f2>
 80018a4:	2520      	movs	r5, #32
 80018a6:	000e      	movs	r6, r1
 80018a8:	1aed      	subs	r5, r5, r3
 80018aa:	40ae      	lsls	r6, r5
 80018ac:	46b0      	mov	r8, r6
 80018ae:	0006      	movs	r6, r0
 80018b0:	46aa      	mov	sl, r5
 80018b2:	40de      	lsrs	r6, r3
 80018b4:	4645      	mov	r5, r8
 80018b6:	4335      	orrs	r5, r6
 80018b8:	002e      	movs	r6, r5
 80018ba:	4655      	mov	r5, sl
 80018bc:	40d9      	lsrs	r1, r3
 80018be:	40a8      	lsls	r0, r5
 80018c0:	4663      	mov	r3, ip
 80018c2:	1e45      	subs	r5, r0, #1
 80018c4:	41a8      	sbcs	r0, r5
 80018c6:	1a5b      	subs	r3, r3, r1
 80018c8:	469c      	mov	ip, r3
 80018ca:	4330      	orrs	r0, r6
 80018cc:	1a16      	subs	r6, r2, r0
 80018ce:	42b2      	cmp	r2, r6
 80018d0:	4192      	sbcs	r2, r2
 80018d2:	4663      	mov	r3, ip
 80018d4:	4252      	negs	r2, r2
 80018d6:	1a99      	subs	r1, r3, r2
 80018d8:	003d      	movs	r5, r7
 80018da:	e6b4      	b.n	8001646 <__aeabi_dsub+0x7a>
 80018dc:	2207      	movs	r2, #7
 80018de:	4032      	ands	r2, r6
 80018e0:	2a00      	cmp	r2, #0
 80018e2:	d000      	beq.n	80018e6 <__aeabi_dsub+0x31a>
 80018e4:	e6e4      	b.n	80016b0 <__aeabi_dsub+0xe4>
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <__aeabi_dsub+0x348>)
 80018e8:	08f6      	lsrs	r6, r6, #3
 80018ea:	074f      	lsls	r7, r1, #29
 80018ec:	4337      	orrs	r7, r6
 80018ee:	08ca      	lsrs	r2, r1, #3
 80018f0:	429d      	cmp	r5, r3
 80018f2:	d000      	beq.n	80018f6 <__aeabi_dsub+0x32a>
 80018f4:	e790      	b.n	8001818 <__aeabi_dsub+0x24c>
 80018f6:	003b      	movs	r3, r7
 80018f8:	4313      	orrs	r3, r2
 80018fa:	d100      	bne.n	80018fe <__aeabi_dsub+0x332>
 80018fc:	e1a6      	b.n	8001c4c <__aeabi_dsub+0x680>
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	031b      	lsls	r3, r3, #12
 8001902:	431a      	orrs	r2, r3
 8001904:	0312      	lsls	r2, r2, #12
 8001906:	0b12      	lsrs	r2, r2, #12
 8001908:	4d02      	ldr	r5, [pc, #8]	; (8001914 <__aeabi_dsub+0x348>)
 800190a:	e789      	b.n	8001820 <__aeabi_dsub+0x254>
 800190c:	0015      	movs	r5, r2
 800190e:	2200      	movs	r2, #0
 8001910:	2700      	movs	r7, #0
 8001912:	e785      	b.n	8001820 <__aeabi_dsub+0x254>
 8001914:	000007ff 	.word	0x000007ff
 8001918:	ff7fffff 	.word	0xff7fffff
 800191c:	800fffff 	.word	0x800fffff
 8001920:	2e00      	cmp	r6, #0
 8001922:	d000      	beq.n	8001926 <__aeabi_dsub+0x35a>
 8001924:	e0c7      	b.n	8001ab6 <__aeabi_dsub+0x4ea>
 8001926:	1c6b      	adds	r3, r5, #1
 8001928:	055e      	lsls	r6, r3, #21
 800192a:	0d76      	lsrs	r6, r6, #21
 800192c:	2e01      	cmp	r6, #1
 800192e:	dc00      	bgt.n	8001932 <__aeabi_dsub+0x366>
 8001930:	e0f0      	b.n	8001b14 <__aeabi_dsub+0x548>
 8001932:	4dc8      	ldr	r5, [pc, #800]	; (8001c54 <__aeabi_dsub+0x688>)
 8001934:	42ab      	cmp	r3, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dsub+0x36e>
 8001938:	e0b9      	b.n	8001aae <__aeabi_dsub+0x4e2>
 800193a:	1885      	adds	r5, r0, r2
 800193c:	000a      	movs	r2, r1
 800193e:	4285      	cmp	r5, r0
 8001940:	4189      	sbcs	r1, r1
 8001942:	4462      	add	r2, ip
 8001944:	4249      	negs	r1, r1
 8001946:	1851      	adds	r1, r2, r1
 8001948:	2207      	movs	r2, #7
 800194a:	07ce      	lsls	r6, r1, #31
 800194c:	086d      	lsrs	r5, r5, #1
 800194e:	432e      	orrs	r6, r5
 8001950:	0849      	lsrs	r1, r1, #1
 8001952:	4032      	ands	r2, r6
 8001954:	001d      	movs	r5, r3
 8001956:	e6a9      	b.n	80016ac <__aeabi_dsub+0xe0>
 8001958:	49bf      	ldr	r1, [pc, #764]	; (8001c58 <__aeabi_dsub+0x68c>)
 800195a:	1aed      	subs	r5, r5, r3
 800195c:	4011      	ands	r1, r2
 800195e:	2207      	movs	r2, #7
 8001960:	4032      	ands	r2, r6
 8001962:	e6a3      	b.n	80016ac <__aeabi_dsub+0xe0>
 8001964:	0032      	movs	r2, r6
 8001966:	3828      	subs	r0, #40	; 0x28
 8001968:	4082      	lsls	r2, r0
 800196a:	2600      	movs	r6, #0
 800196c:	e686      	b.n	800167c <__aeabi_dsub+0xb0>
 800196e:	0030      	movs	r0, r6
 8001970:	f000 f9e0 	bl	8001d34 <__clzsi2>
 8001974:	3020      	adds	r0, #32
 8001976:	e673      	b.n	8001660 <__aeabi_dsub+0x94>
 8001978:	4663      	mov	r3, ip
 800197a:	4313      	orrs	r3, r2
 800197c:	1e5a      	subs	r2, r3, #1
 800197e:	4193      	sbcs	r3, r2
 8001980:	1ac6      	subs	r6, r0, r3
 8001982:	42b0      	cmp	r0, r6
 8001984:	4180      	sbcs	r0, r0
 8001986:	4240      	negs	r0, r0
 8001988:	1a09      	subs	r1, r1, r0
 800198a:	e65c      	b.n	8001646 <__aeabi_dsub+0x7a>
 800198c:	000e      	movs	r6, r1
 800198e:	4667      	mov	r7, ip
 8001990:	4306      	orrs	r6, r0
 8001992:	4317      	orrs	r7, r2
 8001994:	2d00      	cmp	r5, #0
 8001996:	d15e      	bne.n	8001a56 <__aeabi_dsub+0x48a>
 8001998:	2e00      	cmp	r6, #0
 800199a:	d000      	beq.n	800199e <__aeabi_dsub+0x3d2>
 800199c:	e0f3      	b.n	8001b86 <__aeabi_dsub+0x5ba>
 800199e:	2f00      	cmp	r7, #0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_dsub+0x3d8>
 80019a2:	e11e      	b.n	8001be2 <__aeabi_dsub+0x616>
 80019a4:	465c      	mov	r4, fp
 80019a6:	4661      	mov	r1, ip
 80019a8:	4691      	mov	r9, r2
 80019aa:	e72c      	b.n	8001806 <__aeabi_dsub+0x23a>
 80019ac:	4fa9      	ldr	r7, [pc, #676]	; (8001c54 <__aeabi_dsub+0x688>)
 80019ae:	42be      	cmp	r6, r7
 80019b0:	d07b      	beq.n	8001aaa <__aeabi_dsub+0x4de>
 80019b2:	001e      	movs	r6, r3
 80019b4:	e6f1      	b.n	800179a <__aeabi_dsub+0x1ce>
 80019b6:	0010      	movs	r0, r2
 80019b8:	3d1f      	subs	r5, #31
 80019ba:	40e8      	lsrs	r0, r5
 80019bc:	2b20      	cmp	r3, #32
 80019be:	d003      	beq.n	80019c8 <__aeabi_dsub+0x3fc>
 80019c0:	2140      	movs	r1, #64	; 0x40
 80019c2:	1acb      	subs	r3, r1, r3
 80019c4:	409a      	lsls	r2, r3
 80019c6:	4316      	orrs	r6, r2
 80019c8:	1e73      	subs	r3, r6, #1
 80019ca:	419e      	sbcs	r6, r3
 80019cc:	2207      	movs	r2, #7
 80019ce:	4306      	orrs	r6, r0
 80019d0:	4032      	ands	r2, r6
 80019d2:	2100      	movs	r1, #0
 80019d4:	2500      	movs	r5, #0
 80019d6:	e783      	b.n	80018e0 <__aeabi_dsub+0x314>
 80019d8:	1a16      	subs	r6, r2, r0
 80019da:	4663      	mov	r3, ip
 80019dc:	42b2      	cmp	r2, r6
 80019de:	4180      	sbcs	r0, r0
 80019e0:	1a59      	subs	r1, r3, r1
 80019e2:	4240      	negs	r0, r0
 80019e4:	1a0b      	subs	r3, r1, r0
 80019e6:	4698      	mov	r8, r3
 80019e8:	465c      	mov	r4, fp
 80019ea:	e632      	b.n	8001652 <__aeabi_dsub+0x86>
 80019ec:	2e1f      	cmp	r6, #31
 80019ee:	dd00      	ble.n	80019f2 <__aeabi_dsub+0x426>
 80019f0:	e0ab      	b.n	8001b4a <__aeabi_dsub+0x57e>
 80019f2:	2720      	movs	r7, #32
 80019f4:	1bbb      	subs	r3, r7, r6
 80019f6:	469a      	mov	sl, r3
 80019f8:	4663      	mov	r3, ip
 80019fa:	4657      	mov	r7, sl
 80019fc:	40bb      	lsls	r3, r7
 80019fe:	4699      	mov	r9, r3
 8001a00:	0013      	movs	r3, r2
 8001a02:	464f      	mov	r7, r9
 8001a04:	40f3      	lsrs	r3, r6
 8001a06:	431f      	orrs	r7, r3
 8001a08:	003b      	movs	r3, r7
 8001a0a:	4657      	mov	r7, sl
 8001a0c:	40ba      	lsls	r2, r7
 8001a0e:	1e57      	subs	r7, r2, #1
 8001a10:	41ba      	sbcs	r2, r7
 8001a12:	4313      	orrs	r3, r2
 8001a14:	4662      	mov	r2, ip
 8001a16:	40f2      	lsrs	r2, r6
 8001a18:	1889      	adds	r1, r1, r2
 8001a1a:	e698      	b.n	800174e <__aeabi_dsub+0x182>
 8001a1c:	2720      	movs	r7, #32
 8001a1e:	1bbb      	subs	r3, r7, r6
 8001a20:	469a      	mov	sl, r3
 8001a22:	4663      	mov	r3, ip
 8001a24:	4657      	mov	r7, sl
 8001a26:	40bb      	lsls	r3, r7
 8001a28:	4699      	mov	r9, r3
 8001a2a:	0013      	movs	r3, r2
 8001a2c:	464f      	mov	r7, r9
 8001a2e:	40f3      	lsrs	r3, r6
 8001a30:	431f      	orrs	r7, r3
 8001a32:	003b      	movs	r3, r7
 8001a34:	4657      	mov	r7, sl
 8001a36:	40ba      	lsls	r2, r7
 8001a38:	1e57      	subs	r7, r2, #1
 8001a3a:	41ba      	sbcs	r2, r7
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	4662      	mov	r2, ip
 8001a40:	40f2      	lsrs	r2, r6
 8001a42:	1a89      	subs	r1, r1, r2
 8001a44:	e79c      	b.n	8001980 <__aeabi_dsub+0x3b4>
 8001a46:	4b83      	ldr	r3, [pc, #524]	; (8001c54 <__aeabi_dsub+0x688>)
 8001a48:	429f      	cmp	r7, r3
 8001a4a:	d05f      	beq.n	8001b0c <__aeabi_dsub+0x540>
 8001a4c:	2580      	movs	r5, #128	; 0x80
 8001a4e:	042d      	lsls	r5, r5, #16
 8001a50:	4273      	negs	r3, r6
 8001a52:	4329      	orrs	r1, r5
 8001a54:	e720      	b.n	8001898 <__aeabi_dsub+0x2cc>
 8001a56:	2e00      	cmp	r6, #0
 8001a58:	d10c      	bne.n	8001a74 <__aeabi_dsub+0x4a8>
 8001a5a:	2f00      	cmp	r7, #0
 8001a5c:	d100      	bne.n	8001a60 <__aeabi_dsub+0x494>
 8001a5e:	e0d0      	b.n	8001c02 <__aeabi_dsub+0x636>
 8001a60:	465c      	mov	r4, fp
 8001a62:	4661      	mov	r1, ip
 8001a64:	4691      	mov	r9, r2
 8001a66:	4d7b      	ldr	r5, [pc, #492]	; (8001c54 <__aeabi_dsub+0x688>)
 8001a68:	e6cd      	b.n	8001806 <__aeabi_dsub+0x23a>
 8001a6a:	4f7a      	ldr	r7, [pc, #488]	; (8001c54 <__aeabi_dsub+0x688>)
 8001a6c:	42be      	cmp	r6, r7
 8001a6e:	d01c      	beq.n	8001aaa <__aeabi_dsub+0x4de>
 8001a70:	001e      	movs	r6, r3
 8001a72:	e665      	b.n	8001740 <__aeabi_dsub+0x174>
 8001a74:	2f00      	cmp	r7, #0
 8001a76:	d018      	beq.n	8001aaa <__aeabi_dsub+0x4de>
 8001a78:	08c0      	lsrs	r0, r0, #3
 8001a7a:	074e      	lsls	r6, r1, #29
 8001a7c:	4306      	orrs	r6, r0
 8001a7e:	2080      	movs	r0, #128	; 0x80
 8001a80:	08c9      	lsrs	r1, r1, #3
 8001a82:	0300      	lsls	r0, r0, #12
 8001a84:	4201      	tst	r1, r0
 8001a86:	d008      	beq.n	8001a9a <__aeabi_dsub+0x4ce>
 8001a88:	4663      	mov	r3, ip
 8001a8a:	08dc      	lsrs	r4, r3, #3
 8001a8c:	4204      	tst	r4, r0
 8001a8e:	d104      	bne.n	8001a9a <__aeabi_dsub+0x4ce>
 8001a90:	0021      	movs	r1, r4
 8001a92:	46da      	mov	sl, fp
 8001a94:	08d2      	lsrs	r2, r2, #3
 8001a96:	075e      	lsls	r6, r3, #29
 8001a98:	4316      	orrs	r6, r2
 8001a9a:	00f3      	lsls	r3, r6, #3
 8001a9c:	4699      	mov	r9, r3
 8001a9e:	2401      	movs	r4, #1
 8001aa0:	4653      	mov	r3, sl
 8001aa2:	00c9      	lsls	r1, r1, #3
 8001aa4:	0f72      	lsrs	r2, r6, #29
 8001aa6:	4311      	orrs	r1, r2
 8001aa8:	401c      	ands	r4, r3
 8001aaa:	4d6a      	ldr	r5, [pc, #424]	; (8001c54 <__aeabi_dsub+0x688>)
 8001aac:	e6ab      	b.n	8001806 <__aeabi_dsub+0x23a>
 8001aae:	001d      	movs	r5, r3
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2700      	movs	r7, #0
 8001ab4:	e6b4      	b.n	8001820 <__aeabi_dsub+0x254>
 8001ab6:	2d00      	cmp	r5, #0
 8001ab8:	d159      	bne.n	8001b6e <__aeabi_dsub+0x5a2>
 8001aba:	000b      	movs	r3, r1
 8001abc:	4303      	orrs	r3, r0
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x4f6>
 8001ac0:	e6d6      	b.n	8001870 <__aeabi_dsub+0x2a4>
 8001ac2:	1c73      	adds	r3, r6, #1
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_dsub+0x4fc>
 8001ac6:	e0b2      	b.n	8001c2e <__aeabi_dsub+0x662>
 8001ac8:	4b62      	ldr	r3, [pc, #392]	; (8001c54 <__aeabi_dsub+0x688>)
 8001aca:	429f      	cmp	r7, r3
 8001acc:	d01e      	beq.n	8001b0c <__aeabi_dsub+0x540>
 8001ace:	43f3      	mvns	r3, r6
 8001ad0:	2b38      	cmp	r3, #56	; 0x38
 8001ad2:	dc6f      	bgt.n	8001bb4 <__aeabi_dsub+0x5e8>
 8001ad4:	2b1f      	cmp	r3, #31
 8001ad6:	dd00      	ble.n	8001ada <__aeabi_dsub+0x50e>
 8001ad8:	e097      	b.n	8001c0a <__aeabi_dsub+0x63e>
 8001ada:	2520      	movs	r5, #32
 8001adc:	000e      	movs	r6, r1
 8001ade:	1aed      	subs	r5, r5, r3
 8001ae0:	40ae      	lsls	r6, r5
 8001ae2:	46b0      	mov	r8, r6
 8001ae4:	0006      	movs	r6, r0
 8001ae6:	46aa      	mov	sl, r5
 8001ae8:	40de      	lsrs	r6, r3
 8001aea:	4645      	mov	r5, r8
 8001aec:	4335      	orrs	r5, r6
 8001aee:	002e      	movs	r6, r5
 8001af0:	4655      	mov	r5, sl
 8001af2:	40a8      	lsls	r0, r5
 8001af4:	40d9      	lsrs	r1, r3
 8001af6:	1e45      	subs	r5, r0, #1
 8001af8:	41a8      	sbcs	r0, r5
 8001afa:	448c      	add	ip, r1
 8001afc:	4306      	orrs	r6, r0
 8001afe:	18b6      	adds	r6, r6, r2
 8001b00:	4296      	cmp	r6, r2
 8001b02:	4192      	sbcs	r2, r2
 8001b04:	4251      	negs	r1, r2
 8001b06:	4461      	add	r1, ip
 8001b08:	003d      	movs	r5, r7
 8001b0a:	e625      	b.n	8001758 <__aeabi_dsub+0x18c>
 8001b0c:	003d      	movs	r5, r7
 8001b0e:	4661      	mov	r1, ip
 8001b10:	4691      	mov	r9, r2
 8001b12:	e678      	b.n	8001806 <__aeabi_dsub+0x23a>
 8001b14:	000b      	movs	r3, r1
 8001b16:	4303      	orrs	r3, r0
 8001b18:	2d00      	cmp	r5, #0
 8001b1a:	d000      	beq.n	8001b1e <__aeabi_dsub+0x552>
 8001b1c:	e655      	b.n	80017ca <__aeabi_dsub+0x1fe>
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f5      	beq.n	8001b0e <__aeabi_dsub+0x542>
 8001b22:	4663      	mov	r3, ip
 8001b24:	4313      	orrs	r3, r2
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dsub+0x55e>
 8001b28:	e66d      	b.n	8001806 <__aeabi_dsub+0x23a>
 8001b2a:	1886      	adds	r6, r0, r2
 8001b2c:	4286      	cmp	r6, r0
 8001b2e:	4180      	sbcs	r0, r0
 8001b30:	4461      	add	r1, ip
 8001b32:	4240      	negs	r0, r0
 8001b34:	1809      	adds	r1, r1, r0
 8001b36:	2200      	movs	r2, #0
 8001b38:	020b      	lsls	r3, r1, #8
 8001b3a:	d400      	bmi.n	8001b3e <__aeabi_dsub+0x572>
 8001b3c:	e6d0      	b.n	80018e0 <__aeabi_dsub+0x314>
 8001b3e:	4b46      	ldr	r3, [pc, #280]	; (8001c58 <__aeabi_dsub+0x68c>)
 8001b40:	3501      	adds	r5, #1
 8001b42:	4019      	ands	r1, r3
 8001b44:	e5b2      	b.n	80016ac <__aeabi_dsub+0xe0>
 8001b46:	46b1      	mov	r9, r6
 8001b48:	e65d      	b.n	8001806 <__aeabi_dsub+0x23a>
 8001b4a:	0033      	movs	r3, r6
 8001b4c:	4667      	mov	r7, ip
 8001b4e:	3b20      	subs	r3, #32
 8001b50:	40df      	lsrs	r7, r3
 8001b52:	003b      	movs	r3, r7
 8001b54:	2e20      	cmp	r6, #32
 8001b56:	d005      	beq.n	8001b64 <__aeabi_dsub+0x598>
 8001b58:	2740      	movs	r7, #64	; 0x40
 8001b5a:	1bbf      	subs	r7, r7, r6
 8001b5c:	4666      	mov	r6, ip
 8001b5e:	40be      	lsls	r6, r7
 8001b60:	4332      	orrs	r2, r6
 8001b62:	4690      	mov	r8, r2
 8001b64:	4646      	mov	r6, r8
 8001b66:	1e72      	subs	r2, r6, #1
 8001b68:	4196      	sbcs	r6, r2
 8001b6a:	4333      	orrs	r3, r6
 8001b6c:	e5ef      	b.n	800174e <__aeabi_dsub+0x182>
 8001b6e:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <__aeabi_dsub+0x688>)
 8001b70:	429f      	cmp	r7, r3
 8001b72:	d0cb      	beq.n	8001b0c <__aeabi_dsub+0x540>
 8001b74:	2580      	movs	r5, #128	; 0x80
 8001b76:	042d      	lsls	r5, r5, #16
 8001b78:	4273      	negs	r3, r6
 8001b7a:	4329      	orrs	r1, r5
 8001b7c:	e7a8      	b.n	8001ad0 <__aeabi_dsub+0x504>
 8001b7e:	4308      	orrs	r0, r1
 8001b80:	1e41      	subs	r1, r0, #1
 8001b82:	4188      	sbcs	r0, r1
 8001b84:	e6a2      	b.n	80018cc <__aeabi_dsub+0x300>
 8001b86:	2f00      	cmp	r7, #0
 8001b88:	d100      	bne.n	8001b8c <__aeabi_dsub+0x5c0>
 8001b8a:	e63c      	b.n	8001806 <__aeabi_dsub+0x23a>
 8001b8c:	4663      	mov	r3, ip
 8001b8e:	1a86      	subs	r6, r0, r2
 8001b90:	1acf      	subs	r7, r1, r3
 8001b92:	42b0      	cmp	r0, r6
 8001b94:	419b      	sbcs	r3, r3
 8001b96:	425b      	negs	r3, r3
 8001b98:	1afb      	subs	r3, r7, r3
 8001b9a:	4698      	mov	r8, r3
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	d54e      	bpl.n	8001c3e <__aeabi_dsub+0x672>
 8001ba0:	1a16      	subs	r6, r2, r0
 8001ba2:	4663      	mov	r3, ip
 8001ba4:	42b2      	cmp	r2, r6
 8001ba6:	4192      	sbcs	r2, r2
 8001ba8:	1a59      	subs	r1, r3, r1
 8001baa:	4252      	negs	r2, r2
 8001bac:	1a89      	subs	r1, r1, r2
 8001bae:	465c      	mov	r4, fp
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	e57b      	b.n	80016ac <__aeabi_dsub+0xe0>
 8001bb4:	4301      	orrs	r1, r0
 8001bb6:	000e      	movs	r6, r1
 8001bb8:	1e71      	subs	r1, r6, #1
 8001bba:	418e      	sbcs	r6, r1
 8001bbc:	e79f      	b.n	8001afe <__aeabi_dsub+0x532>
 8001bbe:	001d      	movs	r5, r3
 8001bc0:	000e      	movs	r6, r1
 8001bc2:	3d20      	subs	r5, #32
 8001bc4:	40ee      	lsrs	r6, r5
 8001bc6:	46b0      	mov	r8, r6
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	d004      	beq.n	8001bd6 <__aeabi_dsub+0x60a>
 8001bcc:	2540      	movs	r5, #64	; 0x40
 8001bce:	1aeb      	subs	r3, r5, r3
 8001bd0:	4099      	lsls	r1, r3
 8001bd2:	4308      	orrs	r0, r1
 8001bd4:	4681      	mov	r9, r0
 8001bd6:	4648      	mov	r0, r9
 8001bd8:	4643      	mov	r3, r8
 8001bda:	1e41      	subs	r1, r0, #1
 8001bdc:	4188      	sbcs	r0, r1
 8001bde:	4318      	orrs	r0, r3
 8001be0:	e674      	b.n	80018cc <__aeabi_dsub+0x300>
 8001be2:	2200      	movs	r2, #0
 8001be4:	2400      	movs	r4, #0
 8001be6:	e617      	b.n	8001818 <__aeabi_dsub+0x24c>
 8001be8:	1a16      	subs	r6, r2, r0
 8001bea:	4663      	mov	r3, ip
 8001bec:	42b2      	cmp	r2, r6
 8001bee:	4192      	sbcs	r2, r2
 8001bf0:	1a59      	subs	r1, r3, r1
 8001bf2:	4252      	negs	r2, r2
 8001bf4:	1a89      	subs	r1, r1, r2
 8001bf6:	003d      	movs	r5, r7
 8001bf8:	e525      	b.n	8001646 <__aeabi_dsub+0x7a>
 8001bfa:	4661      	mov	r1, ip
 8001bfc:	4691      	mov	r9, r2
 8001bfe:	4d15      	ldr	r5, [pc, #84]	; (8001c54 <__aeabi_dsub+0x688>)
 8001c00:	e601      	b.n	8001806 <__aeabi_dsub+0x23a>
 8001c02:	2280      	movs	r2, #128	; 0x80
 8001c04:	2400      	movs	r4, #0
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	e679      	b.n	80018fe <__aeabi_dsub+0x332>
 8001c0a:	001d      	movs	r5, r3
 8001c0c:	000e      	movs	r6, r1
 8001c0e:	3d20      	subs	r5, #32
 8001c10:	40ee      	lsrs	r6, r5
 8001c12:	46b0      	mov	r8, r6
 8001c14:	2b20      	cmp	r3, #32
 8001c16:	d004      	beq.n	8001c22 <__aeabi_dsub+0x656>
 8001c18:	2540      	movs	r5, #64	; 0x40
 8001c1a:	1aeb      	subs	r3, r5, r3
 8001c1c:	4099      	lsls	r1, r3
 8001c1e:	4308      	orrs	r0, r1
 8001c20:	4681      	mov	r9, r0
 8001c22:	464e      	mov	r6, r9
 8001c24:	4643      	mov	r3, r8
 8001c26:	1e71      	subs	r1, r6, #1
 8001c28:	418e      	sbcs	r6, r1
 8001c2a:	431e      	orrs	r6, r3
 8001c2c:	e767      	b.n	8001afe <__aeabi_dsub+0x532>
 8001c2e:	1886      	adds	r6, r0, r2
 8001c30:	4296      	cmp	r6, r2
 8001c32:	419b      	sbcs	r3, r3
 8001c34:	4461      	add	r1, ip
 8001c36:	425b      	negs	r3, r3
 8001c38:	18c9      	adds	r1, r1, r3
 8001c3a:	003d      	movs	r5, r7
 8001c3c:	e58c      	b.n	8001758 <__aeabi_dsub+0x18c>
 8001c3e:	4647      	mov	r7, r8
 8001c40:	4337      	orrs	r7, r6
 8001c42:	d0ce      	beq.n	8001be2 <__aeabi_dsub+0x616>
 8001c44:	2207      	movs	r2, #7
 8001c46:	4641      	mov	r1, r8
 8001c48:	4032      	ands	r2, r6
 8001c4a:	e649      	b.n	80018e0 <__aeabi_dsub+0x314>
 8001c4c:	2700      	movs	r7, #0
 8001c4e:	003a      	movs	r2, r7
 8001c50:	e5e6      	b.n	8001820 <__aeabi_dsub+0x254>
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	000007ff 	.word	0x000007ff
 8001c58:	ff7fffff 	.word	0xff7fffff

08001c5c <__aeabi_i2d>:
 8001c5c:	b570      	push	{r4, r5, r6, lr}
 8001c5e:	2800      	cmp	r0, #0
 8001c60:	d02d      	beq.n	8001cbe <__aeabi_i2d+0x62>
 8001c62:	17c3      	asrs	r3, r0, #31
 8001c64:	18c5      	adds	r5, r0, r3
 8001c66:	405d      	eors	r5, r3
 8001c68:	0fc4      	lsrs	r4, r0, #31
 8001c6a:	0028      	movs	r0, r5
 8001c6c:	f000 f862 	bl	8001d34 <__clzsi2>
 8001c70:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <__aeabi_i2d+0x6c>)
 8001c72:	1a1b      	subs	r3, r3, r0
 8001c74:	055b      	lsls	r3, r3, #21
 8001c76:	0d5b      	lsrs	r3, r3, #21
 8001c78:	280a      	cmp	r0, #10
 8001c7a:	dd15      	ble.n	8001ca8 <__aeabi_i2d+0x4c>
 8001c7c:	380b      	subs	r0, #11
 8001c7e:	4085      	lsls	r5, r0
 8001c80:	2200      	movs	r2, #0
 8001c82:	032d      	lsls	r5, r5, #12
 8001c84:	0b2d      	lsrs	r5, r5, #12
 8001c86:	2100      	movs	r1, #0
 8001c88:	0010      	movs	r0, r2
 8001c8a:	032d      	lsls	r5, r5, #12
 8001c8c:	0d0a      	lsrs	r2, r1, #20
 8001c8e:	0b2d      	lsrs	r5, r5, #12
 8001c90:	0512      	lsls	r2, r2, #20
 8001c92:	432a      	orrs	r2, r5
 8001c94:	4d0d      	ldr	r5, [pc, #52]	; (8001ccc <__aeabi_i2d+0x70>)
 8001c96:	051b      	lsls	r3, r3, #20
 8001c98:	402a      	ands	r2, r5
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	07e4      	lsls	r4, r4, #31
 8001ca0:	085b      	lsrs	r3, r3, #1
 8001ca2:	4323      	orrs	r3, r4
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	bd70      	pop	{r4, r5, r6, pc}
 8001ca8:	0002      	movs	r2, r0
 8001caa:	0029      	movs	r1, r5
 8001cac:	3215      	adds	r2, #21
 8001cae:	4091      	lsls	r1, r2
 8001cb0:	000a      	movs	r2, r1
 8001cb2:	210b      	movs	r1, #11
 8001cb4:	1a08      	subs	r0, r1, r0
 8001cb6:	40c5      	lsrs	r5, r0
 8001cb8:	032d      	lsls	r5, r5, #12
 8001cba:	0b2d      	lsrs	r5, r5, #12
 8001cbc:	e7e3      	b.n	8001c86 <__aeabi_i2d+0x2a>
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	2500      	movs	r5, #0
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	e7de      	b.n	8001c86 <__aeabi_i2d+0x2a>
 8001cc8:	0000041e 	.word	0x0000041e
 8001ccc:	800fffff 	.word	0x800fffff

08001cd0 <__aeabi_ui2d>:
 8001cd0:	b510      	push	{r4, lr}
 8001cd2:	1e04      	subs	r4, r0, #0
 8001cd4:	d025      	beq.n	8001d22 <__aeabi_ui2d+0x52>
 8001cd6:	f000 f82d 	bl	8001d34 <__clzsi2>
 8001cda:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <__aeabi_ui2d+0x5c>)
 8001cdc:	1a1b      	subs	r3, r3, r0
 8001cde:	055b      	lsls	r3, r3, #21
 8001ce0:	0d5b      	lsrs	r3, r3, #21
 8001ce2:	280a      	cmp	r0, #10
 8001ce4:	dd12      	ble.n	8001d0c <__aeabi_ui2d+0x3c>
 8001ce6:	380b      	subs	r0, #11
 8001ce8:	4084      	lsls	r4, r0
 8001cea:	2200      	movs	r2, #0
 8001cec:	0324      	lsls	r4, r4, #12
 8001cee:	0b24      	lsrs	r4, r4, #12
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	0010      	movs	r0, r2
 8001cf4:	0324      	lsls	r4, r4, #12
 8001cf6:	0d0a      	lsrs	r2, r1, #20
 8001cf8:	0b24      	lsrs	r4, r4, #12
 8001cfa:	0512      	lsls	r2, r2, #20
 8001cfc:	4322      	orrs	r2, r4
 8001cfe:	4c0c      	ldr	r4, [pc, #48]	; (8001d30 <__aeabi_ui2d+0x60>)
 8001d00:	051b      	lsls	r3, r3, #20
 8001d02:	4022      	ands	r2, r4
 8001d04:	4313      	orrs	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	0859      	lsrs	r1, r3, #1
 8001d0a:	bd10      	pop	{r4, pc}
 8001d0c:	0002      	movs	r2, r0
 8001d0e:	0021      	movs	r1, r4
 8001d10:	3215      	adds	r2, #21
 8001d12:	4091      	lsls	r1, r2
 8001d14:	000a      	movs	r2, r1
 8001d16:	210b      	movs	r1, #11
 8001d18:	1a08      	subs	r0, r1, r0
 8001d1a:	40c4      	lsrs	r4, r0
 8001d1c:	0324      	lsls	r4, r4, #12
 8001d1e:	0b24      	lsrs	r4, r4, #12
 8001d20:	e7e6      	b.n	8001cf0 <__aeabi_ui2d+0x20>
 8001d22:	2300      	movs	r3, #0
 8001d24:	2400      	movs	r4, #0
 8001d26:	2200      	movs	r2, #0
 8001d28:	e7e2      	b.n	8001cf0 <__aeabi_ui2d+0x20>
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	0000041e 	.word	0x0000041e
 8001d30:	800fffff 	.word	0x800fffff

08001d34 <__clzsi2>:
 8001d34:	211c      	movs	r1, #28
 8001d36:	2301      	movs	r3, #1
 8001d38:	041b      	lsls	r3, r3, #16
 8001d3a:	4298      	cmp	r0, r3
 8001d3c:	d301      	bcc.n	8001d42 <__clzsi2+0xe>
 8001d3e:	0c00      	lsrs	r0, r0, #16
 8001d40:	3910      	subs	r1, #16
 8001d42:	0a1b      	lsrs	r3, r3, #8
 8001d44:	4298      	cmp	r0, r3
 8001d46:	d301      	bcc.n	8001d4c <__clzsi2+0x18>
 8001d48:	0a00      	lsrs	r0, r0, #8
 8001d4a:	3908      	subs	r1, #8
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	4298      	cmp	r0, r3
 8001d50:	d301      	bcc.n	8001d56 <__clzsi2+0x22>
 8001d52:	0900      	lsrs	r0, r0, #4
 8001d54:	3904      	subs	r1, #4
 8001d56:	a202      	add	r2, pc, #8	; (adr r2, 8001d60 <__clzsi2+0x2c>)
 8001d58:	5c10      	ldrb	r0, [r2, r0]
 8001d5a:	1840      	adds	r0, r0, r1
 8001d5c:	4770      	bx	lr
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	02020304 	.word	0x02020304
 8001d64:	01010101 	.word	0x01010101
	...

08001d70 <PDM_Init>:
 *
 * Info:
 * Runs before OS kernal starts to initialize
 * peripherals and other general setup
 */
void PDM_Init(void) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
    PDM_Device_t*   device;

    // MUST PUT DEVICES IN ORDER OF ADC CHANNEL NO. FROM LOWEST TO HIGHEST
    // so the current buffer value contains the correct value for each device
    pdm_devices[0] = test_device_1;
 8001d76:	4a26      	ldr	r2, [pc, #152]	; (8001e10 <PDM_Init+0xa0>)
 8001d78:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <PDM_Init+0xa4>)
 8001d7a:	0010      	movs	r0, r2
 8001d7c:	0019      	movs	r1, r3
 8001d7e:	2328      	movs	r3, #40	; 0x28
 8001d80:	001a      	movs	r2, r3
 8001d82:	f006 f867 	bl	8007e54 <memcpy>
    pdm_devices[1] = test_device_2;
 8001d86:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <PDM_Init+0xa0>)
 8001d88:	4a23      	ldr	r2, [pc, #140]	; (8001e18 <PDM_Init+0xa8>)
 8001d8a:	3328      	adds	r3, #40	; 0x28
 8001d8c:	0011      	movs	r1, r2
 8001d8e:	2228      	movs	r2, #40	; 0x28
 8001d90:	0018      	movs	r0, r3
 8001d92:	f006 f85f 	bl	8007e54 <memcpy>
    pdm_devices[2] = test_device_3;
 8001d96:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <PDM_Init+0xa0>)
 8001d98:	4a20      	ldr	r2, [pc, #128]	; (8001e1c <PDM_Init+0xac>)
 8001d9a:	3350      	adds	r3, #80	; 0x50
 8001d9c:	0011      	movs	r1, r2
 8001d9e:	2228      	movs	r2, #40	; 0x28
 8001da0:	0018      	movs	r0, r3
 8001da2:	f006 f857 	bl	8007e54 <memcpy>

    // Unsure about this auto calibration
    HAL_ADCEx_Calibration_Start(&hadc);		// start cal before starting adc
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <PDM_Init+0xb0>)
 8001da8:	0018      	movs	r0, r3
 8001daa:	f001 fc75 	bl	8003698 <HAL_ADCEx_Calibration_Start>

    // start timers so interrupt gives accurate time
    htim17.Instance->CNT = 0;
 8001dae:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <PDM_Init+0xb4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2200      	movs	r2, #0
 8001db4:	625a      	str	r2, [r3, #36]	; 0x24
    htim16.Instance->CNT = 0;
 8001db6:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <PDM_Init+0xb8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_TIM_Base_Start(&htim16);
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <PDM_Init+0xb8>)
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f003 f887 	bl	8004ed4 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim17);
 8001dc6:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <PDM_Init+0xb4>)
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f003 f883 	bl	8004ed4 <HAL_TIM_Base_Start>

    HAL_ADC_Start_DMA(&hadc, (uint32_t*) current_buffer, CURRENT_BUFFER_SIZE); // start first round of conversions
 8001dce:	4917      	ldr	r1, [pc, #92]	; (8001e2c <PDM_Init+0xbc>)
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <PDM_Init+0xb0>)
 8001dd2:	2209      	movs	r2, #9
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f001 f8a1 	bl	8002f1c <HAL_ADC_Start_DMA>

    // Enable Channels
    for (device = pdm_devices; device < pdm_devices + NUM_ADC_CHANNELS; device++) {
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <PDM_Init+0xa0>)
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	e00e      	b.n	8001dfe <PDM_Init+0x8e>
        if (device->state == NORMAL) {
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2220      	movs	r2, #32
 8001de4:	5c9b      	ldrb	r3, [r3, r2]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d106      	bne.n	8001df8 <PDM_Init+0x88>
            HAL_GPIO_WritePin(GPIO_CONTROL_PORT, device->gpio_control_pin, GPIO_PIN_SET);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	8a5b      	ldrh	r3, [r3, #18]
 8001dee:	4810      	ldr	r0, [pc, #64]	; (8001e30 <PDM_Init+0xc0>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	0019      	movs	r1, r3
 8001df4:	f002 f9e2 	bl	80041bc <HAL_GPIO_WritePin>
    for (device = pdm_devices; device < pdm_devices + NUM_ADC_CHANNELS; device++) {
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3328      	adds	r3, #40	; 0x28
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <PDM_Init+0xc4>)
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d3ec      	bcc.n	8001de0 <PDM_Init+0x70>
        }

    }

}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b002      	add	sp, #8
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	200000c8 	.word	0x200000c8
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000028 	.word	0x20000028
 8001e1c:	20000050 	.word	0x20000050
 8001e20:	20001b78 	.word	0x20001b78
 8001e24:	20001a40 	.word	0x20001a40
 8001e28:	20001bb8 	.word	0x20001bb8
 8001e2c:	200000a8 	.word	0x200000a8
 8001e30:	48000400 	.word	0x48000400
 8001e34:	20000140 	.word	0x20000140

08001e38 <Schedule_ADC>:
 * OS task that calculates the current overage
 * integral. Only runs when a new set of averages
 * has been calcuclated by the ADC callback,
 * 'HAL_ADC_ConvCpltCallback'
 */
void Schedule_ADC(void) {
 8001e38:	b5b0      	push	{r4, r5, r7, lr}
 8001e3a:	b08e      	sub	sp, #56	; 0x38
 8001e3c:	af00      	add	r7, sp, #0
    double          load_current;                           // in milliamps
    double          voltage;                                // in Volts
    PDM_Device_t*   device;

    while (1) {
        if (conv_cplt_flag) {
 8001e3e:	4b65      	ldr	r3, [pc, #404]	; (8001fd4 <Schedule_ADC+0x19c>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0fb      	beq.n	8001e3e <Schedule_ADC+0x6>
            conv_cplt_flag = 0; // reset flag before DMA start so sw wont clear flag after interrupt
 8001e46:	4b63      	ldr	r3, [pc, #396]	; (8001fd4 <Schedule_ADC+0x19c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]

            // save averaged (filtered) current data so DMA doesnt overwrite it
            for (i = 0, adc_val = averaged_buffer; i < NUM_ADC_CHANNELS; adc_val++, i++) {
 8001e4c:	232f      	movs	r3, #47	; 0x2f
 8001e4e:	2208      	movs	r2, #8
 8001e50:	4694      	mov	ip, r2
 8001e52:	44bc      	add	ip, r7
 8001e54:	4463      	add	r3, ip
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	4b5f      	ldr	r3, [pc, #380]	; (8001fd8 <Schedule_ADC+0x1a0>)
 8001e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e5e:	e013      	b.n	8001e88 <Schedule_ADC+0x50>
                temp_current_buffer[i] = *adc_val;
 8001e60:	202f      	movs	r0, #47	; 0x2f
 8001e62:	2408      	movs	r4, #8
 8001e64:	193b      	adds	r3, r7, r4
 8001e66:	181b      	adds	r3, r3, r0
 8001e68:	781a      	ldrb	r2, [r3, #0]
 8001e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6c:	8819      	ldrh	r1, [r3, #0]
 8001e6e:	193b      	adds	r3, r7, r4
 8001e70:	0052      	lsls	r2, r2, #1
 8001e72:	52d1      	strh	r1, [r2, r3]
            for (i = 0, adc_val = averaged_buffer; i < NUM_ADC_CHANNELS; adc_val++, i++) {
 8001e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e76:	3302      	adds	r3, #2
 8001e78:	633b      	str	r3, [r7, #48]	; 0x30
 8001e7a:	193b      	adds	r3, r7, r4
 8001e7c:	181b      	adds	r3, r3, r0
 8001e7e:	781a      	ldrb	r2, [r3, #0]
 8001e80:	193b      	adds	r3, r7, r4
 8001e82:	181b      	adds	r3, r3, r0
 8001e84:	3201      	adds	r2, #1
 8001e86:	701a      	strb	r2, [r3, #0]
 8001e88:	232f      	movs	r3, #47	; 0x2f
 8001e8a:	2208      	movs	r2, #8
 8001e8c:	4694      	mov	ip, r2
 8001e8e:	44bc      	add	ip, r7
 8001e90:	4463      	add	r3, ip
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d9e3      	bls.n	8001e60 <Schedule_ADC+0x28>
            }

            // timestamp now so DMA doesnt restart timer on interrupt
            timer_val = htim16.Instance->CNT + (CURRENT_BUFFER_SIZE * ADC_US_PER_SAMPLE); // adjust for ADC conversion time
 8001e98:	4b50      	ldr	r3, [pc, #320]	; (8001fdc <Schedule_ADC+0x1a4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	3309      	adds	r3, #9
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f7ff ff15 	bl	8001cd0 <__aeabi_ui2d>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	000c      	movs	r4, r1
 8001eaa:	623b      	str	r3, [r7, #32]
 8001eac:	627c      	str	r4, [r7, #36]	; 0x24


            HAL_ADC_Start_DMA(&hadc, (uint32_t*) current_buffer, CURRENT_BUFFER_SIZE);
 8001eae:	494c      	ldr	r1, [pc, #304]	; (8001fe0 <Schedule_ADC+0x1a8>)
 8001eb0:	4b4c      	ldr	r3, [pc, #304]	; (8001fe4 <Schedule_ADC+0x1ac>)
 8001eb2:	2209      	movs	r2, #9
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f001 f831 	bl	8002f1c <HAL_ADC_Start_DMA>

            // do math while ADC goes brrrrrr

            for (adc_val = temp_current_buffer, device = pdm_devices;
 8001eba:	2308      	movs	r3, #8
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8001ec0:	4b49      	ldr	r3, [pc, #292]	; (8001fe8 <Schedule_ADC+0x1b0>)
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ec4:	e080      	b.n	8001fc8 <Schedule_ADC+0x190>
                                                device < pdm_devices + NUM_ADC_CHANNELS; adc_val++, device++) {
                // Skip calculation of integral for special devices
                if (!(device->device_name == TEMP_SENSOR || device->device_name == SPECIAL_DEVICE)) {
 8001ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec8:	2221      	movs	r2, #33	; 0x21
 8001eca:	5c9b      	ldrb	r3, [r3, r2]
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	d100      	bne.n	8001ed2 <Schedule_ADC+0x9a>
 8001ed0:	e074      	b.n	8001fbc <Schedule_ADC+0x184>
 8001ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed4:	2221      	movs	r2, #33	; 0x21
 8001ed6:	5c9b      	ldrb	r3, [r3, r2]
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d06f      	beq.n	8001fbc <Schedule_ADC+0x184>
                    voltage = (ADC_REF_VOLTAGE * (*adc_val)) / MAX_12b_ADC_VAL;
 8001edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7ff febb 	bl	8001c5c <__aeabi_i2d>
 8001ee6:	4a41      	ldr	r2, [pc, #260]	; (8001fec <Schedule_ADC+0x1b4>)
 8001ee8:	4b41      	ldr	r3, [pc, #260]	; (8001ff0 <Schedule_ADC+0x1b8>)
 8001eea:	f7ff f8fd 	bl	80010e8 <__aeabi_dmul>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	000c      	movs	r4, r1
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	0021      	movs	r1, r4
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	4b3e      	ldr	r3, [pc, #248]	; (8001ff4 <Schedule_ADC+0x1bc>)
 8001efa:	f7fe fceb 	bl	80008d4 <__aeabi_ddiv>
 8001efe:	0003      	movs	r3, r0
 8001f00:	000c      	movs	r4, r1
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	61fc      	str	r4, [r7, #28]
                    load_current = ((voltage * device->device_fet_IL_IS_ratio) / device->channel_resistor_val) * MA_IN_A;
 8001f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f08:	8b1b      	ldrh	r3, [r3, #24]
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f7ff fea6 	bl	8001c5c <__aeabi_i2d>
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f7ff f8e8 	bl	80010e8 <__aeabi_dmul>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	000c      	movs	r4, r1
 8001f1c:	0025      	movs	r5, r4
 8001f1e:	001c      	movs	r4, r3
 8001f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	0018      	movs	r0, r3
 8001f26:	f7ff fed3 	bl	8001cd0 <__aeabi_ui2d>
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	000b      	movs	r3, r1
 8001f2e:	0020      	movs	r0, r4
 8001f30:	0029      	movs	r1, r5
 8001f32:	f7fe fccf 	bl	80008d4 <__aeabi_ddiv>
 8001f36:	0003      	movs	r3, r0
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	0021      	movs	r1, r4
 8001f3e:	2200      	movs	r2, #0
 8001f40:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <Schedule_ADC+0x1c0>)
 8001f42:	f7ff f8d1 	bl	80010e8 <__aeabi_dmul>
 8001f46:	0003      	movs	r3, r0
 8001f48:	000c      	movs	r4, r1
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	617c      	str	r4, [r7, #20]
                    device->channel_integral += (load_current - device->channel_setpoint) *  (timer_val / US_IN_S);
 8001f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f50:	689c      	ldr	r4, [r3, #8]
 8001f52:	68dd      	ldr	r5, [r3, #12]
 8001f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f56:	8a9b      	ldrh	r3, [r3, #20]
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f7ff fe7f 	bl	8001c5c <__aeabi_i2d>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	000b      	movs	r3, r1
 8001f62:	6938      	ldr	r0, [r7, #16]
 8001f64:	6979      	ldr	r1, [r7, #20]
 8001f66:	f7ff fb31 	bl	80015cc <__aeabi_dsub>
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	000b      	movs	r3, r1
 8001f6e:	603a      	str	r2, [r7, #0]
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <Schedule_ADC+0x1c4>)
 8001f76:	6a38      	ldr	r0, [r7, #32]
 8001f78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f7a:	f7fe fcab 	bl	80008d4 <__aeabi_ddiv>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	000b      	movs	r3, r1
 8001f82:	6838      	ldr	r0, [r7, #0]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	f7ff f8af 	bl	80010e8 <__aeabi_dmul>
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	000b      	movs	r3, r1
 8001f8e:	0020      	movs	r0, r4
 8001f90:	0029      	movs	r1, r5
 8001f92:	f7fe f983 	bl	800029c <__aeabi_dadd>
 8001f96:	0003      	movs	r3, r0
 8001f98:	000c      	movs	r4, r1
 8001f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f9c:	6093      	str	r3, [r2, #8]
 8001f9e:	60d4      	str	r4, [r2, #12]

                    if (device->channel_integral < 0) {
 8001fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa2:	6898      	ldr	r0, [r3, #8]
 8001fa4:	68d9      	ldr	r1, [r3, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f7fe f94f 	bl	800024c <__aeabi_dcmplt>
 8001fae:	1e03      	subs	r3, r0, #0
 8001fb0:	d004      	beq.n	8001fbc <Schedule_ADC+0x184>
                        device->channel_integral = 0;
 8001fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	2400      	movs	r4, #0
 8001fb8:	6093      	str	r3, [r2, #8]
 8001fba:	60d4      	str	r4, [r2, #12]
                                                device < pdm_devices + NUM_ADC_CHANNELS; adc_val++, device++) {
 8001fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbe:	3302      	adds	r3, #2
 8001fc0:	633b      	str	r3, [r7, #48]	; 0x30
 8001fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc4:	3328      	adds	r3, #40	; 0x28
 8001fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fc8:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <Schedule_ADC+0x1c8>)
            for (adc_val = temp_current_buffer, device = pdm_devices;
 8001fca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d200      	bcs.n	8001fd2 <Schedule_ADC+0x19a>
 8001fd0:	e779      	b.n	8001ec6 <Schedule_ADC+0x8e>
        if (conv_cplt_flag) {
 8001fd2:	e734      	b.n	8001e3e <Schedule_ADC+0x6>
 8001fd4:	200000a4 	.word	0x200000a4
 8001fd8:	200000bc 	.word	0x200000bc
 8001fdc:	20001bb8 	.word	0x20001bb8
 8001fe0:	200000a8 	.word	0x200000a8
 8001fe4:	20001b78 	.word	0x20001b78
 8001fe8:	200000c8 	.word	0x200000c8
 8001fec:	66666666 	.word	0x66666666
 8001ff0:	400a6666 	.word	0x400a6666
 8001ff4:	40b00000 	.word	0x40b00000
 8001ff8:	408f4000 	.word	0x408f4000
 8001ffc:	412e8480 	.word	0x412e8480
 8002000:	20000140 	.word	0x20000140

08002004 <Current_Control_Loop>:
 * Info:
 * OS task that monitors the state of each channel
 * and is responsible for stopping and restarting
 * each channel.
 */
void Current_Control_Loop(void) {
 8002004:	b5b0      	push	{r4, r5, r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
    U16           time_ref;
    U16           curr_time;
    U16           time_diff;
    PDM_Device_t* device;

    device = pdm_devices;
 800200a:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <Current_Control_Loop+0x130>)
 800200c:	60bb      	str	r3, [r7, #8]
    // Infinite loop cycles through NUM_ADC_CHANNELS state machines, one for each channel
    while (1) {
        // special device handling code
        if (device->device_name == TEMP_SENSOR) {
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2221      	movs	r2, #33	; 0x21
 8002012:	5c9b      	ldrb	r3, [r3, r2]
 8002014:	2b03      	cmp	r3, #3
 8002016:	d100      	bne.n	800201a <Current_Control_Loop+0x16>
 8002018:	e080      	b.n	800211c <Current_Control_Loop+0x118>
            ;
        }
        else if (device->device_name == SPECIAL_DEVICE)  {
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2221      	movs	r2, #33	; 0x21
 800201e:	5c9b      	ldrb	r3, [r3, r2]
 8002020:	2b04      	cmp	r3, #4
 8002022:	d100      	bne.n	8002026 <Current_Control_Loop+0x22>
 8002024:	e07a      	b.n	800211c <Current_Control_Loop+0x118>
            ;
        }
        // Regular overcurrent handling
        else {
            switch (device->state) {
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2220      	movs	r2, #32
 800202a:	5c9b      	ldrb	r3, [r3, r2]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d005      	beq.n	800203c <Current_Control_Loop+0x38>
 8002030:	2b02      	cmp	r3, #2
 8002032:	d100      	bne.n	8002036 <Current_Control_Loop+0x32>
 8002034:	e06f      	b.n	8002116 <Current_Control_Loop+0x112>
 8002036:	2b00      	cmp	r3, #0
 8002038:	d038      	beq.n	80020ac <Current_Control_Loop+0xa8>
 800203a:	e069      	b.n	8002110 <Current_Control_Loop+0x10c>
                case PERMANENT_OFF:
                    break;

                case RESTART_OFF:
                    curr_time = htim17.Instance->CNT;
 800203c:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <Current_Control_Loop+0x134>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002042:	1dbb      	adds	r3, r7, #6
 8002044:	801a      	strh	r2, [r3, #0]
                    time_ref = device->restart_timeout_ref; // assign to local so not looking up multiple times
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	8a12      	ldrh	r2, [r2, #16]
 800204c:	801a      	strh	r2, [r3, #0]
                    if (curr_time < time_ref) {
 800204e:	1dba      	adds	r2, r7, #6
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	8812      	ldrh	r2, [r2, #0]
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d208      	bcs.n	800206c <Current_Control_Loop+0x68>
                        time_diff = (MAX_16b_TIMER_VALUE - time_ref) + curr_time;
 800205a:	230e      	movs	r3, #14
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	1db9      	adds	r1, r7, #6
 8002060:	1d3a      	adds	r2, r7, #4
 8002062:	8809      	ldrh	r1, [r1, #0]
 8002064:	8812      	ldrh	r2, [r2, #0]
 8002066:	1a8a      	subs	r2, r1, r2
 8002068:	801a      	strh	r2, [r3, #0]
 800206a:	e007      	b.n	800207c <Current_Control_Loop+0x78>
                    } else {
                        time_diff = curr_time - time_ref;
 800206c:	230e      	movs	r3, #14
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	1db9      	adds	r1, r7, #6
 8002072:	1d3a      	adds	r2, r7, #4
 8002074:	8809      	ldrh	r1, [r1, #0]
 8002076:	8812      	ldrh	r2, [r2, #0]
 8002078:	1a8a      	subs	r2, r1, r2
 800207a:	801a      	strh	r2, [r3, #0]
                    }

                    if (time_diff >= device->channel_restart_timeout) {
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	885b      	ldrh	r3, [r3, #2]
 8002080:	220e      	movs	r2, #14
 8002082:	18ba      	adds	r2, r7, r2
 8002084:	8812      	ldrh	r2, [r2, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d347      	bcc.n	800211a <Current_Control_Loop+0x116>
                        // turn the channel back on
                        HAL_GPIO_WritePin(GPIO_CONTROL_PORT, device->gpio_control_pin, GPIO_PIN_SET);
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	8a5b      	ldrh	r3, [r3, #18]
 800208e:	482b      	ldr	r0, [pc, #172]	; (800213c <Current_Control_Loop+0x138>)
 8002090:	2201      	movs	r2, #1
 8002092:	0019      	movs	r1, r3
 8002094:	f002 f892 	bl	80041bc <HAL_GPIO_WritePin>
                        device->channel_integral = 0;
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	2300      	movs	r3, #0
 800209c:	2400      	movs	r4, #0
 800209e:	6093      	str	r3, [r2, #8]
 80020a0:	60d4      	str	r4, [r2, #12]
                        device->state = NORMAL;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2220      	movs	r2, #32
 80020a6:	2100      	movs	r1, #0
 80020a8:	5499      	strb	r1, [r3, r2]
                    }
                    break;
 80020aa:	e036      	b.n	800211a <Current_Control_Loop+0x116>

                case NORMAL:
                        if (device->channel_integral >= device->max_channel_integral ) {
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	689c      	ldr	r4, [r3, #8]
 80020b0:	68dd      	ldr	r5, [r3, #12]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	8adb      	ldrh	r3, [r3, #22]
 80020b6:	0018      	movs	r0, r3
 80020b8:	f7ff fdd0 	bl	8001c5c <__aeabi_i2d>
 80020bc:	0002      	movs	r2, r0
 80020be:	000b      	movs	r3, r1
 80020c0:	0020      	movs	r0, r4
 80020c2:	0029      	movs	r1, r5
 80020c4:	f7fe f8e0 	bl	8000288 <__aeabi_dcmpge>
 80020c8:	1e03      	subs	r3, r0, #0
 80020ca:	d100      	bne.n	80020ce <Current_Control_Loop+0xca>
                                device->state = RESTART_OFF;
                            } else {
                                device->state = PERMANENT_OFF;
                            }
                        }
                        break;
 80020cc:	e026      	b.n	800211c <Current_Control_Loop+0x118>
                            HAL_GPIO_WritePin(GPIO_CONTROL_PORT, device->gpio_control_pin, GPIO_PIN_RESET);
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	8a5b      	ldrh	r3, [r3, #18]
 80020d2:	481a      	ldr	r0, [pc, #104]	; (800213c <Current_Control_Loop+0x138>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	0019      	movs	r1, r3
 80020d8:	f002 f870 	bl	80041bc <HAL_GPIO_WritePin>
                            if (device->num_restart_attempts > 0) {
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d010      	beq.n	8002106 <Current_Control_Loop+0x102>
                                device->num_restart_attempts--;
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	701a      	strb	r2, [r3, #0]
                                device->restart_timeout_ref = htim17.Instance->CNT;
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <Current_Control_Loop+0x134>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	821a      	strh	r2, [r3, #16]
                                device->state = RESTART_OFF;
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2220      	movs	r2, #32
 8002100:	2101      	movs	r1, #1
 8002102:	5499      	strb	r1, [r3, r2]
                        break;
 8002104:	e00a      	b.n	800211c <Current_Control_Loop+0x118>
                                device->state = PERMANENT_OFF;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2220      	movs	r2, #32
 800210a:	2102      	movs	r1, #2
 800210c:	5499      	strb	r1, [r3, r2]
                        break;
 800210e:	e005      	b.n	800211c <Current_Control_Loop+0x118>

                default:
                    // Should never get here
                    Error_Handler();
 8002110:	f000 fb38 	bl	8002784 <Error_Handler>
                    break;
 8002114:	e002      	b.n	800211c <Current_Control_Loop+0x118>
                    break;
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	e000      	b.n	800211c <Current_Control_Loop+0x118>
                    break;
 800211a:	46c0      	nop			; (mov r8, r8)
            }
        }

        //Log_CAN_Messages();

        device++;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	3328      	adds	r3, #40	; 0x28
 8002120:	60bb      	str	r3, [r7, #8]
        if (device >= pdm_devices + NUM_ADC_CHANNELS) {
 8002122:	4b07      	ldr	r3, [pc, #28]	; (8002140 <Current_Control_Loop+0x13c>)
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	429a      	cmp	r2, r3
 8002128:	d200      	bcs.n	800212c <Current_Control_Loop+0x128>
 800212a:	e770      	b.n	800200e <Current_Control_Loop+0xa>
            device = pdm_devices;
 800212c:	4b01      	ldr	r3, [pc, #4]	; (8002134 <Current_Control_Loop+0x130>)
 800212e:	60bb      	str	r3, [r7, #8]
        if (device->device_name == TEMP_SENSOR) {
 8002130:	e76d      	b.n	800200e <Current_Control_Loop+0xa>
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	200000c8 	.word	0x200000c8
 8002138:	20001a40 	.word	0x20001a40
 800213c:	48000400 	.word	0x48000400
 8002140:	20000140 	.word	0x20000140

08002144 <HAL_ADC_ConvCpltCallback>:
 * This function resets timer 16, Stops the DMA, and calculates
 * the channel average adc value over 'NUM_SAMPLES_PER_CHANNEL' samples
 * it places the averages into the global 'averaged_buffer'
 *
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *adc_handle) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
    // Need to find out if the OS interrupt has higher priority than this ISR, dont think so though
    // If this interrupt priorty is higher dont worry. if not, then some wacky stuff might happen
    // vTaskSuspendAll();

    // reset timer
    htim16.Instance->CNT = 0;
 800214c:	4b2f      	ldr	r3, [pc, #188]	; (800220c <HAL_ADC_ConvCpltCallback+0xc8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2200      	movs	r2, #0
 8002152:	625a      	str	r2, [r3, #36]	; 0x24

    // Stop DMA to stop interrupts
    HAL_ADC_Stop_DMA(&hadc);
 8002154:	4b2e      	ldr	r3, [pc, #184]	; (8002210 <HAL_ADC_ConvCpltCallback+0xcc>)
 8002156:	0018      	movs	r0, r3
 8002158:	f000 ff62 	bl	8003020 <HAL_ADC_Stop_DMA>

    // 0 the average buffer
    for (current_ptr = averaged_buffer; current_ptr < averaged_buffer + NUM_ADC_CHANNELS; current_ptr++) {
 800215c:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <HAL_ADC_ConvCpltCallback+0xd0>)
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	e005      	b.n	800216e <HAL_ADC_ConvCpltCallback+0x2a>
        *current_ptr = 0;
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2200      	movs	r2, #0
 8002166:	801a      	strh	r2, [r3, #0]
    for (current_ptr = averaged_buffer; current_ptr < averaged_buffer + NUM_ADC_CHANNELS; current_ptr++) {
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	3302      	adds	r3, #2
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <HAL_ADC_ConvCpltCallback+0xd4>)
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	429a      	cmp	r2, r3
 8002174:	d3f5      	bcc.n	8002162 <HAL_ADC_ConvCpltCallback+0x1e>
    }

    // sum all samples into correct spot
    for (i = 0, current_ptr = current_buffer; current_ptr < current_buffer + CURRENT_BUFFER_SIZE; current_ptr++) {
 8002176:	230f      	movs	r3, #15
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
 800217e:	4b27      	ldr	r3, [pc, #156]	; (800221c <HAL_ADC_ConvCpltCallback+0xd8>)
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	e024      	b.n	80021ce <HAL_ADC_ConvCpltCallback+0x8a>
        averaged_buffer[i] += *current_ptr;
 8002184:	200f      	movs	r0, #15
 8002186:	183b      	adds	r3, r7, r0
 8002188:	781a      	ldrb	r2, [r3, #0]
 800218a:	4b22      	ldr	r3, [pc, #136]	; (8002214 <HAL_ADC_ConvCpltCallback+0xd0>)
 800218c:	0052      	lsls	r2, r2, #1
 800218e:	5ad1      	ldrh	r1, [r2, r3]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	183a      	adds	r2, r7, r0
 8002196:	7812      	ldrb	r2, [r2, #0]
 8002198:	18cb      	adds	r3, r1, r3
 800219a:	b299      	uxth	r1, r3
 800219c:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <HAL_ADC_ConvCpltCallback+0xd0>)
 800219e:	0052      	lsls	r2, r2, #1
 80021a0:	52d1      	strh	r1, [r2, r3]
        i++;
 80021a2:	183b      	adds	r3, r7, r0
 80021a4:	781a      	ldrb	r2, [r3, #0]
 80021a6:	183b      	adds	r3, r7, r0
 80021a8:	3201      	adds	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]
        if (i % NUM_SAMPLES_PER_CHANNEL == 0) {
 80021ac:	183b      	adds	r3, r7, r0
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2103      	movs	r1, #3
 80021b2:	0018      	movs	r0, r3
 80021b4:	f7fe f82e 	bl	8000214 <__aeabi_uidivmod>
 80021b8:	000b      	movs	r3, r1
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d103      	bne.n	80021c8 <HAL_ADC_ConvCpltCallback+0x84>
            i = 0;
 80021c0:	230f      	movs	r3, #15
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
    for (i = 0, current_ptr = current_buffer; current_ptr < current_buffer + CURRENT_BUFFER_SIZE; current_ptr++) {
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	3302      	adds	r3, #2
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	4b14      	ldr	r3, [pc, #80]	; (8002220 <HAL_ADC_ConvCpltCallback+0xdc>)
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d3d6      	bcc.n	8002184 <HAL_ADC_ConvCpltCallback+0x40>
        }
    }

    // reuse current_ptr to spin through and divide the summations
    for (current_ptr = averaged_buffer; current_ptr < averaged_buffer + NUM_ADC_CHANNELS; current_ptr++) {
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <HAL_ADC_ConvCpltCallback+0xd0>)
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	e00c      	b.n	80021f6 <HAL_ADC_ConvCpltCallback+0xb2>
        *current_ptr /= NUM_SAMPLES_PER_CHANNEL;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	2103      	movs	r1, #3
 80021e2:	0018      	movs	r0, r3
 80021e4:	f7fd ff90 	bl	8000108 <__udivsi3>
 80021e8:	0003      	movs	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	801a      	strh	r2, [r3, #0]
    for (current_ptr = averaged_buffer; current_ptr < averaged_buffer + NUM_ADC_CHANNELS; current_ptr++) {
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	3302      	adds	r3, #2
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	4b08      	ldr	r3, [pc, #32]	; (8002218 <HAL_ADC_ConvCpltCallback+0xd4>)
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d3ee      	bcc.n	80021dc <HAL_ADC_ConvCpltCallback+0x98>
    }

    conv_cplt_flag = 1;
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_ADC_ConvCpltCallback+0xe0>)
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]

    //xTaskResumeAll(); only call if vTaskSuspendAll() is called
}
 8002204:	46c0      	nop			; (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	b004      	add	sp, #16
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20001bb8 	.word	0x20001bb8
 8002210:	20001b78 	.word	0x20001b78
 8002214:	200000bc 	.word	0x200000bc
 8002218:	200000c2 	.word	0x200000c2
 800221c:	200000a8 	.word	0x200000a8
 8002220:	200000ba 	.word	0x200000ba
 8002224:	200000a4 	.word	0x200000a4

08002228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800222c:	f000 fce4 	bl	8002bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002230:	f000 f844 	bl	80022bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002234:	f000 f9e8 	bl	8002608 <MX_GPIO_Init>
  MX_DMA_Init();
 8002238:	f000 f9c8 	bl	80025cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800223c:	f000 f996 	bl	800256c <MX_USART2_UART_Init>
  MX_ADC_Init();
 8002240:	f000 f896 	bl	8002370 <MX_ADC_Init>
  MX_CAN_Init();
 8002244:	f000 f90a 	bl	800245c <MX_CAN_Init>
  MX_TIM16_Init();
 8002248:	f000 f93e 	bl	80024c8 <MX_TIM16_Init>
  MX_TIM17_Init();
 800224c:	f000 f964 	bl	8002518 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */



  // **** ALL CONFIG CALLS HERE***************************************
  PDM_Init();
 8002250:	f7ff fd8e 	bl	8001d70 <PDM_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002254:	f003 fbe0 	bl	8005a18 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Channel_control */
  Channel_controlHandle = osThreadNew(ADC_Channel_Control, NULL, &Channel_control_attributes);
 8002258:	4a0f      	ldr	r2, [pc, #60]	; (8002298 <main+0x70>)
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <main+0x74>)
 800225c:	2100      	movs	r1, #0
 800225e:	0018      	movs	r0, r3
 8002260:	f003 fc34 	bl	8005acc <osThreadNew>
 8002264:	0002      	movs	r2, r0
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <main+0x78>)
 8002268:	601a      	str	r2, [r3, #0]

  /* creation of CAN_TX_task */
  CAN_TX_taskHandle = osThreadNew(CAN_TX, NULL, &CAN_TX_task_attributes);
 800226a:	4a0e      	ldr	r2, [pc, #56]	; (80022a4 <main+0x7c>)
 800226c:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <main+0x80>)
 800226e:	2100      	movs	r1, #0
 8002270:	0018      	movs	r0, r3
 8002272:	f003 fc2b 	bl	8005acc <osThreadNew>
 8002276:	0002      	movs	r2, r0
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <main+0x84>)
 800227a:	601a      	str	r2, [r3, #0]

  /* creation of ADC_scheduler */
  ADC_schedulerHandle = osThreadNew(ADC_Schedule_loop, NULL, &ADC_scheduler_attributes);
 800227c:	4a0c      	ldr	r2, [pc, #48]	; (80022b0 <main+0x88>)
 800227e:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <main+0x8c>)
 8002280:	2100      	movs	r1, #0
 8002282:	0018      	movs	r0, r3
 8002284:	f003 fc22 	bl	8005acc <osThreadNew>
 8002288:	0002      	movs	r2, r0
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <main+0x90>)
 800228c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800228e:	f003 fbef 	bl	8005a70 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Error_Handler();
 8002292:	f000 fa77 	bl	8002784 <Error_Handler>
 8002296:	e7fc      	b.n	8002292 <main+0x6a>
 8002298:	08007f74 	.word	0x08007f74
 800229c:	0800272d 	.word	0x0800272d
 80022a0:	20001aa8 	.word	0x20001aa8
 80022a4:	08007f98 	.word	0x08007f98
 80022a8:	0800273f 	.word	0x0800273f
 80022ac:	20001aac 	.word	0x20001aac
 80022b0:	08007fbc 	.word	0x08007fbc
 80022b4:	0800274f 	.word	0x0800274f
 80022b8:	20001ab0 	.word	0x20001ab0

080022bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b099      	sub	sp, #100	; 0x64
 80022c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022c2:	242c      	movs	r4, #44	; 0x2c
 80022c4:	193b      	adds	r3, r7, r4
 80022c6:	0018      	movs	r0, r3
 80022c8:	2334      	movs	r3, #52	; 0x34
 80022ca:	001a      	movs	r2, r3
 80022cc:	2100      	movs	r1, #0
 80022ce:	f005 fdca 	bl	8007e66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022d2:	231c      	movs	r3, #28
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	0018      	movs	r0, r3
 80022d8:	2310      	movs	r3, #16
 80022da:	001a      	movs	r2, r3
 80022dc:	2100      	movs	r1, #0
 80022de:	f005 fdc2 	bl	8007e66 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022e2:	003b      	movs	r3, r7
 80022e4:	0018      	movs	r0, r3
 80022e6:	231c      	movs	r3, #28
 80022e8:	001a      	movs	r2, r3
 80022ea:	2100      	movs	r1, #0
 80022ec:	f005 fdbb 	bl	8007e66 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 80022f0:	0021      	movs	r1, r4
 80022f2:	187b      	adds	r3, r7, r1
 80022f4:	2230      	movs	r2, #48	; 0x30
 80022f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80022f8:	187b      	adds	r3, r7, r1
 80022fa:	2201      	movs	r2, #1
 80022fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80022fe:	187b      	adds	r3, r7, r1
 8002300:	2201      	movs	r2, #1
 8002302:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002304:	187b      	adds	r3, r7, r1
 8002306:	2210      	movs	r2, #16
 8002308:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800230a:	187b      	adds	r3, r7, r1
 800230c:	2200      	movs	r2, #0
 800230e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002310:	187b      	adds	r3, r7, r1
 8002312:	0018      	movs	r0, r3
 8002314:	f001 ff8a 	bl	800422c <HAL_RCC_OscConfig>
 8002318:	1e03      	subs	r3, r0, #0
 800231a:	d001      	beq.n	8002320 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800231c:	f000 fa32 	bl	8002784 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002320:	211c      	movs	r1, #28
 8002322:	187b      	adds	r3, r7, r1
 8002324:	2207      	movs	r2, #7
 8002326:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8002328:	187b      	adds	r3, r7, r1
 800232a:	2203      	movs	r2, #3
 800232c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800232e:	187b      	adds	r3, r7, r1
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002334:	187b      	adds	r3, r7, r1
 8002336:	2200      	movs	r2, #0
 8002338:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800233a:	187b      	adds	r3, r7, r1
 800233c:	2101      	movs	r1, #1
 800233e:	0018      	movs	r0, r3
 8002340:	f002 fafa 	bl	8004938 <HAL_RCC_ClockConfig>
 8002344:	1e03      	subs	r3, r0, #0
 8002346:	d001      	beq.n	800234c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002348:	f000 fa1c 	bl	8002784 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800234c:	003b      	movs	r3, r7
 800234e:	2202      	movs	r2, #2
 8002350:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002352:	003b      	movs	r3, r7
 8002354:	2200      	movs	r2, #0
 8002356:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002358:	003b      	movs	r3, r7
 800235a:	0018      	movs	r0, r3
 800235c:	f002 fc8e 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 8002360:	1e03      	subs	r3, r0, #0
 8002362:	d001      	beq.n	8002368 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002364:	f000 fa0e 	bl	8002784 <Error_Handler>
  }
}
 8002368:	46c0      	nop			; (mov r8, r8)
 800236a:	46bd      	mov	sp, r7
 800236c:	b019      	add	sp, #100	; 0x64
 800236e:	bd90      	pop	{r4, r7, pc}

08002370 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	0018      	movs	r0, r3
 800237a:	230c      	movs	r3, #12
 800237c:	001a      	movs	r2, r3
 800237e:	2100      	movs	r1, #0
 8002380:	f005 fd71 	bl	8007e66 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8002384:	4b33      	ldr	r3, [pc, #204]	; (8002454 <MX_ADC_Init+0xe4>)
 8002386:	4a34      	ldr	r2, [pc, #208]	; (8002458 <MX_ADC_Init+0xe8>)
 8002388:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800238a:	4b32      	ldr	r3, [pc, #200]	; (8002454 <MX_ADC_Init+0xe4>)
 800238c:	2200      	movs	r2, #0
 800238e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002390:	4b30      	ldr	r3, [pc, #192]	; (8002454 <MX_ADC_Init+0xe4>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002396:	4b2f      	ldr	r3, [pc, #188]	; (8002454 <MX_ADC_Init+0xe4>)
 8002398:	2200      	movs	r2, #0
 800239a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800239c:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <MX_ADC_Init+0xe4>)
 800239e:	2201      	movs	r2, #1
 80023a0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80023a2:	4b2c      	ldr	r3, [pc, #176]	; (8002454 <MX_ADC_Init+0xe4>)
 80023a4:	2208      	movs	r2, #8
 80023a6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80023a8:	4b2a      	ldr	r3, [pc, #168]	; (8002454 <MX_ADC_Init+0xe4>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80023ae:	4b29      	ldr	r3, [pc, #164]	; (8002454 <MX_ADC_Init+0xe4>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80023b4:	4b27      	ldr	r3, [pc, #156]	; (8002454 <MX_ADC_Init+0xe4>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80023ba:	4b26      	ldr	r3, [pc, #152]	; (8002454 <MX_ADC_Init+0xe4>)
 80023bc:	2200      	movs	r2, #0
 80023be:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023c0:	4b24      	ldr	r3, [pc, #144]	; (8002454 <MX_ADC_Init+0xe4>)
 80023c2:	22c2      	movs	r2, #194	; 0xc2
 80023c4:	32ff      	adds	r2, #255	; 0xff
 80023c6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023c8:	4b22      	ldr	r3, [pc, #136]	; (8002454 <MX_ADC_Init+0xe4>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80023ce:	4b21      	ldr	r3, [pc, #132]	; (8002454 <MX_ADC_Init+0xe4>)
 80023d0:	2224      	movs	r2, #36	; 0x24
 80023d2:	2101      	movs	r1, #1
 80023d4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80023d6:	4b1f      	ldr	r3, [pc, #124]	; (8002454 <MX_ADC_Init+0xe4>)
 80023d8:	2200      	movs	r2, #0
 80023da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80023dc:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <MX_ADC_Init+0xe4>)
 80023de:	0018      	movs	r0, r3
 80023e0:	f000 fc5c 	bl	8002c9c <HAL_ADC_Init>
 80023e4:	1e03      	subs	r3, r0, #0
 80023e6:	d001      	beq.n	80023ec <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80023e8:	f000 f9cc 	bl	8002784 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	2280      	movs	r2, #128	; 0x80
 80023f6:	0152      	lsls	r2, r2, #5
 80023f8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80023fa:	1d3b      	adds	r3, r7, #4
 80023fc:	2280      	movs	r2, #128	; 0x80
 80023fe:	0552      	lsls	r2, r2, #21
 8002400:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002402:	1d3a      	adds	r2, r7, #4
 8002404:	4b13      	ldr	r3, [pc, #76]	; (8002454 <MX_ADC_Init+0xe4>)
 8002406:	0011      	movs	r1, r2
 8002408:	0018      	movs	r0, r3
 800240a:	f000 fe87 	bl	800311c <HAL_ADC_ConfigChannel>
 800240e:	1e03      	subs	r3, r0, #0
 8002410:	d001      	beq.n	8002416 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002412:	f000 f9b7 	bl	8002784 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800241c:	1d3a      	adds	r2, r7, #4
 800241e:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <MX_ADC_Init+0xe4>)
 8002420:	0011      	movs	r1, r2
 8002422:	0018      	movs	r0, r3
 8002424:	f000 fe7a 	bl	800311c <HAL_ADC_ConfigChannel>
 8002428:	1e03      	subs	r3, r0, #0
 800242a:	d001      	beq.n	8002430 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 800242c:	f000 f9aa 	bl	8002784 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002430:	1d3b      	adds	r3, r7, #4
 8002432:	2204      	movs	r2, #4
 8002434:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002436:	1d3a      	adds	r2, r7, #4
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <MX_ADC_Init+0xe4>)
 800243a:	0011      	movs	r1, r2
 800243c:	0018      	movs	r0, r3
 800243e:	f000 fe6d 	bl	800311c <HAL_ADC_ConfigChannel>
 8002442:	1e03      	subs	r3, r0, #0
 8002444:	d001      	beq.n	800244a <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8002446:	f000 f99d 	bl	8002784 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	46bd      	mov	sp, r7
 800244e:	b004      	add	sp, #16
 8002450:	bd80      	pop	{r7, pc}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	20001b78 	.word	0x20001b78
 8002458:	40012400 	.word	0x40012400

0800245c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8002460:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <MX_CAN_Init+0x64>)
 8002462:	4a18      	ldr	r2, [pc, #96]	; (80024c4 <MX_CAN_Init+0x68>)
 8002464:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8002466:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <MX_CAN_Init+0x64>)
 8002468:	2206      	movs	r2, #6
 800246a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800246c:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <MX_CAN_Init+0x64>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <MX_CAN_Init+0x64>)
 8002474:	2200      	movs	r2, #0
 8002476:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <MX_CAN_Init+0x64>)
 800247a:	22a0      	movs	r2, #160	; 0xa0
 800247c:	02d2      	lsls	r2, r2, #11
 800247e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002480:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <MX_CAN_Init+0x64>)
 8002482:	2200      	movs	r2, #0
 8002484:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <MX_CAN_Init+0x64>)
 8002488:	2200      	movs	r2, #0
 800248a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <MX_CAN_Init+0x64>)
 800248e:	2200      	movs	r2, #0
 8002490:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002492:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <MX_CAN_Init+0x64>)
 8002494:	2200      	movs	r2, #0
 8002496:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <MX_CAN_Init+0x64>)
 800249a:	2200      	movs	r2, #0
 800249c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <MX_CAN_Init+0x64>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <MX_CAN_Init+0x64>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <MX_CAN_Init+0x64>)
 80024ac:	0018      	movs	r0, r3
 80024ae:	f001 f991 	bl	80037d4 <HAL_CAN_Init>
 80024b2:	1e03      	subs	r3, r0, #0
 80024b4:	d001      	beq.n	80024ba <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80024b6:	f000 f965 	bl	8002784 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20001a80 	.word	0x20001a80
 80024c4:	40006400 	.word	0x40006400

080024c8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <MX_TIM16_Init+0x44>)
 80024ce:	4a10      	ldr	r2, [pc, #64]	; (8002510 <MX_TIM16_Init+0x48>)
 80024d0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <MX_TIM16_Init+0x44>)
 80024d4:	2230      	movs	r2, #48	; 0x30
 80024d6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <MX_TIM16_Init+0x44>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <MX_TIM16_Init+0x44>)
 80024e0:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <MX_TIM16_Init+0x4c>)
 80024e2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <MX_TIM16_Init+0x44>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <MX_TIM16_Init+0x44>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <MX_TIM16_Init+0x44>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80024f6:	4b05      	ldr	r3, [pc, #20]	; (800250c <MX_TIM16_Init+0x44>)
 80024f8:	0018      	movs	r0, r3
 80024fa:	f002 fcbf 	bl	8004e7c <HAL_TIM_Base_Init>
 80024fe:	1e03      	subs	r3, r0, #0
 8002500:	d001      	beq.n	8002506 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8002502:	f000 f93f 	bl	8002784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20001bb8 	.word	0x20001bb8
 8002510:	40014400 	.word	0x40014400
 8002514:	0000ffff 	.word	0x0000ffff

08002518 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800251c:	4b0f      	ldr	r3, [pc, #60]	; (800255c <MX_TIM17_Init+0x44>)
 800251e:	4a10      	ldr	r2, [pc, #64]	; (8002560 <MX_TIM17_Init+0x48>)
 8002520:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48000;
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <MX_TIM17_Init+0x44>)
 8002524:	4a0f      	ldr	r2, [pc, #60]	; (8002564 <MX_TIM17_Init+0x4c>)
 8002526:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <MX_TIM17_Init+0x44>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <MX_TIM17_Init+0x44>)
 8002530:	4a0d      	ldr	r2, [pc, #52]	; (8002568 <MX_TIM17_Init+0x50>)
 8002532:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002534:	4b09      	ldr	r3, [pc, #36]	; (800255c <MX_TIM17_Init+0x44>)
 8002536:	2200      	movs	r2, #0
 8002538:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <MX_TIM17_Init+0x44>)
 800253c:	2200      	movs	r2, #0
 800253e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <MX_TIM17_Init+0x44>)
 8002542:	2200      	movs	r2, #0
 8002544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002546:	4b05      	ldr	r3, [pc, #20]	; (800255c <MX_TIM17_Init+0x44>)
 8002548:	0018      	movs	r0, r3
 800254a:	f002 fc97 	bl	8004e7c <HAL_TIM_Base_Init>
 800254e:	1e03      	subs	r3, r0, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8002552:	f000 f917 	bl	8002784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20001a40 	.word	0x20001a40
 8002560:	40014800 	.word	0x40014800
 8002564:	0000bb80 	.word	0x0000bb80
 8002568:	0000ffff 	.word	0x0000ffff

0800256c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <MX_USART2_UART_Init+0x58>)
 8002572:	4a15      	ldr	r2, [pc, #84]	; (80025c8 <MX_USART2_UART_Init+0x5c>)
 8002574:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002576:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <MX_USART2_UART_Init+0x58>)
 8002578:	2296      	movs	r2, #150	; 0x96
 800257a:	0212      	lsls	r2, r2, #8
 800257c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <MX_USART2_UART_Init+0x58>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002584:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <MX_USART2_UART_Init+0x58>)
 8002586:	2200      	movs	r2, #0
 8002588:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <MX_USART2_UART_Init+0x58>)
 800258c:	2200      	movs	r2, #0
 800258e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <MX_USART2_UART_Init+0x58>)
 8002592:	220c      	movs	r2, #12
 8002594:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002596:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <MX_USART2_UART_Init+0x58>)
 8002598:	2200      	movs	r2, #0
 800259a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <MX_USART2_UART_Init+0x58>)
 800259e:	2200      	movs	r2, #0
 80025a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <MX_USART2_UART_Init+0x58>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <MX_USART2_UART_Init+0x58>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <MX_USART2_UART_Init+0x58>)
 80025b0:	0018      	movs	r0, r3
 80025b2:	f002 fe99 	bl	80052e8 <HAL_UART_Init>
 80025b6:	1e03      	subs	r3, r0, #0
 80025b8:	d001      	beq.n	80025be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80025ba:	f000 f8e3 	bl	8002784 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20001ab4 	.word	0x20001ab4
 80025c8:	40004400 	.word	0x40004400

080025cc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <MX_DMA_Init+0x38>)
 80025d4:	695a      	ldr	r2, [r3, #20]
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <MX_DMA_Init+0x38>)
 80025d8:	2101      	movs	r1, #1
 80025da:	430a      	orrs	r2, r1
 80025dc:	615a      	str	r2, [r3, #20]
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <MX_DMA_Init+0x38>)
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	2201      	movs	r2, #1
 80025e4:	4013      	ands	r3, r2
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2103      	movs	r1, #3
 80025ee:	2009      	movs	r0, #9
 80025f0:	f001 fa76 	bl	8003ae0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80025f4:	2009      	movs	r0, #9
 80025f6:	f001 fa88 	bl	8003b0a <HAL_NVIC_EnableIRQ>

}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b002      	add	sp, #8
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	40021000 	.word	0x40021000

08002608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b08b      	sub	sp, #44	; 0x2c
 800260c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260e:	2414      	movs	r4, #20
 8002610:	193b      	adds	r3, r7, r4
 8002612:	0018      	movs	r0, r3
 8002614:	2314      	movs	r3, #20
 8002616:	001a      	movs	r2, r3
 8002618:	2100      	movs	r1, #0
 800261a:	f005 fc24 	bl	8007e66 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800261e:	4b3f      	ldr	r3, [pc, #252]	; (800271c <MX_GPIO_Init+0x114>)
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	4b3e      	ldr	r3, [pc, #248]	; (800271c <MX_GPIO_Init+0x114>)
 8002624:	2180      	movs	r1, #128	; 0x80
 8002626:	0309      	lsls	r1, r1, #12
 8002628:	430a      	orrs	r2, r1
 800262a:	615a      	str	r2, [r3, #20]
 800262c:	4b3b      	ldr	r3, [pc, #236]	; (800271c <MX_GPIO_Init+0x114>)
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	031b      	lsls	r3, r3, #12
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800263a:	4b38      	ldr	r3, [pc, #224]	; (800271c <MX_GPIO_Init+0x114>)
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	4b37      	ldr	r3, [pc, #220]	; (800271c <MX_GPIO_Init+0x114>)
 8002640:	2180      	movs	r1, #128	; 0x80
 8002642:	03c9      	lsls	r1, r1, #15
 8002644:	430a      	orrs	r2, r1
 8002646:	615a      	str	r2, [r3, #20]
 8002648:	4b34      	ldr	r3, [pc, #208]	; (800271c <MX_GPIO_Init+0x114>)
 800264a:	695a      	ldr	r2, [r3, #20]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	03db      	lsls	r3, r3, #15
 8002650:	4013      	ands	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002656:	4b31      	ldr	r3, [pc, #196]	; (800271c <MX_GPIO_Init+0x114>)
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	4b30      	ldr	r3, [pc, #192]	; (800271c <MX_GPIO_Init+0x114>)
 800265c:	2180      	movs	r1, #128	; 0x80
 800265e:	0289      	lsls	r1, r1, #10
 8002660:	430a      	orrs	r2, r1
 8002662:	615a      	str	r2, [r3, #20]
 8002664:	4b2d      	ldr	r3, [pc, #180]	; (800271c <MX_GPIO_Init+0x114>)
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	029b      	lsls	r3, r3, #10
 800266c:	4013      	ands	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002672:	4b2a      	ldr	r3, [pc, #168]	; (800271c <MX_GPIO_Init+0x114>)
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	4b29      	ldr	r3, [pc, #164]	; (800271c <MX_GPIO_Init+0x114>)
 8002678:	2180      	movs	r1, #128	; 0x80
 800267a:	02c9      	lsls	r1, r1, #11
 800267c:	430a      	orrs	r2, r1
 800267e:	615a      	str	r2, [r3, #20]
 8002680:	4b26      	ldr	r3, [pc, #152]	; (800271c <MX_GPIO_Init+0x114>)
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	02db      	lsls	r3, r3, #11
 8002688:	4013      	ands	r3, r2
 800268a:	607b      	str	r3, [r7, #4]
 800268c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800268e:	2390      	movs	r3, #144	; 0x90
 8002690:	05db      	lsls	r3, r3, #23
 8002692:	2200      	movs	r2, #0
 8002694:	2120      	movs	r1, #32
 8002696:	0018      	movs	r0, r3
 8002698:	f001 fd90 	bl	80041bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800269c:	4b20      	ldr	r3, [pc, #128]	; (8002720 <MX_GPIO_Init+0x118>)
 800269e:	2200      	movs	r2, #0
 80026a0:	2138      	movs	r1, #56	; 0x38
 80026a2:	0018      	movs	r0, r3
 80026a4:	f001 fd8a 	bl	80041bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80026a8:	193b      	adds	r3, r7, r4
 80026aa:	2280      	movs	r2, #128	; 0x80
 80026ac:	0192      	lsls	r2, r2, #6
 80026ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026b0:	193b      	adds	r3, r7, r4
 80026b2:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <MX_GPIO_Init+0x11c>)
 80026b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	193b      	adds	r3, r7, r4
 80026b8:	2200      	movs	r2, #0
 80026ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026bc:	193b      	adds	r3, r7, r4
 80026be:	4a1a      	ldr	r2, [pc, #104]	; (8002728 <MX_GPIO_Init+0x120>)
 80026c0:	0019      	movs	r1, r3
 80026c2:	0010      	movs	r0, r2
 80026c4:	f001 fc02 	bl	8003ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80026c8:	193b      	adds	r3, r7, r4
 80026ca:	2220      	movs	r2, #32
 80026cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ce:	193b      	adds	r3, r7, r4
 80026d0:	2201      	movs	r2, #1
 80026d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	193b      	adds	r3, r7, r4
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	193b      	adds	r3, r7, r4
 80026dc:	2200      	movs	r2, #0
 80026de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80026e0:	193a      	adds	r2, r7, r4
 80026e2:	2390      	movs	r3, #144	; 0x90
 80026e4:	05db      	lsls	r3, r3, #23
 80026e6:	0011      	movs	r1, r2
 80026e8:	0018      	movs	r0, r3
 80026ea:	f001 fbef 	bl	8003ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80026ee:	0021      	movs	r1, r4
 80026f0:	187b      	adds	r3, r7, r1
 80026f2:	2238      	movs	r2, #56	; 0x38
 80026f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f6:	187b      	adds	r3, r7, r1
 80026f8:	2201      	movs	r2, #1
 80026fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	187b      	adds	r3, r7, r1
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002702:	187b      	adds	r3, r7, r1
 8002704:	2200      	movs	r2, #0
 8002706:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002708:	187b      	adds	r3, r7, r1
 800270a:	4a05      	ldr	r2, [pc, #20]	; (8002720 <MX_GPIO_Init+0x118>)
 800270c:	0019      	movs	r1, r3
 800270e:	0010      	movs	r0, r2
 8002710:	f001 fbdc 	bl	8003ecc <HAL_GPIO_Init>

}
 8002714:	46c0      	nop			; (mov r8, r8)
 8002716:	46bd      	mov	sp, r7
 8002718:	b00b      	add	sp, #44	; 0x2c
 800271a:	bd90      	pop	{r4, r7, pc}
 800271c:	40021000 	.word	0x40021000
 8002720:	48000400 	.word	0x48000400
 8002724:	10210000 	.word	0x10210000
 8002728:	48000800 	.word	0x48000800

0800272c <ADC_Channel_Control>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_ADC_Channel_Control */
void ADC_Channel_Control(void *argument)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	Current_Control_Loop();
 8002734:	f7ff fc66 	bl	8002004 <Current_Control_Loop>
    Error_Handler();
 8002738:	f000 f824 	bl	8002784 <Error_Handler>
	Current_Control_Loop();
 800273c:	e7fa      	b.n	8002734 <ADC_Channel_Control+0x8>

0800273e <CAN_TX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_TX */
void CAN_TX(void *argument)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_TX */
  /* Infinite loop */
  for(;;)
  {
    //GO4 CAN TX TASK
    vTaskDelay(10);
 8002746:	200a      	movs	r0, #10
 8002748:	f004 f8e2 	bl	8006910 <vTaskDelay>
  {
 800274c:	e7fb      	b.n	8002746 <CAN_TX+0x8>

0800274e <ADC_Schedule_loop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADC_Schedule_loop */
void ADC_Schedule_loop(void *argument)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_Schedule_loop */
  /* Infinite loop */
  for(;;)
  {
    Schedule_ADC();
 8002756:	f7ff fb6f 	bl	8001e38 <Schedule_ADC>
    Error_Handler();
 800275a:	f000 f813 	bl	8002784 <Error_Handler>
    Schedule_ADC();
 800275e:	e7fa      	b.n	8002756 <ADC_Schedule_loop+0x8>

08002760 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a04      	ldr	r2, [pc, #16]	; (8002780 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d101      	bne.n	8002776 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002772:	f000 fa55 	bl	8002c20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	46bd      	mov	sp, r7
 800277a:	b002      	add	sp, #8
 800277c:	bd80      	pop	{r7, pc}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	40002000 	.word	0x40002000

08002784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	HAL_ADC_Stop_DMA(&hadc);
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <Error_Handler+0x34>)
 800278a:	0018      	movs	r0, r3
 800278c:	f000 fc48 	bl	8003020 <HAL_ADC_Stop_DMA>
	// Infinitely flash nucelo LD2 in event of an error
	while (1) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002790:	2390      	movs	r3, #144	; 0x90
 8002792:	05db      	lsls	r3, r3, #23
 8002794:	2120      	movs	r1, #32
 8002796:	0018      	movs	r0, r3
 8002798:	f001 fd2d 	bl	80041f6 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 800279c:	20c8      	movs	r0, #200	; 0xc8
 800279e:	f000 fa5b 	bl	8002c58 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80027a2:	2390      	movs	r3, #144	; 0x90
 80027a4:	05db      	lsls	r3, r3, #23
 80027a6:	2120      	movs	r1, #32
 80027a8:	0018      	movs	r0, r3
 80027aa:	f001 fd24 	bl	80041f6 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 80027ae:	20c8      	movs	r0, #200	; 0xc8
 80027b0:	f000 fa52 	bl	8002c58 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80027b4:	e7ec      	b.n	8002790 <Error_Handler+0xc>
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	20001b78 	.word	0x20001b78

080027bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_MspInit+0x50>)
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <HAL_MspInit+0x50>)
 80027c8:	2101      	movs	r1, #1
 80027ca:	430a      	orrs	r2, r1
 80027cc:	619a      	str	r2, [r3, #24]
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <HAL_MspInit+0x50>)
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2201      	movs	r2, #1
 80027d4:	4013      	ands	r3, r2
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	4b0c      	ldr	r3, [pc, #48]	; (800280c <HAL_MspInit+0x50>)
 80027dc:	69da      	ldr	r2, [r3, #28]
 80027de:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_MspInit+0x50>)
 80027e0:	2180      	movs	r1, #128	; 0x80
 80027e2:	0549      	lsls	r1, r1, #21
 80027e4:	430a      	orrs	r2, r1
 80027e6:	61da      	str	r2, [r3, #28]
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <HAL_MspInit+0x50>)
 80027ea:	69da      	ldr	r2, [r3, #28]
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	055b      	lsls	r3, r3, #21
 80027f0:	4013      	ands	r3, r2
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80027f6:	2302      	movs	r3, #2
 80027f8:	425b      	negs	r3, r3
 80027fa:	2200      	movs	r2, #0
 80027fc:	2103      	movs	r1, #3
 80027fe:	0018      	movs	r0, r3
 8002800:	f001 f96e 	bl	8003ae0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002804:	46c0      	nop			; (mov r8, r8)
 8002806:	46bd      	mov	sp, r7
 8002808:	b002      	add	sp, #8
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000

08002810 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	; 0x28
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002818:	2314      	movs	r3, #20
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	0018      	movs	r0, r3
 800281e:	2314      	movs	r3, #20
 8002820:	001a      	movs	r2, r3
 8002822:	2100      	movs	r1, #0
 8002824:	f005 fb1f 	bl	8007e66 <memset>
  if(hadc->Instance==ADC1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a2e      	ldr	r2, [pc, #184]	; (80028e8 <HAL_ADC_MspInit+0xd8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d155      	bne.n	80028de <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002832:	4b2e      	ldr	r3, [pc, #184]	; (80028ec <HAL_ADC_MspInit+0xdc>)
 8002834:	699a      	ldr	r2, [r3, #24]
 8002836:	4b2d      	ldr	r3, [pc, #180]	; (80028ec <HAL_ADC_MspInit+0xdc>)
 8002838:	2180      	movs	r1, #128	; 0x80
 800283a:	0089      	lsls	r1, r1, #2
 800283c:	430a      	orrs	r2, r1
 800283e:	619a      	str	r2, [r3, #24]
 8002840:	4b2a      	ldr	r3, [pc, #168]	; (80028ec <HAL_ADC_MspInit+0xdc>)
 8002842:	699a      	ldr	r2, [r3, #24]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284e:	4b27      	ldr	r3, [pc, #156]	; (80028ec <HAL_ADC_MspInit+0xdc>)
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	4b26      	ldr	r3, [pc, #152]	; (80028ec <HAL_ADC_MspInit+0xdc>)
 8002854:	2180      	movs	r1, #128	; 0x80
 8002856:	0289      	lsls	r1, r1, #10
 8002858:	430a      	orrs	r2, r1
 800285a:	615a      	str	r2, [r3, #20]
 800285c:	4b23      	ldr	r3, [pc, #140]	; (80028ec <HAL_ADC_MspInit+0xdc>)
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	029b      	lsls	r3, r3, #10
 8002864:	4013      	ands	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800286a:	2114      	movs	r1, #20
 800286c:	187b      	adds	r3, r7, r1
 800286e:	2213      	movs	r2, #19
 8002870:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002872:	187b      	adds	r3, r7, r1
 8002874:	2203      	movs	r2, #3
 8002876:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	187b      	adds	r3, r7, r1
 800287a:	2200      	movs	r2, #0
 800287c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287e:	187a      	adds	r2, r7, r1
 8002880:	2390      	movs	r3, #144	; 0x90
 8002882:	05db      	lsls	r3, r3, #23
 8002884:	0011      	movs	r1, r2
 8002886:	0018      	movs	r0, r3
 8002888:	f001 fb20 	bl	8003ecc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800288c:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <HAL_ADC_MspInit+0xe0>)
 800288e:	4a19      	ldr	r2, [pc, #100]	; (80028f4 <HAL_ADC_MspInit+0xe4>)
 8002890:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002892:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <HAL_ADC_MspInit+0xe0>)
 8002894:	2200      	movs	r2, #0
 8002896:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002898:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <HAL_ADC_MspInit+0xe0>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800289e:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <HAL_ADC_MspInit+0xe0>)
 80028a0:	2280      	movs	r2, #128	; 0x80
 80028a2:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_ADC_MspInit+0xe0>)
 80028a6:	2280      	movs	r2, #128	; 0x80
 80028a8:	0052      	lsls	r2, r2, #1
 80028aa:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028ac:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <HAL_ADC_MspInit+0xe0>)
 80028ae:	2280      	movs	r2, #128	; 0x80
 80028b0:	00d2      	lsls	r2, r2, #3
 80028b2:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80028b4:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <HAL_ADC_MspInit+0xe0>)
 80028b6:	2220      	movs	r2, #32
 80028b8:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <HAL_ADC_MspInit+0xe0>)
 80028bc:	22c0      	movs	r2, #192	; 0xc0
 80028be:	0192      	lsls	r2, r2, #6
 80028c0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80028c2:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_ADC_MspInit+0xe0>)
 80028c4:	0018      	movs	r0, r3
 80028c6:	f001 f931 	bl	8003b2c <HAL_DMA_Init>
 80028ca:	1e03      	subs	r3, r0, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80028ce:	f7ff ff59 	bl	8002784 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a06      	ldr	r2, [pc, #24]	; (80028f0 <HAL_ADC_MspInit+0xe0>)
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_ADC_MspInit+0xe0>)
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b00a      	add	sp, #40	; 0x28
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	40012400 	.word	0x40012400
 80028ec:	40021000 	.word	0x40021000
 80028f0:	20001b34 	.word	0x20001b34
 80028f4:	40020008 	.word	0x40020008

080028f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	; 0x28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	2314      	movs	r3, #20
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	0018      	movs	r0, r3
 8002906:	2314      	movs	r3, #20
 8002908:	001a      	movs	r2, r3
 800290a:	2100      	movs	r1, #0
 800290c:	f005 faab 	bl	8007e66 <memset>
  if(hcan->Instance==CAN)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a1d      	ldr	r2, [pc, #116]	; (800298c <HAL_CAN_MspInit+0x94>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d133      	bne.n	8002982 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800291a:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <HAL_CAN_MspInit+0x98>)
 800291c:	69da      	ldr	r2, [r3, #28]
 800291e:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <HAL_CAN_MspInit+0x98>)
 8002920:	2180      	movs	r1, #128	; 0x80
 8002922:	0489      	lsls	r1, r1, #18
 8002924:	430a      	orrs	r2, r1
 8002926:	61da      	str	r2, [r3, #28]
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_CAN_MspInit+0x98>)
 800292a:	69da      	ldr	r2, [r3, #28]
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	049b      	lsls	r3, r3, #18
 8002930:	4013      	ands	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002936:	4b16      	ldr	r3, [pc, #88]	; (8002990 <HAL_CAN_MspInit+0x98>)
 8002938:	695a      	ldr	r2, [r3, #20]
 800293a:	4b15      	ldr	r3, [pc, #84]	; (8002990 <HAL_CAN_MspInit+0x98>)
 800293c:	2180      	movs	r1, #128	; 0x80
 800293e:	0289      	lsls	r1, r1, #10
 8002940:	430a      	orrs	r2, r1
 8002942:	615a      	str	r2, [r3, #20]
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_CAN_MspInit+0x98>)
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	029b      	lsls	r3, r3, #10
 800294c:	4013      	ands	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002952:	2114      	movs	r1, #20
 8002954:	187b      	adds	r3, r7, r1
 8002956:	22c0      	movs	r2, #192	; 0xc0
 8002958:	0152      	lsls	r2, r2, #5
 800295a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295c:	187b      	adds	r3, r7, r1
 800295e:	2202      	movs	r2, #2
 8002960:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	187b      	adds	r3, r7, r1
 8002964:	2200      	movs	r2, #0
 8002966:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002968:	187b      	adds	r3, r7, r1
 800296a:	2203      	movs	r2, #3
 800296c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800296e:	187b      	adds	r3, r7, r1
 8002970:	2204      	movs	r2, #4
 8002972:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002974:	187a      	adds	r2, r7, r1
 8002976:	2390      	movs	r3, #144	; 0x90
 8002978:	05db      	lsls	r3, r3, #23
 800297a:	0011      	movs	r1, r2
 800297c:	0018      	movs	r0, r3
 800297e:	f001 faa5 	bl	8003ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	46bd      	mov	sp, r7
 8002986:	b00a      	add	sp, #40	; 0x28
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	40006400 	.word	0x40006400
 8002990:	40021000 	.word	0x40021000

08002994 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a14      	ldr	r2, [pc, #80]	; (80029f4 <HAL_TIM_Base_MspInit+0x60>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d10e      	bne.n	80029c4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80029a6:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <HAL_TIM_Base_MspInit+0x64>)
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <HAL_TIM_Base_MspInit+0x64>)
 80029ac:	2180      	movs	r1, #128	; 0x80
 80029ae:	0289      	lsls	r1, r1, #10
 80029b0:	430a      	orrs	r2, r1
 80029b2:	619a      	str	r2, [r3, #24]
 80029b4:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <HAL_TIM_Base_MspInit+0x64>)
 80029b6:	699a      	ldr	r2, [r3, #24]
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	029b      	lsls	r3, r3, #10
 80029bc:	4013      	ands	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80029c2:	e012      	b.n	80029ea <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM17)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0c      	ldr	r2, [pc, #48]	; (80029fc <HAL_TIM_Base_MspInit+0x68>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d10d      	bne.n	80029ea <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_TIM_Base_MspInit+0x64>)
 80029d0:	699a      	ldr	r2, [r3, #24]
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_TIM_Base_MspInit+0x64>)
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	02c9      	lsls	r1, r1, #11
 80029d8:	430a      	orrs	r2, r1
 80029da:	619a      	str	r2, [r3, #24]
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_TIM_Base_MspInit+0x64>)
 80029de:	699a      	ldr	r2, [r3, #24]
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	02db      	lsls	r3, r3, #11
 80029e4:	4013      	ands	r3, r2
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b004      	add	sp, #16
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	40014400 	.word	0x40014400
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40014800 	.word	0x40014800

08002a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	2314      	movs	r3, #20
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	2314      	movs	r3, #20
 8002a10:	001a      	movs	r2, r3
 8002a12:	2100      	movs	r1, #0
 8002a14:	f005 fa27 	bl	8007e66 <memset>
  if(huart->Instance==USART2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a1c      	ldr	r2, [pc, #112]	; (8002a90 <HAL_UART_MspInit+0x90>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d132      	bne.n	8002a88 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a22:	4b1c      	ldr	r3, [pc, #112]	; (8002a94 <HAL_UART_MspInit+0x94>)
 8002a24:	69da      	ldr	r2, [r3, #28]
 8002a26:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <HAL_UART_MspInit+0x94>)
 8002a28:	2180      	movs	r1, #128	; 0x80
 8002a2a:	0289      	lsls	r1, r1, #10
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	61da      	str	r2, [r3, #28]
 8002a30:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <HAL_UART_MspInit+0x94>)
 8002a32:	69da      	ldr	r2, [r3, #28]
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	029b      	lsls	r3, r3, #10
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <HAL_UART_MspInit+0x94>)
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <HAL_UART_MspInit+0x94>)
 8002a44:	2180      	movs	r1, #128	; 0x80
 8002a46:	0289      	lsls	r1, r1, #10
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	615a      	str	r2, [r3, #20]
 8002a4c:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <HAL_UART_MspInit+0x94>)
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	029b      	lsls	r3, r3, #10
 8002a54:	4013      	ands	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a5a:	2114      	movs	r1, #20
 8002a5c:	187b      	adds	r3, r7, r1
 8002a5e:	220c      	movs	r2, #12
 8002a60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a62:	187b      	adds	r3, r7, r1
 8002a64:	2202      	movs	r2, #2
 8002a66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	187b      	adds	r3, r7, r1
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	187b      	adds	r3, r7, r1
 8002a70:	2200      	movs	r2, #0
 8002a72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002a74:	187b      	adds	r3, r7, r1
 8002a76:	2201      	movs	r2, #1
 8002a78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7a:	187a      	adds	r2, r7, r1
 8002a7c:	2390      	movs	r3, #144	; 0x90
 8002a7e:	05db      	lsls	r3, r3, #23
 8002a80:	0011      	movs	r1, r2
 8002a82:	0018      	movs	r0, r3
 8002a84:	f001 fa22 	bl	8003ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b00a      	add	sp, #40	; 0x28
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40004400 	.word	0x40004400
 8002a94:	40021000 	.word	0x40021000

08002a98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08a      	sub	sp, #40	; 0x28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM14_IRQn, TickPriority ,0); 
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	0019      	movs	r1, r3
 8002aae:	2013      	movs	r0, #19
 8002ab0:	f001 f816 	bl	8003ae0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM14_IRQn); 
 8002ab4:	2013      	movs	r0, #19
 8002ab6:	f001 f828 	bl	8003b0a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002aba:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <HAL_InitTick+0xa8>)
 8002abc:	69da      	ldr	r2, [r3, #28]
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_InitTick+0xa8>)
 8002ac0:	2180      	movs	r1, #128	; 0x80
 8002ac2:	0049      	lsls	r1, r1, #1
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	61da      	str	r2, [r3, #28]
 8002ac8:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <HAL_InitTick+0xa8>)
 8002aca:	69da      	ldr	r2, [r3, #28]
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ad6:	230c      	movs	r3, #12
 8002ad8:	18fa      	adds	r2, r7, r3
 8002ada:	2310      	movs	r3, #16
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	0011      	movs	r1, r2
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f002 f8a1 	bl	8004c28 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ae6:	f002 f889 	bl	8004bfc <HAL_RCC_GetPCLK1Freq>
 8002aea:	0003      	movs	r3, r0
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	4914      	ldr	r1, [pc, #80]	; (8002b44 <HAL_InitTick+0xac>)
 8002af2:	0018      	movs	r0, r3
 8002af4:	f7fd fb08 	bl	8000108 <__udivsi3>
 8002af8:	0003      	movs	r3, r0
 8002afa:	3b01      	subs	r3, #1
 8002afc:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002afe:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <HAL_InitTick+0xb0>)
 8002b00:	4a12      	ldr	r2, [pc, #72]	; (8002b4c <HAL_InitTick+0xb4>)
 8002b02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8002b04:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <HAL_InitTick+0xb0>)
 8002b06:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <HAL_InitTick+0xb8>)
 8002b08:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8002b0a:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <HAL_InitTick+0xb0>)
 8002b0c:	6a3a      	ldr	r2, [r7, #32]
 8002b0e:	605a      	str	r2, [r3, #4]
  htim14.Init.ClockDivision = 0;
 8002b10:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <HAL_InitTick+0xb0>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b16:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <HAL_InitTick+0xb0>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <HAL_InitTick+0xb0>)
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f002 f9ac 	bl	8004e7c <HAL_TIM_Base_Init>
 8002b24:	1e03      	subs	r3, r0, #0
 8002b26:	d105      	bne.n	8002b34 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8002b28:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <HAL_InitTick+0xb0>)
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f002 f9f4 	bl	8004f18 <HAL_TIM_Base_Start_IT>
 8002b30:	0003      	movs	r3, r0
 8002b32:	e000      	b.n	8002b36 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
}
 8002b36:	0018      	movs	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b00a      	add	sp, #40	; 0x28
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	40021000 	.word	0x40021000
 8002b44:	000f4240 	.word	0x000f4240
 8002b48:	20001bf8 	.word	0x20001bf8
 8002b4c:	40002000 	.word	0x40002000
 8002b50:	000003e7 	.word	0x000003e7

08002b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 8002b62:	f7ff fe0f 	bl	8002784 <Error_Handler>
 8002b66:	e7fc      	b.n	8002b62 <HardFault_Handler+0x4>

08002b68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <DMA1_Channel1_IRQHandler+0x14>)
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f001 f8c2 	bl	8003cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b74:	46c0      	nop			; (mov r8, r8)
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	20001b34 	.word	0x20001b34

08002b80 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002b84:	4b03      	ldr	r3, [pc, #12]	; (8002b94 <TIM14_IRQHandler+0x14>)
 8002b86:	0018      	movs	r0, r3
 8002b88:	f002 f9e8 	bl	8004f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002b8c:	46c0      	nop			; (mov r8, r8)
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	20001bf8 	.word	0x20001bf8

08002b98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002b9c:	46c0      	nop			; (mov r8, r8)
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ba4:	480d      	ldr	r0, [pc, #52]	; (8002bdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ba6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ba8:	480d      	ldr	r0, [pc, #52]	; (8002be0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002baa:	490e      	ldr	r1, [pc, #56]	; (8002be4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bac:	4a0e      	ldr	r2, [pc, #56]	; (8002be8 <LoopForever+0xe>)
  movs r3, #0
 8002bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bb0:	e002      	b.n	8002bb8 <LoopCopyDataInit>

08002bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bb6:	3304      	adds	r3, #4

08002bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bbc:	d3f9      	bcc.n	8002bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bbe:	4a0b      	ldr	r2, [pc, #44]	; (8002bec <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bc0:	4c0b      	ldr	r4, [pc, #44]	; (8002bf0 <LoopForever+0x16>)
  movs r3, #0
 8002bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bc4:	e001      	b.n	8002bca <LoopFillZerobss>

08002bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bc8:	3204      	adds	r2, #4

08002bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bcc:	d3fb      	bcc.n	8002bc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002bce:	f7ff ffe3 	bl	8002b98 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002bd2:	f005 f91b 	bl	8007e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bd6:	f7ff fb27 	bl	8002228 <main>

08002bda <LoopForever>:

LoopForever:
    b LoopForever
 8002bda:	e7fe      	b.n	8002bda <LoopForever>
  ldr   r0, =_estack
 8002bdc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002be4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002be8:	08008028 	.word	0x08008028
  ldr r2, =_sbss
 8002bec:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002bf0:	20001c7c 	.word	0x20001c7c

08002bf4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bf4:	e7fe      	b.n	8002bf4 <ADC1_COMP_IRQHandler>
	...

08002bf8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bfc:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <HAL_Init+0x24>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_Init+0x24>)
 8002c02:	2110      	movs	r1, #16
 8002c04:	430a      	orrs	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7ff ff45 	bl	8002a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c0e:	f7ff fdd5 	bl	80027bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	0018      	movs	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	40022000 	.word	0x40022000

08002c20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <HAL_IncTick+0x1c>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	001a      	movs	r2, r3
 8002c2a:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_IncTick+0x20>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	18d2      	adds	r2, r2, r3
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <HAL_IncTick+0x20>)
 8002c32:	601a      	str	r2, [r3, #0]
}
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	2000007c 	.word	0x2000007c
 8002c40:	20001c38 	.word	0x20001c38

08002c44 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  return uwTick;
 8002c48:	4b02      	ldr	r3, [pc, #8]	; (8002c54 <HAL_GetTick+0x10>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	20001c38 	.word	0x20001c38

08002c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c60:	f7ff fff0 	bl	8002c44 <HAL_GetTick>
 8002c64:	0003      	movs	r3, r0
 8002c66:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	d005      	beq.n	8002c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_Delay+0x40>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	001a      	movs	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	189b      	adds	r3, r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	f7ff ffe0 	bl	8002c44 <HAL_GetTick>
 8002c84:	0002      	movs	r2, r0
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d8f7      	bhi.n	8002c80 <HAL_Delay+0x28>
  {
  }
}
 8002c90:	46c0      	nop			; (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b004      	add	sp, #16
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	2000007c 	.word	0x2000007c

08002c9c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca4:	230f      	movs	r3, #15
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e125      	b.n	8002f06 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10a      	bne.n	8002cd8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2234      	movs	r2, #52	; 0x34
 8002ccc:	2100      	movs	r1, #0
 8002cce:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f7ff fd9c 	bl	8002810 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	2210      	movs	r2, #16
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d000      	beq.n	8002ce4 <HAL_ADC_Init+0x48>
 8002ce2:	e103      	b.n	8002eec <HAL_ADC_Init+0x250>
 8002ce4:	230f      	movs	r3, #15
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d000      	beq.n	8002cf0 <HAL_ADC_Init+0x54>
 8002cee:	e0fd      	b.n	8002eec <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002cfa:	d000      	beq.n	8002cfe <HAL_ADC_Init+0x62>
 8002cfc:	e0f6      	b.n	8002eec <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d02:	4a83      	ldr	r2, [pc, #524]	; (8002f10 <HAL_ADC_Init+0x274>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	2202      	movs	r2, #2
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2203      	movs	r2, #3
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d112      	bne.n	8002d42 <HAL_ADC_Init+0xa6>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2201      	movs	r2, #1
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d009      	beq.n	8002d3e <HAL_ADC_Init+0xa2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	401a      	ands	r2, r3
 8002d36:	2380      	movs	r3, #128	; 0x80
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d101      	bne.n	8002d42 <HAL_ADC_Init+0xa6>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <HAL_ADC_Init+0xa8>
 8002d42:	2300      	movs	r3, #0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d116      	bne.n	8002d76 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2218      	movs	r2, #24
 8002d50:	4393      	bics	r3, r2
 8002d52:	0019      	movs	r1, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	0899      	lsrs	r1, r3, #2
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4964      	ldr	r1, [pc, #400]	; (8002f14 <HAL_ADC_Init+0x278>)
 8002d82:	400a      	ands	r2, r1
 8002d84:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	7e1b      	ldrb	r3, [r3, #24]
 8002d8a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	7e5b      	ldrb	r3, [r3, #25]
 8002d90:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d92:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	7e9b      	ldrb	r3, [r3, #26]
 8002d98:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002d9a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d002      	beq.n	8002daa <HAL_ADC_Init+0x10e>
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	015b      	lsls	r3, r3, #5
 8002da8:	e000      	b.n	8002dac <HAL_ADC_Init+0x110>
 8002daa:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002dac:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002db2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADC_Init+0x124>
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	e000      	b.n	8002dc2 <HAL_ADC_Init+0x126>
 8002dc0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002dc2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2124      	movs	r1, #36	; 0x24
 8002dc8:	5c5b      	ldrb	r3, [r3, r1]
 8002dca:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002dcc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	7edb      	ldrb	r3, [r3, #27]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d115      	bne.n	8002e08 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	7e9b      	ldrb	r3, [r3, #26]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d105      	bne.n	8002df0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2280      	movs	r2, #128	; 0x80
 8002de8:	0252      	lsls	r2, r2, #9
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	e00b      	b.n	8002e08 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df4:	2220      	movs	r2, #32
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e00:	2201      	movs	r2, #1
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69da      	ldr	r2, [r3, #28]
 8002e0c:	23c2      	movs	r3, #194	; 0xc2
 8002e0e:	33ff      	adds	r3, #255	; 0xff
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d007      	beq.n	8002e24 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68d9      	ldr	r1, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	055b      	lsls	r3, r3, #21
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d01b      	beq.n	8002e78 <HAL_ADC_Init+0x1dc>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d017      	beq.n	8002e78 <HAL_ADC_Init+0x1dc>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d013      	beq.n	8002e78 <HAL_ADC_Init+0x1dc>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d00f      	beq.n	8002e78 <HAL_ADC_Init+0x1dc>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d00b      	beq.n	8002e78 <HAL_ADC_Init+0x1dc>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	2b05      	cmp	r3, #5
 8002e66:	d007      	beq.n	8002e78 <HAL_ADC_Init+0x1dc>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	2b06      	cmp	r3, #6
 8002e6e:	d003      	beq.n	8002e78 <HAL_ADC_Init+0x1dc>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	2b07      	cmp	r3, #7
 8002e76:	d112      	bne.n	8002e9e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2107      	movs	r1, #7
 8002e84:	438a      	bics	r2, r1
 8002e86:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6959      	ldr	r1, [r3, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	2207      	movs	r2, #7
 8002e94:	401a      	ands	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4a1c      	ldr	r2, [pc, #112]	; (8002f18 <HAL_ADC_Init+0x27c>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d10b      	bne.n	8002ec6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb8:	2203      	movs	r2, #3
 8002eba:	4393      	bics	r3, r2
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ec4:	e01c      	b.n	8002f00 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eca:	2212      	movs	r2, #18
 8002ecc:	4393      	bics	r3, r2
 8002ece:	2210      	movs	r2, #16
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eda:	2201      	movs	r2, #1
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002ee2:	230f      	movs	r3, #15
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002eea:	e009      	b.n	8002f00 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	2210      	movs	r2, #16
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002ef8:	230f      	movs	r3, #15
 8002efa:	18fb      	adds	r3, r7, r3
 8002efc:	2201      	movs	r2, #1
 8002efe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f00:	230f      	movs	r3, #15
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	781b      	ldrb	r3, [r3, #0]
}
 8002f06:	0018      	movs	r0, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b004      	add	sp, #16
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	fffffefd 	.word	0xfffffefd
 8002f14:	fffe0219 	.word	0xfffe0219
 8002f18:	833fffe7 	.word	0x833fffe7

08002f1c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f28:	2317      	movs	r3, #23
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2204      	movs	r2, #4
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d15e      	bne.n	8002ffa <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2234      	movs	r2, #52	; 0x34
 8002f40:	5c9b      	ldrb	r3, [r3, r2]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_Start_DMA+0x2e>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e05e      	b.n	8003008 <HAL_ADC_Start_DMA+0xec>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2234      	movs	r2, #52	; 0x34
 8002f4e:	2101      	movs	r1, #1
 8002f50:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	7e5b      	ldrb	r3, [r3, #25]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d007      	beq.n	8002f6a <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002f5a:	2317      	movs	r3, #23
 8002f5c:	18fc      	adds	r4, r7, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	0018      	movs	r0, r3
 8002f62:	f000 f9e9 	bl	8003338 <ADC_Enable>
 8002f66:	0003      	movs	r3, r0
 8002f68:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f6a:	2317      	movs	r3, #23
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d146      	bne.n	8003002 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f78:	4a25      	ldr	r2, [pc, #148]	; (8003010 <HAL_ADC_Start_DMA+0xf4>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2280      	movs	r2, #128	; 0x80
 8002f7e:	0052      	lsls	r2, r2, #1
 8002f80:	431a      	orrs	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2234      	movs	r2, #52	; 0x34
 8002f90:	2100      	movs	r1, #0
 8002f92:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f98:	4a1e      	ldr	r2, [pc, #120]	; (8003014 <HAL_ADC_Start_DMA+0xf8>)
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	4a1d      	ldr	r2, [pc, #116]	; (8003018 <HAL_ADC_Start_DMA+0xfc>)
 8002fa2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	4a1c      	ldr	r2, [pc, #112]	; (800301c <HAL_ADC_Start_DMA+0x100>)
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	221c      	movs	r2, #28
 8002fb2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2110      	movs	r1, #16
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2101      	movs	r1, #1
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3340      	adds	r3, #64	; 0x40
 8002fde:	0019      	movs	r1, r3
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f000 fdea 	bl	8003bbc <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2104      	movs	r1, #4
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	e003      	b.n	8003002 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ffa:	2317      	movs	r3, #23
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	2202      	movs	r2, #2
 8003000:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003002:	2317      	movs	r3, #23
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	781b      	ldrb	r3, [r3, #0]
}
 8003008:	0018      	movs	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	b007      	add	sp, #28
 800300e:	bd90      	pop	{r4, r7, pc}
 8003010:	fffff0fe 	.word	0xfffff0fe
 8003014:	08003591 	.word	0x08003591
 8003018:	08003645 	.word	0x08003645
 800301c:	08003663 	.word	0x08003663

08003020 <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8003020:	b5b0      	push	{r4, r5, r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003028:	230f      	movs	r3, #15
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2234      	movs	r2, #52	; 0x34
 8003034:	5c9b      	ldrb	r3, [r3, r2]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_ADC_Stop_DMA+0x1e>
 800303a:	2302      	movs	r3, #2
 800303c:	e058      	b.n	80030f0 <HAL_ADC_Stop_DMA+0xd0>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2234      	movs	r2, #52	; 0x34
 8003042:	2101      	movs	r1, #1
 8003044:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003046:	250f      	movs	r5, #15
 8003048:	197c      	adds	r4, r7, r5
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	0018      	movs	r0, r3
 800304e:	f000 fa59 	bl	8003504 <ADC_ConversionStop>
 8003052:	0003      	movs	r3, r0
 8003054:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003056:	197b      	adds	r3, r7, r5
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d141      	bne.n	80030e2 <HAL_ADC_Stop_DMA+0xc2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2101      	movs	r1, #1
 800306a:	438a      	bics	r2, r1
 800306c:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	250f      	movs	r5, #15
 8003074:	197c      	adds	r4, r7, r5
 8003076:	0018      	movs	r0, r3
 8003078:	f000 fe06 	bl	8003c88 <HAL_DMA_Abort>
 800307c:	0003      	movs	r3, r0
 800307e:	7023      	strb	r3, [r4, #0]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 8003080:	197b      	adds	r3, r7, r5
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_ADC_Stop_DMA+0x74>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308c:	2240      	movs	r2, #64	; 0x40
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2110      	movs	r1, #16
 80030a0:	438a      	bics	r2, r1
 80030a2:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 80030a4:	230f      	movs	r3, #15
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d108      	bne.n	80030c0 <HAL_ADC_Stop_DMA+0xa0>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80030ae:	230f      	movs	r3, #15
 80030b0:	18fc      	adds	r4, r7, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	0018      	movs	r0, r3
 80030b6:	f000 f9bb 	bl	8003430 <ADC_Disable>
 80030ba:	0003      	movs	r3, r0
 80030bc:	7023      	strb	r3, [r4, #0]
 80030be:	e003      	b.n	80030c8 <HAL_ADC_Stop_DMA+0xa8>
    }
    else
    {
      ADC_Disable(hadc);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	0018      	movs	r0, r3
 80030c4:	f000 f9b4 	bl	8003430 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80030c8:	230f      	movs	r3, #15
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d107      	bne.n	80030e2 <HAL_ADC_Stop_DMA+0xc2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d6:	4a08      	ldr	r2, [pc, #32]	; (80030f8 <HAL_ADC_Stop_DMA+0xd8>)
 80030d8:	4013      	ands	r3, r2
 80030da:	2201      	movs	r2, #1
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2234      	movs	r2, #52	; 0x34
 80030e6:	2100      	movs	r1, #0
 80030e8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80030ea:	230f      	movs	r3, #15
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	781b      	ldrb	r3, [r3, #0]
}
 80030f0:	0018      	movs	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b004      	add	sp, #16
 80030f6:	bdb0      	pop	{r4, r5, r7, pc}
 80030f8:	fffffefe 	.word	0xfffffefe

080030fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003104:	46c0      	nop			; (mov r8, r8)
 8003106:	46bd      	mov	sp, r7
 8003108:	b002      	add	sp, #8
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003114:	46c0      	nop			; (mov r8, r8)
 8003116:	46bd      	mov	sp, r7
 8003118:	b002      	add	sp, #8
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003126:	230f      	movs	r3, #15
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	2200      	movs	r2, #0
 800312c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800312e:	2300      	movs	r3, #0
 8003130:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003136:	2380      	movs	r3, #128	; 0x80
 8003138:	055b      	lsls	r3, r3, #21
 800313a:	429a      	cmp	r2, r3
 800313c:	d011      	beq.n	8003162 <HAL_ADC_ConfigChannel+0x46>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	2b01      	cmp	r3, #1
 8003144:	d00d      	beq.n	8003162 <HAL_ADC_ConfigChannel+0x46>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314a:	2b02      	cmp	r3, #2
 800314c:	d009      	beq.n	8003162 <HAL_ADC_ConfigChannel+0x46>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	2b03      	cmp	r3, #3
 8003154:	d005      	beq.n	8003162 <HAL_ADC_ConfigChannel+0x46>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315a:	2b04      	cmp	r3, #4
 800315c:	d001      	beq.n	8003162 <HAL_ADC_ConfigChannel+0x46>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2234      	movs	r2, #52	; 0x34
 8003166:	5c9b      	ldrb	r3, [r3, r2]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x54>
 800316c:	2302      	movs	r3, #2
 800316e:	e0d0      	b.n	8003312 <HAL_ADC_ConfigChannel+0x1f6>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2234      	movs	r2, #52	; 0x34
 8003174:	2101      	movs	r1, #1
 8003176:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2204      	movs	r2, #4
 8003180:	4013      	ands	r3, r2
 8003182:	d000      	beq.n	8003186 <HAL_ADC_ConfigChannel+0x6a>
 8003184:	e0b4      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4a64      	ldr	r2, [pc, #400]	; (800331c <HAL_ADC_ConfigChannel+0x200>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d100      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x76>
 8003190:	e082      	b.n	8003298 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2201      	movs	r2, #1
 800319e:	409a      	lsls	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	055b      	lsls	r3, r3, #21
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d037      	beq.n	8003224 <HAL_ADC_ConfigChannel+0x108>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d033      	beq.n	8003224 <HAL_ADC_ConfigChannel+0x108>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d02f      	beq.n	8003224 <HAL_ADC_ConfigChannel+0x108>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d02b      	beq.n	8003224 <HAL_ADC_ConfigChannel+0x108>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d027      	beq.n	8003224 <HAL_ADC_ConfigChannel+0x108>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	2b05      	cmp	r3, #5
 80031da:	d023      	beq.n	8003224 <HAL_ADC_ConfigChannel+0x108>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	2b06      	cmp	r3, #6
 80031e2:	d01f      	beq.n	8003224 <HAL_ADC_ConfigChannel+0x108>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	2b07      	cmp	r3, #7
 80031ea:	d01b      	beq.n	8003224 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	2107      	movs	r1, #7
 80031f8:	400b      	ands	r3, r1
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d012      	beq.n	8003224 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2107      	movs	r1, #7
 800320a:	438a      	bics	r2, r1
 800320c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6959      	ldr	r1, [r3, #20]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2207      	movs	r2, #7
 800321a:	401a      	ands	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b10      	cmp	r3, #16
 800322a:	d007      	beq.n	800323c <HAL_ADC_ConfigChannel+0x120>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b11      	cmp	r3, #17
 8003232:	d003      	beq.n	800323c <HAL_ADC_ConfigChannel+0x120>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b12      	cmp	r3, #18
 800323a:	d163      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800323c:	4b38      	ldr	r3, [pc, #224]	; (8003320 <HAL_ADC_ConfigChannel+0x204>)
 800323e:	6819      	ldr	r1, [r3, #0]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b10      	cmp	r3, #16
 8003246:	d009      	beq.n	800325c <HAL_ADC_ConfigChannel+0x140>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b11      	cmp	r3, #17
 800324e:	d102      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x13a>
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	03db      	lsls	r3, r3, #15
 8003254:	e004      	b.n	8003260 <HAL_ADC_ConfigChannel+0x144>
 8003256:	2380      	movs	r3, #128	; 0x80
 8003258:	045b      	lsls	r3, r3, #17
 800325a:	e001      	b.n	8003260 <HAL_ADC_ConfigChannel+0x144>
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	041b      	lsls	r3, r3, #16
 8003260:	4a2f      	ldr	r2, [pc, #188]	; (8003320 <HAL_ADC_ConfigChannel+0x204>)
 8003262:	430b      	orrs	r3, r1
 8003264:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b10      	cmp	r3, #16
 800326c:	d14a      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800326e:	4b2d      	ldr	r3, [pc, #180]	; (8003324 <HAL_ADC_ConfigChannel+0x208>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	492d      	ldr	r1, [pc, #180]	; (8003328 <HAL_ADC_ConfigChannel+0x20c>)
 8003274:	0018      	movs	r0, r3
 8003276:	f7fc ff47 	bl	8000108 <__udivsi3>
 800327a:	0003      	movs	r3, r0
 800327c:	001a      	movs	r2, r3
 800327e:	0013      	movs	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	189b      	adds	r3, r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003288:	e002      	b.n	8003290 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	3b01      	subs	r3, #1
 800328e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f9      	bne.n	800328a <HAL_ADC_ConfigChannel+0x16e>
 8003296:	e035      	b.n	8003304 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2101      	movs	r1, #1
 80032a4:	4099      	lsls	r1, r3
 80032a6:	000b      	movs	r3, r1
 80032a8:	43d9      	mvns	r1, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	400a      	ands	r2, r1
 80032b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b10      	cmp	r3, #16
 80032b8:	d007      	beq.n	80032ca <HAL_ADC_ConfigChannel+0x1ae>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b11      	cmp	r3, #17
 80032c0:	d003      	beq.n	80032ca <HAL_ADC_ConfigChannel+0x1ae>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b12      	cmp	r3, #18
 80032c8:	d11c      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80032ca:	4b15      	ldr	r3, [pc, #84]	; (8003320 <HAL_ADC_ConfigChannel+0x204>)
 80032cc:	6819      	ldr	r1, [r3, #0]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b10      	cmp	r3, #16
 80032d4:	d007      	beq.n	80032e6 <HAL_ADC_ConfigChannel+0x1ca>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b11      	cmp	r3, #17
 80032dc:	d101      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x1c6>
 80032de:	4b13      	ldr	r3, [pc, #76]	; (800332c <HAL_ADC_ConfigChannel+0x210>)
 80032e0:	e002      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x1cc>
 80032e2:	4b13      	ldr	r3, [pc, #76]	; (8003330 <HAL_ADC_ConfigChannel+0x214>)
 80032e4:	e000      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x1cc>
 80032e6:	4b13      	ldr	r3, [pc, #76]	; (8003334 <HAL_ADC_ConfigChannel+0x218>)
 80032e8:	4a0d      	ldr	r2, [pc, #52]	; (8003320 <HAL_ADC_ConfigChannel+0x204>)
 80032ea:	400b      	ands	r3, r1
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e009      	b.n	8003304 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	2220      	movs	r2, #32
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80032fc:	230f      	movs	r3, #15
 80032fe:	18fb      	adds	r3, r7, r3
 8003300:	2201      	movs	r2, #1
 8003302:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2234      	movs	r2, #52	; 0x34
 8003308:	2100      	movs	r1, #0
 800330a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800330c:	230f      	movs	r3, #15
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	781b      	ldrb	r3, [r3, #0]
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b004      	add	sp, #16
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	00001001 	.word	0x00001001
 8003320:	40012708 	.word	0x40012708
 8003324:	20000078 	.word	0x20000078
 8003328:	000f4240 	.word	0x000f4240
 800332c:	ffbfffff 	.word	0xffbfffff
 8003330:	feffffff 	.word	0xfeffffff
 8003334:	ff7fffff 	.word	0xff7fffff

08003338 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2203      	movs	r2, #3
 8003350:	4013      	ands	r3, r2
 8003352:	2b01      	cmp	r3, #1
 8003354:	d112      	bne.n	800337c <ADC_Enable+0x44>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2201      	movs	r2, #1
 800335e:	4013      	ands	r3, r2
 8003360:	2b01      	cmp	r3, #1
 8003362:	d009      	beq.n	8003378 <ADC_Enable+0x40>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	021b      	lsls	r3, r3, #8
 800336e:	401a      	ands	r2, r3
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	021b      	lsls	r3, r3, #8
 8003374:	429a      	cmp	r2, r3
 8003376:	d101      	bne.n	800337c <ADC_Enable+0x44>
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <ADC_Enable+0x46>
 800337c:	2300      	movs	r3, #0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d14b      	bne.n	800341a <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4a26      	ldr	r2, [pc, #152]	; (8003424 <ADC_Enable+0xec>)
 800338a:	4013      	ands	r3, r2
 800338c:	d00d      	beq.n	80033aa <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	2210      	movs	r2, #16
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	2201      	movs	r2, #1
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e038      	b.n	800341c <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2101      	movs	r1, #1
 80033b6:	430a      	orrs	r2, r1
 80033b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033ba:	4b1b      	ldr	r3, [pc, #108]	; (8003428 <ADC_Enable+0xf0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	491b      	ldr	r1, [pc, #108]	; (800342c <ADC_Enable+0xf4>)
 80033c0:	0018      	movs	r0, r3
 80033c2:	f7fc fea1 	bl	8000108 <__udivsi3>
 80033c6:	0003      	movs	r3, r0
 80033c8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033ca:	e002      	b.n	80033d2 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f9      	bne.n	80033cc <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80033d8:	f7ff fc34 	bl	8002c44 <HAL_GetTick>
 80033dc:	0003      	movs	r3, r0
 80033de:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033e0:	e014      	b.n	800340c <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033e2:	f7ff fc2f 	bl	8002c44 <HAL_GetTick>
 80033e6:	0002      	movs	r2, r0
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d90d      	bls.n	800340c <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f4:	2210      	movs	r2, #16
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003400:	2201      	movs	r2, #1
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e007      	b.n	800341c <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2201      	movs	r2, #1
 8003414:	4013      	ands	r3, r2
 8003416:	2b01      	cmp	r3, #1
 8003418:	d1e3      	bne.n	80033e2 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	0018      	movs	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	b004      	add	sp, #16
 8003422:	bd80      	pop	{r7, pc}
 8003424:	80000017 	.word	0x80000017
 8003428:	20000078 	.word	0x20000078
 800342c:	000f4240 	.word	0x000f4240

08003430 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2203      	movs	r2, #3
 8003444:	4013      	ands	r3, r2
 8003446:	2b01      	cmp	r3, #1
 8003448:	d112      	bne.n	8003470 <ADC_Disable+0x40>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2201      	movs	r2, #1
 8003452:	4013      	ands	r3, r2
 8003454:	2b01      	cmp	r3, #1
 8003456:	d009      	beq.n	800346c <ADC_Disable+0x3c>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	401a      	ands	r2, r3
 8003464:	2380      	movs	r3, #128	; 0x80
 8003466:	021b      	lsls	r3, r3, #8
 8003468:	429a      	cmp	r2, r3
 800346a:	d101      	bne.n	8003470 <ADC_Disable+0x40>
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <ADC_Disable+0x42>
 8003470:	2300      	movs	r3, #0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d041      	beq.n	80034fa <ADC_Disable+0xca>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2205      	movs	r2, #5
 800347e:	4013      	ands	r3, r2
 8003480:	2b01      	cmp	r3, #1
 8003482:	d110      	bne.n	80034a6 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2102      	movs	r1, #2
 8003490:	430a      	orrs	r2, r1
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2203      	movs	r2, #3
 800349a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800349c:	f7ff fbd2 	bl	8002c44 <HAL_GetTick>
 80034a0:	0003      	movs	r3, r0
 80034a2:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034a4:	e022      	b.n	80034ec <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034aa:	2210      	movs	r2, #16
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	2201      	movs	r2, #1
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e01c      	b.n	80034fc <ADC_Disable+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034c2:	f7ff fbbf 	bl	8002c44 <HAL_GetTick>
 80034c6:	0002      	movs	r2, r0
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d90d      	bls.n	80034ec <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	2210      	movs	r2, #16
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e0:	2201      	movs	r2, #1
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e007      	b.n	80034fc <ADC_Disable+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2201      	movs	r2, #1
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d0e3      	beq.n	80034c2 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	0018      	movs	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	b004      	add	sp, #16
 8003502:	bd80      	pop	{r7, pc}

08003504 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2204      	movs	r2, #4
 8003518:	4013      	ands	r3, r2
 800351a:	d034      	beq.n	8003586 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2204      	movs	r2, #4
 8003524:	4013      	ands	r3, r2
 8003526:	2b04      	cmp	r3, #4
 8003528:	d10d      	bne.n	8003546 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2202      	movs	r2, #2
 8003532:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003534:	d107      	bne.n	8003546 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2110      	movs	r1, #16
 8003542:	430a      	orrs	r2, r1
 8003544:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003546:	f7ff fb7d 	bl	8002c44 <HAL_GetTick>
 800354a:	0003      	movs	r3, r0
 800354c:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800354e:	e014      	b.n	800357a <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003550:	f7ff fb78 	bl	8002c44 <HAL_GetTick>
 8003554:	0002      	movs	r2, r0
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d90d      	bls.n	800357a <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	2210      	movs	r2, #16
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356e:	2201      	movs	r2, #1
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e006      	b.n	8003588 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2204      	movs	r2, #4
 8003582:	4013      	ands	r3, r2
 8003584:	d1e4      	bne.n	8003550 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	0018      	movs	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	b004      	add	sp, #16
 800358e:	bd80      	pop	{r7, pc}

08003590 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	2250      	movs	r2, #80	; 0x50
 80035a4:	4013      	ands	r3, r2
 80035a6:	d140      	bne.n	800362a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	2280      	movs	r2, #128	; 0x80
 80035ae:	0092      	lsls	r2, r2, #2
 80035b0:	431a      	orrs	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	23c0      	movs	r3, #192	; 0xc0
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	4013      	ands	r3, r2
 80035c2:	d12d      	bne.n	8003620 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d129      	bne.n	8003620 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2208      	movs	r2, #8
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b08      	cmp	r3, #8
 80035d8:	d122      	bne.n	8003620 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2204      	movs	r2, #4
 80035e2:	4013      	ands	r3, r2
 80035e4:	d110      	bne.n	8003608 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	210c      	movs	r1, #12
 80035f2:	438a      	bics	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	4a11      	ldr	r2, [pc, #68]	; (8003640 <ADC_DMAConvCplt+0xb0>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	2201      	movs	r2, #1
 8003600:	431a      	orrs	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	639a      	str	r2, [r3, #56]	; 0x38
 8003606:	e00b      	b.n	8003620 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	2220      	movs	r2, #32
 800360e:	431a      	orrs	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003618:	2201      	movs	r2, #1
 800361a:	431a      	orrs	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	0018      	movs	r0, r3
 8003624:	f7fe fd8e 	bl	8002144 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003628:	e005      	b.n	8003636 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	0010      	movs	r0, r2
 8003634:	4798      	blx	r3
}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	b004      	add	sp, #16
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	fffffefe 	.word	0xfffffefe

08003644 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	0018      	movs	r0, r3
 8003656:	f7ff fd51 	bl	80030fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	46bd      	mov	sp, r7
 800365e:	b004      	add	sp, #16
 8003660:	bd80      	pop	{r7, pc}

08003662 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	2240      	movs	r2, #64	; 0x40
 8003676:	431a      	orrs	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003680:	2204      	movs	r2, #4
 8003682:	431a      	orrs	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	0018      	movs	r0, r3
 800368c:	f7ff fd3e 	bl	800310c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003690:	46c0      	nop			; (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b004      	add	sp, #16
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036a0:	2317      	movs	r3, #23
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2234      	movs	r2, #52	; 0x34
 80036b4:	5c9b      	ldrb	r3, [r3, r2]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d101      	bne.n	80036be <HAL_ADCEx_Calibration_Start+0x26>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e084      	b.n	80037c8 <HAL_ADCEx_Calibration_Start+0x130>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2234      	movs	r2, #52	; 0x34
 80036c2:	2101      	movs	r1, #1
 80036c4:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2203      	movs	r2, #3
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d112      	bne.n	80036fa <HAL_ADCEx_Calibration_Start+0x62>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2201      	movs	r2, #1
 80036dc:	4013      	ands	r3, r2
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d009      	beq.n	80036f6 <HAL_ADCEx_Calibration_Start+0x5e>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	2380      	movs	r3, #128	; 0x80
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	401a      	ands	r2, r3
 80036ee:	2380      	movs	r3, #128	; 0x80
 80036f0:	021b      	lsls	r3, r3, #8
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d101      	bne.n	80036fa <HAL_ADCEx_Calibration_Start+0x62>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <HAL_ADCEx_Calibration_Start+0x64>
 80036fa:	2300      	movs	r3, #0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d152      	bne.n	80037a6 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	4a32      	ldr	r2, [pc, #200]	; (80037d0 <HAL_ADCEx_Calibration_Start+0x138>)
 8003706:	4013      	ands	r3, r2
 8003708:	2202      	movs	r2, #2
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	2203      	movs	r2, #3
 8003718:	4013      	ands	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2103      	movs	r1, #3
 8003728:	438a      	bics	r2, r1
 800372a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2180      	movs	r1, #128	; 0x80
 8003738:	0609      	lsls	r1, r1, #24
 800373a:	430a      	orrs	r2, r1
 800373c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800373e:	f7ff fa81 	bl	8002c44 <HAL_GetTick>
 8003742:	0003      	movs	r3, r0
 8003744:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003746:	e014      	b.n	8003772 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003748:	f7ff fa7c 	bl	8002c44 <HAL_GetTick>
 800374c:	0002      	movs	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d90d      	bls.n	8003772 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	2212      	movs	r2, #18
 800375c:	4393      	bics	r3, r2
 800375e:	2210      	movs	r2, #16
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2234      	movs	r2, #52	; 0x34
 800376a:	2100      	movs	r1, #0
 800376c:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e02a      	b.n	80037c8 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	0fdb      	lsrs	r3, r3, #31
 800377a:	07da      	lsls	r2, r3, #31
 800377c:	2380      	movs	r3, #128	; 0x80
 800377e:	061b      	lsls	r3, r3, #24
 8003780:	429a      	cmp	r2, r3
 8003782:	d0e1      	beq.n	8003748 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68d9      	ldr	r1, [r3, #12]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	430a      	orrs	r2, r1
 8003792:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	2203      	movs	r2, #3
 800379a:	4393      	bics	r3, r2
 800379c:	2201      	movs	r2, #1
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	639a      	str	r2, [r3, #56]	; 0x38
 80037a4:	e009      	b.n	80037ba <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	2220      	movs	r2, #32
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80037b2:	2317      	movs	r3, #23
 80037b4:	18fb      	adds	r3, r7, r3
 80037b6:	2201      	movs	r2, #1
 80037b8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2234      	movs	r2, #52	; 0x34
 80037be:	2100      	movs	r1, #0
 80037c0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80037c2:	2317      	movs	r3, #23
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	781b      	ldrb	r3, [r3, #0]
}
 80037c8:	0018      	movs	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b006      	add	sp, #24
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	fffffefd 	.word	0xfffffefd

080037d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e0f0      	b.n	80039c8 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2220      	movs	r2, #32
 80037ea:	5c9b      	ldrb	r3, [r3, r2]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d103      	bne.n	80037fa <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	0018      	movs	r0, r3
 80037f6:	f7ff f87f 	bl	80028f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2102      	movs	r1, #2
 8003806:	438a      	bics	r2, r1
 8003808:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800380a:	f7ff fa1b 	bl	8002c44 <HAL_GetTick>
 800380e:	0003      	movs	r3, r0
 8003810:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003812:	e013      	b.n	800383c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003814:	f7ff fa16 	bl	8002c44 <HAL_GetTick>
 8003818:	0002      	movs	r2, r0
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b0a      	cmp	r3, #10
 8003820:	d90c      	bls.n	800383c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	2280      	movs	r2, #128	; 0x80
 8003828:	0292      	lsls	r2, r2, #10
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	2105      	movs	r1, #5
 8003836:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0c5      	b.n	80039c8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	4013      	ands	r3, r2
 8003846:	d1e5      	bne.n	8003814 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2101      	movs	r1, #1
 8003854:	430a      	orrs	r2, r1
 8003856:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003858:	f7ff f9f4 	bl	8002c44 <HAL_GetTick>
 800385c:	0003      	movs	r3, r0
 800385e:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003860:	e013      	b.n	800388a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003862:	f7ff f9ef 	bl	8002c44 <HAL_GetTick>
 8003866:	0002      	movs	r2, r0
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b0a      	cmp	r3, #10
 800386e:	d90c      	bls.n	800388a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	2280      	movs	r2, #128	; 0x80
 8003876:	0292      	lsls	r2, r2, #10
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	2105      	movs	r1, #5
 8003884:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e09e      	b.n	80039c8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	4013      	ands	r3, r2
 8003894:	d0e5      	beq.n	8003862 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	7e1b      	ldrb	r3, [r3, #24]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d108      	bne.n	80038b0 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2180      	movs	r1, #128	; 0x80
 80038aa:	430a      	orrs	r2, r1
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	e007      	b.n	80038c0 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2180      	movs	r1, #128	; 0x80
 80038bc:	438a      	bics	r2, r1
 80038be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	7e5b      	ldrb	r3, [r3, #25]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d108      	bne.n	80038da <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2140      	movs	r1, #64	; 0x40
 80038d4:	430a      	orrs	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	e007      	b.n	80038ea <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2140      	movs	r1, #64	; 0x40
 80038e6:	438a      	bics	r2, r1
 80038e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	7e9b      	ldrb	r3, [r3, #26]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d108      	bne.n	8003904 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2120      	movs	r1, #32
 80038fe:	430a      	orrs	r2, r1
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	e007      	b.n	8003914 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2120      	movs	r1, #32
 8003910:	438a      	bics	r2, r1
 8003912:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	7edb      	ldrb	r3, [r3, #27]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d108      	bne.n	800392e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2110      	movs	r1, #16
 8003928:	438a      	bics	r2, r1
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e007      	b.n	800393e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2110      	movs	r1, #16
 800393a:	430a      	orrs	r2, r1
 800393c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	7f1b      	ldrb	r3, [r3, #28]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d108      	bne.n	8003958 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2108      	movs	r1, #8
 8003952:	430a      	orrs	r2, r1
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	e007      	b.n	8003968 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2108      	movs	r1, #8
 8003964:	438a      	bics	r2, r1
 8003966:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	7f5b      	ldrb	r3, [r3, #29]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d108      	bne.n	8003982 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2104      	movs	r1, #4
 800397c:	430a      	orrs	r2, r1
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	e007      	b.n	8003992 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2104      	movs	r1, #4
 800398e:	438a      	bics	r2, r1
 8003990:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	0011      	movs	r1, r2
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	1e5a      	subs	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	2101      	movs	r1, #1
 80039c4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b004      	add	sp, #16
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	0002      	movs	r2, r0
 80039d8:	1dfb      	adds	r3, r7, #7
 80039da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80039dc:	1dfb      	adds	r3, r7, #7
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b7f      	cmp	r3, #127	; 0x7f
 80039e2:	d809      	bhi.n	80039f8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039e4:	1dfb      	adds	r3, r7, #7
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	001a      	movs	r2, r3
 80039ea:	231f      	movs	r3, #31
 80039ec:	401a      	ands	r2, r3
 80039ee:	4b04      	ldr	r3, [pc, #16]	; (8003a00 <__NVIC_EnableIRQ+0x30>)
 80039f0:	2101      	movs	r1, #1
 80039f2:	4091      	lsls	r1, r2
 80039f4:	000a      	movs	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]
  }
}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b002      	add	sp, #8
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	e000e100 	.word	0xe000e100

08003a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a04:	b590      	push	{r4, r7, lr}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	0002      	movs	r2, r0
 8003a0c:	6039      	str	r1, [r7, #0]
 8003a0e:	1dfb      	adds	r3, r7, #7
 8003a10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a12:	1dfb      	adds	r3, r7, #7
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b7f      	cmp	r3, #127	; 0x7f
 8003a18:	d828      	bhi.n	8003a6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a1a:	4a2f      	ldr	r2, [pc, #188]	; (8003ad8 <__NVIC_SetPriority+0xd4>)
 8003a1c:	1dfb      	adds	r3, r7, #7
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	b25b      	sxtb	r3, r3
 8003a22:	089b      	lsrs	r3, r3, #2
 8003a24:	33c0      	adds	r3, #192	; 0xc0
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	589b      	ldr	r3, [r3, r2]
 8003a2a:	1dfa      	adds	r2, r7, #7
 8003a2c:	7812      	ldrb	r2, [r2, #0]
 8003a2e:	0011      	movs	r1, r2
 8003a30:	2203      	movs	r2, #3
 8003a32:	400a      	ands	r2, r1
 8003a34:	00d2      	lsls	r2, r2, #3
 8003a36:	21ff      	movs	r1, #255	; 0xff
 8003a38:	4091      	lsls	r1, r2
 8003a3a:	000a      	movs	r2, r1
 8003a3c:	43d2      	mvns	r2, r2
 8003a3e:	401a      	ands	r2, r3
 8003a40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	019b      	lsls	r3, r3, #6
 8003a46:	22ff      	movs	r2, #255	; 0xff
 8003a48:	401a      	ands	r2, r3
 8003a4a:	1dfb      	adds	r3, r7, #7
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	0018      	movs	r0, r3
 8003a50:	2303      	movs	r3, #3
 8003a52:	4003      	ands	r3, r0
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a58:	481f      	ldr	r0, [pc, #124]	; (8003ad8 <__NVIC_SetPriority+0xd4>)
 8003a5a:	1dfb      	adds	r3, r7, #7
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	b25b      	sxtb	r3, r3
 8003a60:	089b      	lsrs	r3, r3, #2
 8003a62:	430a      	orrs	r2, r1
 8003a64:	33c0      	adds	r3, #192	; 0xc0
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003a6a:	e031      	b.n	8003ad0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a6c:	4a1b      	ldr	r2, [pc, #108]	; (8003adc <__NVIC_SetPriority+0xd8>)
 8003a6e:	1dfb      	adds	r3, r7, #7
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	0019      	movs	r1, r3
 8003a74:	230f      	movs	r3, #15
 8003a76:	400b      	ands	r3, r1
 8003a78:	3b08      	subs	r3, #8
 8003a7a:	089b      	lsrs	r3, r3, #2
 8003a7c:	3306      	adds	r3, #6
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	18d3      	adds	r3, r2, r3
 8003a82:	3304      	adds	r3, #4
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	1dfa      	adds	r2, r7, #7
 8003a88:	7812      	ldrb	r2, [r2, #0]
 8003a8a:	0011      	movs	r1, r2
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	400a      	ands	r2, r1
 8003a90:	00d2      	lsls	r2, r2, #3
 8003a92:	21ff      	movs	r1, #255	; 0xff
 8003a94:	4091      	lsls	r1, r2
 8003a96:	000a      	movs	r2, r1
 8003a98:	43d2      	mvns	r2, r2
 8003a9a:	401a      	ands	r2, r3
 8003a9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	019b      	lsls	r3, r3, #6
 8003aa2:	22ff      	movs	r2, #255	; 0xff
 8003aa4:	401a      	ands	r2, r3
 8003aa6:	1dfb      	adds	r3, r7, #7
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	0018      	movs	r0, r3
 8003aac:	2303      	movs	r3, #3
 8003aae:	4003      	ands	r3, r0
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ab4:	4809      	ldr	r0, [pc, #36]	; (8003adc <__NVIC_SetPriority+0xd8>)
 8003ab6:	1dfb      	adds	r3, r7, #7
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	001c      	movs	r4, r3
 8003abc:	230f      	movs	r3, #15
 8003abe:	4023      	ands	r3, r4
 8003ac0:	3b08      	subs	r3, #8
 8003ac2:	089b      	lsrs	r3, r3, #2
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	3306      	adds	r3, #6
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	18c3      	adds	r3, r0, r3
 8003acc:	3304      	adds	r3, #4
 8003ace:	601a      	str	r2, [r3, #0]
}
 8003ad0:	46c0      	nop			; (mov r8, r8)
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b003      	add	sp, #12
 8003ad6:	bd90      	pop	{r4, r7, pc}
 8003ad8:	e000e100 	.word	0xe000e100
 8003adc:	e000ed00 	.word	0xe000ed00

08003ae0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	210f      	movs	r1, #15
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	1c02      	adds	r2, r0, #0
 8003af0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	187b      	adds	r3, r7, r1
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	b25b      	sxtb	r3, r3
 8003afa:	0011      	movs	r1, r2
 8003afc:	0018      	movs	r0, r3
 8003afe:	f7ff ff81 	bl	8003a04 <__NVIC_SetPriority>
}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	46bd      	mov	sp, r7
 8003b06:	b004      	add	sp, #16
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	0002      	movs	r2, r0
 8003b12:	1dfb      	adds	r3, r7, #7
 8003b14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b16:	1dfb      	adds	r3, r7, #7
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	b25b      	sxtb	r3, r3
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f7ff ff57 	bl	80039d0 <__NVIC_EnableIRQ>
}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	46bd      	mov	sp, r7
 8003b26:	b002      	add	sp, #8
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e036      	b.n	8003bb0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2221      	movs	r2, #33	; 0x21
 8003b46:	2102      	movs	r1, #2
 8003b48:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4a18      	ldr	r2, [pc, #96]	; (8003bb8 <HAL_DMA_Init+0x8c>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	0018      	movs	r0, r3
 8003b94:	f000 f97e 	bl	8003e94 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2221      	movs	r2, #33	; 0x21
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	2100      	movs	r1, #0
 8003bac:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}  
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	b004      	add	sp, #16
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	ffffc00f 	.word	0xffffc00f

08003bbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003bca:	2317      	movs	r3, #23
 8003bcc:	18fb      	adds	r3, r7, r3
 8003bce:	2200      	movs	r2, #0
 8003bd0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	5c9b      	ldrb	r3, [r3, r2]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_DMA_Start_IT+0x24>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e04f      	b.n	8003c80 <HAL_DMA_Start_IT+0xc4>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	2101      	movs	r1, #1
 8003be6:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2221      	movs	r2, #33	; 0x21
 8003bec:	5c9b      	ldrb	r3, [r3, r2]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d13a      	bne.n	8003c6a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2221      	movs	r2, #33	; 0x21
 8003bf8:	2102      	movs	r1, #2
 8003bfa:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	438a      	bics	r2, r1
 8003c10:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	68b9      	ldr	r1, [r7, #8]
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f90f 	bl	8003e3c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	210e      	movs	r1, #14
 8003c32:	430a      	orrs	r2, r1
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	e00f      	b.n	8003c58 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	210a      	movs	r1, #10
 8003c44:	430a      	orrs	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2104      	movs	r1, #4
 8003c54:	438a      	bics	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2101      	movs	r1, #1
 8003c64:	430a      	orrs	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	e007      	b.n	8003c7a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	2100      	movs	r1, #0
 8003c70:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003c72:	2317      	movs	r3, #23
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	2202      	movs	r2, #2
 8003c78:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8003c7a:	2317      	movs	r3, #23
 8003c7c:	18fb      	adds	r3, r7, r3
 8003c7e:	781b      	ldrb	r3, [r3, #0]
} 
 8003c80:	0018      	movs	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b006      	add	sp, #24
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2221      	movs	r2, #33	; 0x21
 8003c94:	5c9b      	ldrb	r3, [r3, r2]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d008      	beq.n	8003cae <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e020      	b.n	8003cf0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	210e      	movs	r1, #14
 8003cba:	438a      	bics	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2101      	movs	r1, #1
 8003cca:	438a      	bics	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	4091      	lsls	r1, r2
 8003cda:	000a      	movs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2221      	movs	r2, #33	; 0x21
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	2100      	movs	r1, #0
 8003cec:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b002      	add	sp, #8
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	2204      	movs	r2, #4
 8003d16:	409a      	lsls	r2, r3
 8003d18:	0013      	movs	r3, r2
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d024      	beq.n	8003d6a <HAL_DMA_IRQHandler+0x72>
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2204      	movs	r2, #4
 8003d24:	4013      	ands	r3, r2
 8003d26:	d020      	beq.n	8003d6a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	4013      	ands	r3, r2
 8003d32:	d107      	bne.n	8003d44 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2104      	movs	r1, #4
 8003d40:	438a      	bics	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4c:	2104      	movs	r1, #4
 8003d4e:	4091      	lsls	r1, r2
 8003d50:	000a      	movs	r2, r1
 8003d52:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d100      	bne.n	8003d5e <HAL_DMA_IRQHandler+0x66>
 8003d5c:	e06a      	b.n	8003e34 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	0010      	movs	r0, r2
 8003d66:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003d68:	e064      	b.n	8003e34 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	2202      	movs	r2, #2
 8003d70:	409a      	lsls	r2, r3
 8003d72:	0013      	movs	r3, r2
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4013      	ands	r3, r2
 8003d78:	d02b      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xda>
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d027      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	d10b      	bne.n	8003da6 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	210a      	movs	r1, #10
 8003d9a:	438a      	bics	r2, r1
 8003d9c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2221      	movs	r2, #33	; 0x21
 8003da2:	2101      	movs	r1, #1
 8003da4:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dae:	2102      	movs	r1, #2
 8003db0:	4091      	lsls	r1, r2
 8003db2:	000a      	movs	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2220      	movs	r2, #32
 8003dba:	2100      	movs	r1, #0
 8003dbc:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d036      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	0010      	movs	r0, r2
 8003dce:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003dd0:	e030      	b.n	8003e34 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	2208      	movs	r2, #8
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	0013      	movs	r3, r2
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4013      	ands	r3, r2
 8003de0:	d028      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x13c>
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2208      	movs	r2, #8
 8003de6:	4013      	ands	r3, r2
 8003de8:	d024      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	210e      	movs	r1, #14
 8003df6:	438a      	bics	r2, r1
 8003df8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e02:	2101      	movs	r1, #1
 8003e04:	4091      	lsls	r1, r2
 8003e06:	000a      	movs	r2, r1
 8003e08:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2221      	movs	r2, #33	; 0x21
 8003e14:	2101      	movs	r1, #1
 8003e16:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	0010      	movs	r0, r2
 8003e30:	4798      	blx	r3
    }
   }
}  
 8003e32:	e7ff      	b.n	8003e34 <HAL_DMA_IRQHandler+0x13c>
 8003e34:	46c0      	nop			; (mov r8, r8)
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b004      	add	sp, #16
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e52:	2101      	movs	r1, #1
 8003e54:	4091      	lsls	r1, r2
 8003e56:	000a      	movs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b10      	cmp	r3, #16
 8003e68:	d108      	bne.n	8003e7c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e7a:	e007      	b.n	8003e8c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	60da      	str	r2, [r3, #12]
}
 8003e8c:	46c0      	nop			; (mov r8, r8)
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b004      	add	sp, #16
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a08      	ldr	r2, [pc, #32]	; (8003ec4 <DMA_CalcBaseAndBitshift+0x30>)
 8003ea2:	4694      	mov	ip, r2
 8003ea4:	4463      	add	r3, ip
 8003ea6:	2114      	movs	r1, #20
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f7fc f92d 	bl	8000108 <__udivsi3>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	009a      	lsls	r2, r3, #2
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a03      	ldr	r2, [pc, #12]	; (8003ec8 <DMA_CalcBaseAndBitshift+0x34>)
 8003eba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003ebc:	46c0      	nop			; (mov r8, r8)
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	b002      	add	sp, #8
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	bffdfff8 	.word	0xbffdfff8
 8003ec8:	40020000 	.word	0x40020000

08003ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eda:	e155      	b.n	8004188 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	4091      	lsls	r1, r2
 8003ee6:	000a      	movs	r2, r1
 8003ee8:	4013      	ands	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d100      	bne.n	8003ef4 <HAL_GPIO_Init+0x28>
 8003ef2:	e146      	b.n	8004182 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d003      	beq.n	8003f04 <HAL_GPIO_Init+0x38>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b12      	cmp	r3, #18
 8003f02:	d123      	bne.n	8003f4c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	08da      	lsrs	r2, r3, #3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3208      	adds	r2, #8
 8003f0c:	0092      	lsls	r2, r2, #2
 8003f0e:	58d3      	ldr	r3, [r2, r3]
 8003f10:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2207      	movs	r2, #7
 8003f16:	4013      	ands	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	220f      	movs	r2, #15
 8003f1c:	409a      	lsls	r2, r3
 8003f1e:	0013      	movs	r3, r2
 8003f20:	43da      	mvns	r2, r3
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	4013      	ands	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2107      	movs	r1, #7
 8003f30:	400b      	ands	r3, r1
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	409a      	lsls	r2, r3
 8003f36:	0013      	movs	r3, r2
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	08da      	lsrs	r2, r3, #3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3208      	adds	r2, #8
 8003f46:	0092      	lsls	r2, r2, #2
 8003f48:	6939      	ldr	r1, [r7, #16]
 8003f4a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	2203      	movs	r2, #3
 8003f58:	409a      	lsls	r2, r3
 8003f5a:	0013      	movs	r3, r2
 8003f5c:	43da      	mvns	r2, r3
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4013      	ands	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2203      	movs	r2, #3
 8003f6a:	401a      	ands	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	409a      	lsls	r2, r3
 8003f72:	0013      	movs	r3, r2
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d00b      	beq.n	8003fa0 <HAL_GPIO_Init+0xd4>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d007      	beq.n	8003fa0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f94:	2b11      	cmp	r3, #17
 8003f96:	d003      	beq.n	8003fa0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b12      	cmp	r3, #18
 8003f9e:	d130      	bne.n	8004002 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	2203      	movs	r2, #3
 8003fac:	409a      	lsls	r2, r3
 8003fae:	0013      	movs	r3, r2
 8003fb0:	43da      	mvns	r2, r3
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	409a      	lsls	r2, r3
 8003fc2:	0013      	movs	r3, r2
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	409a      	lsls	r2, r3
 8003fdc:	0013      	movs	r3, r2
 8003fde:	43da      	mvns	r2, r3
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	091b      	lsrs	r3, r3, #4
 8003fec:	2201      	movs	r2, #1
 8003fee:	401a      	ands	r2, r3
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	0013      	movs	r3, r2
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	2203      	movs	r2, #3
 800400e:	409a      	lsls	r2, r3
 8004010:	0013      	movs	r3, r2
 8004012:	43da      	mvns	r2, r3
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4013      	ands	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	409a      	lsls	r2, r3
 8004024:	0013      	movs	r3, r2
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	2380      	movs	r3, #128	; 0x80
 8004038:	055b      	lsls	r3, r3, #21
 800403a:	4013      	ands	r3, r2
 800403c:	d100      	bne.n	8004040 <HAL_GPIO_Init+0x174>
 800403e:	e0a0      	b.n	8004182 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004040:	4b57      	ldr	r3, [pc, #348]	; (80041a0 <HAL_GPIO_Init+0x2d4>)
 8004042:	699a      	ldr	r2, [r3, #24]
 8004044:	4b56      	ldr	r3, [pc, #344]	; (80041a0 <HAL_GPIO_Init+0x2d4>)
 8004046:	2101      	movs	r1, #1
 8004048:	430a      	orrs	r2, r1
 800404a:	619a      	str	r2, [r3, #24]
 800404c:	4b54      	ldr	r3, [pc, #336]	; (80041a0 <HAL_GPIO_Init+0x2d4>)
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	2201      	movs	r2, #1
 8004052:	4013      	ands	r3, r2
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004058:	4a52      	ldr	r2, [pc, #328]	; (80041a4 <HAL_GPIO_Init+0x2d8>)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	089b      	lsrs	r3, r3, #2
 800405e:	3302      	adds	r3, #2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	589b      	ldr	r3, [r3, r2]
 8004064:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2203      	movs	r2, #3
 800406a:	4013      	ands	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	220f      	movs	r2, #15
 8004070:	409a      	lsls	r2, r3
 8004072:	0013      	movs	r3, r2
 8004074:	43da      	mvns	r2, r3
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	4013      	ands	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	2390      	movs	r3, #144	; 0x90
 8004080:	05db      	lsls	r3, r3, #23
 8004082:	429a      	cmp	r2, r3
 8004084:	d019      	beq.n	80040ba <HAL_GPIO_Init+0x1ee>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a47      	ldr	r2, [pc, #284]	; (80041a8 <HAL_GPIO_Init+0x2dc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d013      	beq.n	80040b6 <HAL_GPIO_Init+0x1ea>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a46      	ldr	r2, [pc, #280]	; (80041ac <HAL_GPIO_Init+0x2e0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00d      	beq.n	80040b2 <HAL_GPIO_Init+0x1e6>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a45      	ldr	r2, [pc, #276]	; (80041b0 <HAL_GPIO_Init+0x2e4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d007      	beq.n	80040ae <HAL_GPIO_Init+0x1e2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a44      	ldr	r2, [pc, #272]	; (80041b4 <HAL_GPIO_Init+0x2e8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d101      	bne.n	80040aa <HAL_GPIO_Init+0x1de>
 80040a6:	2304      	movs	r3, #4
 80040a8:	e008      	b.n	80040bc <HAL_GPIO_Init+0x1f0>
 80040aa:	2305      	movs	r3, #5
 80040ac:	e006      	b.n	80040bc <HAL_GPIO_Init+0x1f0>
 80040ae:	2303      	movs	r3, #3
 80040b0:	e004      	b.n	80040bc <HAL_GPIO_Init+0x1f0>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e002      	b.n	80040bc <HAL_GPIO_Init+0x1f0>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <HAL_GPIO_Init+0x1f0>
 80040ba:	2300      	movs	r3, #0
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	2103      	movs	r1, #3
 80040c0:	400a      	ands	r2, r1
 80040c2:	0092      	lsls	r2, r2, #2
 80040c4:	4093      	lsls	r3, r2
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040cc:	4935      	ldr	r1, [pc, #212]	; (80041a4 <HAL_GPIO_Init+0x2d8>)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	089b      	lsrs	r3, r3, #2
 80040d2:	3302      	adds	r3, #2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040da:	4b37      	ldr	r3, [pc, #220]	; (80041b8 <HAL_GPIO_Init+0x2ec>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	43da      	mvns	r2, r3
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4013      	ands	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	2380      	movs	r3, #128	; 0x80
 80040f0:	025b      	lsls	r3, r3, #9
 80040f2:	4013      	ands	r3, r2
 80040f4:	d003      	beq.n	80040fe <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80040fe:	4b2e      	ldr	r3, [pc, #184]	; (80041b8 <HAL_GPIO_Init+0x2ec>)
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004104:	4b2c      	ldr	r3, [pc, #176]	; (80041b8 <HAL_GPIO_Init+0x2ec>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	43da      	mvns	r2, r3
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4013      	ands	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	2380      	movs	r3, #128	; 0x80
 800411a:	029b      	lsls	r3, r3, #10
 800411c:	4013      	ands	r3, r2
 800411e:	d003      	beq.n	8004128 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004128:	4b23      	ldr	r3, [pc, #140]	; (80041b8 <HAL_GPIO_Init+0x2ec>)
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800412e:	4b22      	ldr	r3, [pc, #136]	; (80041b8 <HAL_GPIO_Init+0x2ec>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	43da      	mvns	r2, r3
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4013      	ands	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	2380      	movs	r3, #128	; 0x80
 8004144:	035b      	lsls	r3, r3, #13
 8004146:	4013      	ands	r3, r2
 8004148:	d003      	beq.n	8004152 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4313      	orrs	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004152:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <HAL_GPIO_Init+0x2ec>)
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004158:	4b17      	ldr	r3, [pc, #92]	; (80041b8 <HAL_GPIO_Init+0x2ec>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	43da      	mvns	r2, r3
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	4013      	ands	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	2380      	movs	r3, #128	; 0x80
 800416e:	039b      	lsls	r3, r3, #14
 8004170:	4013      	ands	r3, r2
 8004172:	d003      	beq.n	800417c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800417c:	4b0e      	ldr	r3, [pc, #56]	; (80041b8 <HAL_GPIO_Init+0x2ec>)
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	3301      	adds	r3, #1
 8004186:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	40da      	lsrs	r2, r3
 8004190:	1e13      	subs	r3, r2, #0
 8004192:	d000      	beq.n	8004196 <HAL_GPIO_Init+0x2ca>
 8004194:	e6a2      	b.n	8003edc <HAL_GPIO_Init+0x10>
  } 
}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	46bd      	mov	sp, r7
 800419a:	b006      	add	sp, #24
 800419c:	bd80      	pop	{r7, pc}
 800419e:	46c0      	nop			; (mov r8, r8)
 80041a0:	40021000 	.word	0x40021000
 80041a4:	40010000 	.word	0x40010000
 80041a8:	48000400 	.word	0x48000400
 80041ac:	48000800 	.word	0x48000800
 80041b0:	48000c00 	.word	0x48000c00
 80041b4:	48001000 	.word	0x48001000
 80041b8:	40010400 	.word	0x40010400

080041bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	0008      	movs	r0, r1
 80041c6:	0011      	movs	r1, r2
 80041c8:	1cbb      	adds	r3, r7, #2
 80041ca:	1c02      	adds	r2, r0, #0
 80041cc:	801a      	strh	r2, [r3, #0]
 80041ce:	1c7b      	adds	r3, r7, #1
 80041d0:	1c0a      	adds	r2, r1, #0
 80041d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041d4:	1c7b      	adds	r3, r7, #1
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d004      	beq.n	80041e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041dc:	1cbb      	adds	r3, r7, #2
 80041de:	881a      	ldrh	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041e4:	e003      	b.n	80041ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041e6:	1cbb      	adds	r3, r7, #2
 80041e8:	881a      	ldrh	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	46bd      	mov	sp, r7
 80041f2:	b002      	add	sp, #8
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	000a      	movs	r2, r1
 8004200:	1cbb      	adds	r3, r7, #2
 8004202:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	1cba      	adds	r2, r7, #2
 800420a:	8812      	ldrh	r2, [r2, #0]
 800420c:	4013      	ands	r3, r2
 800420e:	d005      	beq.n	800421c <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004210:	1cbb      	adds	r3, r7, #2
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	041a      	lsls	r2, r3, #16
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800421a:	e003      	b.n	8004224 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800421c:	1cbb      	adds	r3, r7, #2
 800421e:	881a      	ldrh	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	619a      	str	r2, [r3, #24]
}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	46bd      	mov	sp, r7
 8004228:	b002      	add	sp, #8
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d102      	bne.n	8004240 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	f000 fb76 	bl	800492c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2201      	movs	r2, #1
 8004246:	4013      	ands	r3, r2
 8004248:	d100      	bne.n	800424c <HAL_RCC_OscConfig+0x20>
 800424a:	e08e      	b.n	800436a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800424c:	4bc5      	ldr	r3, [pc, #788]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	220c      	movs	r2, #12
 8004252:	4013      	ands	r3, r2
 8004254:	2b04      	cmp	r3, #4
 8004256:	d00e      	beq.n	8004276 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004258:	4bc2      	ldr	r3, [pc, #776]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	220c      	movs	r2, #12
 800425e:	4013      	ands	r3, r2
 8004260:	2b08      	cmp	r3, #8
 8004262:	d117      	bne.n	8004294 <HAL_RCC_OscConfig+0x68>
 8004264:	4bbf      	ldr	r3, [pc, #764]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	23c0      	movs	r3, #192	; 0xc0
 800426a:	025b      	lsls	r3, r3, #9
 800426c:	401a      	ands	r2, r3
 800426e:	2380      	movs	r3, #128	; 0x80
 8004270:	025b      	lsls	r3, r3, #9
 8004272:	429a      	cmp	r2, r3
 8004274:	d10e      	bne.n	8004294 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004276:	4bbb      	ldr	r3, [pc, #748]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	2380      	movs	r3, #128	; 0x80
 800427c:	029b      	lsls	r3, r3, #10
 800427e:	4013      	ands	r3, r2
 8004280:	d100      	bne.n	8004284 <HAL_RCC_OscConfig+0x58>
 8004282:	e071      	b.n	8004368 <HAL_RCC_OscConfig+0x13c>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d000      	beq.n	800428e <HAL_RCC_OscConfig+0x62>
 800428c:	e06c      	b.n	8004368 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	f000 fb4c 	bl	800492c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d107      	bne.n	80042ac <HAL_RCC_OscConfig+0x80>
 800429c:	4bb1      	ldr	r3, [pc, #708]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4bb0      	ldr	r3, [pc, #704]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80042a2:	2180      	movs	r1, #128	; 0x80
 80042a4:	0249      	lsls	r1, r1, #9
 80042a6:	430a      	orrs	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	e02f      	b.n	800430c <HAL_RCC_OscConfig+0xe0>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10c      	bne.n	80042ce <HAL_RCC_OscConfig+0xa2>
 80042b4:	4bab      	ldr	r3, [pc, #684]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	4baa      	ldr	r3, [pc, #680]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80042ba:	49ab      	ldr	r1, [pc, #684]	; (8004568 <HAL_RCC_OscConfig+0x33c>)
 80042bc:	400a      	ands	r2, r1
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	4ba8      	ldr	r3, [pc, #672]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4ba7      	ldr	r3, [pc, #668]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80042c6:	49a9      	ldr	r1, [pc, #676]	; (800456c <HAL_RCC_OscConfig+0x340>)
 80042c8:	400a      	ands	r2, r1
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	e01e      	b.n	800430c <HAL_RCC_OscConfig+0xe0>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b05      	cmp	r3, #5
 80042d4:	d10e      	bne.n	80042f4 <HAL_RCC_OscConfig+0xc8>
 80042d6:	4ba3      	ldr	r3, [pc, #652]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4ba2      	ldr	r3, [pc, #648]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80042dc:	2180      	movs	r1, #128	; 0x80
 80042de:	02c9      	lsls	r1, r1, #11
 80042e0:	430a      	orrs	r2, r1
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	4b9f      	ldr	r3, [pc, #636]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4b9e      	ldr	r3, [pc, #632]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80042ea:	2180      	movs	r1, #128	; 0x80
 80042ec:	0249      	lsls	r1, r1, #9
 80042ee:	430a      	orrs	r2, r1
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e00b      	b.n	800430c <HAL_RCC_OscConfig+0xe0>
 80042f4:	4b9b      	ldr	r3, [pc, #620]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	4b9a      	ldr	r3, [pc, #616]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80042fa:	499b      	ldr	r1, [pc, #620]	; (8004568 <HAL_RCC_OscConfig+0x33c>)
 80042fc:	400a      	ands	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	4b98      	ldr	r3, [pc, #608]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	4b97      	ldr	r3, [pc, #604]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 8004306:	4999      	ldr	r1, [pc, #612]	; (800456c <HAL_RCC_OscConfig+0x340>)
 8004308:	400a      	ands	r2, r1
 800430a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d014      	beq.n	800433e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004314:	f7fe fc96 	bl	8002c44 <HAL_GetTick>
 8004318:	0003      	movs	r3, r0
 800431a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800431e:	f7fe fc91 	bl	8002c44 <HAL_GetTick>
 8004322:	0002      	movs	r2, r0
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b64      	cmp	r3, #100	; 0x64
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e2fd      	b.n	800492c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004330:	4b8c      	ldr	r3, [pc, #560]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	029b      	lsls	r3, r3, #10
 8004338:	4013      	ands	r3, r2
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0xf2>
 800433c:	e015      	b.n	800436a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433e:	f7fe fc81 	bl	8002c44 <HAL_GetTick>
 8004342:	0003      	movs	r3, r0
 8004344:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004348:	f7fe fc7c 	bl	8002c44 <HAL_GetTick>
 800434c:	0002      	movs	r2, r0
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b64      	cmp	r3, #100	; 0x64
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e2e8      	b.n	800492c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435a:	4b82      	ldr	r3, [pc, #520]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	2380      	movs	r3, #128	; 0x80
 8004360:	029b      	lsls	r3, r3, #10
 8004362:	4013      	ands	r3, r2
 8004364:	d1f0      	bne.n	8004348 <HAL_RCC_OscConfig+0x11c>
 8004366:	e000      	b.n	800436a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004368:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2202      	movs	r2, #2
 8004370:	4013      	ands	r3, r2
 8004372:	d100      	bne.n	8004376 <HAL_RCC_OscConfig+0x14a>
 8004374:	e06c      	b.n	8004450 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004376:	4b7b      	ldr	r3, [pc, #492]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	220c      	movs	r2, #12
 800437c:	4013      	ands	r3, r2
 800437e:	d00e      	beq.n	800439e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004380:	4b78      	ldr	r3, [pc, #480]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	220c      	movs	r2, #12
 8004386:	4013      	ands	r3, r2
 8004388:	2b08      	cmp	r3, #8
 800438a:	d11f      	bne.n	80043cc <HAL_RCC_OscConfig+0x1a0>
 800438c:	4b75      	ldr	r3, [pc, #468]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	23c0      	movs	r3, #192	; 0xc0
 8004392:	025b      	lsls	r3, r3, #9
 8004394:	401a      	ands	r2, r3
 8004396:	2380      	movs	r3, #128	; 0x80
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	429a      	cmp	r2, r3
 800439c:	d116      	bne.n	80043cc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439e:	4b71      	ldr	r3, [pc, #452]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2202      	movs	r2, #2
 80043a4:	4013      	ands	r3, r2
 80043a6:	d005      	beq.n	80043b4 <HAL_RCC_OscConfig+0x188>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d001      	beq.n	80043b4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e2bb      	b.n	800492c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b4:	4b6b      	ldr	r3, [pc, #428]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	22f8      	movs	r2, #248	; 0xf8
 80043ba:	4393      	bics	r3, r2
 80043bc:	0019      	movs	r1, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	00da      	lsls	r2, r3, #3
 80043c4:	4b67      	ldr	r3, [pc, #412]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80043c6:	430a      	orrs	r2, r1
 80043c8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ca:	e041      	b.n	8004450 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d024      	beq.n	800441e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d4:	4b63      	ldr	r3, [pc, #396]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b62      	ldr	r3, [pc, #392]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80043da:	2101      	movs	r1, #1
 80043dc:	430a      	orrs	r2, r1
 80043de:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e0:	f7fe fc30 	bl	8002c44 <HAL_GetTick>
 80043e4:	0003      	movs	r3, r0
 80043e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ea:	f7fe fc2b 	bl	8002c44 <HAL_GetTick>
 80043ee:	0002      	movs	r2, r0
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e297      	b.n	800492c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043fc:	4b59      	ldr	r3, [pc, #356]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2202      	movs	r2, #2
 8004402:	4013      	ands	r3, r2
 8004404:	d0f1      	beq.n	80043ea <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004406:	4b57      	ldr	r3, [pc, #348]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	22f8      	movs	r2, #248	; 0xf8
 800440c:	4393      	bics	r3, r2
 800440e:	0019      	movs	r1, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	00da      	lsls	r2, r3, #3
 8004416:	4b53      	ldr	r3, [pc, #332]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 8004418:	430a      	orrs	r2, r1
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	e018      	b.n	8004450 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800441e:	4b51      	ldr	r3, [pc, #324]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	4b50      	ldr	r3, [pc, #320]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 8004424:	2101      	movs	r1, #1
 8004426:	438a      	bics	r2, r1
 8004428:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442a:	f7fe fc0b 	bl	8002c44 <HAL_GetTick>
 800442e:	0003      	movs	r3, r0
 8004430:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004434:	f7fe fc06 	bl	8002c44 <HAL_GetTick>
 8004438:	0002      	movs	r2, r0
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e272      	b.n	800492c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004446:	4b47      	ldr	r3, [pc, #284]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2202      	movs	r2, #2
 800444c:	4013      	ands	r3, r2
 800444e:	d1f1      	bne.n	8004434 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2208      	movs	r2, #8
 8004456:	4013      	ands	r3, r2
 8004458:	d036      	beq.n	80044c8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d019      	beq.n	8004496 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004462:	4b40      	ldr	r3, [pc, #256]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 8004464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004466:	4b3f      	ldr	r3, [pc, #252]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 8004468:	2101      	movs	r1, #1
 800446a:	430a      	orrs	r2, r1
 800446c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800446e:	f7fe fbe9 	bl	8002c44 <HAL_GetTick>
 8004472:	0003      	movs	r3, r0
 8004474:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004478:	f7fe fbe4 	bl	8002c44 <HAL_GetTick>
 800447c:	0002      	movs	r2, r0
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e250      	b.n	800492c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448a:	4b36      	ldr	r3, [pc, #216]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	2202      	movs	r2, #2
 8004490:	4013      	ands	r3, r2
 8004492:	d0f1      	beq.n	8004478 <HAL_RCC_OscConfig+0x24c>
 8004494:	e018      	b.n	80044c8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004496:	4b33      	ldr	r3, [pc, #204]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 8004498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800449a:	4b32      	ldr	r3, [pc, #200]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 800449c:	2101      	movs	r1, #1
 800449e:	438a      	bics	r2, r1
 80044a0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a2:	f7fe fbcf 	bl	8002c44 <HAL_GetTick>
 80044a6:	0003      	movs	r3, r0
 80044a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ac:	f7fe fbca 	bl	8002c44 <HAL_GetTick>
 80044b0:	0002      	movs	r2, r0
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e236      	b.n	800492c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044be:	4b29      	ldr	r3, [pc, #164]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	2202      	movs	r2, #2
 80044c4:	4013      	ands	r3, r2
 80044c6:	d1f1      	bne.n	80044ac <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2204      	movs	r2, #4
 80044ce:	4013      	ands	r3, r2
 80044d0:	d100      	bne.n	80044d4 <HAL_RCC_OscConfig+0x2a8>
 80044d2:	e0b5      	b.n	8004640 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044d4:	231f      	movs	r3, #31
 80044d6:	18fb      	adds	r3, r7, r3
 80044d8:	2200      	movs	r2, #0
 80044da:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044dc:	4b21      	ldr	r3, [pc, #132]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80044de:	69da      	ldr	r2, [r3, #28]
 80044e0:	2380      	movs	r3, #128	; 0x80
 80044e2:	055b      	lsls	r3, r3, #21
 80044e4:	4013      	ands	r3, r2
 80044e6:	d111      	bne.n	800450c <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044e8:	4b1e      	ldr	r3, [pc, #120]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80044ea:	69da      	ldr	r2, [r3, #28]
 80044ec:	4b1d      	ldr	r3, [pc, #116]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80044ee:	2180      	movs	r1, #128	; 0x80
 80044f0:	0549      	lsls	r1, r1, #21
 80044f2:	430a      	orrs	r2, r1
 80044f4:	61da      	str	r2, [r3, #28]
 80044f6:	4b1b      	ldr	r3, [pc, #108]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 80044f8:	69da      	ldr	r2, [r3, #28]
 80044fa:	2380      	movs	r3, #128	; 0x80
 80044fc:	055b      	lsls	r3, r3, #21
 80044fe:	4013      	ands	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004504:	231f      	movs	r3, #31
 8004506:	18fb      	adds	r3, r7, r3
 8004508:	2201      	movs	r2, #1
 800450a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450c:	4b18      	ldr	r3, [pc, #96]	; (8004570 <HAL_RCC_OscConfig+0x344>)
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	2380      	movs	r3, #128	; 0x80
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	4013      	ands	r3, r2
 8004516:	d11a      	bne.n	800454e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004518:	4b15      	ldr	r3, [pc, #84]	; (8004570 <HAL_RCC_OscConfig+0x344>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	4b14      	ldr	r3, [pc, #80]	; (8004570 <HAL_RCC_OscConfig+0x344>)
 800451e:	2180      	movs	r1, #128	; 0x80
 8004520:	0049      	lsls	r1, r1, #1
 8004522:	430a      	orrs	r2, r1
 8004524:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004526:	f7fe fb8d 	bl	8002c44 <HAL_GetTick>
 800452a:	0003      	movs	r3, r0
 800452c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004530:	f7fe fb88 	bl	8002c44 <HAL_GetTick>
 8004534:	0002      	movs	r2, r0
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b64      	cmp	r3, #100	; 0x64
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e1f4      	b.n	800492c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004542:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <HAL_RCC_OscConfig+0x344>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	2380      	movs	r3, #128	; 0x80
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	4013      	ands	r3, r2
 800454c:	d0f0      	beq.n	8004530 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d10e      	bne.n	8004574 <HAL_RCC_OscConfig+0x348>
 8004556:	4b03      	ldr	r3, [pc, #12]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 8004558:	6a1a      	ldr	r2, [r3, #32]
 800455a:	4b02      	ldr	r3, [pc, #8]	; (8004564 <HAL_RCC_OscConfig+0x338>)
 800455c:	2101      	movs	r1, #1
 800455e:	430a      	orrs	r2, r1
 8004560:	621a      	str	r2, [r3, #32]
 8004562:	e035      	b.n	80045d0 <HAL_RCC_OscConfig+0x3a4>
 8004564:	40021000 	.word	0x40021000
 8004568:	fffeffff 	.word	0xfffeffff
 800456c:	fffbffff 	.word	0xfffbffff
 8004570:	40007000 	.word	0x40007000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10c      	bne.n	8004596 <HAL_RCC_OscConfig+0x36a>
 800457c:	4bca      	ldr	r3, [pc, #808]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 800457e:	6a1a      	ldr	r2, [r3, #32]
 8004580:	4bc9      	ldr	r3, [pc, #804]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 8004582:	2101      	movs	r1, #1
 8004584:	438a      	bics	r2, r1
 8004586:	621a      	str	r2, [r3, #32]
 8004588:	4bc7      	ldr	r3, [pc, #796]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 800458a:	6a1a      	ldr	r2, [r3, #32]
 800458c:	4bc6      	ldr	r3, [pc, #792]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 800458e:	2104      	movs	r1, #4
 8004590:	438a      	bics	r2, r1
 8004592:	621a      	str	r2, [r3, #32]
 8004594:	e01c      	b.n	80045d0 <HAL_RCC_OscConfig+0x3a4>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	2b05      	cmp	r3, #5
 800459c:	d10c      	bne.n	80045b8 <HAL_RCC_OscConfig+0x38c>
 800459e:	4bc2      	ldr	r3, [pc, #776]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80045a0:	6a1a      	ldr	r2, [r3, #32]
 80045a2:	4bc1      	ldr	r3, [pc, #772]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80045a4:	2104      	movs	r1, #4
 80045a6:	430a      	orrs	r2, r1
 80045a8:	621a      	str	r2, [r3, #32]
 80045aa:	4bbf      	ldr	r3, [pc, #764]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80045ac:	6a1a      	ldr	r2, [r3, #32]
 80045ae:	4bbe      	ldr	r3, [pc, #760]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80045b0:	2101      	movs	r1, #1
 80045b2:	430a      	orrs	r2, r1
 80045b4:	621a      	str	r2, [r3, #32]
 80045b6:	e00b      	b.n	80045d0 <HAL_RCC_OscConfig+0x3a4>
 80045b8:	4bbb      	ldr	r3, [pc, #748]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80045ba:	6a1a      	ldr	r2, [r3, #32]
 80045bc:	4bba      	ldr	r3, [pc, #744]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80045be:	2101      	movs	r1, #1
 80045c0:	438a      	bics	r2, r1
 80045c2:	621a      	str	r2, [r3, #32]
 80045c4:	4bb8      	ldr	r3, [pc, #736]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80045c6:	6a1a      	ldr	r2, [r3, #32]
 80045c8:	4bb7      	ldr	r3, [pc, #732]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80045ca:	2104      	movs	r1, #4
 80045cc:	438a      	bics	r2, r1
 80045ce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d014      	beq.n	8004602 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d8:	f7fe fb34 	bl	8002c44 <HAL_GetTick>
 80045dc:	0003      	movs	r3, r0
 80045de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e0:	e009      	b.n	80045f6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e2:	f7fe fb2f 	bl	8002c44 <HAL_GetTick>
 80045e6:	0002      	movs	r2, r0
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	4aaf      	ldr	r2, [pc, #700]	; (80048ac <HAL_RCC_OscConfig+0x680>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e19a      	b.n	800492c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f6:	4bac      	ldr	r3, [pc, #688]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	2202      	movs	r2, #2
 80045fc:	4013      	ands	r3, r2
 80045fe:	d0f0      	beq.n	80045e2 <HAL_RCC_OscConfig+0x3b6>
 8004600:	e013      	b.n	800462a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004602:	f7fe fb1f 	bl	8002c44 <HAL_GetTick>
 8004606:	0003      	movs	r3, r0
 8004608:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800460a:	e009      	b.n	8004620 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800460c:	f7fe fb1a 	bl	8002c44 <HAL_GetTick>
 8004610:	0002      	movs	r2, r0
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	4aa5      	ldr	r2, [pc, #660]	; (80048ac <HAL_RCC_OscConfig+0x680>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e185      	b.n	800492c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004620:	4ba1      	ldr	r3, [pc, #644]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	2202      	movs	r2, #2
 8004626:	4013      	ands	r3, r2
 8004628:	d1f0      	bne.n	800460c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800462a:	231f      	movs	r3, #31
 800462c:	18fb      	adds	r3, r7, r3
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d105      	bne.n	8004640 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004634:	4b9c      	ldr	r3, [pc, #624]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 8004636:	69da      	ldr	r2, [r3, #28]
 8004638:	4b9b      	ldr	r3, [pc, #620]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 800463a:	499d      	ldr	r1, [pc, #628]	; (80048b0 <HAL_RCC_OscConfig+0x684>)
 800463c:	400a      	ands	r2, r1
 800463e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2210      	movs	r2, #16
 8004646:	4013      	ands	r3, r2
 8004648:	d063      	beq.n	8004712 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d12a      	bne.n	80046a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004652:	4b95      	ldr	r3, [pc, #596]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 8004654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004656:	4b94      	ldr	r3, [pc, #592]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 8004658:	2104      	movs	r1, #4
 800465a:	430a      	orrs	r2, r1
 800465c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800465e:	4b92      	ldr	r3, [pc, #584]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 8004660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004662:	4b91      	ldr	r3, [pc, #580]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 8004664:	2101      	movs	r1, #1
 8004666:	430a      	orrs	r2, r1
 8004668:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800466a:	f7fe faeb 	bl	8002c44 <HAL_GetTick>
 800466e:	0003      	movs	r3, r0
 8004670:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004674:	f7fe fae6 	bl	8002c44 <HAL_GetTick>
 8004678:	0002      	movs	r2, r0
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e152      	b.n	800492c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004686:	4b88      	ldr	r3, [pc, #544]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 8004688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468a:	2202      	movs	r2, #2
 800468c:	4013      	ands	r3, r2
 800468e:	d0f1      	beq.n	8004674 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004690:	4b85      	ldr	r3, [pc, #532]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 8004692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004694:	22f8      	movs	r2, #248	; 0xf8
 8004696:	4393      	bics	r3, r2
 8004698:	0019      	movs	r1, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	00da      	lsls	r2, r3, #3
 80046a0:	4b81      	ldr	r3, [pc, #516]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80046a2:	430a      	orrs	r2, r1
 80046a4:	635a      	str	r2, [r3, #52]	; 0x34
 80046a6:	e034      	b.n	8004712 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	3305      	adds	r3, #5
 80046ae:	d111      	bne.n	80046d4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80046b0:	4b7d      	ldr	r3, [pc, #500]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80046b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b4:	4b7c      	ldr	r3, [pc, #496]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80046b6:	2104      	movs	r1, #4
 80046b8:	438a      	bics	r2, r1
 80046ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80046bc:	4b7a      	ldr	r3, [pc, #488]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80046be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c0:	22f8      	movs	r2, #248	; 0xf8
 80046c2:	4393      	bics	r3, r2
 80046c4:	0019      	movs	r1, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	00da      	lsls	r2, r3, #3
 80046cc:	4b76      	ldr	r3, [pc, #472]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80046ce:	430a      	orrs	r2, r1
 80046d0:	635a      	str	r2, [r3, #52]	; 0x34
 80046d2:	e01e      	b.n	8004712 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80046d4:	4b74      	ldr	r3, [pc, #464]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80046d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d8:	4b73      	ldr	r3, [pc, #460]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80046da:	2104      	movs	r1, #4
 80046dc:	430a      	orrs	r2, r1
 80046de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80046e0:	4b71      	ldr	r3, [pc, #452]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80046e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046e4:	4b70      	ldr	r3, [pc, #448]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80046e6:	2101      	movs	r1, #1
 80046e8:	438a      	bics	r2, r1
 80046ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ec:	f7fe faaa 	bl	8002c44 <HAL_GetTick>
 80046f0:	0003      	movs	r3, r0
 80046f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80046f6:	f7fe faa5 	bl	8002c44 <HAL_GetTick>
 80046fa:	0002      	movs	r2, r0
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e111      	b.n	800492c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004708:	4b67      	ldr	r3, [pc, #412]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 800470a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470c:	2202      	movs	r2, #2
 800470e:	4013      	ands	r3, r2
 8004710:	d1f1      	bne.n	80046f6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2220      	movs	r2, #32
 8004718:	4013      	ands	r3, r2
 800471a:	d05c      	beq.n	80047d6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800471c:	4b62      	ldr	r3, [pc, #392]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	220c      	movs	r2, #12
 8004722:	4013      	ands	r3, r2
 8004724:	2b0c      	cmp	r3, #12
 8004726:	d00e      	beq.n	8004746 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004728:	4b5f      	ldr	r3, [pc, #380]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	220c      	movs	r2, #12
 800472e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004730:	2b08      	cmp	r3, #8
 8004732:	d114      	bne.n	800475e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004734:	4b5c      	ldr	r3, [pc, #368]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	23c0      	movs	r3, #192	; 0xc0
 800473a:	025b      	lsls	r3, r3, #9
 800473c:	401a      	ands	r2, r3
 800473e:	23c0      	movs	r3, #192	; 0xc0
 8004740:	025b      	lsls	r3, r3, #9
 8004742:	429a      	cmp	r2, r3
 8004744:	d10b      	bne.n	800475e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004746:	4b58      	ldr	r3, [pc, #352]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 8004748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800474a:	2380      	movs	r3, #128	; 0x80
 800474c:	025b      	lsls	r3, r3, #9
 800474e:	4013      	ands	r3, r2
 8004750:	d040      	beq.n	80047d4 <HAL_RCC_OscConfig+0x5a8>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d03c      	beq.n	80047d4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e0e6      	b.n	800492c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d01b      	beq.n	800479e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004766:	4b50      	ldr	r3, [pc, #320]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 8004768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800476a:	4b4f      	ldr	r3, [pc, #316]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 800476c:	2180      	movs	r1, #128	; 0x80
 800476e:	0249      	lsls	r1, r1, #9
 8004770:	430a      	orrs	r2, r1
 8004772:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004774:	f7fe fa66 	bl	8002c44 <HAL_GetTick>
 8004778:	0003      	movs	r3, r0
 800477a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800477e:	f7fe fa61 	bl	8002c44 <HAL_GetTick>
 8004782:	0002      	movs	r2, r0
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e0cd      	b.n	800492c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004790:	4b45      	ldr	r3, [pc, #276]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 8004792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004794:	2380      	movs	r3, #128	; 0x80
 8004796:	025b      	lsls	r3, r3, #9
 8004798:	4013      	ands	r3, r2
 800479a:	d0f0      	beq.n	800477e <HAL_RCC_OscConfig+0x552>
 800479c:	e01b      	b.n	80047d6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800479e:	4b42      	ldr	r3, [pc, #264]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80047a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047a2:	4b41      	ldr	r3, [pc, #260]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80047a4:	4943      	ldr	r1, [pc, #268]	; (80048b4 <HAL_RCC_OscConfig+0x688>)
 80047a6:	400a      	ands	r2, r1
 80047a8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047aa:	f7fe fa4b 	bl	8002c44 <HAL_GetTick>
 80047ae:	0003      	movs	r3, r0
 80047b0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047b4:	f7fe fa46 	bl	8002c44 <HAL_GetTick>
 80047b8:	0002      	movs	r2, r0
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e0b2      	b.n	800492c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80047c6:	4b38      	ldr	r3, [pc, #224]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80047c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ca:	2380      	movs	r3, #128	; 0x80
 80047cc:	025b      	lsls	r3, r3, #9
 80047ce:	4013      	ands	r3, r2
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x588>
 80047d2:	e000      	b.n	80047d6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80047d4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d100      	bne.n	80047e0 <HAL_RCC_OscConfig+0x5b4>
 80047de:	e0a4      	b.n	800492a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047e0:	4b31      	ldr	r3, [pc, #196]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	220c      	movs	r2, #12
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d100      	bne.n	80047ee <HAL_RCC_OscConfig+0x5c2>
 80047ec:	e078      	b.n	80048e0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d14c      	bne.n	8004890 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f6:	4b2c      	ldr	r3, [pc, #176]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4b2b      	ldr	r3, [pc, #172]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 80047fc:	492e      	ldr	r1, [pc, #184]	; (80048b8 <HAL_RCC_OscConfig+0x68c>)
 80047fe:	400a      	ands	r2, r1
 8004800:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004802:	f7fe fa1f 	bl	8002c44 <HAL_GetTick>
 8004806:	0003      	movs	r3, r0
 8004808:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800480c:	f7fe fa1a 	bl	8002c44 <HAL_GetTick>
 8004810:	0002      	movs	r2, r0
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e086      	b.n	800492c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800481e:	4b22      	ldr	r3, [pc, #136]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	2380      	movs	r3, #128	; 0x80
 8004824:	049b      	lsls	r3, r3, #18
 8004826:	4013      	ands	r3, r2
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800482a:	4b1f      	ldr	r3, [pc, #124]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	220f      	movs	r2, #15
 8004830:	4393      	bics	r3, r2
 8004832:	0019      	movs	r1, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004838:	4b1b      	ldr	r3, [pc, #108]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 800483a:	430a      	orrs	r2, r1
 800483c:	62da      	str	r2, [r3, #44]	; 0x2c
 800483e:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	4a1e      	ldr	r2, [pc, #120]	; (80048bc <HAL_RCC_OscConfig+0x690>)
 8004844:	4013      	ands	r3, r2
 8004846:	0019      	movs	r1, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004850:	431a      	orrs	r2, r3
 8004852:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 8004854:	430a      	orrs	r2, r1
 8004856:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004858:	4b13      	ldr	r3, [pc, #76]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 800485e:	2180      	movs	r1, #128	; 0x80
 8004860:	0449      	lsls	r1, r1, #17
 8004862:	430a      	orrs	r2, r1
 8004864:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004866:	f7fe f9ed 	bl	8002c44 <HAL_GetTick>
 800486a:	0003      	movs	r3, r0
 800486c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004870:	f7fe f9e8 	bl	8002c44 <HAL_GetTick>
 8004874:	0002      	movs	r2, r0
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e054      	b.n	800492c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004882:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	2380      	movs	r3, #128	; 0x80
 8004888:	049b      	lsls	r3, r3, #18
 800488a:	4013      	ands	r3, r2
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0x644>
 800488e:	e04c      	b.n	800492a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004890:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <HAL_RCC_OscConfig+0x67c>)
 8004896:	4908      	ldr	r1, [pc, #32]	; (80048b8 <HAL_RCC_OscConfig+0x68c>)
 8004898:	400a      	ands	r2, r1
 800489a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489c:	f7fe f9d2 	bl	8002c44 <HAL_GetTick>
 80048a0:	0003      	movs	r3, r0
 80048a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048a4:	e015      	b.n	80048d2 <HAL_RCC_OscConfig+0x6a6>
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	40021000 	.word	0x40021000
 80048ac:	00001388 	.word	0x00001388
 80048b0:	efffffff 	.word	0xefffffff
 80048b4:	fffeffff 	.word	0xfffeffff
 80048b8:	feffffff 	.word	0xfeffffff
 80048bc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c0:	f7fe f9c0 	bl	8002c44 <HAL_GetTick>
 80048c4:	0002      	movs	r2, r0
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e02c      	b.n	800492c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048d2:	4b18      	ldr	r3, [pc, #96]	; (8004934 <HAL_RCC_OscConfig+0x708>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	2380      	movs	r3, #128	; 0x80
 80048d8:	049b      	lsls	r3, r3, #18
 80048da:	4013      	ands	r3, r2
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0x694>
 80048de:	e024      	b.n	800492a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e01f      	b.n	800492c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80048ec:	4b11      	ldr	r3, [pc, #68]	; (8004934 <HAL_RCC_OscConfig+0x708>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80048f2:	4b10      	ldr	r3, [pc, #64]	; (8004934 <HAL_RCC_OscConfig+0x708>)
 80048f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	23c0      	movs	r3, #192	; 0xc0
 80048fc:	025b      	lsls	r3, r3, #9
 80048fe:	401a      	ands	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004904:	429a      	cmp	r2, r3
 8004906:	d10e      	bne.n	8004926 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	220f      	movs	r2, #15
 800490c:	401a      	ands	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004912:	429a      	cmp	r2, r3
 8004914:	d107      	bne.n	8004926 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	23f0      	movs	r3, #240	; 0xf0
 800491a:	039b      	lsls	r3, r3, #14
 800491c:	401a      	ands	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004922:	429a      	cmp	r2, r3
 8004924:	d001      	beq.n	800492a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e000      	b.n	800492c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	0018      	movs	r0, r3
 800492e:	46bd      	mov	sp, r7
 8004930:	b008      	add	sp, #32
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40021000 	.word	0x40021000

08004938 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e0bf      	b.n	8004acc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800494c:	4b61      	ldr	r3, [pc, #388]	; (8004ad4 <HAL_RCC_ClockConfig+0x19c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2201      	movs	r2, #1
 8004952:	4013      	ands	r3, r2
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d911      	bls.n	800497e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495a:	4b5e      	ldr	r3, [pc, #376]	; (8004ad4 <HAL_RCC_ClockConfig+0x19c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2201      	movs	r2, #1
 8004960:	4393      	bics	r3, r2
 8004962:	0019      	movs	r1, r3
 8004964:	4b5b      	ldr	r3, [pc, #364]	; (8004ad4 <HAL_RCC_ClockConfig+0x19c>)
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800496c:	4b59      	ldr	r3, [pc, #356]	; (8004ad4 <HAL_RCC_ClockConfig+0x19c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2201      	movs	r2, #1
 8004972:	4013      	ands	r3, r2
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d001      	beq.n	800497e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e0a6      	b.n	8004acc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2202      	movs	r2, #2
 8004984:	4013      	ands	r3, r2
 8004986:	d015      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2204      	movs	r2, #4
 800498e:	4013      	ands	r3, r2
 8004990:	d006      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004992:	4b51      	ldr	r3, [pc, #324]	; (8004ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	4b50      	ldr	r3, [pc, #320]	; (8004ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8004998:	21e0      	movs	r1, #224	; 0xe0
 800499a:	00c9      	lsls	r1, r1, #3
 800499c:	430a      	orrs	r2, r1
 800499e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a0:	4b4d      	ldr	r3, [pc, #308]	; (8004ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	22f0      	movs	r2, #240	; 0xf0
 80049a6:	4393      	bics	r3, r2
 80049a8:	0019      	movs	r1, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	4b4a      	ldr	r3, [pc, #296]	; (8004ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80049b0:	430a      	orrs	r2, r1
 80049b2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2201      	movs	r2, #1
 80049ba:	4013      	ands	r3, r2
 80049bc:	d04c      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d107      	bne.n	80049d6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049c6:	4b44      	ldr	r3, [pc, #272]	; (8004ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	2380      	movs	r3, #128	; 0x80
 80049cc:	029b      	lsls	r3, r3, #10
 80049ce:	4013      	ands	r3, r2
 80049d0:	d120      	bne.n	8004a14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e07a      	b.n	8004acc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d107      	bne.n	80049ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049de:	4b3e      	ldr	r3, [pc, #248]	; (8004ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	2380      	movs	r3, #128	; 0x80
 80049e4:	049b      	lsls	r3, r3, #18
 80049e6:	4013      	ands	r3, r2
 80049e8:	d114      	bne.n	8004a14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e06e      	b.n	8004acc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d107      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80049f6:	4b38      	ldr	r3, [pc, #224]	; (8004ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80049f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049fa:	2380      	movs	r3, #128	; 0x80
 80049fc:	025b      	lsls	r3, r3, #9
 80049fe:	4013      	ands	r3, r2
 8004a00:	d108      	bne.n	8004a14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e062      	b.n	8004acc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a06:	4b34      	ldr	r3, [pc, #208]	; (8004ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d101      	bne.n	8004a14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e05b      	b.n	8004acc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a14:	4b30      	ldr	r3, [pc, #192]	; (8004ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2203      	movs	r2, #3
 8004a1a:	4393      	bics	r3, r2
 8004a1c:	0019      	movs	r1, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	4b2d      	ldr	r3, [pc, #180]	; (8004ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8004a24:	430a      	orrs	r2, r1
 8004a26:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a28:	f7fe f90c 	bl	8002c44 <HAL_GetTick>
 8004a2c:	0003      	movs	r3, r0
 8004a2e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a30:	e009      	b.n	8004a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a32:	f7fe f907 	bl	8002c44 <HAL_GetTick>
 8004a36:	0002      	movs	r2, r0
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	4a27      	ldr	r2, [pc, #156]	; (8004adc <HAL_RCC_ClockConfig+0x1a4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e042      	b.n	8004acc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a46:	4b24      	ldr	r3, [pc, #144]	; (8004ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	220c      	movs	r2, #12
 8004a4c:	401a      	ands	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d1ec      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a58:	4b1e      	ldr	r3, [pc, #120]	; (8004ad4 <HAL_RCC_ClockConfig+0x19c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	4013      	ands	r3, r2
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d211      	bcs.n	8004a8a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a66:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <HAL_RCC_ClockConfig+0x19c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	4393      	bics	r3, r2
 8004a6e:	0019      	movs	r1, r3
 8004a70:	4b18      	ldr	r3, [pc, #96]	; (8004ad4 <HAL_RCC_ClockConfig+0x19c>)
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a78:	4b16      	ldr	r3, [pc, #88]	; (8004ad4 <HAL_RCC_ClockConfig+0x19c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	4013      	ands	r3, r2
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d001      	beq.n	8004a8a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e020      	b.n	8004acc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2204      	movs	r2, #4
 8004a90:	4013      	ands	r3, r2
 8004a92:	d009      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004a94:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	4a11      	ldr	r2, [pc, #68]	; (8004ae0 <HAL_RCC_ClockConfig+0x1a8>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	0019      	movs	r1, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004aa8:	f000 f820 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 8004aac:	0001      	movs	r1, r0
 8004aae:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	220f      	movs	r2, #15
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	4a0a      	ldr	r2, [pc, #40]	; (8004ae4 <HAL_RCC_ClockConfig+0x1ac>)
 8004aba:	5cd3      	ldrb	r3, [r2, r3]
 8004abc:	000a      	movs	r2, r1
 8004abe:	40da      	lsrs	r2, r3
 8004ac0:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <HAL_RCC_ClockConfig+0x1b0>)
 8004ac2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	f7fd ffe7 	bl	8002a98 <HAL_InitTick>
  
  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	0018      	movs	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	b004      	add	sp, #16
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40022000 	.word	0x40022000
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	00001388 	.word	0x00001388
 8004ae0:	fffff8ff 	.word	0xfffff8ff
 8004ae4:	08007fe0 	.word	0x08007fe0
 8004ae8:	20000078 	.word	0x20000078

08004aec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aec:	b590      	push	{r4, r7, lr}
 8004aee:	b08f      	sub	sp, #60	; 0x3c
 8004af0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004af2:	2314      	movs	r3, #20
 8004af4:	18fb      	adds	r3, r7, r3
 8004af6:	4a37      	ldr	r2, [pc, #220]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0xe8>)
 8004af8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004afa:	c313      	stmia	r3!, {r0, r1, r4}
 8004afc:	6812      	ldr	r2, [r2, #0]
 8004afe:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004b00:	1d3b      	adds	r3, r7, #4
 8004b02:	4a35      	ldr	r2, [pc, #212]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0xec>)
 8004b04:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004b06:	c313      	stmia	r3!, {r0, r1, r4}
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b10:	2300      	movs	r3, #0
 8004b12:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b14:	2300      	movs	r3, #0
 8004b16:	637b      	str	r3, [r7, #52]	; 0x34
 8004b18:	2300      	movs	r3, #0
 8004b1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004b20:	4b2e      	ldr	r3, [pc, #184]	; (8004bdc <HAL_RCC_GetSysClockFreq+0xf0>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b28:	220c      	movs	r2, #12
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d006      	beq.n	8004b3e <HAL_RCC_GetSysClockFreq+0x52>
 8004b30:	2b0c      	cmp	r3, #12
 8004b32:	d043      	beq.n	8004bbc <HAL_RCC_GetSysClockFreq+0xd0>
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d144      	bne.n	8004bc2 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b38:	4b29      	ldr	r3, [pc, #164]	; (8004be0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004b3a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b3c:	e044      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b40:	0c9b      	lsrs	r3, r3, #18
 8004b42:	220f      	movs	r2, #15
 8004b44:	4013      	ands	r3, r2
 8004b46:	2214      	movs	r2, #20
 8004b48:	18ba      	adds	r2, r7, r2
 8004b4a:	5cd3      	ldrb	r3, [r2, r3]
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004b4e:	4b23      	ldr	r3, [pc, #140]	; (8004bdc <HAL_RCC_GetSysClockFreq+0xf0>)
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	220f      	movs	r2, #15
 8004b54:	4013      	ands	r3, r2
 8004b56:	1d3a      	adds	r2, r7, #4
 8004b58:	5cd3      	ldrb	r3, [r2, r3]
 8004b5a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b5e:	23c0      	movs	r3, #192	; 0xc0
 8004b60:	025b      	lsls	r3, r3, #9
 8004b62:	401a      	ands	r2, r3
 8004b64:	2380      	movs	r3, #128	; 0x80
 8004b66:	025b      	lsls	r3, r3, #9
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d109      	bne.n	8004b80 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b6e:	481c      	ldr	r0, [pc, #112]	; (8004be0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004b70:	f7fb faca 	bl	8000108 <__udivsi3>
 8004b74:	0003      	movs	r3, r0
 8004b76:	001a      	movs	r2, r3
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	4353      	muls	r3, r2
 8004b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b7e:	e01a      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b82:	23c0      	movs	r3, #192	; 0xc0
 8004b84:	025b      	lsls	r3, r3, #9
 8004b86:	401a      	ands	r2, r3
 8004b88:	23c0      	movs	r3, #192	; 0xc0
 8004b8a:	025b      	lsls	r3, r3, #9
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d109      	bne.n	8004ba4 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b92:	4814      	ldr	r0, [pc, #80]	; (8004be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b94:	f7fb fab8 	bl	8000108 <__udivsi3>
 8004b98:	0003      	movs	r3, r0
 8004b9a:	001a      	movs	r2, r3
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	4353      	muls	r3, r2
 8004ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ba6:	480e      	ldr	r0, [pc, #56]	; (8004be0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004ba8:	f7fb faae 	bl	8000108 <__udivsi3>
 8004bac:	0003      	movs	r3, r0
 8004bae:	001a      	movs	r2, r3
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	4353      	muls	r3, r2
 8004bb4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004bba:	e005      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004bbc:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bbe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004bc0:	e002      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bc2:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004bc4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004bc6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004bca:	0018      	movs	r0, r3
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	b00f      	add	sp, #60	; 0x3c
 8004bd0:	bd90      	pop	{r4, r7, pc}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	08007ebc 	.word	0x08007ebc
 8004bd8:	08007ecc 	.word	0x08007ecc
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	007a1200 	.word	0x007a1200
 8004be4:	02dc6c00 	.word	0x02dc6c00

08004be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bec:	4b02      	ldr	r3, [pc, #8]	; (8004bf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bee:	681b      	ldr	r3, [r3, #0]
}
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	20000078 	.word	0x20000078

08004bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004c00:	f7ff fff2 	bl	8004be8 <HAL_RCC_GetHCLKFreq>
 8004c04:	0001      	movs	r1, r0
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	0a1b      	lsrs	r3, r3, #8
 8004c0c:	2207      	movs	r2, #7
 8004c0e:	4013      	ands	r3, r2
 8004c10:	4a04      	ldr	r2, [pc, #16]	; (8004c24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c12:	5cd3      	ldrb	r3, [r2, r3]
 8004c14:	40d9      	lsrs	r1, r3
 8004c16:	000b      	movs	r3, r1
}    
 8004c18:	0018      	movs	r0, r3
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	40021000 	.word	0x40021000
 8004c24:	08007ff0 	.word	0x08007ff0

08004c28 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2207      	movs	r2, #7
 8004c36:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c38:	4b0e      	ldr	r3, [pc, #56]	; (8004c74 <HAL_RCC_GetClockConfig+0x4c>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	401a      	ands	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004c44:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <HAL_RCC_GetClockConfig+0x4c>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	22f0      	movs	r2, #240	; 0xf0
 8004c4a:	401a      	ands	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8004c50:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <HAL_RCC_GetClockConfig+0x4c>)
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	23e0      	movs	r3, #224	; 0xe0
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	401a      	ands	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8004c5e:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <HAL_RCC_GetClockConfig+0x50>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2201      	movs	r2, #1
 8004c64:	401a      	ands	r2, r3
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	601a      	str	r2, [r3, #0]
}
 8004c6a:	46c0      	nop			; (mov r8, r8)
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	b002      	add	sp, #8
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	46c0      	nop			; (mov r8, r8)
 8004c74:	40021000 	.word	0x40021000
 8004c78:	40022000 	.word	0x40022000

08004c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	2380      	movs	r3, #128	; 0x80
 8004c92:	025b      	lsls	r3, r3, #9
 8004c94:	4013      	ands	r3, r2
 8004c96:	d100      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004c98:	e08f      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004c9a:	2317      	movs	r3, #23
 8004c9c:	18fb      	adds	r3, r7, r3
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ca2:	4b6f      	ldr	r3, [pc, #444]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004ca4:	69da      	ldr	r2, [r3, #28]
 8004ca6:	2380      	movs	r3, #128	; 0x80
 8004ca8:	055b      	lsls	r3, r3, #21
 8004caa:	4013      	ands	r3, r2
 8004cac:	d111      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cae:	4b6c      	ldr	r3, [pc, #432]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004cb0:	69da      	ldr	r2, [r3, #28]
 8004cb2:	4b6b      	ldr	r3, [pc, #428]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004cb4:	2180      	movs	r1, #128	; 0x80
 8004cb6:	0549      	lsls	r1, r1, #21
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	61da      	str	r2, [r3, #28]
 8004cbc:	4b68      	ldr	r3, [pc, #416]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004cbe:	69da      	ldr	r2, [r3, #28]
 8004cc0:	2380      	movs	r3, #128	; 0x80
 8004cc2:	055b      	lsls	r3, r3, #21
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cca:	2317      	movs	r3, #23
 8004ccc:	18fb      	adds	r3, r7, r3
 8004cce:	2201      	movs	r2, #1
 8004cd0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd2:	4b64      	ldr	r3, [pc, #400]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	2380      	movs	r3, #128	; 0x80
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d11a      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cde:	4b61      	ldr	r3, [pc, #388]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b60      	ldr	r3, [pc, #384]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004ce4:	2180      	movs	r1, #128	; 0x80
 8004ce6:	0049      	lsls	r1, r1, #1
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cec:	f7fd ffaa 	bl	8002c44 <HAL_GetTick>
 8004cf0:	0003      	movs	r3, r0
 8004cf2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf4:	e008      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf6:	f7fd ffa5 	bl	8002c44 <HAL_GetTick>
 8004cfa:	0002      	movs	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b64      	cmp	r3, #100	; 0x64
 8004d02:	d901      	bls.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e0a6      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d08:	4b56      	ldr	r3, [pc, #344]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	2380      	movs	r3, #128	; 0x80
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	4013      	ands	r3, r2
 8004d12:	d0f0      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d14:	4b52      	ldr	r3, [pc, #328]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d16:	6a1a      	ldr	r2, [r3, #32]
 8004d18:	23c0      	movs	r3, #192	; 0xc0
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d034      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	23c0      	movs	r3, #192	; 0xc0
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4013      	ands	r3, r2
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d02c      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d36:	4b4a      	ldr	r3, [pc, #296]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	4a4b      	ldr	r2, [pc, #300]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d40:	4b47      	ldr	r3, [pc, #284]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d42:	6a1a      	ldr	r2, [r3, #32]
 8004d44:	4b46      	ldr	r3, [pc, #280]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d46:	2180      	movs	r1, #128	; 0x80
 8004d48:	0249      	lsls	r1, r1, #9
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d4e:	4b44      	ldr	r3, [pc, #272]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d50:	6a1a      	ldr	r2, [r3, #32]
 8004d52:	4b43      	ldr	r3, [pc, #268]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d54:	4945      	ldr	r1, [pc, #276]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004d56:	400a      	ands	r2, r1
 8004d58:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d5a:	4b41      	ldr	r3, [pc, #260]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2201      	movs	r2, #1
 8004d64:	4013      	ands	r3, r2
 8004d66:	d013      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d68:	f7fd ff6c 	bl	8002c44 <HAL_GetTick>
 8004d6c:	0003      	movs	r3, r0
 8004d6e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d70:	e009      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d72:	f7fd ff67 	bl	8002c44 <HAL_GetTick>
 8004d76:	0002      	movs	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	4a3c      	ldr	r2, [pc, #240]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e067      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d86:	4b36      	ldr	r3, [pc, #216]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d0f0      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d90:	4b33      	ldr	r3, [pc, #204]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	4a34      	ldr	r2, [pc, #208]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	0019      	movs	r1, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	4b30      	ldr	r3, [pc, #192]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004da0:	430a      	orrs	r2, r1
 8004da2:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004da4:	2317      	movs	r3, #23
 8004da6:	18fb      	adds	r3, r7, r3
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d105      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dae:	4b2c      	ldr	r3, [pc, #176]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004db0:	69da      	ldr	r2, [r3, #28]
 8004db2:	4b2b      	ldr	r3, [pc, #172]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004db4:	492f      	ldr	r1, [pc, #188]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004db6:	400a      	ands	r2, r1
 8004db8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	d009      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dc4:	4b26      	ldr	r3, [pc, #152]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	2203      	movs	r2, #3
 8004dca:	4393      	bics	r3, r2
 8004dcc:	0019      	movs	r1, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	4b23      	ldr	r3, [pc, #140]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2202      	movs	r2, #2
 8004dde:	4013      	ands	r3, r2
 8004de0:	d009      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004de2:	4b1f      	ldr	r3, [pc, #124]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de6:	4a24      	ldr	r2, [pc, #144]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	0019      	movs	r1, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004df2:	430a      	orrs	r2, r1
 8004df4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	d009      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e00:	4b17      	ldr	r3, [pc, #92]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	2210      	movs	r2, #16
 8004e06:	4393      	bics	r3, r2
 8004e08:	0019      	movs	r1, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691a      	ldr	r2, [r3, #16]
 8004e0e:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e10:	430a      	orrs	r2, r1
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	2380      	movs	r3, #128	; 0x80
 8004e1a:	029b      	lsls	r3, r3, #10
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d009      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e20:	4b0f      	ldr	r3, [pc, #60]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	2280      	movs	r2, #128	; 0x80
 8004e26:	4393      	bics	r3, r2
 8004e28:	0019      	movs	r1, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699a      	ldr	r2, [r3, #24]
 8004e2e:	4b0c      	ldr	r3, [pc, #48]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e30:	430a      	orrs	r2, r1
 8004e32:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	2380      	movs	r3, #128	; 0x80
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d009      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e40:	4b07      	ldr	r3, [pc, #28]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e44:	2240      	movs	r2, #64	; 0x40
 8004e46:	4393      	bics	r3, r2
 8004e48:	0019      	movs	r1, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695a      	ldr	r2, [r3, #20]
 8004e4e:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004e50:	430a      	orrs	r2, r1
 8004e52:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	0018      	movs	r0, r3
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	b006      	add	sp, #24
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	40021000 	.word	0x40021000
 8004e64:	40007000 	.word	0x40007000
 8004e68:	fffffcff 	.word	0xfffffcff
 8004e6c:	fffeffff 	.word	0xfffeffff
 8004e70:	00001388 	.word	0x00001388
 8004e74:	efffffff 	.word	0xefffffff
 8004e78:	fffcffff 	.word	0xfffcffff

08004e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e01e      	b.n	8004ecc <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	223d      	movs	r2, #61	; 0x3d
 8004e92:	5c9b      	ldrb	r3, [r3, r2]
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d107      	bne.n	8004eaa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	223c      	movs	r2, #60	; 0x3c
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f7fd fd75 	bl	8002994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	223d      	movs	r2, #61	; 0x3d
 8004eae:	2102      	movs	r1, #2
 8004eb0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	0019      	movs	r1, r3
 8004ebc:	0010      	movs	r0, r2
 8004ebe:	f000 f983 	bl	80051c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	223d      	movs	r2, #61	; 0x3d
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	0018      	movs	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	b002      	add	sp, #8
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	223d      	movs	r2, #61	; 0x3d
 8004ee0:	2102      	movs	r1, #2
 8004ee2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	2207      	movs	r2, #7
 8004eec:	4013      	ands	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b06      	cmp	r3, #6
 8004ef4:	d007      	beq.n	8004f06 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2101      	movs	r1, #1
 8004f02:	430a      	orrs	r2, r1
 8004f04:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	223d      	movs	r2, #61	; 0x3d
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	0018      	movs	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	b004      	add	sp, #16
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	2207      	movs	r2, #7
 8004f38:	4013      	ands	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b06      	cmp	r3, #6
 8004f40:	d007      	beq.n	8004f52 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	0018      	movs	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b004      	add	sp, #16
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d124      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	2202      	movs	r2, #2
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d11d      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2203      	movs	r2, #3
 8004f86:	4252      	negs	r2, r2
 8004f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	2203      	movs	r2, #3
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d004      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f000 f8fa 	bl	8005198 <HAL_TIM_IC_CaptureCallback>
 8004fa4:	e007      	b.n	8004fb6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	0018      	movs	r0, r3
 8004faa:	f000 f8ed 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f000 f8f9 	bl	80051a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	2204      	movs	r2, #4
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d125      	bne.n	8005016 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d11e      	bne.n	8005016 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2205      	movs	r2, #5
 8004fde:	4252      	negs	r2, r2
 8004fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699a      	ldr	r2, [r3, #24]
 8004fee:	23c0      	movs	r3, #192	; 0xc0
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	d004      	beq.n	8005000 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	f000 f8cd 	bl	8005198 <HAL_TIM_IC_CaptureCallback>
 8004ffe:	e007      	b.n	8005010 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	0018      	movs	r0, r3
 8005004:	f000 f8c0 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	0018      	movs	r0, r3
 800500c:	f000 f8cc 	bl	80051a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	2208      	movs	r2, #8
 800501e:	4013      	ands	r3, r2
 8005020:	2b08      	cmp	r3, #8
 8005022:	d124      	bne.n	800506e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2208      	movs	r2, #8
 800502c:	4013      	ands	r3, r2
 800502e:	2b08      	cmp	r3, #8
 8005030:	d11d      	bne.n	800506e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2209      	movs	r2, #9
 8005038:	4252      	negs	r2, r2
 800503a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2204      	movs	r2, #4
 8005040:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	2203      	movs	r2, #3
 800504a:	4013      	ands	r3, r2
 800504c:	d004      	beq.n	8005058 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	0018      	movs	r0, r3
 8005052:	f000 f8a1 	bl	8005198 <HAL_TIM_IC_CaptureCallback>
 8005056:	e007      	b.n	8005068 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	0018      	movs	r0, r3
 800505c:	f000 f894 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	0018      	movs	r0, r3
 8005064:	f000 f8a0 	bl	80051a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	2210      	movs	r2, #16
 8005076:	4013      	ands	r3, r2
 8005078:	2b10      	cmp	r3, #16
 800507a:	d125      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	2210      	movs	r2, #16
 8005084:	4013      	ands	r3, r2
 8005086:	2b10      	cmp	r3, #16
 8005088:	d11e      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2211      	movs	r2, #17
 8005090:	4252      	negs	r2, r2
 8005092:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2208      	movs	r2, #8
 8005098:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69da      	ldr	r2, [r3, #28]
 80050a0:	23c0      	movs	r3, #192	; 0xc0
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4013      	ands	r3, r2
 80050a6:	d004      	beq.n	80050b2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	0018      	movs	r0, r3
 80050ac:	f000 f874 	bl	8005198 <HAL_TIM_IC_CaptureCallback>
 80050b0:	e007      	b.n	80050c2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	0018      	movs	r0, r3
 80050b6:	f000 f867 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	0018      	movs	r0, r3
 80050be:	f000 f873 	bl	80051a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2201      	movs	r2, #1
 80050d0:	4013      	ands	r3, r2
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d10f      	bne.n	80050f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	4013      	ands	r3, r2
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d108      	bne.n	80050f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2202      	movs	r2, #2
 80050ea:	4252      	negs	r2, r2
 80050ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	0018      	movs	r0, r3
 80050f2:	f7fd fb35 	bl	8002760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	2280      	movs	r2, #128	; 0x80
 80050fe:	4013      	ands	r3, r2
 8005100:	2b80      	cmp	r3, #128	; 0x80
 8005102:	d10f      	bne.n	8005124 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	2280      	movs	r2, #128	; 0x80
 800510c:	4013      	ands	r3, r2
 800510e:	2b80      	cmp	r3, #128	; 0x80
 8005110:	d108      	bne.n	8005124 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2281      	movs	r2, #129	; 0x81
 8005118:	4252      	negs	r2, r2
 800511a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	0018      	movs	r0, r3
 8005120:	f000 f8da 	bl	80052d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	2240      	movs	r2, #64	; 0x40
 800512c:	4013      	ands	r3, r2
 800512e:	2b40      	cmp	r3, #64	; 0x40
 8005130:	d10f      	bne.n	8005152 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	2240      	movs	r2, #64	; 0x40
 800513a:	4013      	ands	r3, r2
 800513c:	2b40      	cmp	r3, #64	; 0x40
 800513e:	d108      	bne.n	8005152 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2241      	movs	r2, #65	; 0x41
 8005146:	4252      	negs	r2, r2
 8005148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	0018      	movs	r0, r3
 800514e:	f000 f833 	bl	80051b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2220      	movs	r2, #32
 800515a:	4013      	ands	r3, r2
 800515c:	2b20      	cmp	r3, #32
 800515e:	d10f      	bne.n	8005180 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	2220      	movs	r2, #32
 8005168:	4013      	ands	r3, r2
 800516a:	2b20      	cmp	r3, #32
 800516c:	d108      	bne.n	8005180 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2221      	movs	r2, #33	; 0x21
 8005174:	4252      	negs	r2, r2
 8005176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	0018      	movs	r0, r3
 800517c:	f000 f8a4 	bl	80052c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005180:	46c0      	nop			; (mov r8, r8)
 8005182:	46bd      	mov	sp, r7
 8005184:	b002      	add	sp, #8
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005190:	46c0      	nop			; (mov r8, r8)
 8005192:	46bd      	mov	sp, r7
 8005194:	b002      	add	sp, #8
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051a0:	46c0      	nop			; (mov r8, r8)
 80051a2:	46bd      	mov	sp, r7
 80051a4:	b002      	add	sp, #8
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051b0:	46c0      	nop			; (mov r8, r8)
 80051b2:	46bd      	mov	sp, r7
 80051b4:	b002      	add	sp, #8
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051c0:	46c0      	nop			; (mov r8, r8)
 80051c2:	46bd      	mov	sp, r7
 80051c4:	b002      	add	sp, #8
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a34      	ldr	r2, [pc, #208]	; (80052ac <TIM_Base_SetConfig+0xe4>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d008      	beq.n	80051f2 <TIM_Base_SetConfig+0x2a>
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	2380      	movs	r3, #128	; 0x80
 80051e4:	05db      	lsls	r3, r3, #23
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d003      	beq.n	80051f2 <TIM_Base_SetConfig+0x2a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a30      	ldr	r2, [pc, #192]	; (80052b0 <TIM_Base_SetConfig+0xe8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d108      	bne.n	8005204 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2270      	movs	r2, #112	; 0x70
 80051f6:	4393      	bics	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4313      	orrs	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a29      	ldr	r2, [pc, #164]	; (80052ac <TIM_Base_SetConfig+0xe4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d018      	beq.n	800523e <TIM_Base_SetConfig+0x76>
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	2380      	movs	r3, #128	; 0x80
 8005210:	05db      	lsls	r3, r3, #23
 8005212:	429a      	cmp	r2, r3
 8005214:	d013      	beq.n	800523e <TIM_Base_SetConfig+0x76>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a25      	ldr	r2, [pc, #148]	; (80052b0 <TIM_Base_SetConfig+0xe8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00f      	beq.n	800523e <TIM_Base_SetConfig+0x76>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a24      	ldr	r2, [pc, #144]	; (80052b4 <TIM_Base_SetConfig+0xec>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00b      	beq.n	800523e <TIM_Base_SetConfig+0x76>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a23      	ldr	r2, [pc, #140]	; (80052b8 <TIM_Base_SetConfig+0xf0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d007      	beq.n	800523e <TIM_Base_SetConfig+0x76>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a22      	ldr	r2, [pc, #136]	; (80052bc <TIM_Base_SetConfig+0xf4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d003      	beq.n	800523e <TIM_Base_SetConfig+0x76>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a21      	ldr	r2, [pc, #132]	; (80052c0 <TIM_Base_SetConfig+0xf8>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d108      	bne.n	8005250 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4a20      	ldr	r2, [pc, #128]	; (80052c4 <TIM_Base_SetConfig+0xfc>)
 8005242:	4013      	ands	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2280      	movs	r2, #128	; 0x80
 8005254:	4393      	bics	r3, r2
 8005256:	001a      	movs	r2, r3
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	4313      	orrs	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a0c      	ldr	r2, [pc, #48]	; (80052ac <TIM_Base_SetConfig+0xe4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00b      	beq.n	8005296 <TIM_Base_SetConfig+0xce>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a0d      	ldr	r2, [pc, #52]	; (80052b8 <TIM_Base_SetConfig+0xf0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d007      	beq.n	8005296 <TIM_Base_SetConfig+0xce>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a0c      	ldr	r2, [pc, #48]	; (80052bc <TIM_Base_SetConfig+0xf4>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d003      	beq.n	8005296 <TIM_Base_SetConfig+0xce>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a0b      	ldr	r2, [pc, #44]	; (80052c0 <TIM_Base_SetConfig+0xf8>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d103      	bne.n	800529e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	615a      	str	r2, [r3, #20]
}
 80052a4:	46c0      	nop			; (mov r8, r8)
 80052a6:	46bd      	mov	sp, r7
 80052a8:	b004      	add	sp, #16
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	40012c00 	.word	0x40012c00
 80052b0:	40000400 	.word	0x40000400
 80052b4:	40002000 	.word	0x40002000
 80052b8:	40014000 	.word	0x40014000
 80052bc:	40014400 	.word	0x40014400
 80052c0:	40014800 	.word	0x40014800
 80052c4:	fffffcff 	.word	0xfffffcff

080052c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052d0:	46c0      	nop			; (mov r8, r8)
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b002      	add	sp, #8
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052e0:	46c0      	nop			; (mov r8, r8)
 80052e2:	46bd      	mov	sp, r7
 80052e4:	b002      	add	sp, #8
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e044      	b.n	8005384 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d107      	bne.n	8005312 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2270      	movs	r2, #112	; 0x70
 8005306:	2100      	movs	r1, #0
 8005308:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	0018      	movs	r0, r3
 800530e:	f7fd fb77 	bl	8002a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2224      	movs	r2, #36	; 0x24
 8005316:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2101      	movs	r1, #1
 8005324:	438a      	bics	r2, r1
 8005326:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	0018      	movs	r0, r3
 800532c:	f000 f830 	bl	8005390 <UART_SetConfig>
 8005330:	0003      	movs	r3, r0
 8005332:	2b01      	cmp	r3, #1
 8005334:	d101      	bne.n	800533a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e024      	b.n	8005384 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	0018      	movs	r0, r3
 8005346:	f000 f9ef 	bl	8005728 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	490d      	ldr	r1, [pc, #52]	; (800538c <HAL_UART_Init+0xa4>)
 8005356:	400a      	ands	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	212a      	movs	r1, #42	; 0x2a
 8005366:	438a      	bics	r2, r1
 8005368:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2101      	movs	r1, #1
 8005376:	430a      	orrs	r2, r1
 8005378:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	0018      	movs	r0, r3
 800537e:	f000 fa87 	bl	8005890 <UART_CheckIdleState>
 8005382:	0003      	movs	r3, r0
}
 8005384:	0018      	movs	r0, r3
 8005386:	46bd      	mov	sp, r7
 8005388:	b002      	add	sp, #8
 800538a:	bd80      	pop	{r7, pc}
 800538c:	ffffb7ff 	.word	0xffffb7ff

08005390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005398:	2300      	movs	r3, #0
 800539a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800539c:	2317      	movs	r3, #23
 800539e:	18fb      	adds	r3, r7, r3
 80053a0:	2200      	movs	r2, #0
 80053a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4ac5      	ldr	r2, [pc, #788]	; (80056d8 <UART_SetConfig+0x348>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	0019      	movs	r1, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	4ac0      	ldr	r2, [pc, #768]	; (80056dc <UART_SetConfig+0x34c>)
 80053da:	4013      	ands	r3, r2
 80053dc:	0019      	movs	r1, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	4ab7      	ldr	r2, [pc, #732]	; (80056e0 <UART_SetConfig+0x350>)
 8005402:	4013      	ands	r3, r2
 8005404:	0019      	movs	r1, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	430a      	orrs	r2, r1
 800540e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4ab3      	ldr	r2, [pc, #716]	; (80056e4 <UART_SetConfig+0x354>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d125      	bne.n	8005466 <UART_SetConfig+0xd6>
 800541a:	4bb3      	ldr	r3, [pc, #716]	; (80056e8 <UART_SetConfig+0x358>)
 800541c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541e:	2203      	movs	r2, #3
 8005420:	4013      	ands	r3, r2
 8005422:	2b01      	cmp	r3, #1
 8005424:	d00f      	beq.n	8005446 <UART_SetConfig+0xb6>
 8005426:	d304      	bcc.n	8005432 <UART_SetConfig+0xa2>
 8005428:	2b02      	cmp	r3, #2
 800542a:	d011      	beq.n	8005450 <UART_SetConfig+0xc0>
 800542c:	2b03      	cmp	r3, #3
 800542e:	d005      	beq.n	800543c <UART_SetConfig+0xac>
 8005430:	e013      	b.n	800545a <UART_SetConfig+0xca>
 8005432:	231f      	movs	r3, #31
 8005434:	18fb      	adds	r3, r7, r3
 8005436:	2200      	movs	r2, #0
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	e064      	b.n	8005506 <UART_SetConfig+0x176>
 800543c:	231f      	movs	r3, #31
 800543e:	18fb      	adds	r3, r7, r3
 8005440:	2202      	movs	r2, #2
 8005442:	701a      	strb	r2, [r3, #0]
 8005444:	e05f      	b.n	8005506 <UART_SetConfig+0x176>
 8005446:	231f      	movs	r3, #31
 8005448:	18fb      	adds	r3, r7, r3
 800544a:	2204      	movs	r2, #4
 800544c:	701a      	strb	r2, [r3, #0]
 800544e:	e05a      	b.n	8005506 <UART_SetConfig+0x176>
 8005450:	231f      	movs	r3, #31
 8005452:	18fb      	adds	r3, r7, r3
 8005454:	2208      	movs	r2, #8
 8005456:	701a      	strb	r2, [r3, #0]
 8005458:	e055      	b.n	8005506 <UART_SetConfig+0x176>
 800545a:	231f      	movs	r3, #31
 800545c:	18fb      	adds	r3, r7, r3
 800545e:	2210      	movs	r2, #16
 8005460:	701a      	strb	r2, [r3, #0]
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	e04f      	b.n	8005506 <UART_SetConfig+0x176>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4aa0      	ldr	r2, [pc, #640]	; (80056ec <UART_SetConfig+0x35c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d132      	bne.n	80054d6 <UART_SetConfig+0x146>
 8005470:	4b9d      	ldr	r3, [pc, #628]	; (80056e8 <UART_SetConfig+0x358>)
 8005472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005474:	23c0      	movs	r3, #192	; 0xc0
 8005476:	029b      	lsls	r3, r3, #10
 8005478:	4013      	ands	r3, r2
 800547a:	2280      	movs	r2, #128	; 0x80
 800547c:	0252      	lsls	r2, r2, #9
 800547e:	4293      	cmp	r3, r2
 8005480:	d019      	beq.n	80054b6 <UART_SetConfig+0x126>
 8005482:	2280      	movs	r2, #128	; 0x80
 8005484:	0252      	lsls	r2, r2, #9
 8005486:	4293      	cmp	r3, r2
 8005488:	d802      	bhi.n	8005490 <UART_SetConfig+0x100>
 800548a:	2b00      	cmp	r3, #0
 800548c:	d009      	beq.n	80054a2 <UART_SetConfig+0x112>
 800548e:	e01c      	b.n	80054ca <UART_SetConfig+0x13a>
 8005490:	2280      	movs	r2, #128	; 0x80
 8005492:	0292      	lsls	r2, r2, #10
 8005494:	4293      	cmp	r3, r2
 8005496:	d013      	beq.n	80054c0 <UART_SetConfig+0x130>
 8005498:	22c0      	movs	r2, #192	; 0xc0
 800549a:	0292      	lsls	r2, r2, #10
 800549c:	4293      	cmp	r3, r2
 800549e:	d005      	beq.n	80054ac <UART_SetConfig+0x11c>
 80054a0:	e013      	b.n	80054ca <UART_SetConfig+0x13a>
 80054a2:	231f      	movs	r3, #31
 80054a4:	18fb      	adds	r3, r7, r3
 80054a6:	2200      	movs	r2, #0
 80054a8:	701a      	strb	r2, [r3, #0]
 80054aa:	e02c      	b.n	8005506 <UART_SetConfig+0x176>
 80054ac:	231f      	movs	r3, #31
 80054ae:	18fb      	adds	r3, r7, r3
 80054b0:	2202      	movs	r2, #2
 80054b2:	701a      	strb	r2, [r3, #0]
 80054b4:	e027      	b.n	8005506 <UART_SetConfig+0x176>
 80054b6:	231f      	movs	r3, #31
 80054b8:	18fb      	adds	r3, r7, r3
 80054ba:	2204      	movs	r2, #4
 80054bc:	701a      	strb	r2, [r3, #0]
 80054be:	e022      	b.n	8005506 <UART_SetConfig+0x176>
 80054c0:	231f      	movs	r3, #31
 80054c2:	18fb      	adds	r3, r7, r3
 80054c4:	2208      	movs	r2, #8
 80054c6:	701a      	strb	r2, [r3, #0]
 80054c8:	e01d      	b.n	8005506 <UART_SetConfig+0x176>
 80054ca:	231f      	movs	r3, #31
 80054cc:	18fb      	adds	r3, r7, r3
 80054ce:	2210      	movs	r2, #16
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	e017      	b.n	8005506 <UART_SetConfig+0x176>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a85      	ldr	r2, [pc, #532]	; (80056f0 <UART_SetConfig+0x360>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d104      	bne.n	80054ea <UART_SetConfig+0x15a>
 80054e0:	231f      	movs	r3, #31
 80054e2:	18fb      	adds	r3, r7, r3
 80054e4:	2200      	movs	r2, #0
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	e00d      	b.n	8005506 <UART_SetConfig+0x176>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a81      	ldr	r2, [pc, #516]	; (80056f4 <UART_SetConfig+0x364>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d104      	bne.n	80054fe <UART_SetConfig+0x16e>
 80054f4:	231f      	movs	r3, #31
 80054f6:	18fb      	adds	r3, r7, r3
 80054f8:	2200      	movs	r2, #0
 80054fa:	701a      	strb	r2, [r3, #0]
 80054fc:	e003      	b.n	8005506 <UART_SetConfig+0x176>
 80054fe:	231f      	movs	r3, #31
 8005500:	18fb      	adds	r3, r7, r3
 8005502:	2210      	movs	r2, #16
 8005504:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69da      	ldr	r2, [r3, #28]
 800550a:	2380      	movs	r3, #128	; 0x80
 800550c:	021b      	lsls	r3, r3, #8
 800550e:	429a      	cmp	r2, r3
 8005510:	d000      	beq.n	8005514 <UART_SetConfig+0x184>
 8005512:	e07d      	b.n	8005610 <UART_SetConfig+0x280>
  {
    switch (clocksource)
 8005514:	231f      	movs	r3, #31
 8005516:	18fb      	adds	r3, r7, r3
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b02      	cmp	r3, #2
 800551c:	d01c      	beq.n	8005558 <UART_SetConfig+0x1c8>
 800551e:	dc02      	bgt.n	8005526 <UART_SetConfig+0x196>
 8005520:	2b00      	cmp	r3, #0
 8005522:	d005      	beq.n	8005530 <UART_SetConfig+0x1a0>
 8005524:	e04b      	b.n	80055be <UART_SetConfig+0x22e>
 8005526:	2b04      	cmp	r3, #4
 8005528:	d025      	beq.n	8005576 <UART_SetConfig+0x1e6>
 800552a:	2b08      	cmp	r3, #8
 800552c:	d037      	beq.n	800559e <UART_SetConfig+0x20e>
 800552e:	e046      	b.n	80055be <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005530:	f7ff fb64 	bl	8004bfc <HAL_RCC_GetPCLK1Freq>
 8005534:	0003      	movs	r3, r0
 8005536:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	005a      	lsls	r2, r3, #1
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	085b      	lsrs	r3, r3, #1
 8005542:	18d2      	adds	r2, r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	0019      	movs	r1, r3
 800554a:	0010      	movs	r0, r2
 800554c:	f7fa fddc 	bl	8000108 <__udivsi3>
 8005550:	0003      	movs	r3, r0
 8005552:	b29b      	uxth	r3, r3
 8005554:	61bb      	str	r3, [r7, #24]
        break;
 8005556:	e037      	b.n	80055c8 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	085b      	lsrs	r3, r3, #1
 800555e:	4a66      	ldr	r2, [pc, #408]	; (80056f8 <UART_SetConfig+0x368>)
 8005560:	189a      	adds	r2, r3, r2
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	0019      	movs	r1, r3
 8005568:	0010      	movs	r0, r2
 800556a:	f7fa fdcd 	bl	8000108 <__udivsi3>
 800556e:	0003      	movs	r3, r0
 8005570:	b29b      	uxth	r3, r3
 8005572:	61bb      	str	r3, [r7, #24]
        break;
 8005574:	e028      	b.n	80055c8 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005576:	f7ff fab9 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 800557a:	0003      	movs	r3, r0
 800557c:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	005a      	lsls	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	085b      	lsrs	r3, r3, #1
 8005588:	18d2      	adds	r2, r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	0019      	movs	r1, r3
 8005590:	0010      	movs	r0, r2
 8005592:	f7fa fdb9 	bl	8000108 <__udivsi3>
 8005596:	0003      	movs	r3, r0
 8005598:	b29b      	uxth	r3, r3
 800559a:	61bb      	str	r3, [r7, #24]
        break;
 800559c:	e014      	b.n	80055c8 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	085b      	lsrs	r3, r3, #1
 80055a4:	2280      	movs	r2, #128	; 0x80
 80055a6:	0252      	lsls	r2, r2, #9
 80055a8:	189a      	adds	r2, r3, r2
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	0019      	movs	r1, r3
 80055b0:	0010      	movs	r0, r2
 80055b2:	f7fa fda9 	bl	8000108 <__udivsi3>
 80055b6:	0003      	movs	r3, r0
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	61bb      	str	r3, [r7, #24]
        break;
 80055bc:	e004      	b.n	80055c8 <UART_SetConfig+0x238>
      default:
        ret = HAL_ERROR;
 80055be:	2317      	movs	r3, #23
 80055c0:	18fb      	adds	r3, r7, r3
 80055c2:	2201      	movs	r2, #1
 80055c4:	701a      	strb	r2, [r3, #0]
        break;
 80055c6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b0f      	cmp	r3, #15
 80055cc:	d91b      	bls.n	8005606 <UART_SetConfig+0x276>
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	4a4a      	ldr	r2, [pc, #296]	; (80056fc <UART_SetConfig+0x36c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d817      	bhi.n	8005606 <UART_SetConfig+0x276>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	b29a      	uxth	r2, r3
 80055da:	200a      	movs	r0, #10
 80055dc:	183b      	adds	r3, r7, r0
 80055de:	210f      	movs	r1, #15
 80055e0:	438a      	bics	r2, r1
 80055e2:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	085b      	lsrs	r3, r3, #1
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2207      	movs	r2, #7
 80055ec:	4013      	ands	r3, r2
 80055ee:	b299      	uxth	r1, r3
 80055f0:	183b      	adds	r3, r7, r0
 80055f2:	183a      	adds	r2, r7, r0
 80055f4:	8812      	ldrh	r2, [r2, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	183a      	adds	r2, r7, r0
 8005600:	8812      	ldrh	r2, [r2, #0]
 8005602:	60da      	str	r2, [r3, #12]
 8005604:	e082      	b.n	800570c <UART_SetConfig+0x37c>
    }
    else
    {
      ret = HAL_ERROR;
 8005606:	2317      	movs	r3, #23
 8005608:	18fb      	adds	r3, r7, r3
 800560a:	2201      	movs	r2, #1
 800560c:	701a      	strb	r2, [r3, #0]
 800560e:	e07d      	b.n	800570c <UART_SetConfig+0x37c>
    }
  }
  else
  {
    switch (clocksource)
 8005610:	231f      	movs	r3, #31
 8005612:	18fb      	adds	r3, r7, r3
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d01b      	beq.n	8005652 <UART_SetConfig+0x2c2>
 800561a:	dc02      	bgt.n	8005622 <UART_SetConfig+0x292>
 800561c:	2b00      	cmp	r3, #0
 800561e:	d005      	beq.n	800562c <UART_SetConfig+0x29c>
 8005620:	e049      	b.n	80056b6 <UART_SetConfig+0x326>
 8005622:	2b04      	cmp	r3, #4
 8005624:	d024      	beq.n	8005670 <UART_SetConfig+0x2e0>
 8005626:	2b08      	cmp	r3, #8
 8005628:	d035      	beq.n	8005696 <UART_SetConfig+0x306>
 800562a:	e044      	b.n	80056b6 <UART_SetConfig+0x326>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800562c:	f7ff fae6 	bl	8004bfc <HAL_RCC_GetPCLK1Freq>
 8005630:	0003      	movs	r3, r0
 8005632:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	085a      	lsrs	r2, r3, #1
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	18d2      	adds	r2, r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	0019      	movs	r1, r3
 8005644:	0010      	movs	r0, r2
 8005646:	f7fa fd5f 	bl	8000108 <__udivsi3>
 800564a:	0003      	movs	r3, r0
 800564c:	b29b      	uxth	r3, r3
 800564e:	61bb      	str	r3, [r7, #24]
        break;
 8005650:	e036      	b.n	80056c0 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	085b      	lsrs	r3, r3, #1
 8005658:	4a29      	ldr	r2, [pc, #164]	; (8005700 <UART_SetConfig+0x370>)
 800565a:	189a      	adds	r2, r3, r2
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	0019      	movs	r1, r3
 8005662:	0010      	movs	r0, r2
 8005664:	f7fa fd50 	bl	8000108 <__udivsi3>
 8005668:	0003      	movs	r3, r0
 800566a:	b29b      	uxth	r3, r3
 800566c:	61bb      	str	r3, [r7, #24]
        break;
 800566e:	e027      	b.n	80056c0 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005670:	f7ff fa3c 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 8005674:	0003      	movs	r3, r0
 8005676:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	085a      	lsrs	r2, r3, #1
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	18d2      	adds	r2, r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	0019      	movs	r1, r3
 8005688:	0010      	movs	r0, r2
 800568a:	f7fa fd3d 	bl	8000108 <__udivsi3>
 800568e:	0003      	movs	r3, r0
 8005690:	b29b      	uxth	r3, r3
 8005692:	61bb      	str	r3, [r7, #24]
        break;
 8005694:	e014      	b.n	80056c0 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	085b      	lsrs	r3, r3, #1
 800569c:	2280      	movs	r2, #128	; 0x80
 800569e:	0212      	lsls	r2, r2, #8
 80056a0:	189a      	adds	r2, r3, r2
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	0019      	movs	r1, r3
 80056a8:	0010      	movs	r0, r2
 80056aa:	f7fa fd2d 	bl	8000108 <__udivsi3>
 80056ae:	0003      	movs	r3, r0
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	61bb      	str	r3, [r7, #24]
        break;
 80056b4:	e004      	b.n	80056c0 <UART_SetConfig+0x330>
      default:
        ret = HAL_ERROR;
 80056b6:	2317      	movs	r3, #23
 80056b8:	18fb      	adds	r3, r7, r3
 80056ba:	2201      	movs	r2, #1
 80056bc:	701a      	strb	r2, [r3, #0]
        break;
 80056be:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	2b0f      	cmp	r3, #15
 80056c4:	d91e      	bls.n	8005704 <UART_SetConfig+0x374>
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	4a0c      	ldr	r2, [pc, #48]	; (80056fc <UART_SetConfig+0x36c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d81a      	bhi.n	8005704 <UART_SetConfig+0x374>
    {
      huart->Instance->BRR = usartdiv;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	60da      	str	r2, [r3, #12]
 80056d6:	e019      	b.n	800570c <UART_SetConfig+0x37c>
 80056d8:	efff69f3 	.word	0xefff69f3
 80056dc:	ffffcfff 	.word	0xffffcfff
 80056e0:	fffff4ff 	.word	0xfffff4ff
 80056e4:	40013800 	.word	0x40013800
 80056e8:	40021000 	.word	0x40021000
 80056ec:	40004400 	.word	0x40004400
 80056f0:	40004800 	.word	0x40004800
 80056f4:	40004c00 	.word	0x40004c00
 80056f8:	00f42400 	.word	0x00f42400
 80056fc:	0000ffff 	.word	0x0000ffff
 8005700:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 8005704:	2317      	movs	r3, #23
 8005706:	18fb      	adds	r3, r7, r3
 8005708:	2201      	movs	r2, #1
 800570a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005718:	2317      	movs	r3, #23
 800571a:	18fb      	adds	r3, r7, r3
 800571c:	781b      	ldrb	r3, [r3, #0]
}
 800571e:	0018      	movs	r0, r3
 8005720:	46bd      	mov	sp, r7
 8005722:	b008      	add	sp, #32
 8005724:	bd80      	pop	{r7, pc}
 8005726:	46c0      	nop			; (mov r8, r8)

08005728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	2201      	movs	r2, #1
 8005736:	4013      	ands	r3, r2
 8005738:	d00b      	beq.n	8005752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	4a4a      	ldr	r2, [pc, #296]	; (800586c <UART_AdvFeatureConfig+0x144>)
 8005742:	4013      	ands	r3, r2
 8005744:	0019      	movs	r1, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	2202      	movs	r2, #2
 8005758:	4013      	ands	r3, r2
 800575a:	d00b      	beq.n	8005774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	4a43      	ldr	r2, [pc, #268]	; (8005870 <UART_AdvFeatureConfig+0x148>)
 8005764:	4013      	ands	r3, r2
 8005766:	0019      	movs	r1, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	2204      	movs	r2, #4
 800577a:	4013      	ands	r3, r2
 800577c:	d00b      	beq.n	8005796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	4a3b      	ldr	r2, [pc, #236]	; (8005874 <UART_AdvFeatureConfig+0x14c>)
 8005786:	4013      	ands	r3, r2
 8005788:	0019      	movs	r1, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	2208      	movs	r2, #8
 800579c:	4013      	ands	r3, r2
 800579e:	d00b      	beq.n	80057b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	4a34      	ldr	r2, [pc, #208]	; (8005878 <UART_AdvFeatureConfig+0x150>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	0019      	movs	r1, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	2210      	movs	r2, #16
 80057be:	4013      	ands	r3, r2
 80057c0:	d00b      	beq.n	80057da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	4a2c      	ldr	r2, [pc, #176]	; (800587c <UART_AdvFeatureConfig+0x154>)
 80057ca:	4013      	ands	r3, r2
 80057cc:	0019      	movs	r1, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	2220      	movs	r2, #32
 80057e0:	4013      	ands	r3, r2
 80057e2:	d00b      	beq.n	80057fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	4a25      	ldr	r2, [pc, #148]	; (8005880 <UART_AdvFeatureConfig+0x158>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	0019      	movs	r1, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	2240      	movs	r2, #64	; 0x40
 8005802:	4013      	ands	r3, r2
 8005804:	d01d      	beq.n	8005842 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	4a1d      	ldr	r2, [pc, #116]	; (8005884 <UART_AdvFeatureConfig+0x15c>)
 800580e:	4013      	ands	r3, r2
 8005810:	0019      	movs	r1, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005822:	2380      	movs	r3, #128	; 0x80
 8005824:	035b      	lsls	r3, r3, #13
 8005826:	429a      	cmp	r2, r3
 8005828:	d10b      	bne.n	8005842 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	4a15      	ldr	r2, [pc, #84]	; (8005888 <UART_AdvFeatureConfig+0x160>)
 8005832:	4013      	ands	r3, r2
 8005834:	0019      	movs	r1, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	2280      	movs	r2, #128	; 0x80
 8005848:	4013      	ands	r3, r2
 800584a:	d00b      	beq.n	8005864 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	4a0e      	ldr	r2, [pc, #56]	; (800588c <UART_AdvFeatureConfig+0x164>)
 8005854:	4013      	ands	r3, r2
 8005856:	0019      	movs	r1, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	605a      	str	r2, [r3, #4]
  }
}
 8005864:	46c0      	nop			; (mov r8, r8)
 8005866:	46bd      	mov	sp, r7
 8005868:	b002      	add	sp, #8
 800586a:	bd80      	pop	{r7, pc}
 800586c:	fffdffff 	.word	0xfffdffff
 8005870:	fffeffff 	.word	0xfffeffff
 8005874:	fffbffff 	.word	0xfffbffff
 8005878:	ffff7fff 	.word	0xffff7fff
 800587c:	ffffefff 	.word	0xffffefff
 8005880:	ffffdfff 	.word	0xffffdfff
 8005884:	ffefffff 	.word	0xffefffff
 8005888:	ff9fffff 	.word	0xff9fffff
 800588c:	fff7ffff 	.word	0xfff7ffff

08005890 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af02      	add	r7, sp, #8
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800589e:	f7fd f9d1 	bl	8002c44 <HAL_GetTick>
 80058a2:	0003      	movs	r3, r0
 80058a4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2208      	movs	r2, #8
 80058ae:	4013      	ands	r3, r2
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d10d      	bne.n	80058d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	2380      	movs	r3, #128	; 0x80
 80058b8:	0399      	lsls	r1, r3, #14
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	4b16      	ldr	r3, [pc, #88]	; (8005918 <UART_CheckIdleState+0x88>)
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	0013      	movs	r3, r2
 80058c2:	2200      	movs	r2, #0
 80058c4:	f000 f82a 	bl	800591c <UART_WaitOnFlagUntilTimeout>
 80058c8:	1e03      	subs	r3, r0, #0
 80058ca:	d001      	beq.n	80058d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e01f      	b.n	8005910 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2204      	movs	r2, #4
 80058d8:	4013      	ands	r3, r2
 80058da:	2b04      	cmp	r3, #4
 80058dc:	d10d      	bne.n	80058fa <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	2380      	movs	r3, #128	; 0x80
 80058e2:	03d9      	lsls	r1, r3, #15
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <UART_CheckIdleState+0x88>)
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	0013      	movs	r3, r2
 80058ec:	2200      	movs	r2, #0
 80058ee:	f000 f815 	bl	800591c <UART_WaitOnFlagUntilTimeout>
 80058f2:	1e03      	subs	r3, r0, #0
 80058f4:	d001      	beq.n	80058fa <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e00a      	b.n	8005910 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2220      	movs	r2, #32
 80058fe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2220      	movs	r2, #32
 8005904:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2270      	movs	r2, #112	; 0x70
 800590a:	2100      	movs	r1, #0
 800590c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	0018      	movs	r0, r3
 8005912:	46bd      	mov	sp, r7
 8005914:	b004      	add	sp, #16
 8005916:	bd80      	pop	{r7, pc}
 8005918:	01ffffff 	.word	0x01ffffff

0800591c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	603b      	str	r3, [r7, #0]
 8005928:	1dfb      	adds	r3, r7, #7
 800592a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800592c:	e05d      	b.n	80059ea <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	3301      	adds	r3, #1
 8005932:	d05a      	beq.n	80059ea <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005934:	f7fd f986 	bl	8002c44 <HAL_GetTick>
 8005938:	0002      	movs	r2, r0
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	429a      	cmp	r2, r3
 8005942:	d302      	bcc.n	800594a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d11b      	bne.n	8005982 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	492f      	ldr	r1, [pc, #188]	; (8005a14 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005956:	400a      	ands	r2, r1
 8005958:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2101      	movs	r1, #1
 8005966:	438a      	bics	r2, r1
 8005968:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2220      	movs	r2, #32
 800596e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2220      	movs	r2, #32
 8005974:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2270      	movs	r2, #112	; 0x70
 800597a:	2100      	movs	r1, #0
 800597c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e043      	b.n	8005a0a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2204      	movs	r2, #4
 800598a:	4013      	ands	r3, r2
 800598c:	d02d      	beq.n	80059ea <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	2380      	movs	r3, #128	; 0x80
 8005996:	011b      	lsls	r3, r3, #4
 8005998:	401a      	ands	r2, r3
 800599a:	2380      	movs	r3, #128	; 0x80
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	429a      	cmp	r2, r3
 80059a0:	d123      	bne.n	80059ea <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2280      	movs	r2, #128	; 0x80
 80059a8:	0112      	lsls	r2, r2, #4
 80059aa:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4917      	ldr	r1, [pc, #92]	; (8005a14 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80059b8:	400a      	ands	r2, r1
 80059ba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689a      	ldr	r2, [r3, #8]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2101      	movs	r1, #1
 80059c8:	438a      	bics	r2, r1
 80059ca:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2220      	movs	r2, #32
 80059d0:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2220      	movs	r2, #32
 80059d6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2220      	movs	r2, #32
 80059dc:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2270      	movs	r2, #112	; 0x70
 80059e2:	2100      	movs	r1, #0
 80059e4:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e00f      	b.n	8005a0a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	4013      	ands	r3, r2
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	425a      	negs	r2, r3
 80059fa:	4153      	adcs	r3, r2
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	001a      	movs	r2, r3
 8005a00:	1dfb      	adds	r3, r7, #7
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d092      	beq.n	800592e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	b004      	add	sp, #16
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	fffffe5f 	.word	0xfffffe5f

08005a18 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a1e:	f3ef 8305 	mrs	r3, IPSR
 8005a22:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d109      	bne.n	8005a3e <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a2e:	607b      	str	r3, [r7, #4]
  return(result);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d007      	beq.n	8005a46 <osKernelInitialize+0x2e>
 8005a36:	4b0d      	ldr	r3, [pc, #52]	; (8005a6c <osKernelInitialize+0x54>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d103      	bne.n	8005a46 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8005a3e:	2306      	movs	r3, #6
 8005a40:	425b      	negs	r3, r3
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	e00c      	b.n	8005a60 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005a46:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <osKernelInitialize+0x54>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d105      	bne.n	8005a5a <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005a4e:	4b07      	ldr	r3, [pc, #28]	; (8005a6c <osKernelInitialize+0x54>)
 8005a50:	2201      	movs	r2, #1
 8005a52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	e002      	b.n	8005a60 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	425b      	negs	r3, r3
 8005a5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005a60:	68fb      	ldr	r3, [r7, #12]
}
 8005a62:	0018      	movs	r0, r3
 8005a64:	46bd      	mov	sp, r7
 8005a66:	b004      	add	sp, #16
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	46c0      	nop			; (mov r8, r8)
 8005a6c:	20000140 	.word	0x20000140

08005a70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a76:	f3ef 8305 	mrs	r3, IPSR
 8005a7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a7c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d109      	bne.n	8005a96 <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a82:	f3ef 8310 	mrs	r3, PRIMASK
 8005a86:	607b      	str	r3, [r7, #4]
  return(result);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d007      	beq.n	8005a9e <osKernelStart+0x2e>
 8005a8e:	4b0e      	ldr	r3, [pc, #56]	; (8005ac8 <osKernelStart+0x58>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d103      	bne.n	8005a9e <osKernelStart+0x2e>
    stat = osErrorISR;
 8005a96:	2306      	movs	r3, #6
 8005a98:	425b      	negs	r3, r3
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	e00e      	b.n	8005abc <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005a9e:	4b0a      	ldr	r3, [pc, #40]	; (8005ac8 <osKernelStart+0x58>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d107      	bne.n	8005ab6 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8005aa6:	4b08      	ldr	r3, [pc, #32]	; (8005ac8 <osKernelStart+0x58>)
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005aac:	f000 ff56 	bl	800695c <vTaskStartScheduler>
      stat = osOK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	e002      	b.n	8005abc <osKernelStart+0x4c>
    } else {
      stat = osError;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	425b      	negs	r3, r3
 8005aba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005abc:	68fb      	ldr	r3, [r7, #12]
}
 8005abe:	0018      	movs	r0, r3
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	b004      	add	sp, #16
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	46c0      	nop			; (mov r8, r8)
 8005ac8:	20000140 	.word	0x20000140

08005acc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005acc:	b5b0      	push	{r4, r5, r7, lr}
 8005ace:	b090      	sub	sp, #64	; 0x40
 8005ad0:	af04      	add	r7, sp, #16
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005adc:	f3ef 8305 	mrs	r3, IPSR
 8005ae0:	61fb      	str	r3, [r7, #28]
  return(result);
 8005ae2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d000      	beq.n	8005aea <osThreadNew+0x1e>
 8005ae8:	e090      	b.n	8005c0c <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aea:	f3ef 8310 	mrs	r3, PRIMASK
 8005aee:	61bb      	str	r3, [r7, #24]
  return(result);
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d004      	beq.n	8005b00 <osThreadNew+0x34>
 8005af6:	4b48      	ldr	r3, [pc, #288]	; (8005c18 <osThreadNew+0x14c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d100      	bne.n	8005b00 <osThreadNew+0x34>
 8005afe:	e085      	b.n	8005c0c <osThreadNew+0x140>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d100      	bne.n	8005b08 <osThreadNew+0x3c>
 8005b06:	e081      	b.n	8005c0c <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8005b08:	2380      	movs	r3, #128	; 0x80
 8005b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005b0c:	2318      	movs	r3, #24
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8005b10:	2117      	movs	r1, #23
 8005b12:	187b      	adds	r3, r7, r1
 8005b14:	2200      	movs	r2, #0
 8005b16:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8005b18:	187b      	adds	r3, r7, r1
 8005b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	425b      	negs	r3, r3
 8005b20:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d044      	beq.n	8005bb2 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <osThreadNew+0x6a>
        name = attr->name;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d007      	beq.n	8005b5a <osThreadNew+0x8e>
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	2b38      	cmp	r3, #56	; 0x38
 8005b4e:	d804      	bhi.n	8005b5a <osThreadNew+0x8e>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	4013      	ands	r3, r2
 8005b58:	d001      	beq.n	8005b5e <osThreadNew+0x92>
        return (NULL);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e057      	b.n	8005c0e <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	089b      	lsrs	r3, r3, #2
 8005b6c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00e      	beq.n	8005b94 <osThreadNew+0xc8>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	2b5b      	cmp	r3, #91	; 0x5b
 8005b7c:	d90a      	bls.n	8005b94 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d006      	beq.n	8005b94 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <osThreadNew+0xc8>
        mem = 1;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	623b      	str	r3, [r7, #32]
 8005b92:	e010      	b.n	8005bb6 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10c      	bne.n	8005bb6 <osThreadNew+0xea>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d108      	bne.n	8005bb6 <osThreadNew+0xea>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d104      	bne.n	8005bb6 <osThreadNew+0xea>
          mem = 0;
 8005bac:	2300      	movs	r3, #0
 8005bae:	623b      	str	r3, [r7, #32]
 8005bb0:	e001      	b.n	8005bb6 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d112      	bne.n	8005be2 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005bc4:	68bd      	ldr	r5, [r7, #8]
 8005bc6:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8005bc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	9302      	str	r3, [sp, #8]
 8005bce:	9201      	str	r2, [sp, #4]
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	002b      	movs	r3, r5
 8005bd6:	0022      	movs	r2, r4
 8005bd8:	f000 fd21 	bl	800661e <xTaskCreateStatic>
 8005bdc:	0003      	movs	r3, r0
 8005bde:	613b      	str	r3, [r7, #16]
 8005be0:	e014      	b.n	8005c0c <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d111      	bne.n	8005c0c <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	68bc      	ldr	r4, [r7, #8]
 8005bee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	2310      	movs	r3, #16
 8005bf4:	18fb      	adds	r3, r7, r3
 8005bf6:	9301      	str	r3, [sp, #4]
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	0023      	movs	r3, r4
 8005bfe:	f000 fd51 	bl	80066a4 <xTaskCreate>
 8005c02:	0003      	movs	r3, r0
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d001      	beq.n	8005c0c <osThreadNew+0x140>
          hTask = NULL;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005c0c:	693b      	ldr	r3, [r7, #16]
}
 8005c0e:	0018      	movs	r0, r3
 8005c10:	46bd      	mov	sp, r7
 8005c12:	b00c      	add	sp, #48	; 0x30
 8005c14:	bdb0      	pop	{r4, r5, r7, pc}
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	20000140 	.word	0x20000140

08005c1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4a06      	ldr	r2, [pc, #24]	; (8005c44 <vApplicationGetIdleTaskMemory+0x28>)
 8005c2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	4a05      	ldr	r2, [pc, #20]	; (8005c48 <vApplicationGetIdleTaskMemory+0x2c>)
 8005c32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2280      	movs	r2, #128	; 0x80
 8005c38:	601a      	str	r2, [r3, #0]
}
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	b004      	add	sp, #16
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	46c0      	nop			; (mov r8, r8)
 8005c44:	20000144 	.word	0x20000144
 8005c48:	200001a0 	.word	0x200001a0

08005c4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4a06      	ldr	r2, [pc, #24]	; (8005c74 <vApplicationGetTimerTaskMemory+0x28>)
 8005c5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	4a05      	ldr	r2, [pc, #20]	; (8005c78 <vApplicationGetTimerTaskMemory+0x2c>)
 8005c62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2280      	movs	r2, #128	; 0x80
 8005c68:	0052      	lsls	r2, r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]
}
 8005c6c:	46c0      	nop			; (mov r8, r8)
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	b004      	add	sp, #16
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	200003a0 	.word	0x200003a0
 8005c78:	200003fc 	.word	0x200003fc

08005c7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3308      	adds	r3, #8
 8005c88:	001a      	movs	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	4252      	negs	r2, r2
 8005c94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	3308      	adds	r3, #8
 8005c9a:	001a      	movs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3308      	adds	r3, #8
 8005ca4:	001a      	movs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005cb0:	46c0      	nop			; (mov r8, r8)
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	b002      	add	sp, #8
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	b002      	add	sp, #8
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	601a      	str	r2, [r3, #0]
}
 8005d0a:	46c0      	nop			; (mov r8, r8)
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	b004      	add	sp, #16
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b084      	sub	sp, #16
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	3301      	adds	r3, #1
 8005d26:	d103      	bne.n	8005d30 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	60fb      	str	r3, [r7, #12]
 8005d2e:	e00c      	b.n	8005d4a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3308      	adds	r3, #8
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	e002      	b.n	8005d3e <vListInsert+0x2c>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d2f6      	bcs.n	8005d38 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	601a      	str	r2, [r3, #0]
}
 8005d76:	46c0      	nop			; (mov r8, r8)
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	b004      	add	sp, #16
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6892      	ldr	r2, [r2, #8]
 8005d94:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6852      	ldr	r2, [r2, #4]
 8005d9e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d103      	bne.n	8005db2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	689a      	ldr	r2, [r3, #8]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	1e5a      	subs	r2, r3, #1
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
}
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	b004      	add	sp, #16
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <xQueueGenericReset+0x18>
 8005de2:	b672      	cpsid	i
 8005de4:	e7fe      	b.n	8005de4 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8005de6:	f001 fdd3 	bl	8007990 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	434b      	muls	r3, r1
 8005df8:	18d2      	adds	r2, r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e14:	1e59      	subs	r1, r3, #1
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	434b      	muls	r3, r1
 8005e1c:	18d2      	adds	r2, r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2244      	movs	r2, #68	; 0x44
 8005e26:	21ff      	movs	r1, #255	; 0xff
 8005e28:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2245      	movs	r2, #69	; 0x45
 8005e2e:	21ff      	movs	r1, #255	; 0xff
 8005e30:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10d      	bne.n	8005e54 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d013      	beq.n	8005e68 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3310      	adds	r3, #16
 8005e44:	0018      	movs	r0, r3
 8005e46:	f000 ffcd 	bl	8006de4 <xTaskRemoveFromEventList>
 8005e4a:	1e03      	subs	r3, r0, #0
 8005e4c:	d00c      	beq.n	8005e68 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e4e:	f001 fd8f 	bl	8007970 <vPortYield>
 8005e52:	e009      	b.n	8005e68 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3310      	adds	r3, #16
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f7ff ff0f 	bl	8005c7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3324      	adds	r3, #36	; 0x24
 8005e62:	0018      	movs	r0, r3
 8005e64:	f7ff ff0a 	bl	8005c7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e68:	f001 fda4 	bl	80079b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e6c:	2301      	movs	r3, #1
}
 8005e6e:	0018      	movs	r0, r3
 8005e70:	46bd      	mov	sp, r7
 8005e72:	b004      	add	sp, #16
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e76:	b590      	push	{r4, r7, lr}
 8005e78:	b089      	sub	sp, #36	; 0x24
 8005e7a:	af02      	add	r7, sp, #8
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	607a      	str	r2, [r7, #4]
 8005e82:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <xQueueGenericCreateStatic+0x18>
 8005e8a:	b672      	cpsid	i
 8005e8c:	e7fe      	b.n	8005e8c <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <xQueueGenericCreateStatic+0x22>
 8005e94:	b672      	cpsid	i
 8005e96:	e7fe      	b.n	8005e96 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <xQueueGenericCreateStatic+0x2e>
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <xQueueGenericCreateStatic+0x32>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <xQueueGenericCreateStatic+0x34>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <xQueueGenericCreateStatic+0x3c>
 8005eae:	b672      	cpsid	i
 8005eb0:	e7fe      	b.n	8005eb0 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d102      	bne.n	8005ebe <xQueueGenericCreateStatic+0x48>
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <xQueueGenericCreateStatic+0x4c>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e000      	b.n	8005ec4 <xQueueGenericCreateStatic+0x4e>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <xQueueGenericCreateStatic+0x56>
 8005ec8:	b672      	cpsid	i
 8005eca:	e7fe      	b.n	8005eca <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ecc:	2350      	movs	r3, #80	; 0x50
 8005ece:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	2b50      	cmp	r3, #80	; 0x50
 8005ed4:	d001      	beq.n	8005eda <xQueueGenericCreateStatic+0x64>
 8005ed6:	b672      	cpsid	i
 8005ed8:	e7fe      	b.n	8005ed8 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00e      	beq.n	8005f02 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2246      	movs	r2, #70	; 0x46
 8005ee8:	2101      	movs	r1, #1
 8005eea:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005eec:	2328      	movs	r3, #40	; 0x28
 8005eee:	18fb      	adds	r3, r7, r3
 8005ef0:	781c      	ldrb	r4, [r3, #0]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	0023      	movs	r3, r4
 8005efe:	f000 f805 	bl	8005f0c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005f02:	697b      	ldr	r3, [r7, #20]
	}
 8005f04:	0018      	movs	r0, r3
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b007      	add	sp, #28
 8005f0a:	bd90      	pop	{r4, r7, pc}

08005f0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	001a      	movs	r2, r3
 8005f1a:	1cfb      	adds	r3, r7, #3
 8005f1c:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d103      	bne.n	8005f2c <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	e002      	b.n	8005f32 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	2101      	movs	r1, #1
 8005f42:	0018      	movs	r0, r3
 8005f44:	f7ff ff43 	bl	8005dce <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	1cfa      	adds	r2, r7, #3
 8005f4c:	214c      	movs	r1, #76	; 0x4c
 8005f4e:	7812      	ldrb	r2, [r2, #0]
 8005f50:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f52:	46c0      	nop			; (mov r8, r8)
 8005f54:	46bd      	mov	sp, r7
 8005f56:	b004      	add	sp, #16
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b08a      	sub	sp, #40	; 0x28
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	607a      	str	r2, [r7, #4]
 8005f66:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <xQueueGenericSend+0x20>
 8005f76:	b672      	cpsid	i
 8005f78:	e7fe      	b.n	8005f78 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d103      	bne.n	8005f88 <xQueueGenericSend+0x2e>
 8005f80:	6a3b      	ldr	r3, [r7, #32]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <xQueueGenericSend+0x32>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e000      	b.n	8005f8e <xQueueGenericSend+0x34>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <xQueueGenericSend+0x3c>
 8005f92:	b672      	cpsid	i
 8005f94:	e7fe      	b.n	8005f94 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d103      	bne.n	8005fa4 <xQueueGenericSend+0x4a>
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d101      	bne.n	8005fa8 <xQueueGenericSend+0x4e>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e000      	b.n	8005faa <xQueueGenericSend+0x50>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <xQueueGenericSend+0x58>
 8005fae:	b672      	cpsid	i
 8005fb0:	e7fe      	b.n	8005fb0 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fb2:	f001 f8af 	bl	8007114 <xTaskGetSchedulerState>
 8005fb6:	1e03      	subs	r3, r0, #0
 8005fb8:	d102      	bne.n	8005fc0 <xQueueGenericSend+0x66>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <xQueueGenericSend+0x6a>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <xQueueGenericSend+0x6c>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <xQueueGenericSend+0x74>
 8005fca:	b672      	cpsid	i
 8005fcc:	e7fe      	b.n	8005fcc <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fce:	f001 fcdf 	bl	8007990 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d302      	bcc.n	8005fe4 <xQueueGenericSend+0x8a>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d11e      	bne.n	8006022 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	68b9      	ldr	r1, [r7, #8]
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	0018      	movs	r0, r3
 8005fec:	f000 f99f 	bl	800632e <prvCopyDataToQueue>
 8005ff0:	0003      	movs	r3, r0
 8005ff2:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d009      	beq.n	8006010 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	3324      	adds	r3, #36	; 0x24
 8006000:	0018      	movs	r0, r3
 8006002:	f000 feef 	bl	8006de4 <xTaskRemoveFromEventList>
 8006006:	1e03      	subs	r3, r0, #0
 8006008:	d007      	beq.n	800601a <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800600a:	f001 fcb1 	bl	8007970 <vPortYield>
 800600e:	e004      	b.n	800601a <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006016:	f001 fcab 	bl	8007970 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800601a:	f001 fccb 	bl	80079b4 <vPortExitCritical>
				return pdPASS;
 800601e:	2301      	movs	r3, #1
 8006020:	e05b      	b.n	80060da <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d103      	bne.n	8006030 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006028:	f001 fcc4 	bl	80079b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800602c:	2300      	movs	r3, #0
 800602e:	e054      	b.n	80060da <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	2b00      	cmp	r3, #0
 8006034:	d106      	bne.n	8006044 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006036:	2314      	movs	r3, #20
 8006038:	18fb      	adds	r3, r7, r3
 800603a:	0018      	movs	r0, r3
 800603c:	f000 ff2e 	bl	8006e9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006040:	2301      	movs	r3, #1
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006044:	f001 fcb6 	bl	80079b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006048:	f000 fcdc 	bl	8006a04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800604c:	f001 fca0 	bl	8007990 <vPortEnterCritical>
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	2244      	movs	r2, #68	; 0x44
 8006054:	5c9b      	ldrb	r3, [r3, r2]
 8006056:	b25b      	sxtb	r3, r3
 8006058:	3301      	adds	r3, #1
 800605a:	d103      	bne.n	8006064 <xQueueGenericSend+0x10a>
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	2244      	movs	r2, #68	; 0x44
 8006060:	2100      	movs	r1, #0
 8006062:	5499      	strb	r1, [r3, r2]
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	2245      	movs	r2, #69	; 0x45
 8006068:	5c9b      	ldrb	r3, [r3, r2]
 800606a:	b25b      	sxtb	r3, r3
 800606c:	3301      	adds	r3, #1
 800606e:	d103      	bne.n	8006078 <xQueueGenericSend+0x11e>
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	2245      	movs	r2, #69	; 0x45
 8006074:	2100      	movs	r1, #0
 8006076:	5499      	strb	r1, [r3, r2]
 8006078:	f001 fc9c 	bl	80079b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800607c:	1d3a      	adds	r2, r7, #4
 800607e:	2314      	movs	r3, #20
 8006080:	18fb      	adds	r3, r7, r3
 8006082:	0011      	movs	r1, r2
 8006084:	0018      	movs	r0, r3
 8006086:	f000 ff1d 	bl	8006ec4 <xTaskCheckForTimeOut>
 800608a:	1e03      	subs	r3, r0, #0
 800608c:	d11e      	bne.n	80060cc <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	0018      	movs	r0, r3
 8006092:	f000 fa51 	bl	8006538 <prvIsQueueFull>
 8006096:	1e03      	subs	r3, r0, #0
 8006098:	d011      	beq.n	80060be <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	3310      	adds	r3, #16
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	0011      	movs	r1, r2
 80060a2:	0018      	movs	r0, r3
 80060a4:	f000 fe5a 	bl	8006d5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	0018      	movs	r0, r3
 80060ac:	f000 f9d0 	bl	8006450 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80060b0:	f000 fcb4 	bl	8006a1c <xTaskResumeAll>
 80060b4:	1e03      	subs	r3, r0, #0
 80060b6:	d18a      	bne.n	8005fce <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80060b8:	f001 fc5a 	bl	8007970 <vPortYield>
 80060bc:	e787      	b.n	8005fce <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	0018      	movs	r0, r3
 80060c2:	f000 f9c5 	bl	8006450 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060c6:	f000 fca9 	bl	8006a1c <xTaskResumeAll>
 80060ca:	e780      	b.n	8005fce <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	0018      	movs	r0, r3
 80060d0:	f000 f9be 	bl	8006450 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060d4:	f000 fca2 	bl	8006a1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060d8:	2300      	movs	r3, #0
		}
	}
}
 80060da:	0018      	movs	r0, r3
 80060dc:	46bd      	mov	sp, r7
 80060de:	b00a      	add	sp, #40	; 0x28
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060e2:	b590      	push	{r4, r7, lr}
 80060e4:	b089      	sub	sp, #36	; 0x24
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	607a      	str	r2, [r7, #4]
 80060ee:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <xQueueGenericSendFromISR+0x1c>
 80060fa:	b672      	cpsid	i
 80060fc:	e7fe      	b.n	80060fc <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d103      	bne.n	800610c <xQueueGenericSendFromISR+0x2a>
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <xQueueGenericSendFromISR+0x2e>
 800610c:	2301      	movs	r3, #1
 800610e:	e000      	b.n	8006112 <xQueueGenericSendFromISR+0x30>
 8006110:	2300      	movs	r3, #0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <xQueueGenericSendFromISR+0x38>
 8006116:	b672      	cpsid	i
 8006118:	e7fe      	b.n	8006118 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b02      	cmp	r3, #2
 800611e:	d103      	bne.n	8006128 <xQueueGenericSendFromISR+0x46>
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006124:	2b01      	cmp	r3, #1
 8006126:	d101      	bne.n	800612c <xQueueGenericSendFromISR+0x4a>
 8006128:	2301      	movs	r3, #1
 800612a:	e000      	b.n	800612e <xQueueGenericSendFromISR+0x4c>
 800612c:	2300      	movs	r3, #0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <xQueueGenericSendFromISR+0x54>
 8006132:	b672      	cpsid	i
 8006134:	e7fe      	b.n	8006134 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006136:	f001 fc55 	bl	80079e4 <ulSetInterruptMaskFromISR>
 800613a:	0003      	movs	r3, r0
 800613c:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006146:	429a      	cmp	r2, r3
 8006148:	d302      	bcc.n	8006150 <xQueueGenericSendFromISR+0x6e>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b02      	cmp	r3, #2
 800614e:	d12e      	bne.n	80061ae <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006150:	2413      	movs	r4, #19
 8006152:	193b      	adds	r3, r7, r4
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	2145      	movs	r1, #69	; 0x45
 8006158:	5c52      	ldrb	r2, [r2, r1]
 800615a:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	0018      	movs	r0, r3
 8006164:	f000 f8e3 	bl	800632e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006168:	193b      	adds	r3, r7, r4
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	b25b      	sxtb	r3, r3
 800616e:	3301      	adds	r3, #1
 8006170:	d111      	bne.n	8006196 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006176:	2b00      	cmp	r3, #0
 8006178:	d016      	beq.n	80061a8 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	3324      	adds	r3, #36	; 0x24
 800617e:	0018      	movs	r0, r3
 8006180:	f000 fe30 	bl	8006de4 <xTaskRemoveFromEventList>
 8006184:	1e03      	subs	r3, r0, #0
 8006186:	d00f      	beq.n	80061a8 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00c      	beq.n	80061a8 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	e008      	b.n	80061a8 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006196:	2313      	movs	r3, #19
 8006198:	18fb      	adds	r3, r7, r3
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	3301      	adds	r3, #1
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	b259      	sxtb	r1, r3
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	2245      	movs	r2, #69	; 0x45
 80061a6:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80061a8:	2301      	movs	r3, #1
 80061aa:	61fb      	str	r3, [r7, #28]
		{
 80061ac:	e001      	b.n	80061b2 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061ae:	2300      	movs	r3, #0
 80061b0:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	0018      	movs	r0, r3
 80061b6:	f001 fc1b 	bl	80079f0 <vClearInterruptMaskFromISR>

	return xReturn;
 80061ba:	69fb      	ldr	r3, [r7, #28]
}
 80061bc:	0018      	movs	r0, r3
 80061be:	46bd      	mov	sp, r7
 80061c0:	b009      	add	sp, #36	; 0x24
 80061c2:	bd90      	pop	{r4, r7, pc}

080061c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b08a      	sub	sp, #40	; 0x28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061d0:	2300      	movs	r3, #0
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <xQueueReceive+0x1e>
 80061de:	b672      	cpsid	i
 80061e0:	e7fe      	b.n	80061e0 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d103      	bne.n	80061f0 <xQueueReceive+0x2c>
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <xQueueReceive+0x30>
 80061f0:	2301      	movs	r3, #1
 80061f2:	e000      	b.n	80061f6 <xQueueReceive+0x32>
 80061f4:	2300      	movs	r3, #0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <xQueueReceive+0x3a>
 80061fa:	b672      	cpsid	i
 80061fc:	e7fe      	b.n	80061fc <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061fe:	f000 ff89 	bl	8007114 <xTaskGetSchedulerState>
 8006202:	1e03      	subs	r3, r0, #0
 8006204:	d102      	bne.n	800620c <xQueueReceive+0x48>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <xQueueReceive+0x4c>
 800620c:	2301      	movs	r3, #1
 800620e:	e000      	b.n	8006212 <xQueueReceive+0x4e>
 8006210:	2300      	movs	r3, #0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <xQueueReceive+0x56>
 8006216:	b672      	cpsid	i
 8006218:	e7fe      	b.n	8006218 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800621a:	f001 fbb9 	bl	8007990 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006222:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d01a      	beq.n	8006260 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	0011      	movs	r1, r2
 8006230:	0018      	movs	r0, r3
 8006232:	f000 f8e7 	bl	8006404 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	1e5a      	subs	r2, r3, #1
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d008      	beq.n	8006258 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	3310      	adds	r3, #16
 800624a:	0018      	movs	r0, r3
 800624c:	f000 fdca 	bl	8006de4 <xTaskRemoveFromEventList>
 8006250:	1e03      	subs	r3, r0, #0
 8006252:	d001      	beq.n	8006258 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006254:	f001 fb8c 	bl	8007970 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006258:	f001 fbac 	bl	80079b4 <vPortExitCritical>
				return pdPASS;
 800625c:	2301      	movs	r3, #1
 800625e:	e062      	b.n	8006326 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d103      	bne.n	800626e <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006266:	f001 fba5 	bl	80079b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800626a:	2300      	movs	r3, #0
 800626c:	e05b      	b.n	8006326 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	2b00      	cmp	r3, #0
 8006272:	d106      	bne.n	8006282 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006274:	2314      	movs	r3, #20
 8006276:	18fb      	adds	r3, r7, r3
 8006278:	0018      	movs	r0, r3
 800627a:	f000 fe0f 	bl	8006e9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800627e:	2301      	movs	r3, #1
 8006280:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006282:	f001 fb97 	bl	80079b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006286:	f000 fbbd 	bl	8006a04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800628a:	f001 fb81 	bl	8007990 <vPortEnterCritical>
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	2244      	movs	r2, #68	; 0x44
 8006292:	5c9b      	ldrb	r3, [r3, r2]
 8006294:	b25b      	sxtb	r3, r3
 8006296:	3301      	adds	r3, #1
 8006298:	d103      	bne.n	80062a2 <xQueueReceive+0xde>
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	2244      	movs	r2, #68	; 0x44
 800629e:	2100      	movs	r1, #0
 80062a0:	5499      	strb	r1, [r3, r2]
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	2245      	movs	r2, #69	; 0x45
 80062a6:	5c9b      	ldrb	r3, [r3, r2]
 80062a8:	b25b      	sxtb	r3, r3
 80062aa:	3301      	adds	r3, #1
 80062ac:	d103      	bne.n	80062b6 <xQueueReceive+0xf2>
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	2245      	movs	r2, #69	; 0x45
 80062b2:	2100      	movs	r1, #0
 80062b4:	5499      	strb	r1, [r3, r2]
 80062b6:	f001 fb7d 	bl	80079b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062ba:	1d3a      	adds	r2, r7, #4
 80062bc:	2314      	movs	r3, #20
 80062be:	18fb      	adds	r3, r7, r3
 80062c0:	0011      	movs	r1, r2
 80062c2:	0018      	movs	r0, r3
 80062c4:	f000 fdfe 	bl	8006ec4 <xTaskCheckForTimeOut>
 80062c8:	1e03      	subs	r3, r0, #0
 80062ca:	d11e      	bne.n	800630a <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	0018      	movs	r0, r3
 80062d0:	f000 f91c 	bl	800650c <prvIsQueueEmpty>
 80062d4:	1e03      	subs	r3, r0, #0
 80062d6:	d011      	beq.n	80062fc <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	3324      	adds	r3, #36	; 0x24
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	0011      	movs	r1, r2
 80062e0:	0018      	movs	r0, r3
 80062e2:	f000 fd3b 	bl	8006d5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	0018      	movs	r0, r3
 80062ea:	f000 f8b1 	bl	8006450 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062ee:	f000 fb95 	bl	8006a1c <xTaskResumeAll>
 80062f2:	1e03      	subs	r3, r0, #0
 80062f4:	d191      	bne.n	800621a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 80062f6:	f001 fb3b 	bl	8007970 <vPortYield>
 80062fa:	e78e      	b.n	800621a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	0018      	movs	r0, r3
 8006300:	f000 f8a6 	bl	8006450 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006304:	f000 fb8a 	bl	8006a1c <xTaskResumeAll>
 8006308:	e787      	b.n	800621a <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	0018      	movs	r0, r3
 800630e:	f000 f89f 	bl	8006450 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006312:	f000 fb83 	bl	8006a1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	0018      	movs	r0, r3
 800631a:	f000 f8f7 	bl	800650c <prvIsQueueEmpty>
 800631e:	1e03      	subs	r3, r0, #0
 8006320:	d100      	bne.n	8006324 <xQueueReceive+0x160>
 8006322:	e77a      	b.n	800621a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006324:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006326:	0018      	movs	r0, r3
 8006328:	46bd      	mov	sp, r7
 800632a:	b00a      	add	sp, #40	; 0x28
 800632c:	bd80      	pop	{r7, pc}

0800632e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b086      	sub	sp, #24
 8006332:	af00      	add	r7, sp, #0
 8006334:	60f8      	str	r0, [r7, #12]
 8006336:	60b9      	str	r1, [r7, #8]
 8006338:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800633a:	2300      	movs	r3, #0
 800633c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006342:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10e      	bne.n	800636a <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d14e      	bne.n	80063f2 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	0018      	movs	r0, r3
 800635a:	f000 fef7 	bl	800714c <xTaskPriorityDisinherit>
 800635e:	0003      	movs	r3, r0
 8006360:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	605a      	str	r2, [r3, #4]
 8006368:	e043      	b.n	80063f2 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d119      	bne.n	80063a4 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6898      	ldr	r0, [r3, #8]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	0019      	movs	r1, r3
 800637c:	f001 fd6a 	bl	8007e54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006388:	18d2      	adds	r2, r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	429a      	cmp	r2, r3
 8006398:	d32b      	bcc.n	80063f2 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	609a      	str	r2, [r3, #8]
 80063a2:	e026      	b.n	80063f2 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	68d8      	ldr	r0, [r3, #12]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	0019      	movs	r1, r3
 80063b0:	f001 fd50 	bl	8007e54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	68da      	ldr	r2, [r3, #12]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063bc:	425b      	negs	r3, r3
 80063be:	18d2      	adds	r2, r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	68da      	ldr	r2, [r3, #12]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d207      	bcs.n	80063e0 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d8:	425b      	negs	r3, r3
 80063da:	18d2      	adds	r2, r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d105      	bne.n	80063f2 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80063fa:	697b      	ldr	r3, [r7, #20]
}
 80063fc:	0018      	movs	r0, r3
 80063fe:	46bd      	mov	sp, r7
 8006400:	b006      	add	sp, #24
 8006402:	bd80      	pop	{r7, pc}

08006404 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	d018      	beq.n	8006448 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68da      	ldr	r2, [r3, #12]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	18d2      	adds	r2, r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	429a      	cmp	r2, r3
 800642e:	d303      	bcc.n	8006438 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68d9      	ldr	r1, [r3, #12]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	0018      	movs	r0, r3
 8006444:	f001 fd06 	bl	8007e54 <memcpy>
	}
}
 8006448:	46c0      	nop			; (mov r8, r8)
 800644a:	46bd      	mov	sp, r7
 800644c:	b002      	add	sp, #8
 800644e:	bd80      	pop	{r7, pc}

08006450 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006458:	f001 fa9a 	bl	8007990 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800645c:	230f      	movs	r3, #15
 800645e:	18fb      	adds	r3, r7, r3
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	2145      	movs	r1, #69	; 0x45
 8006464:	5c52      	ldrb	r2, [r2, r1]
 8006466:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006468:	e013      	b.n	8006492 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646e:	2b00      	cmp	r3, #0
 8006470:	d016      	beq.n	80064a0 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3324      	adds	r3, #36	; 0x24
 8006476:	0018      	movs	r0, r3
 8006478:	f000 fcb4 	bl	8006de4 <xTaskRemoveFromEventList>
 800647c:	1e03      	subs	r3, r0, #0
 800647e:	d001      	beq.n	8006484 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006480:	f000 fd70 	bl	8006f64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006484:	210f      	movs	r1, #15
 8006486:	187b      	adds	r3, r7, r1
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	3b01      	subs	r3, #1
 800648c:	b2da      	uxtb	r2, r3
 800648e:	187b      	adds	r3, r7, r1
 8006490:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006492:	230f      	movs	r3, #15
 8006494:	18fb      	adds	r3, r7, r3
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	b25b      	sxtb	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	dce5      	bgt.n	800646a <prvUnlockQueue+0x1a>
 800649e:	e000      	b.n	80064a2 <prvUnlockQueue+0x52>
					break;
 80064a0:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2245      	movs	r2, #69	; 0x45
 80064a6:	21ff      	movs	r1, #255	; 0xff
 80064a8:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80064aa:	f001 fa83 	bl	80079b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064ae:	f001 fa6f 	bl	8007990 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064b2:	230e      	movs	r3, #14
 80064b4:	18fb      	adds	r3, r7, r3
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	2144      	movs	r1, #68	; 0x44
 80064ba:	5c52      	ldrb	r2, [r2, r1]
 80064bc:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064be:	e013      	b.n	80064e8 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d016      	beq.n	80064f6 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3310      	adds	r3, #16
 80064cc:	0018      	movs	r0, r3
 80064ce:	f000 fc89 	bl	8006de4 <xTaskRemoveFromEventList>
 80064d2:	1e03      	subs	r3, r0, #0
 80064d4:	d001      	beq.n	80064da <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80064d6:	f000 fd45 	bl	8006f64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80064da:	210e      	movs	r1, #14
 80064dc:	187b      	adds	r3, r7, r1
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	187b      	adds	r3, r7, r1
 80064e6:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064e8:	230e      	movs	r3, #14
 80064ea:	18fb      	adds	r3, r7, r3
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	b25b      	sxtb	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	dce5      	bgt.n	80064c0 <prvUnlockQueue+0x70>
 80064f4:	e000      	b.n	80064f8 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80064f6:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2244      	movs	r2, #68	; 0x44
 80064fc:	21ff      	movs	r1, #255	; 0xff
 80064fe:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006500:	f001 fa58 	bl	80079b4 <vPortExitCritical>
}
 8006504:	46c0      	nop			; (mov r8, r8)
 8006506:	46bd      	mov	sp, r7
 8006508:	b004      	add	sp, #16
 800650a:	bd80      	pop	{r7, pc}

0800650c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006514:	f001 fa3c 	bl	8007990 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651c:	2b00      	cmp	r3, #0
 800651e:	d102      	bne.n	8006526 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006520:	2301      	movs	r3, #1
 8006522:	60fb      	str	r3, [r7, #12]
 8006524:	e001      	b.n	800652a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800652a:	f001 fa43 	bl	80079b4 <vPortExitCritical>

	return xReturn;
 800652e:	68fb      	ldr	r3, [r7, #12]
}
 8006530:	0018      	movs	r0, r3
 8006532:	46bd      	mov	sp, r7
 8006534:	b004      	add	sp, #16
 8006536:	bd80      	pop	{r7, pc}

08006538 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006540:	f001 fa26 	bl	8007990 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654c:	429a      	cmp	r2, r3
 800654e:	d102      	bne.n	8006556 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006550:	2301      	movs	r3, #1
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	e001      	b.n	800655a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006556:	2300      	movs	r3, #0
 8006558:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800655a:	f001 fa2b 	bl	80079b4 <vPortExitCritical>

	return xReturn;
 800655e:	68fb      	ldr	r3, [r7, #12]
}
 8006560:	0018      	movs	r0, r3
 8006562:	46bd      	mov	sp, r7
 8006564:	b004      	add	sp, #16
 8006566:	bd80      	pop	{r7, pc}

08006568 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006572:	2300      	movs	r3, #0
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	e015      	b.n	80065a4 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006578:	4b0e      	ldr	r3, [pc, #56]	; (80065b4 <vQueueAddToRegistry+0x4c>)
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	00d2      	lsls	r2, r2, #3
 800657e:	58d3      	ldr	r3, [r2, r3]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10c      	bne.n	800659e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006584:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <vQueueAddToRegistry+0x4c>)
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	00d2      	lsls	r2, r2, #3
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800658e:	4a09      	ldr	r2, [pc, #36]	; (80065b4 <vQueueAddToRegistry+0x4c>)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	00db      	lsls	r3, r3, #3
 8006594:	18d3      	adds	r3, r2, r3
 8006596:	3304      	adds	r3, #4
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800659c:	e005      	b.n	80065aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	3301      	adds	r3, #1
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b07      	cmp	r3, #7
 80065a8:	d9e6      	bls.n	8006578 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80065aa:	46c0      	nop			; (mov r8, r8)
 80065ac:	46bd      	mov	sp, r7
 80065ae:	b004      	add	sp, #16
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	20001c3c 	.word	0x20001c3c

080065b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80065c8:	f001 f9e2 	bl	8007990 <vPortEnterCritical>
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2244      	movs	r2, #68	; 0x44
 80065d0:	5c9b      	ldrb	r3, [r3, r2]
 80065d2:	b25b      	sxtb	r3, r3
 80065d4:	3301      	adds	r3, #1
 80065d6:	d103      	bne.n	80065e0 <vQueueWaitForMessageRestricted+0x28>
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	2244      	movs	r2, #68	; 0x44
 80065dc:	2100      	movs	r1, #0
 80065de:	5499      	strb	r1, [r3, r2]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2245      	movs	r2, #69	; 0x45
 80065e4:	5c9b      	ldrb	r3, [r3, r2]
 80065e6:	b25b      	sxtb	r3, r3
 80065e8:	3301      	adds	r3, #1
 80065ea:	d103      	bne.n	80065f4 <vQueueWaitForMessageRestricted+0x3c>
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	2245      	movs	r2, #69	; 0x45
 80065f0:	2100      	movs	r1, #0
 80065f2:	5499      	strb	r1, [r3, r2]
 80065f4:	f001 f9de 	bl	80079b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d106      	bne.n	800660e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	3324      	adds	r3, #36	; 0x24
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	68b9      	ldr	r1, [r7, #8]
 8006608:	0018      	movs	r0, r3
 800660a:	f000 fbc5 	bl	8006d98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	0018      	movs	r0, r3
 8006612:	f7ff ff1d 	bl	8006450 <prvUnlockQueue>
	}
 8006616:	46c0      	nop			; (mov r8, r8)
 8006618:	46bd      	mov	sp, r7
 800661a:	b006      	add	sp, #24
 800661c:	bd80      	pop	{r7, pc}

0800661e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800661e:	b590      	push	{r4, r7, lr}
 8006620:	b08d      	sub	sp, #52	; 0x34
 8006622:	af04      	add	r7, sp, #16
 8006624:	60f8      	str	r0, [r7, #12]
 8006626:	60b9      	str	r1, [r7, #8]
 8006628:	607a      	str	r2, [r7, #4]
 800662a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800662c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <xTaskCreateStatic+0x18>
 8006632:	b672      	cpsid	i
 8006634:	e7fe      	b.n	8006634 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8006636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <xTaskCreateStatic+0x22>
 800663c:	b672      	cpsid	i
 800663e:	e7fe      	b.n	800663e <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006640:	235c      	movs	r3, #92	; 0x5c
 8006642:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2b5c      	cmp	r3, #92	; 0x5c
 8006648:	d001      	beq.n	800664e <xTaskCreateStatic+0x30>
 800664a:	b672      	cpsid	i
 800664c:	e7fe      	b.n	800664c <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800664e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006650:	2b00      	cmp	r3, #0
 8006652:	d020      	beq.n	8006696 <xTaskCreateStatic+0x78>
 8006654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006656:	2b00      	cmp	r3, #0
 8006658:	d01d      	beq.n	8006696 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006662:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	2259      	movs	r2, #89	; 0x59
 8006668:	2102      	movs	r1, #2
 800666a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800666c:	683c      	ldr	r4, [r7, #0]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	68b9      	ldr	r1, [r7, #8]
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	2300      	movs	r3, #0
 8006676:	9303      	str	r3, [sp, #12]
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	9302      	str	r3, [sp, #8]
 800667c:	2318      	movs	r3, #24
 800667e:	18fb      	adds	r3, r7, r3
 8006680:	9301      	str	r3, [sp, #4]
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	0023      	movs	r3, r4
 8006688:	f000 f858 	bl	800673c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	0018      	movs	r0, r3
 8006690:	f000 f8d6 	bl	8006840 <prvAddNewTaskToReadyList>
 8006694:	e001      	b.n	800669a <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8006696:	2300      	movs	r3, #0
 8006698:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800669a:	69bb      	ldr	r3, [r7, #24]
	}
 800669c:	0018      	movs	r0, r3
 800669e:	46bd      	mov	sp, r7
 80066a0:	b009      	add	sp, #36	; 0x24
 80066a2:	bd90      	pop	{r4, r7, pc}

080066a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066a4:	b590      	push	{r4, r7, lr}
 80066a6:	b08d      	sub	sp, #52	; 0x34
 80066a8:	af04      	add	r7, sp, #16
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	603b      	str	r3, [r7, #0]
 80066b0:	1dbb      	adds	r3, r7, #6
 80066b2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066b4:	1dbb      	adds	r3, r7, #6
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	0018      	movs	r0, r3
 80066bc:	f001 fa00 	bl	8007ac0 <pvPortMalloc>
 80066c0:	0003      	movs	r3, r0
 80066c2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d010      	beq.n	80066ec <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80066ca:	205c      	movs	r0, #92	; 0x5c
 80066cc:	f001 f9f8 	bl	8007ac0 <pvPortMalloc>
 80066d0:	0003      	movs	r3, r0
 80066d2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	631a      	str	r2, [r3, #48]	; 0x30
 80066e0:	e006      	b.n	80066f0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	0018      	movs	r0, r3
 80066e6:	f001 fa91 	bl	8007c0c <vPortFree>
 80066ea:	e001      	b.n	80066f0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d01a      	beq.n	800672c <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	2259      	movs	r2, #89	; 0x59
 80066fa:	2100      	movs	r1, #0
 80066fc:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066fe:	1dbb      	adds	r3, r7, #6
 8006700:	881a      	ldrh	r2, [r3, #0]
 8006702:	683c      	ldr	r4, [r7, #0]
 8006704:	68b9      	ldr	r1, [r7, #8]
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	2300      	movs	r3, #0
 800670a:	9303      	str	r3, [sp, #12]
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	9302      	str	r3, [sp, #8]
 8006710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006712:	9301      	str	r3, [sp, #4]
 8006714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	0023      	movs	r3, r4
 800671a:	f000 f80f 	bl	800673c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	0018      	movs	r0, r3
 8006722:	f000 f88d 	bl	8006840 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006726:	2301      	movs	r3, #1
 8006728:	61bb      	str	r3, [r7, #24]
 800672a:	e002      	b.n	8006732 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800672c:	2301      	movs	r3, #1
 800672e:	425b      	negs	r3, r3
 8006730:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006732:	69bb      	ldr	r3, [r7, #24]
	}
 8006734:	0018      	movs	r0, r3
 8006736:	46bd      	mov	sp, r7
 8006738:	b009      	add	sp, #36	; 0x24
 800673a:	bd90      	pop	{r4, r7, pc}

0800673c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	001a      	movs	r2, r3
 8006754:	21a5      	movs	r1, #165	; 0xa5
 8006756:	f001 fb86 	bl	8007e66 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4936      	ldr	r1, [pc, #216]	; (800683c <prvInitialiseNewTask+0x100>)
 8006762:	468c      	mov	ip, r1
 8006764:	4463      	add	r3, ip
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	18d3      	adds	r3, r2, r3
 800676a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	2207      	movs	r2, #7
 8006770:	4393      	bics	r3, r2
 8006772:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	2207      	movs	r2, #7
 8006778:	4013      	ands	r3, r2
 800677a:	d001      	beq.n	8006780 <prvInitialiseNewTask+0x44>
 800677c:	b672      	cpsid	i
 800677e:	e7fe      	b.n	800677e <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006780:	2300      	movs	r3, #0
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	e013      	b.n	80067ae <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	18d3      	adds	r3, r2, r3
 800678c:	7818      	ldrb	r0, [r3, #0]
 800678e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006790:	2134      	movs	r1, #52	; 0x34
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	18d3      	adds	r3, r2, r3
 8006796:	185b      	adds	r3, r3, r1
 8006798:	1c02      	adds	r2, r0, #0
 800679a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	18d3      	adds	r3, r2, r3
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d006      	beq.n	80067b6 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	3301      	adds	r3, #1
 80067ac:	617b      	str	r3, [r7, #20]
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2b0f      	cmp	r3, #15
 80067b2:	d9e8      	bls.n	8006786 <prvInitialiseNewTask+0x4a>
 80067b4:	e000      	b.n	80067b8 <prvInitialiseNewTask+0x7c>
		{
			break;
 80067b6:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ba:	2243      	movs	r2, #67	; 0x43
 80067bc:	2100      	movs	r1, #0
 80067be:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	2b37      	cmp	r3, #55	; 0x37
 80067c4:	d901      	bls.n	80067ca <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067c6:	2337      	movs	r3, #55	; 0x37
 80067c8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067cc:	6a3a      	ldr	r2, [r7, #32]
 80067ce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d2:	6a3a      	ldr	r2, [r7, #32]
 80067d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80067d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d8:	2200      	movs	r2, #0
 80067da:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067de:	3304      	adds	r3, #4
 80067e0:	0018      	movs	r0, r3
 80067e2:	f7ff fa69 	bl	8005cb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e8:	3318      	adds	r3, #24
 80067ea:	0018      	movs	r0, r3
 80067ec:	f7ff fa64 	bl	8005cb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	2238      	movs	r2, #56	; 0x38
 80067fa:	1ad2      	subs	r2, r2, r3
 80067fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006804:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006808:	2200      	movs	r2, #0
 800680a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680e:	2258      	movs	r2, #88	; 0x58
 8006810:	2100      	movs	r1, #0
 8006812:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	68f9      	ldr	r1, [r7, #12]
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	0018      	movs	r0, r3
 800681c:	f001 f81c 	bl	8007858 <pxPortInitialiseStack>
 8006820:	0002      	movs	r2, r0
 8006822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006824:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006830:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006832:	46c0      	nop			; (mov r8, r8)
 8006834:	46bd      	mov	sp, r7
 8006836:	b006      	add	sp, #24
 8006838:	bd80      	pop	{r7, pc}
 800683a:	46c0      	nop			; (mov r8, r8)
 800683c:	3fffffff 	.word	0x3fffffff

08006840 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006848:	f001 f8a2 	bl	8007990 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800684c:	4b2a      	ldr	r3, [pc, #168]	; (80068f8 <prvAddNewTaskToReadyList+0xb8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	4b29      	ldr	r3, [pc, #164]	; (80068f8 <prvAddNewTaskToReadyList+0xb8>)
 8006854:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006856:	4b29      	ldr	r3, [pc, #164]	; (80068fc <prvAddNewTaskToReadyList+0xbc>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800685e:	4b27      	ldr	r3, [pc, #156]	; (80068fc <prvAddNewTaskToReadyList+0xbc>)
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006864:	4b24      	ldr	r3, [pc, #144]	; (80068f8 <prvAddNewTaskToReadyList+0xb8>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d110      	bne.n	800688e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800686c:	f000 fb94 	bl	8006f98 <prvInitialiseTaskLists>
 8006870:	e00d      	b.n	800688e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006872:	4b23      	ldr	r3, [pc, #140]	; (8006900 <prvAddNewTaskToReadyList+0xc0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d109      	bne.n	800688e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800687a:	4b20      	ldr	r3, [pc, #128]	; (80068fc <prvAddNewTaskToReadyList+0xbc>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	429a      	cmp	r2, r3
 8006886:	d802      	bhi.n	800688e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006888:	4b1c      	ldr	r3, [pc, #112]	; (80068fc <prvAddNewTaskToReadyList+0xbc>)
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800688e:	4b1d      	ldr	r3, [pc, #116]	; (8006904 <prvAddNewTaskToReadyList+0xc4>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	4b1b      	ldr	r3, [pc, #108]	; (8006904 <prvAddNewTaskToReadyList+0xc4>)
 8006896:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006898:	4b1a      	ldr	r3, [pc, #104]	; (8006904 <prvAddNewTaskToReadyList+0xc4>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a4:	4b18      	ldr	r3, [pc, #96]	; (8006908 <prvAddNewTaskToReadyList+0xc8>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d903      	bls.n	80068b4 <prvAddNewTaskToReadyList+0x74>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b0:	4b15      	ldr	r3, [pc, #84]	; (8006908 <prvAddNewTaskToReadyList+0xc8>)
 80068b2:	601a      	str	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b8:	0013      	movs	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	189b      	adds	r3, r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4a12      	ldr	r2, [pc, #72]	; (800690c <prvAddNewTaskToReadyList+0xcc>)
 80068c2:	189a      	adds	r2, r3, r2
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3304      	adds	r3, #4
 80068c8:	0019      	movs	r1, r3
 80068ca:	0010      	movs	r0, r2
 80068cc:	f7ff f9ff 	bl	8005cce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068d0:	f001 f870 	bl	80079b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068d4:	4b0a      	ldr	r3, [pc, #40]	; (8006900 <prvAddNewTaskToReadyList+0xc0>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d008      	beq.n	80068ee <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068dc:	4b07      	ldr	r3, [pc, #28]	; (80068fc <prvAddNewTaskToReadyList+0xbc>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d201      	bcs.n	80068ee <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068ea:	f001 f841 	bl	8007970 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068ee:	46c0      	nop			; (mov r8, r8)
 80068f0:	46bd      	mov	sp, r7
 80068f2:	b002      	add	sp, #8
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	46c0      	nop			; (mov r8, r8)
 80068f8:	20000cd0 	.word	0x20000cd0
 80068fc:	200007fc 	.word	0x200007fc
 8006900:	20000cdc 	.word	0x20000cdc
 8006904:	20000cec 	.word	0x20000cec
 8006908:	20000cd8 	.word	0x20000cd8
 800690c:	20000800 	.word	0x20000800

08006910 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006918:	2300      	movs	r3, #0
 800691a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d010      	beq.n	8006944 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006922:	4b0d      	ldr	r3, [pc, #52]	; (8006958 <vTaskDelay+0x48>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <vTaskDelay+0x1e>
 800692a:	b672      	cpsid	i
 800692c:	e7fe      	b.n	800692c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800692e:	f000 f869 	bl	8006a04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2100      	movs	r1, #0
 8006936:	0018      	movs	r0, r3
 8006938:	f000 fc64 	bl	8007204 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800693c:	f000 f86e 	bl	8006a1c <xTaskResumeAll>
 8006940:	0003      	movs	r3, r0
 8006942:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800694a:	f001 f811 	bl	8007970 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800694e:	46c0      	nop			; (mov r8, r8)
 8006950:	46bd      	mov	sp, r7
 8006952:	b004      	add	sp, #16
 8006954:	bd80      	pop	{r7, pc}
 8006956:	46c0      	nop			; (mov r8, r8)
 8006958:	20000cf8 	.word	0x20000cf8

0800695c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800695c:	b590      	push	{r4, r7, lr}
 800695e:	b089      	sub	sp, #36	; 0x24
 8006960:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006962:	2300      	movs	r3, #0
 8006964:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006966:	2300      	movs	r3, #0
 8006968:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800696a:	003a      	movs	r2, r7
 800696c:	1d39      	adds	r1, r7, #4
 800696e:	2308      	movs	r3, #8
 8006970:	18fb      	adds	r3, r7, r3
 8006972:	0018      	movs	r0, r3
 8006974:	f7ff f952 	bl	8005c1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006978:	683c      	ldr	r4, [r7, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	491b      	ldr	r1, [pc, #108]	; (80069ec <vTaskStartScheduler+0x90>)
 8006980:	481b      	ldr	r0, [pc, #108]	; (80069f0 <vTaskStartScheduler+0x94>)
 8006982:	9202      	str	r2, [sp, #8]
 8006984:	9301      	str	r3, [sp, #4]
 8006986:	2300      	movs	r3, #0
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	2300      	movs	r3, #0
 800698c:	0022      	movs	r2, r4
 800698e:	f7ff fe46 	bl	800661e <xTaskCreateStatic>
 8006992:	0002      	movs	r2, r0
 8006994:	4b17      	ldr	r3, [pc, #92]	; (80069f4 <vTaskStartScheduler+0x98>)
 8006996:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006998:	4b16      	ldr	r3, [pc, #88]	; (80069f4 <vTaskStartScheduler+0x98>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069a0:	2301      	movs	r3, #1
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	e001      	b.n	80069aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069a6:	2300      	movs	r3, #0
 80069a8:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d103      	bne.n	80069b8 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80069b0:	f000 fc7c 	bl	80072ac <xTimerCreateTimerTask>
 80069b4:	0003      	movs	r3, r0
 80069b6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d10d      	bne.n	80069da <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80069be:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069c0:	4b0d      	ldr	r3, [pc, #52]	; (80069f8 <vTaskStartScheduler+0x9c>)
 80069c2:	2201      	movs	r2, #1
 80069c4:	4252      	negs	r2, r2
 80069c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069c8:	4b0c      	ldr	r3, [pc, #48]	; (80069fc <vTaskStartScheduler+0xa0>)
 80069ca:	2201      	movs	r2, #1
 80069cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80069ce:	4b0c      	ldr	r3, [pc, #48]	; (8006a00 <vTaskStartScheduler+0xa4>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069d4:	f000 ffa8 	bl	8007928 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069d8:	e004      	b.n	80069e4 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3301      	adds	r3, #1
 80069de:	d101      	bne.n	80069e4 <vTaskStartScheduler+0x88>
 80069e0:	b672      	cpsid	i
 80069e2:	e7fe      	b.n	80069e2 <vTaskStartScheduler+0x86>
}
 80069e4:	46c0      	nop			; (mov r8, r8)
 80069e6:	46bd      	mov	sp, r7
 80069e8:	b005      	add	sp, #20
 80069ea:	bd90      	pop	{r4, r7, pc}
 80069ec:	08007edc 	.word	0x08007edc
 80069f0:	08006f79 	.word	0x08006f79
 80069f4:	20000cf4 	.word	0x20000cf4
 80069f8:	20000cf0 	.word	0x20000cf0
 80069fc:	20000cdc 	.word	0x20000cdc
 8006a00:	20000cd4 	.word	0x20000cd4

08006a04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006a08:	4b03      	ldr	r3, [pc, #12]	; (8006a18 <vTaskSuspendAll+0x14>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	4b02      	ldr	r3, [pc, #8]	; (8006a18 <vTaskSuspendAll+0x14>)
 8006a10:	601a      	str	r2, [r3, #0]
}
 8006a12:	46c0      	nop			; (mov r8, r8)
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	20000cf8 	.word	0x20000cf8

08006a1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a22:	2300      	movs	r3, #0
 8006a24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a26:	2300      	movs	r3, #0
 8006a28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a2a:	4b3a      	ldr	r3, [pc, #232]	; (8006b14 <xTaskResumeAll+0xf8>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <xTaskResumeAll+0x1a>
 8006a32:	b672      	cpsid	i
 8006a34:	e7fe      	b.n	8006a34 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a36:	f000 ffab 	bl	8007990 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a3a:	4b36      	ldr	r3, [pc, #216]	; (8006b14 <xTaskResumeAll+0xf8>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	1e5a      	subs	r2, r3, #1
 8006a40:	4b34      	ldr	r3, [pc, #208]	; (8006b14 <xTaskResumeAll+0xf8>)
 8006a42:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a44:	4b33      	ldr	r3, [pc, #204]	; (8006b14 <xTaskResumeAll+0xf8>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d15b      	bne.n	8006b04 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a4c:	4b32      	ldr	r3, [pc, #200]	; (8006b18 <xTaskResumeAll+0xfc>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d057      	beq.n	8006b04 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a54:	e02f      	b.n	8006ab6 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006a56:	4b31      	ldr	r3, [pc, #196]	; (8006b1c <xTaskResumeAll+0x100>)
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3318      	adds	r3, #24
 8006a62:	0018      	movs	r0, r3
 8006a64:	f7ff f98b 	bl	8005d7e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	f7ff f986 	bl	8005d7e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a76:	4b2a      	ldr	r3, [pc, #168]	; (8006b20 <xTaskResumeAll+0x104>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d903      	bls.n	8006a86 <xTaskResumeAll+0x6a>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a82:	4b27      	ldr	r3, [pc, #156]	; (8006b20 <xTaskResumeAll+0x104>)
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8a:	0013      	movs	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	189b      	adds	r3, r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4a24      	ldr	r2, [pc, #144]	; (8006b24 <xTaskResumeAll+0x108>)
 8006a94:	189a      	adds	r2, r3, r2
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	0019      	movs	r1, r3
 8006a9c:	0010      	movs	r0, r2
 8006a9e:	f7ff f916 	bl	8005cce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa6:	4b20      	ldr	r3, [pc, #128]	; (8006b28 <xTaskResumeAll+0x10c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d302      	bcc.n	8006ab6 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8006ab0:	4b1e      	ldr	r3, [pc, #120]	; (8006b2c <xTaskResumeAll+0x110>)
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ab6:	4b19      	ldr	r3, [pc, #100]	; (8006b1c <xTaskResumeAll+0x100>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1cb      	bne.n	8006a56 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ac4:	f000 fb02 	bl	80070cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006ac8:	4b19      	ldr	r3, [pc, #100]	; (8006b30 <xTaskResumeAll+0x114>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00f      	beq.n	8006af4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ad4:	f000 f83c 	bl	8006b50 <xTaskIncrementTick>
 8006ad8:	1e03      	subs	r3, r0, #0
 8006ada:	d002      	beq.n	8006ae2 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8006adc:	4b13      	ldr	r3, [pc, #76]	; (8006b2c <xTaskResumeAll+0x110>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1f2      	bne.n	8006ad4 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8006aee:	4b10      	ldr	r3, [pc, #64]	; (8006b30 <xTaskResumeAll+0x114>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006af4:	4b0d      	ldr	r3, [pc, #52]	; (8006b2c <xTaskResumeAll+0x110>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006afc:	2301      	movs	r3, #1
 8006afe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b00:	f000 ff36 	bl	8007970 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b04:	f000 ff56 	bl	80079b4 <vPortExitCritical>

	return xAlreadyYielded;
 8006b08:	68bb      	ldr	r3, [r7, #8]
}
 8006b0a:	0018      	movs	r0, r3
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	b004      	add	sp, #16
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	46c0      	nop			; (mov r8, r8)
 8006b14:	20000cf8 	.word	0x20000cf8
 8006b18:	20000cd0 	.word	0x20000cd0
 8006b1c:	20000c90 	.word	0x20000c90
 8006b20:	20000cd8 	.word	0x20000cd8
 8006b24:	20000800 	.word	0x20000800
 8006b28:	200007fc 	.word	0x200007fc
 8006b2c:	20000ce4 	.word	0x20000ce4
 8006b30:	20000ce0 	.word	0x20000ce0

08006b34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006b3a:	4b04      	ldr	r3, [pc, #16]	; (8006b4c <xTaskGetTickCount+0x18>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b40:	687b      	ldr	r3, [r7, #4]
}
 8006b42:	0018      	movs	r0, r3
 8006b44:	46bd      	mov	sp, r7
 8006b46:	b002      	add	sp, #8
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	46c0      	nop			; (mov r8, r8)
 8006b4c:	20000cd4 	.word	0x20000cd4

08006b50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b56:	2300      	movs	r3, #0
 8006b58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b5a:	4b4c      	ldr	r3, [pc, #304]	; (8006c8c <xTaskIncrementTick+0x13c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d000      	beq.n	8006b64 <xTaskIncrementTick+0x14>
 8006b62:	e083      	b.n	8006c6c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b64:	4b4a      	ldr	r3, [pc, #296]	; (8006c90 <xTaskIncrementTick+0x140>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b6c:	4b48      	ldr	r3, [pc, #288]	; (8006c90 <xTaskIncrementTick+0x140>)
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d117      	bne.n	8006ba8 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b78:	4b46      	ldr	r3, [pc, #280]	; (8006c94 <xTaskIncrementTick+0x144>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <xTaskIncrementTick+0x36>
 8006b82:	b672      	cpsid	i
 8006b84:	e7fe      	b.n	8006b84 <xTaskIncrementTick+0x34>
 8006b86:	4b43      	ldr	r3, [pc, #268]	; (8006c94 <xTaskIncrementTick+0x144>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	60fb      	str	r3, [r7, #12]
 8006b8c:	4b42      	ldr	r3, [pc, #264]	; (8006c98 <xTaskIncrementTick+0x148>)
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	4b40      	ldr	r3, [pc, #256]	; (8006c94 <xTaskIncrementTick+0x144>)
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	4b40      	ldr	r3, [pc, #256]	; (8006c98 <xTaskIncrementTick+0x148>)
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	4b40      	ldr	r3, [pc, #256]	; (8006c9c <xTaskIncrementTick+0x14c>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	4b3e      	ldr	r3, [pc, #248]	; (8006c9c <xTaskIncrementTick+0x14c>)
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	f000 fa92 	bl	80070cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ba8:	4b3d      	ldr	r3, [pc, #244]	; (8006ca0 <xTaskIncrementTick+0x150>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d34e      	bcc.n	8006c50 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bb2:	4b38      	ldr	r3, [pc, #224]	; (8006c94 <xTaskIncrementTick+0x144>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <xTaskIncrementTick+0x70>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e000      	b.n	8006bc2 <xTaskIncrementTick+0x72>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d004      	beq.n	8006bd0 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bc6:	4b36      	ldr	r3, [pc, #216]	; (8006ca0 <xTaskIncrementTick+0x150>)
 8006bc8:	2201      	movs	r2, #1
 8006bca:	4252      	negs	r2, r2
 8006bcc:	601a      	str	r2, [r3, #0]
					break;
 8006bce:	e03f      	b.n	8006c50 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006bd0:	4b30      	ldr	r3, [pc, #192]	; (8006c94 <xTaskIncrementTick+0x144>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d203      	bcs.n	8006bf0 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006be8:	4b2d      	ldr	r3, [pc, #180]	; (8006ca0 <xTaskIncrementTick+0x150>)
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	601a      	str	r2, [r3, #0]
						break;
 8006bee:	e02f      	b.n	8006c50 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	0018      	movs	r0, r3
 8006bf6:	f7ff f8c2 	bl	8005d7e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d004      	beq.n	8006c0c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	3318      	adds	r3, #24
 8006c06:	0018      	movs	r0, r3
 8006c08:	f7ff f8b9 	bl	8005d7e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c10:	4b24      	ldr	r3, [pc, #144]	; (8006ca4 <xTaskIncrementTick+0x154>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d903      	bls.n	8006c20 <xTaskIncrementTick+0xd0>
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1c:	4b21      	ldr	r3, [pc, #132]	; (8006ca4 <xTaskIncrementTick+0x154>)
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c24:	0013      	movs	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	189b      	adds	r3, r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4a1e      	ldr	r2, [pc, #120]	; (8006ca8 <xTaskIncrementTick+0x158>)
 8006c2e:	189a      	adds	r2, r3, r2
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	3304      	adds	r3, #4
 8006c34:	0019      	movs	r1, r3
 8006c36:	0010      	movs	r0, r2
 8006c38:	f7ff f849 	bl	8005cce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c40:	4b1a      	ldr	r3, [pc, #104]	; (8006cac <xTaskIncrementTick+0x15c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d3b3      	bcc.n	8006bb2 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c4e:	e7b0      	b.n	8006bb2 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c50:	4b16      	ldr	r3, [pc, #88]	; (8006cac <xTaskIncrementTick+0x15c>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c56:	4914      	ldr	r1, [pc, #80]	; (8006ca8 <xTaskIncrementTick+0x158>)
 8006c58:	0013      	movs	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	189b      	adds	r3, r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	585b      	ldr	r3, [r3, r1]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d907      	bls.n	8006c76 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006c66:	2301      	movs	r3, #1
 8006c68:	617b      	str	r3, [r7, #20]
 8006c6a:	e004      	b.n	8006c76 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006c6c:	4b10      	ldr	r3, [pc, #64]	; (8006cb0 <xTaskIncrementTick+0x160>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	4b0f      	ldr	r3, [pc, #60]	; (8006cb0 <xTaskIncrementTick+0x160>)
 8006c74:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006c76:	4b0f      	ldr	r3, [pc, #60]	; (8006cb4 <xTaskIncrementTick+0x164>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006c82:	697b      	ldr	r3, [r7, #20]
}
 8006c84:	0018      	movs	r0, r3
 8006c86:	46bd      	mov	sp, r7
 8006c88:	b006      	add	sp, #24
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	20000cf8 	.word	0x20000cf8
 8006c90:	20000cd4 	.word	0x20000cd4
 8006c94:	20000c88 	.word	0x20000c88
 8006c98:	20000c8c 	.word	0x20000c8c
 8006c9c:	20000ce8 	.word	0x20000ce8
 8006ca0:	20000cf0 	.word	0x20000cf0
 8006ca4:	20000cd8 	.word	0x20000cd8
 8006ca8:	20000800 	.word	0x20000800
 8006cac:	200007fc 	.word	0x200007fc
 8006cb0:	20000ce0 	.word	0x20000ce0
 8006cb4:	20000ce4 	.word	0x20000ce4

08006cb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006cbe:	4b22      	ldr	r3, [pc, #136]	; (8006d48 <vTaskSwitchContext+0x90>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006cc6:	4b21      	ldr	r3, [pc, #132]	; (8006d4c <vTaskSwitchContext+0x94>)
 8006cc8:	2201      	movs	r2, #1
 8006cca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ccc:	e037      	b.n	8006d3e <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8006cce:	4b1f      	ldr	r3, [pc, #124]	; (8006d4c <vTaskSwitchContext+0x94>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006cd4:	4b1e      	ldr	r3, [pc, #120]	; (8006d50 <vTaskSwitchContext+0x98>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	607b      	str	r3, [r7, #4]
 8006cda:	e007      	b.n	8006cec <vTaskSwitchContext+0x34>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <vTaskSwitchContext+0x2e>
 8006ce2:	b672      	cpsid	i
 8006ce4:	e7fe      	b.n	8006ce4 <vTaskSwitchContext+0x2c>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	607b      	str	r3, [r7, #4]
 8006cec:	4919      	ldr	r1, [pc, #100]	; (8006d54 <vTaskSwitchContext+0x9c>)
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	0013      	movs	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	189b      	adds	r3, r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	585b      	ldr	r3, [r3, r1]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d0ee      	beq.n	8006cdc <vTaskSwitchContext+0x24>
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	0013      	movs	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	189b      	adds	r3, r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4a12      	ldr	r2, [pc, #72]	; (8006d54 <vTaskSwitchContext+0x9c>)
 8006d0a:	189b      	adds	r3, r3, r2
 8006d0c:	603b      	str	r3, [r7, #0]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	605a      	str	r2, [r3, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	3308      	adds	r3, #8
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d104      	bne.n	8006d2e <vTaskSwitchContext+0x76>
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	685a      	ldr	r2, [r3, #4]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	605a      	str	r2, [r3, #4]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	68da      	ldr	r2, [r3, #12]
 8006d34:	4b08      	ldr	r3, [pc, #32]	; (8006d58 <vTaskSwitchContext+0xa0>)
 8006d36:	601a      	str	r2, [r3, #0]
 8006d38:	4b05      	ldr	r3, [pc, #20]	; (8006d50 <vTaskSwitchContext+0x98>)
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	601a      	str	r2, [r3, #0]
}
 8006d3e:	46c0      	nop			; (mov r8, r8)
 8006d40:	46bd      	mov	sp, r7
 8006d42:	b002      	add	sp, #8
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	46c0      	nop			; (mov r8, r8)
 8006d48:	20000cf8 	.word	0x20000cf8
 8006d4c:	20000ce4 	.word	0x20000ce4
 8006d50:	20000cd8 	.word	0x20000cd8
 8006d54:	20000800 	.word	0x20000800
 8006d58:	200007fc 	.word	0x200007fc

08006d5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <vTaskPlaceOnEventList+0x14>
 8006d6c:	b672      	cpsid	i
 8006d6e:	e7fe      	b.n	8006d6e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d70:	4b08      	ldr	r3, [pc, #32]	; (8006d94 <vTaskPlaceOnEventList+0x38>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3318      	adds	r3, #24
 8006d76:	001a      	movs	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	0011      	movs	r1, r2
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	f7fe ffc8 	bl	8005d12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2101      	movs	r1, #1
 8006d86:	0018      	movs	r0, r3
 8006d88:	f000 fa3c 	bl	8007204 <prvAddCurrentTaskToDelayedList>
}
 8006d8c:	46c0      	nop			; (mov r8, r8)
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	b002      	add	sp, #8
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	200007fc 	.word	0x200007fc

08006d98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <vTaskPlaceOnEventListRestricted+0x16>
 8006daa:	b672      	cpsid	i
 8006dac:	e7fe      	b.n	8006dac <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006dae:	4b0c      	ldr	r3, [pc, #48]	; (8006de0 <vTaskPlaceOnEventListRestricted+0x48>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3318      	adds	r3, #24
 8006db4:	001a      	movs	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	0011      	movs	r1, r2
 8006dba:	0018      	movs	r0, r3
 8006dbc:	f7fe ff87 	bl	8005cce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	425b      	negs	r3, r3
 8006dca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	0011      	movs	r1, r2
 8006dd2:	0018      	movs	r0, r3
 8006dd4:	f000 fa16 	bl	8007204 <prvAddCurrentTaskToDelayedList>
	}
 8006dd8:	46c0      	nop			; (mov r8, r8)
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	b004      	add	sp, #16
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	200007fc 	.word	0x200007fc

08006de4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <xTaskRemoveFromEventList+0x1a>
 8006dfa:	b672      	cpsid	i
 8006dfc:	e7fe      	b.n	8006dfc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	3318      	adds	r3, #24
 8006e02:	0018      	movs	r0, r3
 8006e04:	f7fe ffbb 	bl	8005d7e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e08:	4b1e      	ldr	r3, [pc, #120]	; (8006e84 <xTaskRemoveFromEventList+0xa0>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d11d      	bne.n	8006e4c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	3304      	adds	r3, #4
 8006e14:	0018      	movs	r0, r3
 8006e16:	f7fe ffb2 	bl	8005d7e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1e:	4b1a      	ldr	r3, [pc, #104]	; (8006e88 <xTaskRemoveFromEventList+0xa4>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d903      	bls.n	8006e2e <xTaskRemoveFromEventList+0x4a>
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2a:	4b17      	ldr	r3, [pc, #92]	; (8006e88 <xTaskRemoveFromEventList+0xa4>)
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e32:	0013      	movs	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	189b      	adds	r3, r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4a14      	ldr	r2, [pc, #80]	; (8006e8c <xTaskRemoveFromEventList+0xa8>)
 8006e3c:	189a      	adds	r2, r3, r2
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	3304      	adds	r3, #4
 8006e42:	0019      	movs	r1, r3
 8006e44:	0010      	movs	r0, r2
 8006e46:	f7fe ff42 	bl	8005cce <vListInsertEnd>
 8006e4a:	e007      	b.n	8006e5c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	3318      	adds	r3, #24
 8006e50:	001a      	movs	r2, r3
 8006e52:	4b0f      	ldr	r3, [pc, #60]	; (8006e90 <xTaskRemoveFromEventList+0xac>)
 8006e54:	0011      	movs	r1, r2
 8006e56:	0018      	movs	r0, r3
 8006e58:	f7fe ff39 	bl	8005cce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e60:	4b0c      	ldr	r3, [pc, #48]	; (8006e94 <xTaskRemoveFromEventList+0xb0>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d905      	bls.n	8006e76 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e6e:	4b0a      	ldr	r3, [pc, #40]	; (8006e98 <xTaskRemoveFromEventList+0xb4>)
 8006e70:	2201      	movs	r2, #1
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	e001      	b.n	8006e7a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8006e76:	2300      	movs	r3, #0
 8006e78:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
}
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	b004      	add	sp, #16
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20000cf8 	.word	0x20000cf8
 8006e88:	20000cd8 	.word	0x20000cd8
 8006e8c:	20000800 	.word	0x20000800
 8006e90:	20000c90 	.word	0x20000c90
 8006e94:	200007fc 	.word	0x200007fc
 8006e98:	20000ce4 	.word	0x20000ce4

08006e9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ea4:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <vTaskInternalSetTimeOutState+0x20>)
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006eac:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <vTaskInternalSetTimeOutState+0x24>)
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	605a      	str	r2, [r3, #4]
}
 8006eb4:	46c0      	nop			; (mov r8, r8)
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	b002      	add	sp, #8
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	20000ce8 	.word	0x20000ce8
 8006ec0:	20000cd4 	.word	0x20000cd4

08006ec4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <xTaskCheckForTimeOut+0x14>
 8006ed4:	b672      	cpsid	i
 8006ed6:	e7fe      	b.n	8006ed6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <xTaskCheckForTimeOut+0x1e>
 8006ede:	b672      	cpsid	i
 8006ee0:	e7fe      	b.n	8006ee0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8006ee2:	f000 fd55 	bl	8007990 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006ee6:	4b1d      	ldr	r3, [pc, #116]	; (8006f5c <xTaskCheckForTimeOut+0x98>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3301      	adds	r3, #1
 8006efc:	d102      	bne.n	8006f04 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006efe:	2300      	movs	r3, #0
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	e024      	b.n	8006f4e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	4b15      	ldr	r3, [pc, #84]	; (8006f60 <xTaskCheckForTimeOut+0x9c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d007      	beq.n	8006f20 <xTaskCheckForTimeOut+0x5c>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d302      	bcc.n	8006f20 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	617b      	str	r3, [r7, #20]
 8006f1e:	e016      	b.n	8006f4e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d20c      	bcs.n	8006f44 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	1ad2      	subs	r2, r2, r3
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	0018      	movs	r0, r3
 8006f3a:	f7ff ffaf 	bl	8006e9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	617b      	str	r3, [r7, #20]
 8006f42:	e004      	b.n	8006f4e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2200      	movs	r2, #0
 8006f48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006f4e:	f000 fd31 	bl	80079b4 <vPortExitCritical>

	return xReturn;
 8006f52:	697b      	ldr	r3, [r7, #20]
}
 8006f54:	0018      	movs	r0, r3
 8006f56:	46bd      	mov	sp, r7
 8006f58:	b006      	add	sp, #24
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	20000cd4 	.word	0x20000cd4
 8006f60:	20000ce8 	.word	0x20000ce8

08006f64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f68:	4b02      	ldr	r3, [pc, #8]	; (8006f74 <vTaskMissedYield+0x10>)
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	601a      	str	r2, [r3, #0]
}
 8006f6e:	46c0      	nop			; (mov r8, r8)
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	20000ce4 	.word	0x20000ce4

08006f78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f80:	f000 f84e 	bl	8007020 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f84:	4b03      	ldr	r3, [pc, #12]	; (8006f94 <prvIdleTask+0x1c>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d9f9      	bls.n	8006f80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f8c:	f000 fcf0 	bl	8007970 <vPortYield>
		prvCheckTasksWaitingTermination();
 8006f90:	e7f6      	b.n	8006f80 <prvIdleTask+0x8>
 8006f92:	46c0      	nop			; (mov r8, r8)
 8006f94:	20000800 	.word	0x20000800

08006f98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	607b      	str	r3, [r7, #4]
 8006fa2:	e00c      	b.n	8006fbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	0013      	movs	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	189b      	adds	r3, r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4a14      	ldr	r2, [pc, #80]	; (8007000 <prvInitialiseTaskLists+0x68>)
 8006fb0:	189b      	adds	r3, r3, r2
 8006fb2:	0018      	movs	r0, r3
 8006fb4:	f7fe fe62 	bl	8005c7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	607b      	str	r3, [r7, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b37      	cmp	r3, #55	; 0x37
 8006fc2:	d9ef      	bls.n	8006fa4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006fc4:	4b0f      	ldr	r3, [pc, #60]	; (8007004 <prvInitialiseTaskLists+0x6c>)
 8006fc6:	0018      	movs	r0, r3
 8006fc8:	f7fe fe58 	bl	8005c7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006fcc:	4b0e      	ldr	r3, [pc, #56]	; (8007008 <prvInitialiseTaskLists+0x70>)
 8006fce:	0018      	movs	r0, r3
 8006fd0:	f7fe fe54 	bl	8005c7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006fd4:	4b0d      	ldr	r3, [pc, #52]	; (800700c <prvInitialiseTaskLists+0x74>)
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	f7fe fe50 	bl	8005c7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006fdc:	4b0c      	ldr	r3, [pc, #48]	; (8007010 <prvInitialiseTaskLists+0x78>)
 8006fde:	0018      	movs	r0, r3
 8006fe0:	f7fe fe4c 	bl	8005c7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006fe4:	4b0b      	ldr	r3, [pc, #44]	; (8007014 <prvInitialiseTaskLists+0x7c>)
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	f7fe fe48 	bl	8005c7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006fec:	4b0a      	ldr	r3, [pc, #40]	; (8007018 <prvInitialiseTaskLists+0x80>)
 8006fee:	4a05      	ldr	r2, [pc, #20]	; (8007004 <prvInitialiseTaskLists+0x6c>)
 8006ff0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ff2:	4b0a      	ldr	r3, [pc, #40]	; (800701c <prvInitialiseTaskLists+0x84>)
 8006ff4:	4a04      	ldr	r2, [pc, #16]	; (8007008 <prvInitialiseTaskLists+0x70>)
 8006ff6:	601a      	str	r2, [r3, #0]
}
 8006ff8:	46c0      	nop			; (mov r8, r8)
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	b002      	add	sp, #8
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20000800 	.word	0x20000800
 8007004:	20000c60 	.word	0x20000c60
 8007008:	20000c74 	.word	0x20000c74
 800700c:	20000c90 	.word	0x20000c90
 8007010:	20000ca4 	.word	0x20000ca4
 8007014:	20000cbc 	.word	0x20000cbc
 8007018:	20000c88 	.word	0x20000c88
 800701c:	20000c8c 	.word	0x20000c8c

08007020 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007026:	e01a      	b.n	800705e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8007028:	f000 fcb2 	bl	8007990 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800702c:	4b10      	ldr	r3, [pc, #64]	; (8007070 <prvCheckTasksWaitingTermination+0x50>)
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	3304      	adds	r3, #4
 8007038:	0018      	movs	r0, r3
 800703a:	f7fe fea0 	bl	8005d7e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800703e:	4b0d      	ldr	r3, [pc, #52]	; (8007074 <prvCheckTasksWaitingTermination+0x54>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	1e5a      	subs	r2, r3, #1
 8007044:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <prvCheckTasksWaitingTermination+0x54>)
 8007046:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007048:	4b0b      	ldr	r3, [pc, #44]	; (8007078 <prvCheckTasksWaitingTermination+0x58>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	1e5a      	subs	r2, r3, #1
 800704e:	4b0a      	ldr	r3, [pc, #40]	; (8007078 <prvCheckTasksWaitingTermination+0x58>)
 8007050:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8007052:	f000 fcaf 	bl	80079b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	0018      	movs	r0, r3
 800705a:	f000 f80f 	bl	800707c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800705e:	4b06      	ldr	r3, [pc, #24]	; (8007078 <prvCheckTasksWaitingTermination+0x58>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1e0      	bne.n	8007028 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007066:	46c0      	nop			; (mov r8, r8)
 8007068:	46bd      	mov	sp, r7
 800706a:	b002      	add	sp, #8
 800706c:	bd80      	pop	{r7, pc}
 800706e:	46c0      	nop			; (mov r8, r8)
 8007070:	20000ca4 	.word	0x20000ca4
 8007074:	20000cd0 	.word	0x20000cd0
 8007078:	20000cb8 	.word	0x20000cb8

0800707c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2259      	movs	r2, #89	; 0x59
 8007088:	5c9b      	ldrb	r3, [r3, r2]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d109      	bne.n	80070a2 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007092:	0018      	movs	r0, r3
 8007094:	f000 fdba 	bl	8007c0c <vPortFree>
				vPortFree( pxTCB );
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	0018      	movs	r0, r3
 800709c:	f000 fdb6 	bl	8007c0c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80070a0:	e010      	b.n	80070c4 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2259      	movs	r2, #89	; 0x59
 80070a6:	5c9b      	ldrb	r3, [r3, r2]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d104      	bne.n	80070b6 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	0018      	movs	r0, r3
 80070b0:	f000 fdac 	bl	8007c0c <vPortFree>
	}
 80070b4:	e006      	b.n	80070c4 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2259      	movs	r2, #89	; 0x59
 80070ba:	5c9b      	ldrb	r3, [r3, r2]
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d001      	beq.n	80070c4 <prvDeleteTCB+0x48>
 80070c0:	b672      	cpsid	i
 80070c2:	e7fe      	b.n	80070c2 <prvDeleteTCB+0x46>
	}
 80070c4:	46c0      	nop			; (mov r8, r8)
 80070c6:	46bd      	mov	sp, r7
 80070c8:	b002      	add	sp, #8
 80070ca:	bd80      	pop	{r7, pc}

080070cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070d2:	4b0e      	ldr	r3, [pc, #56]	; (800710c <prvResetNextTaskUnblockTime+0x40>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <prvResetNextTaskUnblockTime+0x14>
 80070dc:	2301      	movs	r3, #1
 80070de:	e000      	b.n	80070e2 <prvResetNextTaskUnblockTime+0x16>
 80070e0:	2300      	movs	r3, #0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d004      	beq.n	80070f0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80070e6:	4b0a      	ldr	r3, [pc, #40]	; (8007110 <prvResetNextTaskUnblockTime+0x44>)
 80070e8:	2201      	movs	r2, #1
 80070ea:	4252      	negs	r2, r2
 80070ec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80070ee:	e008      	b.n	8007102 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80070f0:	4b06      	ldr	r3, [pc, #24]	; (800710c <prvResetNextTaskUnblockTime+0x40>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	4b04      	ldr	r3, [pc, #16]	; (8007110 <prvResetNextTaskUnblockTime+0x44>)
 8007100:	601a      	str	r2, [r3, #0]
}
 8007102:	46c0      	nop			; (mov r8, r8)
 8007104:	46bd      	mov	sp, r7
 8007106:	b002      	add	sp, #8
 8007108:	bd80      	pop	{r7, pc}
 800710a:	46c0      	nop			; (mov r8, r8)
 800710c:	20000c88 	.word	0x20000c88
 8007110:	20000cf0 	.word	0x20000cf0

08007114 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800711a:	4b0a      	ldr	r3, [pc, #40]	; (8007144 <xTaskGetSchedulerState+0x30>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d102      	bne.n	8007128 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007122:	2301      	movs	r3, #1
 8007124:	607b      	str	r3, [r7, #4]
 8007126:	e008      	b.n	800713a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007128:	4b07      	ldr	r3, [pc, #28]	; (8007148 <xTaskGetSchedulerState+0x34>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d102      	bne.n	8007136 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007130:	2302      	movs	r3, #2
 8007132:	607b      	str	r3, [r7, #4]
 8007134:	e001      	b.n	800713a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007136:	2300      	movs	r3, #0
 8007138:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800713a:	687b      	ldr	r3, [r7, #4]
	}
 800713c:	0018      	movs	r0, r3
 800713e:	46bd      	mov	sp, r7
 8007140:	b002      	add	sp, #8
 8007142:	bd80      	pop	{r7, pc}
 8007144:	20000cdc 	.word	0x20000cdc
 8007148:	20000cf8 	.word	0x20000cf8

0800714c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d044      	beq.n	80071ec <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007162:	4b25      	ldr	r3, [pc, #148]	; (80071f8 <xTaskPriorityDisinherit+0xac>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	429a      	cmp	r2, r3
 800716a:	d001      	beq.n	8007170 <xTaskPriorityDisinherit+0x24>
 800716c:	b672      	cpsid	i
 800716e:	e7fe      	b.n	800716e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <xTaskPriorityDisinherit+0x30>
 8007178:	b672      	cpsid	i
 800717a:	e7fe      	b.n	800717a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007180:	1e5a      	subs	r2, r3, #1
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718e:	429a      	cmp	r2, r3
 8007190:	d02c      	beq.n	80071ec <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007196:	2b00      	cmp	r3, #0
 8007198:	d128      	bne.n	80071ec <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	3304      	adds	r3, #4
 800719e:	0018      	movs	r0, r3
 80071a0:	f7fe fded 	bl	8005d7e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	2238      	movs	r2, #56	; 0x38
 80071b2:	1ad2      	subs	r2, r2, r3
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071bc:	4b0f      	ldr	r3, [pc, #60]	; (80071fc <xTaskPriorityDisinherit+0xb0>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d903      	bls.n	80071cc <xTaskPriorityDisinherit+0x80>
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c8:	4b0c      	ldr	r3, [pc, #48]	; (80071fc <xTaskPriorityDisinherit+0xb0>)
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d0:	0013      	movs	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	189b      	adds	r3, r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4a09      	ldr	r2, [pc, #36]	; (8007200 <xTaskPriorityDisinherit+0xb4>)
 80071da:	189a      	adds	r2, r3, r2
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	3304      	adds	r3, #4
 80071e0:	0019      	movs	r1, r3
 80071e2:	0010      	movs	r0, r2
 80071e4:	f7fe fd73 	bl	8005cce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071e8:	2301      	movs	r3, #1
 80071ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071ec:	68fb      	ldr	r3, [r7, #12]
	}
 80071ee:	0018      	movs	r0, r3
 80071f0:	46bd      	mov	sp, r7
 80071f2:	b004      	add	sp, #16
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	46c0      	nop			; (mov r8, r8)
 80071f8:	200007fc 	.word	0x200007fc
 80071fc:	20000cd8 	.word	0x20000cd8
 8007200:	20000800 	.word	0x20000800

08007204 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800720e:	4b21      	ldr	r3, [pc, #132]	; (8007294 <prvAddCurrentTaskToDelayedList+0x90>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007214:	4b20      	ldr	r3, [pc, #128]	; (8007298 <prvAddCurrentTaskToDelayedList+0x94>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3304      	adds	r3, #4
 800721a:	0018      	movs	r0, r3
 800721c:	f7fe fdaf 	bl	8005d7e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3301      	adds	r3, #1
 8007224:	d10b      	bne.n	800723e <prvAddCurrentTaskToDelayedList+0x3a>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d008      	beq.n	800723e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800722c:	4b1a      	ldr	r3, [pc, #104]	; (8007298 <prvAddCurrentTaskToDelayedList+0x94>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	1d1a      	adds	r2, r3, #4
 8007232:	4b1a      	ldr	r3, [pc, #104]	; (800729c <prvAddCurrentTaskToDelayedList+0x98>)
 8007234:	0011      	movs	r1, r2
 8007236:	0018      	movs	r0, r3
 8007238:	f7fe fd49 	bl	8005cce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800723c:	e026      	b.n	800728c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	18d3      	adds	r3, r2, r3
 8007244:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007246:	4b14      	ldr	r3, [pc, #80]	; (8007298 <prvAddCurrentTaskToDelayedList+0x94>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	429a      	cmp	r2, r3
 8007254:	d209      	bcs.n	800726a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007256:	4b12      	ldr	r3, [pc, #72]	; (80072a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	4b0f      	ldr	r3, [pc, #60]	; (8007298 <prvAddCurrentTaskToDelayedList+0x94>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3304      	adds	r3, #4
 8007260:	0019      	movs	r1, r3
 8007262:	0010      	movs	r0, r2
 8007264:	f7fe fd55 	bl	8005d12 <vListInsert>
}
 8007268:	e010      	b.n	800728c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800726a:	4b0e      	ldr	r3, [pc, #56]	; (80072a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	4b0a      	ldr	r3, [pc, #40]	; (8007298 <prvAddCurrentTaskToDelayedList+0x94>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3304      	adds	r3, #4
 8007274:	0019      	movs	r1, r3
 8007276:	0010      	movs	r0, r2
 8007278:	f7fe fd4b 	bl	8005d12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800727c:	4b0a      	ldr	r3, [pc, #40]	; (80072a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	429a      	cmp	r2, r3
 8007284:	d202      	bcs.n	800728c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007286:	4b08      	ldr	r3, [pc, #32]	; (80072a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	601a      	str	r2, [r3, #0]
}
 800728c:	46c0      	nop			; (mov r8, r8)
 800728e:	46bd      	mov	sp, r7
 8007290:	b004      	add	sp, #16
 8007292:	bd80      	pop	{r7, pc}
 8007294:	20000cd4 	.word	0x20000cd4
 8007298:	200007fc 	.word	0x200007fc
 800729c:	20000cbc 	.word	0x20000cbc
 80072a0:	20000c8c 	.word	0x20000c8c
 80072a4:	20000c88 	.word	0x20000c88
 80072a8:	20000cf0 	.word	0x20000cf0

080072ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80072ac:	b590      	push	{r4, r7, lr}
 80072ae:	b089      	sub	sp, #36	; 0x24
 80072b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80072b6:	f000 fa8b 	bl	80077d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80072ba:	4b17      	ldr	r3, [pc, #92]	; (8007318 <xTimerCreateTimerTask+0x6c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d020      	beq.n	8007304 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80072ca:	003a      	movs	r2, r7
 80072cc:	1d39      	adds	r1, r7, #4
 80072ce:	2308      	movs	r3, #8
 80072d0:	18fb      	adds	r3, r7, r3
 80072d2:	0018      	movs	r0, r3
 80072d4:	f7fe fcba 	bl	8005c4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80072d8:	683c      	ldr	r4, [r7, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	490f      	ldr	r1, [pc, #60]	; (800731c <xTimerCreateTimerTask+0x70>)
 80072e0:	480f      	ldr	r0, [pc, #60]	; (8007320 <xTimerCreateTimerTask+0x74>)
 80072e2:	9202      	str	r2, [sp, #8]
 80072e4:	9301      	str	r3, [sp, #4]
 80072e6:	2302      	movs	r3, #2
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	2300      	movs	r3, #0
 80072ec:	0022      	movs	r2, r4
 80072ee:	f7ff f996 	bl	800661e <xTaskCreateStatic>
 80072f2:	0002      	movs	r2, r0
 80072f4:	4b0b      	ldr	r3, [pc, #44]	; (8007324 <xTimerCreateTimerTask+0x78>)
 80072f6:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80072f8:	4b0a      	ldr	r3, [pc, #40]	; (8007324 <xTimerCreateTimerTask+0x78>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8007300:	2301      	movs	r3, #1
 8007302:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d101      	bne.n	800730e <xTimerCreateTimerTask+0x62>
 800730a:	b672      	cpsid	i
 800730c:	e7fe      	b.n	800730c <xTimerCreateTimerTask+0x60>
	return xReturn;
 800730e:	68fb      	ldr	r3, [r7, #12]
}
 8007310:	0018      	movs	r0, r3
 8007312:	46bd      	mov	sp, r7
 8007314:	b005      	add	sp, #20
 8007316:	bd90      	pop	{r4, r7, pc}
 8007318:	20000d2c 	.word	0x20000d2c
 800731c:	08007ee4 	.word	0x08007ee4
 8007320:	08007431 	.word	0x08007431
 8007324:	20000d30 	.word	0x20000d30

08007328 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b08a      	sub	sp, #40	; 0x28
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
 8007334:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007336:	2300      	movs	r3, #0
 8007338:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <xTimerGenericCommand+0x1c>
 8007340:	b672      	cpsid	i
 8007342:	e7fe      	b.n	8007342 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007344:	4b1d      	ldr	r3, [pc, #116]	; (80073bc <xTimerGenericCommand+0x94>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d031      	beq.n	80073b0 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800734c:	2114      	movs	r1, #20
 800734e:	187b      	adds	r3, r7, r1
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007354:	187b      	adds	r3, r7, r1
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800735a:	187b      	adds	r3, r7, r1
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2b05      	cmp	r3, #5
 8007364:	dc1a      	bgt.n	800739c <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007366:	f7ff fed5 	bl	8007114 <xTaskGetSchedulerState>
 800736a:	0003      	movs	r3, r0
 800736c:	2b02      	cmp	r3, #2
 800736e:	d10a      	bne.n	8007386 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007370:	4b12      	ldr	r3, [pc, #72]	; (80073bc <xTimerGenericCommand+0x94>)
 8007372:	6818      	ldr	r0, [r3, #0]
 8007374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007376:	2314      	movs	r3, #20
 8007378:	18f9      	adds	r1, r7, r3
 800737a:	2300      	movs	r3, #0
 800737c:	f7fe fded 	bl	8005f5a <xQueueGenericSend>
 8007380:	0003      	movs	r3, r0
 8007382:	627b      	str	r3, [r7, #36]	; 0x24
 8007384:	e014      	b.n	80073b0 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007386:	4b0d      	ldr	r3, [pc, #52]	; (80073bc <xTimerGenericCommand+0x94>)
 8007388:	6818      	ldr	r0, [r3, #0]
 800738a:	2314      	movs	r3, #20
 800738c:	18f9      	adds	r1, r7, r3
 800738e:	2300      	movs	r3, #0
 8007390:	2200      	movs	r2, #0
 8007392:	f7fe fde2 	bl	8005f5a <xQueueGenericSend>
 8007396:	0003      	movs	r3, r0
 8007398:	627b      	str	r3, [r7, #36]	; 0x24
 800739a:	e009      	b.n	80073b0 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800739c:	4b07      	ldr	r3, [pc, #28]	; (80073bc <xTimerGenericCommand+0x94>)
 800739e:	6818      	ldr	r0, [r3, #0]
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	2314      	movs	r3, #20
 80073a4:	18f9      	adds	r1, r7, r3
 80073a6:	2300      	movs	r3, #0
 80073a8:	f7fe fe9b 	bl	80060e2 <xQueueGenericSendFromISR>
 80073ac:	0003      	movs	r3, r0
 80073ae:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073b2:	0018      	movs	r0, r3
 80073b4:	46bd      	mov	sp, r7
 80073b6:	b00a      	add	sp, #40	; 0x28
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	46c0      	nop			; (mov r8, r8)
 80073bc:	20000d2c 	.word	0x20000d2c

080073c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af02      	add	r7, sp, #8
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073ca:	4b18      	ldr	r3, [pc, #96]	; (800742c <prvProcessExpiredTimer+0x6c>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	3304      	adds	r3, #4
 80073d8:	0018      	movs	r0, r3
 80073da:	f7fe fcd0 	bl	8005d7e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d119      	bne.n	800741a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	699a      	ldr	r2, [r3, #24]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	18d1      	adds	r1, r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f000 f8b6 	bl	8007564 <prvInsertTimerInActiveList>
 80073f8:	1e03      	subs	r3, r0, #0
 80073fa:	d00e      	beq.n	800741a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	2300      	movs	r3, #0
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	2300      	movs	r3, #0
 8007406:	2100      	movs	r1, #0
 8007408:	f7ff ff8e 	bl	8007328 <xTimerGenericCommand>
 800740c:	0003      	movs	r3, r0
 800740e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <prvProcessExpiredTimer+0x5a>
 8007416:	b672      	cpsid	i
 8007418:	e7fe      	b.n	8007418 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	0010      	movs	r0, r2
 8007422:	4798      	blx	r3
}
 8007424:	46c0      	nop			; (mov r8, r8)
 8007426:	46bd      	mov	sp, r7
 8007428:	b004      	add	sp, #16
 800742a:	bd80      	pop	{r7, pc}
 800742c:	20000d24 	.word	0x20000d24

08007430 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007438:	2308      	movs	r3, #8
 800743a:	18fb      	adds	r3, r7, r3
 800743c:	0018      	movs	r0, r3
 800743e:	f000 f851 	bl	80074e4 <prvGetNextExpireTime>
 8007442:	0003      	movs	r3, r0
 8007444:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	0011      	movs	r1, r2
 800744c:	0018      	movs	r0, r3
 800744e:	f000 f803 	bl	8007458 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007452:	f000 f8c9 	bl	80075e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007456:	e7ef      	b.n	8007438 <prvTimerTask+0x8>

08007458 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007462:	f7ff facf 	bl	8006a04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007466:	2308      	movs	r3, #8
 8007468:	18fb      	adds	r3, r7, r3
 800746a:	0018      	movs	r0, r3
 800746c:	f000 f85a 	bl	8007524 <prvSampleTimeNow>
 8007470:	0003      	movs	r3, r0
 8007472:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d129      	bne.n	80074ce <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10c      	bne.n	800749a <prvProcessTimerOrBlockTask+0x42>
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	429a      	cmp	r2, r3
 8007486:	d808      	bhi.n	800749a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8007488:	f7ff fac8 	bl	8006a1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	0011      	movs	r1, r2
 8007492:	0018      	movs	r0, r3
 8007494:	f7ff ff94 	bl	80073c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007498:	e01b      	b.n	80074d2 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d006      	beq.n	80074ae <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80074a0:	4b0e      	ldr	r3, [pc, #56]	; (80074dc <prvProcessTimerOrBlockTask+0x84>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	425a      	negs	r2, r3
 80074a8:	4153      	adcs	r3, r2
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80074ae:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <prvProcessTimerOrBlockTask+0x88>)
 80074b0:	6818      	ldr	r0, [r3, #0]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	0019      	movs	r1, r3
 80074bc:	f7ff f87c 	bl	80065b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80074c0:	f7ff faac 	bl	8006a1c <xTaskResumeAll>
 80074c4:	1e03      	subs	r3, r0, #0
 80074c6:	d104      	bne.n	80074d2 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80074c8:	f000 fa52 	bl	8007970 <vPortYield>
}
 80074cc:	e001      	b.n	80074d2 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80074ce:	f7ff faa5 	bl	8006a1c <xTaskResumeAll>
}
 80074d2:	46c0      	nop			; (mov r8, r8)
 80074d4:	46bd      	mov	sp, r7
 80074d6:	b004      	add	sp, #16
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	46c0      	nop			; (mov r8, r8)
 80074dc:	20000d28 	.word	0x20000d28
 80074e0:	20000d2c 	.word	0x20000d2c

080074e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80074ec:	4b0c      	ldr	r3, [pc, #48]	; (8007520 <prvGetNextExpireTime+0x3c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	425a      	negs	r2, r3
 80074f4:	4153      	adcs	r3, r2
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	001a      	movs	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d105      	bne.n	8007512 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007506:	4b06      	ldr	r3, [pc, #24]	; (8007520 <prvGetNextExpireTime+0x3c>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	e001      	b.n	8007516 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007516:	68fb      	ldr	r3, [r7, #12]
}
 8007518:	0018      	movs	r0, r3
 800751a:	46bd      	mov	sp, r7
 800751c:	b004      	add	sp, #16
 800751e:	bd80      	pop	{r7, pc}
 8007520:	20000d24 	.word	0x20000d24

08007524 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800752c:	f7ff fb02 	bl	8006b34 <xTaskGetTickCount>
 8007530:	0003      	movs	r3, r0
 8007532:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8007534:	4b0a      	ldr	r3, [pc, #40]	; (8007560 <prvSampleTimeNow+0x3c>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	429a      	cmp	r2, r3
 800753c:	d205      	bcs.n	800754a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800753e:	f000 f8ed 	bl	800771c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	601a      	str	r2, [r3, #0]
 8007548:	e002      	b.n	8007550 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007550:	4b03      	ldr	r3, [pc, #12]	; (8007560 <prvSampleTimeNow+0x3c>)
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8007556:	68fb      	ldr	r3, [r7, #12]
}
 8007558:	0018      	movs	r0, r3
 800755a:	46bd      	mov	sp, r7
 800755c:	b004      	add	sp, #16
 800755e:	bd80      	pop	{r7, pc}
 8007560:	20000d34 	.word	0x20000d34

08007564 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
 8007570:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007572:	2300      	movs	r3, #0
 8007574:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	429a      	cmp	r2, r3
 8007588:	d812      	bhi.n	80075b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	1ad2      	subs	r2, r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	429a      	cmp	r2, r3
 8007596:	d302      	bcc.n	800759e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007598:	2301      	movs	r3, #1
 800759a:	617b      	str	r3, [r7, #20]
 800759c:	e01b      	b.n	80075d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800759e:	4b10      	ldr	r3, [pc, #64]	; (80075e0 <prvInsertTimerInActiveList+0x7c>)
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3304      	adds	r3, #4
 80075a6:	0019      	movs	r1, r3
 80075a8:	0010      	movs	r0, r2
 80075aa:	f7fe fbb2 	bl	8005d12 <vListInsert>
 80075ae:	e012      	b.n	80075d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d206      	bcs.n	80075c6 <prvInsertTimerInActiveList+0x62>
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d302      	bcc.n	80075c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80075c0:	2301      	movs	r3, #1
 80075c2:	617b      	str	r3, [r7, #20]
 80075c4:	e007      	b.n	80075d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075c6:	4b07      	ldr	r3, [pc, #28]	; (80075e4 <prvInsertTimerInActiveList+0x80>)
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3304      	adds	r3, #4
 80075ce:	0019      	movs	r1, r3
 80075d0:	0010      	movs	r0, r2
 80075d2:	f7fe fb9e 	bl	8005d12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80075d6:	697b      	ldr	r3, [r7, #20]
}
 80075d8:	0018      	movs	r0, r3
 80075da:	46bd      	mov	sp, r7
 80075dc:	b006      	add	sp, #24
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	20000d28 	.word	0x20000d28
 80075e4:	20000d24 	.word	0x20000d24

080075e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08c      	sub	sp, #48	; 0x30
 80075ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075ee:	e082      	b.n	80076f6 <prvProcessReceivedCommands+0x10e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80075f0:	2308      	movs	r3, #8
 80075f2:	18fb      	adds	r3, r7, r3
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	da10      	bge.n	800761c <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80075fa:	2308      	movs	r3, #8
 80075fc:	18fb      	adds	r3, r7, r3
 80075fe:	3304      	adds	r3, #4
 8007600:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <prvProcessReceivedCommands+0x24>
 8007608:	b672      	cpsid	i
 800760a:	e7fe      	b.n	800760a <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	6858      	ldr	r0, [r3, #4]
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	0019      	movs	r1, r3
 800761a:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800761c:	2308      	movs	r3, #8
 800761e:	18fb      	adds	r3, r7, r3
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	db66      	blt.n	80076f4 <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007626:	2308      	movs	r3, #8
 8007628:	18fb      	adds	r3, r7, r3
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d004      	beq.n	8007640 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007636:	6a3b      	ldr	r3, [r7, #32]
 8007638:	3304      	adds	r3, #4
 800763a:	0018      	movs	r0, r3
 800763c:	f7fe fb9f 	bl	8005d7e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007640:	1d3b      	adds	r3, r7, #4
 8007642:	0018      	movs	r0, r3
 8007644:	f7ff ff6e 	bl	8007524 <prvSampleTimeNow>
 8007648:	0003      	movs	r3, r0
 800764a:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800764c:	2308      	movs	r3, #8
 800764e:	18fb      	adds	r3, r7, r3
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b09      	cmp	r3, #9
 8007654:	d84f      	bhi.n	80076f6 <prvProcessReceivedCommands+0x10e>
 8007656:	009a      	lsls	r2, r3, #2
 8007658:	4b2e      	ldr	r3, [pc, #184]	; (8007714 <prvProcessReceivedCommands+0x12c>)
 800765a:	18d3      	adds	r3, r2, r3
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007660:	2008      	movs	r0, #8
 8007662:	183b      	adds	r3, r7, r0
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	18d1      	adds	r1, r2, r3
 800766c:	183b      	adds	r3, r7, r0
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	69fa      	ldr	r2, [r7, #28]
 8007672:	6a38      	ldr	r0, [r7, #32]
 8007674:	f7ff ff76 	bl	8007564 <prvInsertTimerInActiveList>
 8007678:	1e03      	subs	r3, r0, #0
 800767a:	d03c      	beq.n	80076f6 <prvProcessReceivedCommands+0x10e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	6a3a      	ldr	r2, [r7, #32]
 8007682:	0010      	movs	r0, r2
 8007684:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d133      	bne.n	80076f6 <prvProcessReceivedCommands+0x10e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800768e:	2308      	movs	r3, #8
 8007690:	18fb      	adds	r3, r7, r3
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	6a3b      	ldr	r3, [r7, #32]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	18d2      	adds	r2, r2, r3
 800769a:	6a38      	ldr	r0, [r7, #32]
 800769c:	2300      	movs	r3, #0
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	2300      	movs	r3, #0
 80076a2:	2100      	movs	r1, #0
 80076a4:	f7ff fe40 	bl	8007328 <xTimerGenericCommand>
 80076a8:	0003      	movs	r3, r0
 80076aa:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d121      	bne.n	80076f6 <prvProcessReceivedCommands+0x10e>
 80076b2:	b672      	cpsid	i
 80076b4:	e7fe      	b.n	80076b4 <prvProcessReceivedCommands+0xcc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80076b6:	2308      	movs	r3, #8
 80076b8:	18fb      	adds	r3, r7, r3
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d101      	bne.n	80076cc <prvProcessReceivedCommands+0xe4>
 80076c8:	b672      	cpsid	i
 80076ca:	e7fe      	b.n	80076ca <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	699a      	ldr	r2, [r3, #24]
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	18d1      	adds	r1, r2, r3
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	69fa      	ldr	r2, [r7, #28]
 80076d8:	6a38      	ldr	r0, [r7, #32]
 80076da:	f7ff ff43 	bl	8007564 <prvInsertTimerInActiveList>
					break;
 80076de:	e00a      	b.n	80076f6 <prvProcessReceivedCommands+0x10e>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	222c      	movs	r2, #44	; 0x2c
 80076e4:	5c9b      	ldrb	r3, [r3, r2]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d105      	bne.n	80076f6 <prvProcessReceivedCommands+0x10e>
						{
							vPortFree( pxTimer );
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	0018      	movs	r0, r3
 80076ee:	f000 fa8d 	bl	8007c0c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80076f2:	e000      	b.n	80076f6 <prvProcessReceivedCommands+0x10e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80076f4:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076f6:	4b08      	ldr	r3, [pc, #32]	; (8007718 <prvProcessReceivedCommands+0x130>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2208      	movs	r2, #8
 80076fc:	18b9      	adds	r1, r7, r2
 80076fe:	2200      	movs	r2, #0
 8007700:	0018      	movs	r0, r3
 8007702:	f7fe fd5f 	bl	80061c4 <xQueueReceive>
 8007706:	1e03      	subs	r3, r0, #0
 8007708:	d000      	beq.n	800770c <prvProcessReceivedCommands+0x124>
 800770a:	e771      	b.n	80075f0 <prvProcessReceivedCommands+0x8>
	}
}
 800770c:	46c0      	nop			; (mov r8, r8)
 800770e:	46bd      	mov	sp, r7
 8007710:	b00a      	add	sp, #40	; 0x28
 8007712:	bd80      	pop	{r7, pc}
 8007714:	08007ff8 	.word	0x08007ff8
 8007718:	20000d2c 	.word	0x20000d2c

0800771c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b088      	sub	sp, #32
 8007720:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007722:	e03e      	b.n	80077a2 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007724:	4b28      	ldr	r3, [pc, #160]	; (80077c8 <prvSwitchTimerLists+0xac>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800772e:	4b26      	ldr	r3, [pc, #152]	; (80077c8 <prvSwitchTimerLists+0xac>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	3304      	adds	r3, #4
 800773c:	0018      	movs	r0, r3
 800773e:	f7fe fb1e 	bl	8005d7e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	0010      	movs	r0, r2
 800774a:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	69db      	ldr	r3, [r3, #28]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d126      	bne.n	80077a2 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	18d3      	adds	r3, r2, r3
 800775c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	429a      	cmp	r2, r3
 8007764:	d90e      	bls.n	8007784 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007772:	4b15      	ldr	r3, [pc, #84]	; (80077c8 <prvSwitchTimerLists+0xac>)
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	3304      	adds	r3, #4
 800777a:	0019      	movs	r1, r3
 800777c:	0010      	movs	r0, r2
 800777e:	f7fe fac8 	bl	8005d12 <vListInsert>
 8007782:	e00e      	b.n	80077a2 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	2300      	movs	r3, #0
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	2300      	movs	r3, #0
 800778e:	2100      	movs	r1, #0
 8007790:	f7ff fdca 	bl	8007328 <xTimerGenericCommand>
 8007794:	0003      	movs	r3, r0
 8007796:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <prvSwitchTimerLists+0x86>
 800779e:	b672      	cpsid	i
 80077a0:	e7fe      	b.n	80077a0 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80077a2:	4b09      	ldr	r3, [pc, #36]	; (80077c8 <prvSwitchTimerLists+0xac>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1bb      	bne.n	8007724 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80077ac:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <prvSwitchTimerLists+0xac>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80077b2:	4b06      	ldr	r3, [pc, #24]	; (80077cc <prvSwitchTimerLists+0xb0>)
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	4b04      	ldr	r3, [pc, #16]	; (80077c8 <prvSwitchTimerLists+0xac>)
 80077b8:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80077ba:	4b04      	ldr	r3, [pc, #16]	; (80077cc <prvSwitchTimerLists+0xb0>)
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	601a      	str	r2, [r3, #0]
}
 80077c0:	46c0      	nop			; (mov r8, r8)
 80077c2:	46bd      	mov	sp, r7
 80077c4:	b006      	add	sp, #24
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	20000d24 	.word	0x20000d24
 80077cc:	20000d28 	.word	0x20000d28

080077d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80077d6:	f000 f8db 	bl	8007990 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80077da:	4b17      	ldr	r3, [pc, #92]	; (8007838 <prvCheckForValidListAndQueue+0x68>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d124      	bne.n	800782c <prvCheckForValidListAndQueue+0x5c>
		{
			vListInitialise( &xActiveTimerList1 );
 80077e2:	4b16      	ldr	r3, [pc, #88]	; (800783c <prvCheckForValidListAndQueue+0x6c>)
 80077e4:	0018      	movs	r0, r3
 80077e6:	f7fe fa49 	bl	8005c7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80077ea:	4b15      	ldr	r3, [pc, #84]	; (8007840 <prvCheckForValidListAndQueue+0x70>)
 80077ec:	0018      	movs	r0, r3
 80077ee:	f7fe fa45 	bl	8005c7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80077f2:	4b14      	ldr	r3, [pc, #80]	; (8007844 <prvCheckForValidListAndQueue+0x74>)
 80077f4:	4a11      	ldr	r2, [pc, #68]	; (800783c <prvCheckForValidListAndQueue+0x6c>)
 80077f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80077f8:	4b13      	ldr	r3, [pc, #76]	; (8007848 <prvCheckForValidListAndQueue+0x78>)
 80077fa:	4a11      	ldr	r2, [pc, #68]	; (8007840 <prvCheckForValidListAndQueue+0x70>)
 80077fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077fe:	4913      	ldr	r1, [pc, #76]	; (800784c <prvCheckForValidListAndQueue+0x7c>)
 8007800:	4a13      	ldr	r2, [pc, #76]	; (8007850 <prvCheckForValidListAndQueue+0x80>)
 8007802:	2300      	movs	r3, #0
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	000b      	movs	r3, r1
 8007808:	2110      	movs	r1, #16
 800780a:	200a      	movs	r0, #10
 800780c:	f7fe fb33 	bl	8005e76 <xQueueGenericCreateStatic>
 8007810:	0002      	movs	r2, r0
 8007812:	4b09      	ldr	r3, [pc, #36]	; (8007838 <prvCheckForValidListAndQueue+0x68>)
 8007814:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007816:	4b08      	ldr	r3, [pc, #32]	; (8007838 <prvCheckForValidListAndQueue+0x68>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d006      	beq.n	800782c <prvCheckForValidListAndQueue+0x5c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800781e:	4b06      	ldr	r3, [pc, #24]	; (8007838 <prvCheckForValidListAndQueue+0x68>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a0c      	ldr	r2, [pc, #48]	; (8007854 <prvCheckForValidListAndQueue+0x84>)
 8007824:	0011      	movs	r1, r2
 8007826:	0018      	movs	r0, r3
 8007828:	f7fe fe9e 	bl	8006568 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800782c:	f000 f8c2 	bl	80079b4 <vPortExitCritical>
}
 8007830:	46c0      	nop			; (mov r8, r8)
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	46c0      	nop			; (mov r8, r8)
 8007838:	20000d2c 	.word	0x20000d2c
 800783c:	20000cfc 	.word	0x20000cfc
 8007840:	20000d10 	.word	0x20000d10
 8007844:	20000d24 	.word	0x20000d24
 8007848:	20000d28 	.word	0x20000d28
 800784c:	20000dd8 	.word	0x20000dd8
 8007850:	20000d38 	.word	0x20000d38
 8007854:	08007eec 	.word	0x08007eec

08007858 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3b04      	subs	r3, #4
 8007868:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2280      	movs	r2, #128	; 0x80
 800786e:	0452      	lsls	r2, r2, #17
 8007870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3b04      	subs	r3, #4
 8007876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3b04      	subs	r3, #4
 8007882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007884:	4a08      	ldr	r2, [pc, #32]	; (80078a8 <pxPortInitialiseStack+0x50>)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	3b14      	subs	r3, #20
 800788e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	3b20      	subs	r3, #32
 800789a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800789c:	68fb      	ldr	r3, [r7, #12]
}
 800789e:	0018      	movs	r0, r3
 80078a0:	46bd      	mov	sp, r7
 80078a2:	b004      	add	sp, #16
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	46c0      	nop			; (mov r8, r8)
 80078a8:	080078ad 	.word	0x080078ad

080078ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80078b2:	2300      	movs	r3, #0
 80078b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80078b6:	4b07      	ldr	r3, [pc, #28]	; (80078d4 <prvTaskExitError+0x28>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3301      	adds	r3, #1
 80078bc:	d001      	beq.n	80078c2 <prvTaskExitError+0x16>
 80078be:	b672      	cpsid	i
 80078c0:	e7fe      	b.n	80078c0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80078c2:	b672      	cpsid	i
	while( ulDummy == 0 )
 80078c4:	46c0      	nop			; (mov r8, r8)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d0fc      	beq.n	80078c6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078cc:	46c0      	nop			; (mov r8, r8)
 80078ce:	46bd      	mov	sp, r7
 80078d0:	b002      	add	sp, #8
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	20000080 	.word	0x20000080

080078d8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80078dc:	46c0      	nop			; (mov r8, r8)
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
	...

080078f0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80078f0:	4a0b      	ldr	r2, [pc, #44]	; (8007920 <pxCurrentTCBConst2>)
 80078f2:	6813      	ldr	r3, [r2, #0]
 80078f4:	6818      	ldr	r0, [r3, #0]
 80078f6:	3020      	adds	r0, #32
 80078f8:	f380 8809 	msr	PSP, r0
 80078fc:	2002      	movs	r0, #2
 80078fe:	f380 8814 	msr	CONTROL, r0
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007908:	46ae      	mov	lr, r5
 800790a:	bc08      	pop	{r3}
 800790c:	bc04      	pop	{r2}
 800790e:	b662      	cpsie	i
 8007910:	4718      	bx	r3
 8007912:	46c0      	nop			; (mov r8, r8)
 8007914:	46c0      	nop			; (mov r8, r8)
 8007916:	46c0      	nop			; (mov r8, r8)
 8007918:	46c0      	nop			; (mov r8, r8)
 800791a:	46c0      	nop			; (mov r8, r8)
 800791c:	46c0      	nop			; (mov r8, r8)
 800791e:	46c0      	nop			; (mov r8, r8)

08007920 <pxCurrentTCBConst2>:
 8007920:	200007fc 	.word	0x200007fc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007924:	46c0      	nop			; (mov r8, r8)
 8007926:	46c0      	nop			; (mov r8, r8)

08007928 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800792c:	4b0e      	ldr	r3, [pc, #56]	; (8007968 <xPortStartScheduler+0x40>)
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	4b0d      	ldr	r3, [pc, #52]	; (8007968 <xPortStartScheduler+0x40>)
 8007932:	21ff      	movs	r1, #255	; 0xff
 8007934:	0409      	lsls	r1, r1, #16
 8007936:	430a      	orrs	r2, r1
 8007938:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800793a:	4b0b      	ldr	r3, [pc, #44]	; (8007968 <xPortStartScheduler+0x40>)
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	4b0a      	ldr	r3, [pc, #40]	; (8007968 <xPortStartScheduler+0x40>)
 8007940:	21ff      	movs	r1, #255	; 0xff
 8007942:	0609      	lsls	r1, r1, #24
 8007944:	430a      	orrs	r2, r1
 8007946:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8007948:	f000 f898 	bl	8007a7c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800794c:	4b07      	ldr	r3, [pc, #28]	; (800796c <xPortStartScheduler+0x44>)
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007952:	f7ff ffcd 	bl	80078f0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007956:	f7ff f9af 	bl	8006cb8 <vTaskSwitchContext>
	prvTaskExitError();
 800795a:	f7ff ffa7 	bl	80078ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800795e:	2300      	movs	r3, #0
}
 8007960:	0018      	movs	r0, r3
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	46c0      	nop			; (mov r8, r8)
 8007968:	e000ed20 	.word	0xe000ed20
 800796c:	20000080 	.word	0x20000080

08007970 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8007974:	4b05      	ldr	r3, [pc, #20]	; (800798c <vPortYield+0x1c>)
 8007976:	2280      	movs	r2, #128	; 0x80
 8007978:	0552      	lsls	r2, r2, #21
 800797a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800797c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007980:	f3bf 8f6f 	isb	sy
}
 8007984:	46c0      	nop			; (mov r8, r8)
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	46c0      	nop			; (mov r8, r8)
 800798c:	e000ed04 	.word	0xe000ed04

08007990 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8007994:	b672      	cpsid	i
    uxCriticalNesting++;
 8007996:	4b06      	ldr	r3, [pc, #24]	; (80079b0 <vPortEnterCritical+0x20>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	4b04      	ldr	r3, [pc, #16]	; (80079b0 <vPortEnterCritical+0x20>)
 800799e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80079a0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80079a4:	f3bf 8f6f 	isb	sy
}
 80079a8:	46c0      	nop			; (mov r8, r8)
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	20000080 	.word	0x20000080

080079b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079b8:	4b09      	ldr	r3, [pc, #36]	; (80079e0 <vPortExitCritical+0x2c>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <vPortExitCritical+0x10>
 80079c0:	b672      	cpsid	i
 80079c2:	e7fe      	b.n	80079c2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80079c4:	4b06      	ldr	r3, [pc, #24]	; (80079e0 <vPortExitCritical+0x2c>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	1e5a      	subs	r2, r3, #1
 80079ca:	4b05      	ldr	r3, [pc, #20]	; (80079e0 <vPortExitCritical+0x2c>)
 80079cc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80079ce:	4b04      	ldr	r3, [pc, #16]	; (80079e0 <vPortExitCritical+0x2c>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d100      	bne.n	80079d8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80079d6:	b662      	cpsie	i
    }
}
 80079d8:	46c0      	nop			; (mov r8, r8)
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	46c0      	nop			; (mov r8, r8)
 80079e0:	20000080 	.word	0x20000080

080079e4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80079e4:	f3ef 8010 	mrs	r0, PRIMASK
 80079e8:	b672      	cpsid	i
 80079ea:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80079ec:	46c0      	nop			; (mov r8, r8)
 80079ee:	0018      	movs	r0, r3

080079f0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80079f0:	f380 8810 	msr	PRIMASK, r0
 80079f4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80079f6:	46c0      	nop			; (mov r8, r8)
	...

08007a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a00:	f3ef 8009 	mrs	r0, PSP
 8007a04:	4b0e      	ldr	r3, [pc, #56]	; (8007a40 <pxCurrentTCBConst>)
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	3820      	subs	r0, #32
 8007a0a:	6010      	str	r0, [r2, #0]
 8007a0c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007a0e:	4644      	mov	r4, r8
 8007a10:	464d      	mov	r5, r9
 8007a12:	4656      	mov	r6, sl
 8007a14:	465f      	mov	r7, fp
 8007a16:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007a18:	b508      	push	{r3, lr}
 8007a1a:	b672      	cpsid	i
 8007a1c:	f7ff f94c 	bl	8006cb8 <vTaskSwitchContext>
 8007a20:	b662      	cpsie	i
 8007a22:	bc0c      	pop	{r2, r3}
 8007a24:	6811      	ldr	r1, [r2, #0]
 8007a26:	6808      	ldr	r0, [r1, #0]
 8007a28:	3010      	adds	r0, #16
 8007a2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007a2c:	46a0      	mov	r8, r4
 8007a2e:	46a9      	mov	r9, r5
 8007a30:	46b2      	mov	sl, r6
 8007a32:	46bb      	mov	fp, r7
 8007a34:	f380 8809 	msr	PSP, r0
 8007a38:	3820      	subs	r0, #32
 8007a3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007a3c:	4718      	bx	r3
 8007a3e:	46c0      	nop			; (mov r8, r8)

08007a40 <pxCurrentTCBConst>:
 8007a40:	200007fc 	.word	0x200007fc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007a44:	46c0      	nop			; (mov r8, r8)
 8007a46:	46c0      	nop			; (mov r8, r8)

08007a48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a4e:	f7ff ffc9 	bl	80079e4 <ulSetInterruptMaskFromISR>
 8007a52:	0003      	movs	r3, r0
 8007a54:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a56:	f7ff f87b 	bl	8006b50 <xTaskIncrementTick>
 8007a5a:	1e03      	subs	r3, r0, #0
 8007a5c:	d003      	beq.n	8007a66 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8007a5e:	4b06      	ldr	r3, [pc, #24]	; (8007a78 <SysTick_Handler+0x30>)
 8007a60:	2280      	movs	r2, #128	; 0x80
 8007a62:	0552      	lsls	r2, r2, #21
 8007a64:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	0018      	movs	r0, r3
 8007a6a:	f7ff ffc1 	bl	80079f0 <vClearInterruptMaskFromISR>
}
 8007a6e:	46c0      	nop			; (mov r8, r8)
 8007a70:	46bd      	mov	sp, r7
 8007a72:	b002      	add	sp, #8
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	46c0      	nop			; (mov r8, r8)
 8007a78:	e000ed04 	.word	0xe000ed04

08007a7c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8007a80:	4b0b      	ldr	r3, [pc, #44]	; (8007ab0 <prvSetupTimerInterrupt+0x34>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8007a86:	4b0b      	ldr	r3, [pc, #44]	; (8007ab4 <prvSetupTimerInterrupt+0x38>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a8c:	4b0a      	ldr	r3, [pc, #40]	; (8007ab8 <prvSetupTimerInterrupt+0x3c>)
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	23fa      	movs	r3, #250	; 0xfa
 8007a92:	0099      	lsls	r1, r3, #2
 8007a94:	0010      	movs	r0, r2
 8007a96:	f7f8 fb37 	bl	8000108 <__udivsi3>
 8007a9a:	0003      	movs	r3, r0
 8007a9c:	001a      	movs	r2, r3
 8007a9e:	4b07      	ldr	r3, [pc, #28]	; (8007abc <prvSetupTimerInterrupt+0x40>)
 8007aa0:	3a01      	subs	r2, #1
 8007aa2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8007aa4:	4b02      	ldr	r3, [pc, #8]	; (8007ab0 <prvSetupTimerInterrupt+0x34>)
 8007aa6:	2207      	movs	r2, #7
 8007aa8:	601a      	str	r2, [r3, #0]
}
 8007aaa:	46c0      	nop			; (mov r8, r8)
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	e000e010 	.word	0xe000e010
 8007ab4:	e000e018 	.word	0xe000e018
 8007ab8:	20000078 	.word	0x20000078
 8007abc:	e000e014 	.word	0xe000e014

08007ac0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8007acc:	f7fe ff9a 	bl	8006a04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ad0:	4b49      	ldr	r3, [pc, #292]	; (8007bf8 <pvPortMalloc+0x138>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ad8:	f000 f8e0 	bl	8007c9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007adc:	4b47      	ldr	r3, [pc, #284]	; (8007bfc <pvPortMalloc+0x13c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	d000      	beq.n	8007ae8 <pvPortMalloc+0x28>
 8007ae6:	e079      	b.n	8007bdc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d012      	beq.n	8007b14 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8007aee:	2208      	movs	r2, #8
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	189b      	adds	r3, r3, r2
 8007af4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2207      	movs	r2, #7
 8007afa:	4013      	ands	r3, r2
 8007afc:	d00a      	beq.n	8007b14 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2207      	movs	r2, #7
 8007b02:	4393      	bics	r3, r2
 8007b04:	3308      	adds	r3, #8
 8007b06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2207      	movs	r2, #7
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	d001      	beq.n	8007b14 <pvPortMalloc+0x54>
 8007b10:	b672      	cpsid	i
 8007b12:	e7fe      	b.n	8007b12 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d060      	beq.n	8007bdc <pvPortMalloc+0x11c>
 8007b1a:	4b39      	ldr	r3, [pc, #228]	; (8007c00 <pvPortMalloc+0x140>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d85b      	bhi.n	8007bdc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b24:	4b37      	ldr	r3, [pc, #220]	; (8007c04 <pvPortMalloc+0x144>)
 8007b26:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007b28:	4b36      	ldr	r3, [pc, #216]	; (8007c04 <pvPortMalloc+0x144>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b2e:	e004      	b.n	8007b3a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d903      	bls.n	8007b4c <pvPortMalloc+0x8c>
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1f1      	bne.n	8007b30 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b4c:	4b2a      	ldr	r3, [pc, #168]	; (8007bf8 <pvPortMalloc+0x138>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d042      	beq.n	8007bdc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2208      	movs	r2, #8
 8007b5c:	189b      	adds	r3, r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	1ad2      	subs	r2, r2, r3
 8007b70:	2308      	movs	r3, #8
 8007b72:	005b      	lsls	r3, r3, #1
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d916      	bls.n	8007ba6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	18d3      	adds	r3, r2, r3
 8007b7e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	2207      	movs	r2, #7
 8007b84:	4013      	ands	r3, r2
 8007b86:	d001      	beq.n	8007b8c <pvPortMalloc+0xcc>
 8007b88:	b672      	cpsid	i
 8007b8a:	e7fe      	b.n	8007b8a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	1ad2      	subs	r2, r2, r3
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	0018      	movs	r0, r3
 8007ba2:	f000 f8db 	bl	8007d5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ba6:	4b16      	ldr	r3, [pc, #88]	; (8007c00 <pvPortMalloc+0x140>)
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	1ad2      	subs	r2, r2, r3
 8007bb0:	4b13      	ldr	r3, [pc, #76]	; (8007c00 <pvPortMalloc+0x140>)
 8007bb2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007bb4:	4b12      	ldr	r3, [pc, #72]	; (8007c00 <pvPortMalloc+0x140>)
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	4b13      	ldr	r3, [pc, #76]	; (8007c08 <pvPortMalloc+0x148>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d203      	bcs.n	8007bc8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007bc0:	4b0f      	ldr	r3, [pc, #60]	; (8007c00 <pvPortMalloc+0x140>)
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	4b10      	ldr	r3, [pc, #64]	; (8007c08 <pvPortMalloc+0x148>)
 8007bc6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	4b0b      	ldr	r3, [pc, #44]	; (8007bfc <pvPortMalloc+0x13c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	431a      	orrs	r2, r3
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007bdc:	f7fe ff1e 	bl	8006a1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2207      	movs	r2, #7
 8007be4:	4013      	ands	r3, r2
 8007be6:	d001      	beq.n	8007bec <pvPortMalloc+0x12c>
 8007be8:	b672      	cpsid	i
 8007bea:	e7fe      	b.n	8007bea <pvPortMalloc+0x12a>
	return pvReturn;
 8007bec:	68fb      	ldr	r3, [r7, #12]
}
 8007bee:	0018      	movs	r0, r3
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	b006      	add	sp, #24
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	46c0      	nop			; (mov r8, r8)
 8007bf8:	20001a30 	.word	0x20001a30
 8007bfc:	20001a3c 	.word	0x20001a3c
 8007c00:	20001a34 	.word	0x20001a34
 8007c04:	20001a28 	.word	0x20001a28
 8007c08:	20001a38 	.word	0x20001a38

08007c0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d035      	beq.n	8007c8a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c1e:	2308      	movs	r3, #8
 8007c20:	425b      	negs	r3, r3
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	18d3      	adds	r3, r2, r3
 8007c26:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	4b18      	ldr	r3, [pc, #96]	; (8007c94 <vPortFree+0x88>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4013      	ands	r3, r2
 8007c36:	d101      	bne.n	8007c3c <vPortFree+0x30>
 8007c38:	b672      	cpsid	i
 8007c3a:	e7fe      	b.n	8007c3a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <vPortFree+0x3c>
 8007c44:	b672      	cpsid	i
 8007c46:	e7fe      	b.n	8007c46 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	4b11      	ldr	r3, [pc, #68]	; (8007c94 <vPortFree+0x88>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4013      	ands	r3, r2
 8007c52:	d01a      	beq.n	8007c8a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d116      	bne.n	8007c8a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	4b0c      	ldr	r3, [pc, #48]	; (8007c94 <vPortFree+0x88>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	43db      	mvns	r3, r3
 8007c66:	401a      	ands	r2, r3
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c6c:	f7fe feca 	bl	8006a04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	4b08      	ldr	r3, [pc, #32]	; (8007c98 <vPortFree+0x8c>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	18d2      	adds	r2, r2, r3
 8007c7a:	4b07      	ldr	r3, [pc, #28]	; (8007c98 <vPortFree+0x8c>)
 8007c7c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	0018      	movs	r0, r3
 8007c82:	f000 f86b 	bl	8007d5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007c86:	f7fe fec9 	bl	8006a1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c8a:	46c0      	nop			; (mov r8, r8)
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	b004      	add	sp, #16
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	46c0      	nop			; (mov r8, r8)
 8007c94:	20001a3c 	.word	0x20001a3c
 8007c98:	20001a34 	.word	0x20001a34

08007c9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ca2:	23c0      	movs	r3, #192	; 0xc0
 8007ca4:	011b      	lsls	r3, r3, #4
 8007ca6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ca8:	4b26      	ldr	r3, [pc, #152]	; (8007d44 <prvHeapInit+0xa8>)
 8007caa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2207      	movs	r2, #7
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	d00c      	beq.n	8007cce <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	3307      	adds	r3, #7
 8007cb8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2207      	movs	r2, #7
 8007cbe:	4393      	bics	r3, r2
 8007cc0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	1ad2      	subs	r2, r2, r3
 8007cc8:	4b1e      	ldr	r3, [pc, #120]	; (8007d44 <prvHeapInit+0xa8>)
 8007cca:	18d3      	adds	r3, r2, r3
 8007ccc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007cd2:	4b1d      	ldr	r3, [pc, #116]	; (8007d48 <prvHeapInit+0xac>)
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cd8:	4b1b      	ldr	r3, [pc, #108]	; (8007d48 <prvHeapInit+0xac>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	18d3      	adds	r3, r2, r3
 8007ce4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ce6:	2208      	movs	r2, #8
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	1a9b      	subs	r3, r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2207      	movs	r2, #7
 8007cf2:	4393      	bics	r3, r2
 8007cf4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	4b14      	ldr	r3, [pc, #80]	; (8007d4c <prvHeapInit+0xb0>)
 8007cfa:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8007cfc:	4b13      	ldr	r3, [pc, #76]	; (8007d4c <prvHeapInit+0xb0>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2200      	movs	r2, #0
 8007d02:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d04:	4b11      	ldr	r3, [pc, #68]	; (8007d4c <prvHeapInit+0xb0>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	1ad2      	subs	r2, r2, r3
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d1a:	4b0c      	ldr	r3, [pc, #48]	; (8007d4c <prvHeapInit+0xb0>)
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	4b0a      	ldr	r3, [pc, #40]	; (8007d50 <prvHeapInit+0xb4>)
 8007d28:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	4b09      	ldr	r3, [pc, #36]	; (8007d54 <prvHeapInit+0xb8>)
 8007d30:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d32:	4b09      	ldr	r3, [pc, #36]	; (8007d58 <prvHeapInit+0xbc>)
 8007d34:	2280      	movs	r2, #128	; 0x80
 8007d36:	0612      	lsls	r2, r2, #24
 8007d38:	601a      	str	r2, [r3, #0]
}
 8007d3a:	46c0      	nop			; (mov r8, r8)
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	b004      	add	sp, #16
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	46c0      	nop			; (mov r8, r8)
 8007d44:	20000e28 	.word	0x20000e28
 8007d48:	20001a28 	.word	0x20001a28
 8007d4c:	20001a30 	.word	0x20001a30
 8007d50:	20001a38 	.word	0x20001a38
 8007d54:	20001a34 	.word	0x20001a34
 8007d58:	20001a3c 	.word	0x20001a3c

08007d5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d64:	4b27      	ldr	r3, [pc, #156]	; (8007e04 <prvInsertBlockIntoFreeList+0xa8>)
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	e002      	b.n	8007d70 <prvInsertBlockIntoFreeList+0x14>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d8f7      	bhi.n	8007d6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	18d3      	adds	r3, r2, r3
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d108      	bne.n	8007d9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	685a      	ldr	r2, [r3, #4]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	18d2      	adds	r2, r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	18d2      	adds	r2, r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d118      	bne.n	8007de4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	4b14      	ldr	r3, [pc, #80]	; (8007e08 <prvInsertBlockIntoFreeList+0xac>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d00d      	beq.n	8007dda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	18d2      	adds	r2, r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	e008      	b.n	8007dec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007dda:	4b0b      	ldr	r3, [pc, #44]	; (8007e08 <prvInsertBlockIntoFreeList+0xac>)
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	601a      	str	r2, [r3, #0]
 8007de2:	e003      	b.n	8007dec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d002      	beq.n	8007dfa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dfa:	46c0      	nop			; (mov r8, r8)
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	b004      	add	sp, #16
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	46c0      	nop			; (mov r8, r8)
 8007e04:	20001a28 	.word	0x20001a28
 8007e08:	20001a30 	.word	0x20001a30

08007e0c <__libc_init_array>:
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	2600      	movs	r6, #0
 8007e10:	4d0c      	ldr	r5, [pc, #48]	; (8007e44 <__libc_init_array+0x38>)
 8007e12:	4c0d      	ldr	r4, [pc, #52]	; (8007e48 <__libc_init_array+0x3c>)
 8007e14:	1b64      	subs	r4, r4, r5
 8007e16:	10a4      	asrs	r4, r4, #2
 8007e18:	42a6      	cmp	r6, r4
 8007e1a:	d109      	bne.n	8007e30 <__libc_init_array+0x24>
 8007e1c:	2600      	movs	r6, #0
 8007e1e:	f000 f82b 	bl	8007e78 <_init>
 8007e22:	4d0a      	ldr	r5, [pc, #40]	; (8007e4c <__libc_init_array+0x40>)
 8007e24:	4c0a      	ldr	r4, [pc, #40]	; (8007e50 <__libc_init_array+0x44>)
 8007e26:	1b64      	subs	r4, r4, r5
 8007e28:	10a4      	asrs	r4, r4, #2
 8007e2a:	42a6      	cmp	r6, r4
 8007e2c:	d105      	bne.n	8007e3a <__libc_init_array+0x2e>
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}
 8007e30:	00b3      	lsls	r3, r6, #2
 8007e32:	58eb      	ldr	r3, [r5, r3]
 8007e34:	4798      	blx	r3
 8007e36:	3601      	adds	r6, #1
 8007e38:	e7ee      	b.n	8007e18 <__libc_init_array+0xc>
 8007e3a:	00b3      	lsls	r3, r6, #2
 8007e3c:	58eb      	ldr	r3, [r5, r3]
 8007e3e:	4798      	blx	r3
 8007e40:	3601      	adds	r6, #1
 8007e42:	e7f2      	b.n	8007e2a <__libc_init_array+0x1e>
 8007e44:	08008020 	.word	0x08008020
 8007e48:	08008020 	.word	0x08008020
 8007e4c:	08008020 	.word	0x08008020
 8007e50:	08008024 	.word	0x08008024

08007e54 <memcpy>:
 8007e54:	2300      	movs	r3, #0
 8007e56:	b510      	push	{r4, lr}
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d100      	bne.n	8007e5e <memcpy+0xa>
 8007e5c:	bd10      	pop	{r4, pc}
 8007e5e:	5ccc      	ldrb	r4, [r1, r3]
 8007e60:	54c4      	strb	r4, [r0, r3]
 8007e62:	3301      	adds	r3, #1
 8007e64:	e7f8      	b.n	8007e58 <memcpy+0x4>

08007e66 <memset>:
 8007e66:	0003      	movs	r3, r0
 8007e68:	1812      	adds	r2, r2, r0
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d100      	bne.n	8007e70 <memset+0xa>
 8007e6e:	4770      	bx	lr
 8007e70:	7019      	strb	r1, [r3, #0]
 8007e72:	3301      	adds	r3, #1
 8007e74:	e7f9      	b.n	8007e6a <memset+0x4>
	...

08007e78 <_init>:
 8007e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7a:	46c0      	nop			; (mov r8, r8)
 8007e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e7e:	bc08      	pop	{r3}
 8007e80:	469e      	mov	lr, r3
 8007e82:	4770      	bx	lr

08007e84 <_fini>:
 8007e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e86:	46c0      	nop			; (mov r8, r8)
 8007e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e8a:	bc08      	pop	{r3}
 8007e8c:	469e      	mov	lr, r3
 8007e8e:	4770      	bx	lr
