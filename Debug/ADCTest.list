
ADCTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006330  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080063f0  080063f0  000163f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006500  08006500  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08006500  08006500  00016500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006508  08006508  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006508  08006508  00016508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800650c  0800650c  0001650c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08006510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b84  20000030  08006540  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001bb4  08006540  00021bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187d2  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000338f  00000000  00000000  0003882a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001620  00000000  00000000  0003bbc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001488  00000000  00000000  0003d1e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018833  00000000  00000000  0003e668  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001157e  00000000  00000000  00056e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ddd1  00000000  00000000  00068419  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f61ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fb4  00000000  00000000  000f6268  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000030 	.word	0x20000030
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080063d8 	.word	0x080063d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000034 	.word	0x20000034
 8000104:	080063d8 	.word	0x080063d8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <PDM_Init>:

}



void PDM_Init(void) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
    U8 i;

    // Set timers to 0 (may not need to do this)
    // Enable Channels
    for (i = 0; i < NUM_ADC_CHANNELS; i++) {
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
 8000444:	e00e      	b.n	8000464 <PDM_Init+0x2c>
        HAL_GPIO_WritePin(GPIO_CONTROL_PORT, gpio_control_pins[i],
 8000446:	1dfb      	adds	r3, r7, #7
 8000448:	781a      	ldrb	r2, [r3, #0]
 800044a:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <PDM_Init+0x70>)
 800044c:	0052      	lsls	r2, r2, #1
 800044e:	5ad3      	ldrh	r3, [r2, r3]
 8000450:	4816      	ldr	r0, [pc, #88]	; (80004ac <PDM_Init+0x74>)
 8000452:	2201      	movs	r2, #1
 8000454:	0019      	movs	r1, r3
 8000456:	f002 f93d 	bl	80026d4 <HAL_GPIO_WritePin>
    for (i = 0; i < NUM_ADC_CHANNELS; i++) {
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	781a      	ldrb	r2, [r3, #0]
 800045e:	1dfb      	adds	r3, r7, #7
 8000460:	3201      	adds	r2, #1
 8000462:	701a      	strb	r2, [r3, #0]
 8000464:	1dfb      	adds	r3, r7, #7
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b02      	cmp	r3, #2
 800046a:	d9ec      	bls.n	8000446 <PDM_Init+0xe>
                GPIO_PIN_SET);
    }
    // Unsure about this auto calibration
    HAL_ADCEx_Calibration_Start(&hadc);		// start cal before starting adc
 800046c:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <PDM_Init+0x78>)
 800046e:	0018      	movs	r0, r3
 8000470:	f001 fb9e 	bl	8001bb0 <HAL_ADCEx_Calibration_Start>

    // start timers so interrupt gives accurate time
    htim17.Instance->CNT = 0;
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <PDM_Init+0x7c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2200      	movs	r2, #0
 800047a:	625a      	str	r2, [r3, #36]	; 0x24
    htim16.Instance->CNT = 0;
 800047c:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <PDM_Init+0x80>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2200      	movs	r2, #0
 8000482:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_TIM_Base_Start(&htim16);
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <PDM_Init+0x80>)
 8000486:	0018      	movs	r0, r3
 8000488:	f002 ffb0 	bl	80033ec <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim17);
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <PDM_Init+0x7c>)
 800048e:	0018      	movs	r0, r3
 8000490:	f002 ffac 	bl	80033ec <HAL_TIM_Base_Start>

    HAL_ADC_Start_DMA(&hadc, (uint32_t*) current_buffer, NUM_ADC_CHANNELS); // start first round of conversions
 8000494:	4909      	ldr	r1, [pc, #36]	; (80004bc <PDM_Init+0x84>)
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <PDM_Init+0x78>)
 8000498:	2203      	movs	r2, #3
 800049a:	0018      	movs	r0, r3
 800049c:	f000 ffca 	bl	8001434 <HAL_ADC_Start_DMA>
}
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	46bd      	mov	sp, r7
 80004a4:	b002      	add	sp, #8
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	2000001c 	.word	0x2000001c
 80004ac:	48000400 	.word	0x48000400
 80004b0:	20001ab0 	.word	0x20001ab0
 80004b4:	20001978 	.word	0x20001978
 80004b8:	20001af0 	.word	0x20001af0
 80004bc:	20000064 	.word	0x20000064

080004c0 <Schedule_ADC>:



void Schedule_ADC(void) {
 80004c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
    U8 i;

    while (1) {
        if (restart_adc_flag) {
 80004c6:	4b27      	ldr	r3, [pc, #156]	; (8000564 <Schedule_ADC+0xa4>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d0fb      	beq.n	80004c6 <Schedule_ADC+0x6>
            restart_adc_flag = 0;       // reset flag before DMA start so sw wont clear flag after interrupt
 80004ce:	4b25      	ldr	r3, [pc, #148]	; (8000564 <Schedule_ADC+0xa4>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	701a      	strb	r2, [r3, #0]
            HAL_ADC_Start_DMA(&hadc, (uint32_t*) current_buffer, NUM_ADC_CHANNELS);
 80004d4:	4924      	ldr	r1, [pc, #144]	; (8000568 <Schedule_ADC+0xa8>)
 80004d6:	4b25      	ldr	r3, [pc, #148]	; (800056c <Schedule_ADC+0xac>)
 80004d8:	2203      	movs	r2, #3
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 ffaa 	bl	8001434 <HAL_ADC_Start_DMA>

            for (i = 0; i < NUM_ADC_CHANNELS; i++) {
 80004e0:	230f      	movs	r3, #15
 80004e2:	18fb      	adds	r3, r7, r3
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
 80004e8:	e00a      	b.n	8000500 <Schedule_ADC+0x40>
                // Reset data states when next round of ADC data is in
                channel_data_states[i] = UNUSED;
 80004ea:	200f      	movs	r0, #15
 80004ec:	183b      	adds	r3, r7, r0
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	4a1f      	ldr	r2, [pc, #124]	; (8000570 <Schedule_ADC+0xb0>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	54d1      	strb	r1, [r2, r3]
            for (i = 0; i < NUM_ADC_CHANNELS; i++) {
 80004f6:	183b      	adds	r3, r7, r0
 80004f8:	781a      	ldrb	r2, [r3, #0]
 80004fa:	183b      	adds	r3, r7, r0
 80004fc:	3201      	adds	r2, #1
 80004fe:	701a      	strb	r2, [r3, #0]
 8000500:	230f      	movs	r3, #15
 8000502:	18fb      	adds	r3, r7, r3
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b02      	cmp	r3, #2
 8000508:	d9ef      	bls.n	80004ea <Schedule_ADC+0x2a>
            }

            // calculate average interrupt delta
            adc_delta_sum += htim16.Instance->CNT;
 800050a:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <Schedule_ADC+0xb4>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000510:	001d      	movs	r5, r3
 8000512:	2300      	movs	r3, #0
 8000514:	001e      	movs	r6, r3
 8000516:	4b18      	ldr	r3, [pc, #96]	; (8000578 <Schedule_ADC+0xb8>)
 8000518:	685c      	ldr	r4, [r3, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	195b      	adds	r3, r3, r5
 800051e:	4174      	adcs	r4, r6
 8000520:	4a15      	ldr	r2, [pc, #84]	; (8000578 <Schedule_ADC+0xb8>)
 8000522:	6013      	str	r3, [r2, #0]
 8000524:	6054      	str	r4, [r2, #4]
            adc_interrupt_cnt++;
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <Schedule_ADC+0xbc>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	1c5a      	adds	r2, r3, #1
 800052c:	4b13      	ldr	r3, [pc, #76]	; (800057c <Schedule_ADC+0xbc>)
 800052e:	601a      	str	r2, [r3, #0]
            avg_adc_interrupt_delta = adc_delta_sum / adc_interrupt_cnt;
 8000530:	4b11      	ldr	r3, [pc, #68]	; (8000578 <Schedule_ADC+0xb8>)
 8000532:	6818      	ldr	r0, [r3, #0]
 8000534:	6859      	ldr	r1, [r3, #4]
 8000536:	4b11      	ldr	r3, [pc, #68]	; (800057c <Schedule_ADC+0xbc>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f7ff fe6c 	bl	8000220 <__aeabi_uldivmod>
 8000548:	0003      	movs	r3, r0
 800054a:	000c      	movs	r4, r1
 800054c:	001a      	movs	r2, r3
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <Schedule_ADC+0xc0>)
 8000550:	601a      	str	r2, [r3, #0]

            htim16.Instance->CNT = 0;
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <Schedule_ADC+0xb4>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2200      	movs	r2, #0
 8000558:	625a      	str	r2, [r3, #36]	; 0x24
            HAL_TIM_Base_Start(&htim16);
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <Schedule_ADC+0xb4>)
 800055c:	0018      	movs	r0, r3
 800055e:	f002 ff45 	bl	80033ec <HAL_TIM_Base_Start>
        if (restart_adc_flag) {
 8000562:	e7b0      	b.n	80004c6 <Schedule_ADC+0x6>
 8000564:	2000004c 	.word	0x2000004c
 8000568:	20000064 	.word	0x20000064
 800056c:	20001ab0 	.word	0x20001ab0
 8000570:	20000008 	.word	0x20000008
 8000574:	20001af0 	.word	0x20001af0
 8000578:	20000058 	.word	0x20000058
 800057c:	20000060 	.word	0x20000060
 8000580:	20000050 	.word	0x20000050

08000584 <Current_Control_Loop>:
    }
}



void Current_Control_Loop(void) {
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
    U8 adc_channels_idx = 0;
 800058a:	230f      	movs	r3, #15
 800058c:	18fb      	adds	r3, r7, r3
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
    U16 adc_val, time_ref, curr_time, time_diff;

    // Infinite loop cycles through NUM_ADC_CHANNELS state machines, one for each channel
    while (1) {
        adc_val = current_buffer[adc_channels_idx];
 8000592:	200f      	movs	r0, #15
 8000594:	183b      	adds	r3, r7, r0
 8000596:	7819      	ldrb	r1, [r3, #0]
 8000598:	230a      	movs	r3, #10
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	4a57      	ldr	r2, [pc, #348]	; (80006fc <Current_Control_Loop+0x178>)
 800059e:	0049      	lsls	r1, r1, #1
 80005a0:	5a8a      	ldrh	r2, [r1, r2]
 80005a2:	801a      	strh	r2, [r3, #0]

        switch (channel_states[adc_channels_idx]) {
 80005a4:	183b      	adds	r3, r7, r0
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	4a55      	ldr	r2, [pc, #340]	; (8000700 <Current_Control_Loop+0x17c>)
 80005aa:	5cd3      	ldrb	r3, [r2, r3]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d005      	beq.n	80005bc <Current_Control_Loop+0x38>
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	d100      	bne.n	80005b6 <Current_Control_Loop+0x32>
 80005b4:	e08c      	b.n	80006d0 <Current_Control_Loop+0x14c>
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d03e      	beq.n	8000638 <Current_Control_Loop+0xb4>
 80005ba:	e086      	b.n	80006ca <Current_Control_Loop+0x146>
            case PERMANENT_OFF:
                // Ensure current off??
                break;

            case RESTART_OFF:
                curr_time = htim17.Instance->CNT;
 80005bc:	4b51      	ldr	r3, [pc, #324]	; (8000704 <Current_Control_Loop+0x180>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005c2:	2008      	movs	r0, #8
 80005c4:	183b      	adds	r3, r7, r0
 80005c6:	801a      	strh	r2, [r3, #0]
                time_ref = restart_timeout_ref[adc_channels_idx];
 80005c8:	230f      	movs	r3, #15
 80005ca:	18fb      	adds	r3, r7, r3
 80005cc:	7819      	ldrb	r1, [r3, #0]
 80005ce:	1dbb      	adds	r3, r7, #6
 80005d0:	4a4d      	ldr	r2, [pc, #308]	; (8000708 <Current_Control_Loop+0x184>)
 80005d2:	0049      	lsls	r1, r1, #1
 80005d4:	5a8a      	ldrh	r2, [r1, r2]
 80005d6:	801a      	strh	r2, [r3, #0]
                if (curr_time < time_ref) {
 80005d8:	183a      	adds	r2, r7, r0
 80005da:	1dbb      	adds	r3, r7, #6
 80005dc:	8812      	ldrh	r2, [r2, #0]
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d209      	bcs.n	80005f8 <Current_Control_Loop+0x74>
                    time_diff = (MAX_TIMER_VALUE - time_ref) + curr_time;
 80005e4:	230c      	movs	r3, #12
 80005e6:	18fb      	adds	r3, r7, r3
 80005e8:	2208      	movs	r2, #8
 80005ea:	18b9      	adds	r1, r7, r2
 80005ec:	1dba      	adds	r2, r7, #6
 80005ee:	8809      	ldrh	r1, [r1, #0]
 80005f0:	8812      	ldrh	r2, [r2, #0]
 80005f2:	1a8a      	subs	r2, r1, r2
 80005f4:	801a      	strh	r2, [r3, #0]
 80005f6:	e008      	b.n	800060a <Current_Control_Loop+0x86>
                } else {
                    time_diff = curr_time - time_ref;
 80005f8:	230c      	movs	r3, #12
 80005fa:	18fb      	adds	r3, r7, r3
 80005fc:	2208      	movs	r2, #8
 80005fe:	18b9      	adds	r1, r7, r2
 8000600:	1dba      	adds	r2, r7, #6
 8000602:	8809      	ldrh	r1, [r1, #0]
 8000604:	8812      	ldrh	r2, [r2, #0]
 8000606:	1a8a      	subs	r2, r1, r2
 8000608:	801a      	strh	r2, [r3, #0]
                }

                if (time_diff >= DEVICE_RESTART_TIMEOUT_MS) {
 800060a:	230c      	movs	r3, #12
 800060c:	18fb      	adds	r3, r7, r3
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	4a3e      	ldr	r2, [pc, #248]	; (800070c <Current_Control_Loop+0x188>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d95e      	bls.n	80006d4 <Current_Control_Loop+0x150>
                    // turn the channel back on
                    HAL_GPIO_WritePin(GPIO_CONTROL_PORT, gpio_control_pins[adc_channels_idx],
 8000616:	240f      	movs	r4, #15
 8000618:	193b      	adds	r3, r7, r4
 800061a:	781a      	ldrb	r2, [r3, #0]
 800061c:	4b3c      	ldr	r3, [pc, #240]	; (8000710 <Current_Control_Loop+0x18c>)
 800061e:	0052      	lsls	r2, r2, #1
 8000620:	5ad3      	ldrh	r3, [r2, r3]
 8000622:	483c      	ldr	r0, [pc, #240]	; (8000714 <Current_Control_Loop+0x190>)
 8000624:	2201      	movs	r2, #1
 8000626:	0019      	movs	r1, r3
 8000628:	f002 f854 	bl	80026d4 <HAL_GPIO_WritePin>
                                                                                GPIO_PIN_SET);
                    channel_states[adc_channels_idx] = NORMAL;
 800062c:	193b      	adds	r3, r7, r4
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	4a33      	ldr	r2, [pc, #204]	; (8000700 <Current_Control_Loop+0x17c>)
 8000632:	2100      	movs	r1, #0
 8000634:	54d1      	strb	r1, [r2, r3]
                }
                break;
 8000636:	e04d      	b.n	80006d4 <Current_Control_Loop+0x150>

            case NORMAL:
                if (channel_data_states[adc_channels_idx] == UNUSED) {
 8000638:	230f      	movs	r3, #15
 800063a:	18fb      	adds	r3, r7, r3
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	4a36      	ldr	r2, [pc, #216]	; (8000718 <Current_Control_Loop+0x194>)
 8000640:	5cd3      	ldrb	r3, [r2, r3]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d148      	bne.n	80006d8 <Current_Control_Loop+0x154>
                    if (adc_val >= *channel_setpoints[adc_channels_idx]) {
 8000646:	230f      	movs	r3, #15
 8000648:	18fb      	adds	r3, r7, r3
 800064a:	781a      	ldrb	r2, [r3, #0]
 800064c:	4b33      	ldr	r3, [pc, #204]	; (800071c <Current_Control_Loop+0x198>)
 800064e:	0092      	lsls	r2, r2, #2
 8000650:	58d3      	ldr	r3, [r2, r3]
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	220a      	movs	r2, #10
 8000656:	18ba      	adds	r2, r7, r2
 8000658:	8812      	ldrh	r2, [r2, #0]
 800065a:	429a      	cmp	r2, r3
 800065c:	d32e      	bcc.n	80006bc <Current_Control_Loop+0x138>

                        // Overcurrent event (level triggered)
                        // turn off control pin
                        HAL_GPIO_WritePin(GPIO_CONTROL_PORT, gpio_control_pins[adc_channels_idx],
 800065e:	240f      	movs	r4, #15
 8000660:	193b      	adds	r3, r7, r4
 8000662:	781a      	ldrb	r2, [r3, #0]
 8000664:	4b2a      	ldr	r3, [pc, #168]	; (8000710 <Current_Control_Loop+0x18c>)
 8000666:	0052      	lsls	r2, r2, #1
 8000668:	5ad3      	ldrh	r3, [r2, r3]
 800066a:	482a      	ldr	r0, [pc, #168]	; (8000714 <Current_Control_Loop+0x190>)
 800066c:	2200      	movs	r2, #0
 800066e:	0019      	movs	r1, r3
 8000670:	f002 f830 	bl	80026d4 <HAL_GPIO_WritePin>
                                                                                  GPIO_PIN_RESET);
                        if (num_restart_attempts[adc_channels_idx] > 0) {
 8000674:	193b      	adds	r3, r7, r4
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4a29      	ldr	r2, [pc, #164]	; (8000720 <Current_Control_Loop+0x19c>)
 800067a:	5cd3      	ldrb	r3, [r2, r3]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d017      	beq.n	80006b0 <Current_Control_Loop+0x12c>
                            num_restart_attempts[adc_channels_idx]--;
 8000680:	200f      	movs	r0, #15
 8000682:	183b      	adds	r3, r7, r0
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	4a26      	ldr	r2, [pc, #152]	; (8000720 <Current_Control_Loop+0x19c>)
 8000688:	5cd2      	ldrb	r2, [r2, r3]
 800068a:	3a01      	subs	r2, #1
 800068c:	b2d1      	uxtb	r1, r2
 800068e:	4a24      	ldr	r2, [pc, #144]	; (8000720 <Current_Control_Loop+0x19c>)
 8000690:	54d1      	strb	r1, [r2, r3]
                            restart_timeout_ref[adc_channels_idx] =
                                    htim17.Instance->CNT;
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <Current_Control_Loop+0x180>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	6a59      	ldr	r1, [r3, #36]	; 0x24
                            restart_timeout_ref[adc_channels_idx] =
 8000698:	183b      	adds	r3, r7, r0
 800069a:	781a      	ldrb	r2, [r3, #0]
 800069c:	b289      	uxth	r1, r1
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <Current_Control_Loop+0x184>)
 80006a0:	0052      	lsls	r2, r2, #1
 80006a2:	52d1      	strh	r1, [r2, r3]
                            channel_states[adc_channels_idx] = RESTART_OFF;
 80006a4:	183b      	adds	r3, r7, r0
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4a15      	ldr	r2, [pc, #84]	; (8000700 <Current_Control_Loop+0x17c>)
 80006aa:	2101      	movs	r1, #1
 80006ac:	54d1      	strb	r1, [r2, r3]
 80006ae:	e005      	b.n	80006bc <Current_Control_Loop+0x138>
                        } else {
                            channel_states[adc_channels_idx] = PERMANENT_OFF;
 80006b0:	230f      	movs	r3, #15
 80006b2:	18fb      	adds	r3, r7, r3
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	4a12      	ldr	r2, [pc, #72]	; (8000700 <Current_Control_Loop+0x17c>)
 80006b8:	2102      	movs	r1, #2
 80006ba:	54d1      	strb	r1, [r2, r3]
                        }
                    }

                    channel_data_states[adc_channels_idx] = USED;
 80006bc:	230f      	movs	r3, #15
 80006be:	18fb      	adds	r3, r7, r3
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	4a15      	ldr	r2, [pc, #84]	; (8000718 <Current_Control_Loop+0x194>)
 80006c4:	2101      	movs	r1, #1
 80006c6:	54d1      	strb	r1, [r2, r3]
                }
                break;
 80006c8:	e006      	b.n	80006d8 <Current_Control_Loop+0x154>

            default:
                Error_Handler();
 80006ca:	f000 fae7 	bl	8000c9c <Error_Handler>
                break;
 80006ce:	e004      	b.n	80006da <Current_Control_Loop+0x156>
                break;
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	e002      	b.n	80006da <Current_Control_Loop+0x156>
                break;
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	e000      	b.n	80006da <Current_Control_Loop+0x156>
                break;
 80006d8:	46c0      	nop			; (mov r8, r8)
        }

        //Log_CAN_Messages();

        adc_channels_idx++;
 80006da:	210f      	movs	r1, #15
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	781a      	ldrb	r2, [r3, #0]
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	3201      	adds	r2, #1
 80006e4:	701a      	strb	r2, [r3, #0]
        if (adc_channels_idx >= NUM_ADC_CHANNELS) {
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	d800      	bhi.n	80006f0 <Current_Control_Loop+0x16c>
 80006ee:	e750      	b.n	8000592 <Current_Control_Loop+0xe>
            adc_channels_idx = 0;
 80006f0:	230f      	movs	r3, #15
 80006f2:	18fb      	adds	r3, r7, r3
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
        adc_val = current_buffer[adc_channels_idx];
 80006f8:	e74b      	b.n	8000592 <Current_Control_Loop+0xe>
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	20000064 	.word	0x20000064
 8000700:	2000006c 	.word	0x2000006c
 8000704:	20001978 	.word	0x20001978
 8000708:	20000070 	.word	0x20000070
 800070c:	000003e7 	.word	0x000003e7
 8000710:	2000001c 	.word	0x2000001c
 8000714:	48000400 	.word	0x48000400
 8000718:	20000008 	.word	0x20000008
 800071c:	2000000c 	.word	0x2000000c
 8000720:	20000018 	.word	0x20000018

08000724 <HAL_ADC_ConvCpltCallback>:
    }
    // Unreachable
}

// Callbacks / ISRs
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *adc_handle) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    // Let the OS loop know that the conversion is done
    restart_adc_flag = 1;
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <HAL_ADC_ConvCpltCallback+0x18>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b002      	add	sp, #8
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	2000004c 	.word	0x2000004c

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000744:	f000 fce4 	bl	8001110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000748:	f000 f844 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074c:	f000 f9e8 	bl	8000b20 <MX_GPIO_Init>
  MX_DMA_Init();
 8000750:	f000 f9c8 	bl	8000ae4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000754:	f000 f996 	bl	8000a84 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000758:	f000 f896 	bl	8000888 <MX_ADC_Init>
  MX_CAN_Init();
 800075c:	f000 f90a 	bl	8000974 <MX_CAN_Init>
  MX_TIM16_Init();
 8000760:	f000 f93e 	bl	80009e0 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000764:	f000 f964 	bl	8000a30 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */



  // **** ALL CONFIG CALLS HERE***************************************
  PDM_Init();
 8000768:	f7ff fe66 	bl	8000438 <PDM_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800076c:	f003 fbe0 	bl	8003f30 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Channel_control */
  Channel_controlHandle = osThreadNew(ADC_Channel_Control, NULL, &Channel_control_attributes);
 8000770:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <main+0x70>)
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <main+0x74>)
 8000774:	2100      	movs	r1, #0
 8000776:	0018      	movs	r0, r3
 8000778:	f003 fc34 	bl	8003fe4 <osThreadNew>
 800077c:	0002      	movs	r2, r0
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <main+0x78>)
 8000780:	601a      	str	r2, [r3, #0]

  /* creation of CAN_TX_task */
  CAN_TX_taskHandle = osThreadNew(CAN_TX, NULL, &CAN_TX_task_attributes);
 8000782:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <main+0x7c>)
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <main+0x80>)
 8000786:	2100      	movs	r1, #0
 8000788:	0018      	movs	r0, r3
 800078a:	f003 fc2b 	bl	8003fe4 <osThreadNew>
 800078e:	0002      	movs	r2, r0
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <main+0x84>)
 8000792:	601a      	str	r2, [r3, #0]

  /* creation of ADC_scheduler */
  ADC_schedulerHandle = osThreadNew(ADC_Schedule_loop, NULL, &ADC_scheduler_attributes);
 8000794:	4a0c      	ldr	r2, [pc, #48]	; (80007c8 <main+0x88>)
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <main+0x8c>)
 8000798:	2100      	movs	r1, #0
 800079a:	0018      	movs	r0, r3
 800079c:	f003 fc22 	bl	8003fe4 <osThreadNew>
 80007a0:	0002      	movs	r2, r0
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <main+0x90>)
 80007a4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007a6:	f003 fbef 	bl	8003f88 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Error_Handler();
 80007aa:	f000 fa77 	bl	8000c9c <Error_Handler>
 80007ae:	e7fc      	b.n	80007aa <main+0x6a>
 80007b0:	08006454 	.word	0x08006454
 80007b4:	08000c45 	.word	0x08000c45
 80007b8:	200019e0 	.word	0x200019e0
 80007bc:	08006478 	.word	0x08006478
 80007c0:	08000c57 	.word	0x08000c57
 80007c4:	200019e4 	.word	0x200019e4
 80007c8:	0800649c 	.word	0x0800649c
 80007cc:	08000c67 	.word	0x08000c67
 80007d0:	200019e8 	.word	0x200019e8

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b099      	sub	sp, #100	; 0x64
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	242c      	movs	r4, #44	; 0x2c
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	0018      	movs	r0, r3
 80007e0:	2334      	movs	r3, #52	; 0x34
 80007e2:	001a      	movs	r2, r3
 80007e4:	2100      	movs	r1, #0
 80007e6:	f005 fdee 	bl	80063c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ea:	231c      	movs	r3, #28
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	0018      	movs	r0, r3
 80007f0:	2310      	movs	r3, #16
 80007f2:	001a      	movs	r2, r3
 80007f4:	2100      	movs	r1, #0
 80007f6:	f005 fde6 	bl	80063c6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fa:	003b      	movs	r3, r7
 80007fc:	0018      	movs	r0, r3
 80007fe:	231c      	movs	r3, #28
 8000800:	001a      	movs	r2, r3
 8000802:	2100      	movs	r1, #0
 8000804:	f005 fddf 	bl	80063c6 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 8000808:	0021      	movs	r1, r4
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2230      	movs	r2, #48	; 0x30
 800080e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2201      	movs	r2, #1
 8000814:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2201      	movs	r2, #1
 800081a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2210      	movs	r2, #16
 8000820:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	187b      	adds	r3, r7, r1
 800082a:	0018      	movs	r0, r3
 800082c:	f001 ff8a 	bl	8002744 <HAL_RCC_OscConfig>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000834:	f000 fa32 	bl	8000c9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000838:	211c      	movs	r1, #28
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2207      	movs	r2, #7
 800083e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2203      	movs	r2, #3
 8000844:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2101      	movs	r1, #1
 8000856:	0018      	movs	r0, r3
 8000858:	f002 fafa 	bl	8002e50 <HAL_RCC_ClockConfig>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000860:	f000 fa1c 	bl	8000c9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000864:	003b      	movs	r3, r7
 8000866:	2202      	movs	r2, #2
 8000868:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800086a:	003b      	movs	r3, r7
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000870:	003b      	movs	r3, r7
 8000872:	0018      	movs	r0, r3
 8000874:	f002 fc8e 	bl	8003194 <HAL_RCCEx_PeriphCLKConfig>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800087c:	f000 fa0e 	bl	8000c9c <Error_Handler>
  }
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	b019      	add	sp, #100	; 0x64
 8000886:	bd90      	pop	{r4, r7, pc}

08000888 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	0018      	movs	r0, r3
 8000892:	230c      	movs	r3, #12
 8000894:	001a      	movs	r2, r3
 8000896:	2100      	movs	r1, #0
 8000898:	f005 fd95 	bl	80063c6 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800089c:	4b33      	ldr	r3, [pc, #204]	; (800096c <MX_ADC_Init+0xe4>)
 800089e:	4a34      	ldr	r2, [pc, #208]	; (8000970 <MX_ADC_Init+0xe8>)
 80008a0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008a2:	4b32      	ldr	r3, [pc, #200]	; (800096c <MX_ADC_Init+0xe4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80008a8:	4b30      	ldr	r3, [pc, #192]	; (800096c <MX_ADC_Init+0xe4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ae:	4b2f      	ldr	r3, [pc, #188]	; (800096c <MX_ADC_Init+0xe4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80008b4:	4b2d      	ldr	r3, [pc, #180]	; (800096c <MX_ADC_Init+0xe4>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008ba:	4b2c      	ldr	r3, [pc, #176]	; (800096c <MX_ADC_Init+0xe4>)
 80008bc:	2208      	movs	r2, #8
 80008be:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80008c0:	4b2a      	ldr	r3, [pc, #168]	; (800096c <MX_ADC_Init+0xe4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80008c6:	4b29      	ldr	r3, [pc, #164]	; (800096c <MX_ADC_Init+0xe4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80008cc:	4b27      	ldr	r3, [pc, #156]	; (800096c <MX_ADC_Init+0xe4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80008d2:	4b26      	ldr	r3, [pc, #152]	; (800096c <MX_ADC_Init+0xe4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d8:	4b24      	ldr	r3, [pc, #144]	; (800096c <MX_ADC_Init+0xe4>)
 80008da:	22c2      	movs	r2, #194	; 0xc2
 80008dc:	32ff      	adds	r2, #255	; 0xff
 80008de:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e0:	4b22      	ldr	r3, [pc, #136]	; (800096c <MX_ADC_Init+0xe4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80008e6:	4b21      	ldr	r3, [pc, #132]	; (800096c <MX_ADC_Init+0xe4>)
 80008e8:	2224      	movs	r2, #36	; 0x24
 80008ea:	2101      	movs	r1, #1
 80008ec:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008ee:	4b1f      	ldr	r3, [pc, #124]	; (800096c <MX_ADC_Init+0xe4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_ADC_Init+0xe4>)
 80008f6:	0018      	movs	r0, r3
 80008f8:	f000 fc5c 	bl	80011b4 <HAL_ADC_Init>
 80008fc:	1e03      	subs	r3, r0, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000900:	f000 f9cc 	bl	8000c9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	0152      	lsls	r2, r2, #5
 8000910:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2280      	movs	r2, #128	; 0x80
 8000916:	0552      	lsls	r2, r2, #21
 8000918:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800091a:	1d3a      	adds	r2, r7, #4
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_ADC_Init+0xe4>)
 800091e:	0011      	movs	r1, r2
 8000920:	0018      	movs	r0, r3
 8000922:	f000 fe87 	bl	8001634 <HAL_ADC_ConfigChannel>
 8000926:	1e03      	subs	r3, r0, #0
 8000928:	d001      	beq.n	800092e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800092a:	f000 f9b7 	bl	8000c9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2201      	movs	r2, #1
 8000932:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000934:	1d3a      	adds	r2, r7, #4
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <MX_ADC_Init+0xe4>)
 8000938:	0011      	movs	r1, r2
 800093a:	0018      	movs	r0, r3
 800093c:	f000 fe7a 	bl	8001634 <HAL_ADC_ConfigChannel>
 8000940:	1e03      	subs	r3, r0, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000944:	f000 f9aa 	bl	8000c9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2204      	movs	r2, #4
 800094c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800094e:	1d3a      	adds	r2, r7, #4
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_ADC_Init+0xe4>)
 8000952:	0011      	movs	r1, r2
 8000954:	0018      	movs	r0, r3
 8000956:	f000 fe6d 	bl	8001634 <HAL_ADC_ConfigChannel>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800095e:	f000 f99d 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b004      	add	sp, #16
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	20001ab0 	.word	0x20001ab0
 8000970:	40012400 	.word	0x40012400

08000974 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_CAN_Init+0x64>)
 800097a:	4a18      	ldr	r2, [pc, #96]	; (80009dc <MX_CAN_Init+0x68>)
 800097c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_CAN_Init+0x64>)
 8000980:	2206      	movs	r2, #6
 8000982:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_CAN_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_CAN_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_CAN_Init+0x64>)
 8000992:	22a0      	movs	r2, #160	; 0xa0
 8000994:	02d2      	lsls	r2, r2, #11
 8000996:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_CAN_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_CAN_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_CAN_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_CAN_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_CAN_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_CAN_Init+0x64>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_CAN_Init+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <MX_CAN_Init+0x64>)
 80009c4:	0018      	movs	r0, r3
 80009c6:	f001 f991 	bl	8001cec <HAL_CAN_Init>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80009ce:	f000 f965 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	200019b8 	.word	0x200019b8
 80009dc:	40006400 	.word	0x40006400

080009e0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_TIM16_Init+0x44>)
 80009e6:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <MX_TIM16_Init+0x48>)
 80009e8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_TIM16_Init+0x44>)
 80009ec:	2230      	movs	r2, #48	; 0x30
 80009ee:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_TIM16_Init+0x44>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0xFFFF;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_TIM16_Init+0x44>)
 80009f8:	4a0c      	ldr	r2, [pc, #48]	; (8000a2c <MX_TIM16_Init+0x4c>)
 80009fa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_TIM16_Init+0x44>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_TIM16_Init+0x44>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_TIM16_Init+0x44>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <MX_TIM16_Init+0x44>)
 8000a10:	0018      	movs	r0, r3
 8000a12:	f002 fcbf 	bl	8003394 <HAL_TIM_Base_Init>
 8000a16:	1e03      	subs	r3, r0, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000a1a:	f000 f93f 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20001af0 	.word	0x20001af0
 8000a28:	40014400 	.word	0x40014400
 8000a2c:	0000ffff 	.word	0x0000ffff

08000a30 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_TIM17_Init+0x44>)
 8000a36:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <MX_TIM17_Init+0x48>)
 8000a38:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48000;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_TIM17_Init+0x44>)
 8000a3c:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <MX_TIM17_Init+0x4c>)
 8000a3e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_TIM17_Init+0x44>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 0xFFFF;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_TIM17_Init+0x44>)
 8000a48:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <MX_TIM17_Init+0x50>)
 8000a4a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_TIM17_Init+0x44>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <MX_TIM17_Init+0x44>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_TIM17_Init+0x44>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <MX_TIM17_Init+0x44>)
 8000a60:	0018      	movs	r0, r3
 8000a62:	f002 fc97 	bl	8003394 <HAL_TIM_Base_Init>
 8000a66:	1e03      	subs	r3, r0, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000a6a:	f000 f917 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20001978 	.word	0x20001978
 8000a78:	40014800 	.word	0x40014800
 8000a7c:	0000bb80 	.word	0x0000bb80
 8000a80:	0000ffff 	.word	0x0000ffff

08000a84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000a8a:	4a15      	ldr	r2, [pc, #84]	; (8000ae0 <MX_USART2_UART_Init+0x5c>)
 8000a8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000a90:	2296      	movs	r2, #150	; 0x96
 8000a92:	0212      	lsls	r2, r2, #8
 8000a94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 fe99 	bl	8003800 <HAL_UART_Init>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ad2:	f000 f8e3 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200019ec 	.word	0x200019ec
 8000ae0:	40004400 	.word	0x40004400

08000ae4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_DMA_Init+0x38>)
 8000aec:	695a      	ldr	r2, [r3, #20]
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_DMA_Init+0x38>)
 8000af0:	2101      	movs	r1, #1
 8000af2:	430a      	orrs	r2, r1
 8000af4:	615a      	str	r2, [r3, #20]
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_DMA_Init+0x38>)
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	2201      	movs	r2, #1
 8000afc:	4013      	ands	r3, r2
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2103      	movs	r1, #3
 8000b06:	2009      	movs	r0, #9
 8000b08:	f001 fa76 	bl	8001ff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b0c:	2009      	movs	r0, #9
 8000b0e:	f001 fa88 	bl	8002022 <HAL_NVIC_EnableIRQ>

}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b002      	add	sp, #8
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	40021000 	.word	0x40021000

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b08b      	sub	sp, #44	; 0x2c
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	2414      	movs	r4, #20
 8000b28:	193b      	adds	r3, r7, r4
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	2314      	movs	r3, #20
 8000b2e:	001a      	movs	r2, r3
 8000b30:	2100      	movs	r1, #0
 8000b32:	f005 fc48 	bl	80063c6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	4b3f      	ldr	r3, [pc, #252]	; (8000c34 <MX_GPIO_Init+0x114>)
 8000b38:	695a      	ldr	r2, [r3, #20]
 8000b3a:	4b3e      	ldr	r3, [pc, #248]	; (8000c34 <MX_GPIO_Init+0x114>)
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	0309      	lsls	r1, r1, #12
 8000b40:	430a      	orrs	r2, r1
 8000b42:	615a      	str	r2, [r3, #20]
 8000b44:	4b3b      	ldr	r3, [pc, #236]	; (8000c34 <MX_GPIO_Init+0x114>)
 8000b46:	695a      	ldr	r2, [r3, #20]
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	031b      	lsls	r3, r3, #12
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b52:	4b38      	ldr	r3, [pc, #224]	; (8000c34 <MX_GPIO_Init+0x114>)
 8000b54:	695a      	ldr	r2, [r3, #20]
 8000b56:	4b37      	ldr	r3, [pc, #220]	; (8000c34 <MX_GPIO_Init+0x114>)
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	03c9      	lsls	r1, r1, #15
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	615a      	str	r2, [r3, #20]
 8000b60:	4b34      	ldr	r3, [pc, #208]	; (8000c34 <MX_GPIO_Init+0x114>)
 8000b62:	695a      	ldr	r2, [r3, #20]
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	03db      	lsls	r3, r3, #15
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b31      	ldr	r3, [pc, #196]	; (8000c34 <MX_GPIO_Init+0x114>)
 8000b70:	695a      	ldr	r2, [r3, #20]
 8000b72:	4b30      	ldr	r3, [pc, #192]	; (8000c34 <MX_GPIO_Init+0x114>)
 8000b74:	2180      	movs	r1, #128	; 0x80
 8000b76:	0289      	lsls	r1, r1, #10
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	615a      	str	r2, [r3, #20]
 8000b7c:	4b2d      	ldr	r3, [pc, #180]	; (8000c34 <MX_GPIO_Init+0x114>)
 8000b7e:	695a      	ldr	r2, [r3, #20]
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	029b      	lsls	r3, r3, #10
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	4b2a      	ldr	r3, [pc, #168]	; (8000c34 <MX_GPIO_Init+0x114>)
 8000b8c:	695a      	ldr	r2, [r3, #20]
 8000b8e:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <MX_GPIO_Init+0x114>)
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	02c9      	lsls	r1, r1, #11
 8000b94:	430a      	orrs	r2, r1
 8000b96:	615a      	str	r2, [r3, #20]
 8000b98:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <MX_GPIO_Init+0x114>)
 8000b9a:	695a      	ldr	r2, [r3, #20]
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	02db      	lsls	r3, r3, #11
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ba6:	2390      	movs	r3, #144	; 0x90
 8000ba8:	05db      	lsls	r3, r3, #23
 8000baa:	2200      	movs	r2, #0
 8000bac:	2120      	movs	r1, #32
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f001 fd90 	bl	80026d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000bb4:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <MX_GPIO_Init+0x118>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2138      	movs	r1, #56	; 0x38
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f001 fd8a 	bl	80026d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	2280      	movs	r2, #128	; 0x80
 8000bc4:	0192      	lsls	r2, r2, #6
 8000bc6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	4a1c      	ldr	r2, [pc, #112]	; (8000c3c <MX_GPIO_Init+0x11c>)
 8000bcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	4a1a      	ldr	r2, [pc, #104]	; (8000c40 <MX_GPIO_Init+0x120>)
 8000bd8:	0019      	movs	r1, r3
 8000bda:	0010      	movs	r0, r2
 8000bdc:	f001 fc02 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	2220      	movs	r2, #32
 8000be4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	2201      	movs	r2, #1
 8000bea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	193a      	adds	r2, r7, r4
 8000bfa:	2390      	movs	r3, #144	; 0x90
 8000bfc:	05db      	lsls	r3, r3, #23
 8000bfe:	0011      	movs	r1, r2
 8000c00:	0018      	movs	r0, r3
 8000c02:	f001 fbef 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000c06:	0021      	movs	r1, r4
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2238      	movs	r2, #56	; 0x38
 8000c0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	2201      	movs	r2, #1
 8000c12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <MX_GPIO_Init+0x118>)
 8000c24:	0019      	movs	r1, r3
 8000c26:	0010      	movs	r0, r2
 8000c28:	f001 fbdc 	bl	80023e4 <HAL_GPIO_Init>

}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b00b      	add	sp, #44	; 0x2c
 8000c32:	bd90      	pop	{r4, r7, pc}
 8000c34:	40021000 	.word	0x40021000
 8000c38:	48000400 	.word	0x48000400
 8000c3c:	10210000 	.word	0x10210000
 8000c40:	48000800 	.word	0x48000800

08000c44 <ADC_Channel_Control>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_ADC_Channel_Control */
void ADC_Channel_Control(void *argument)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	Current_Control_Loop();
 8000c4c:	f7ff fc9a 	bl	8000584 <Current_Control_Loop>
    Error_Handler();
 8000c50:	f000 f824 	bl	8000c9c <Error_Handler>
	Current_Control_Loop();
 8000c54:	e7fa      	b.n	8000c4c <ADC_Channel_Control+0x8>

08000c56 <CAN_TX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_TX */
void CAN_TX(void *argument)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_TX */
  /* Infinite loop */
  for(;;)
  {
    //GO4 CAN TX TASK
    osDelay(10);
 8000c5e:	200a      	movs	r0, #10
 8000c60:	f003 fa68 	bl	8004134 <osDelay>
 8000c64:	e7fb      	b.n	8000c5e <CAN_TX+0x8>

08000c66 <ADC_Schedule_loop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADC_Schedule_loop */
void ADC_Schedule_loop(void *argument)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_Schedule_loop */
  /* Infinite loop */
  for(;;)
  {
    Schedule_ADC();
 8000c6e:	f7ff fc27 	bl	80004c0 <Schedule_ADC>
    Error_Handler();
 8000c72:	f000 f813 	bl	8000c9c <Error_Handler>
    Schedule_ADC();
 8000c76:	e7fa      	b.n	8000c6e <ADC_Schedule_loop+0x8>

08000c78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d101      	bne.n	8000c8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c8a:	f000 fa55 	bl	8001138 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b002      	add	sp, #8
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	40002000 	.word	0x40002000

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	HAL_ADC_Stop_DMA(&hadc);
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <Error_Handler+0x34>)
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f000 fc48 	bl	8001538 <HAL_ADC_Stop_DMA>
	// Infinitely flash nucelo LD2 in event of an error
	while (1) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000ca8:	2390      	movs	r3, #144	; 0x90
 8000caa:	05db      	lsls	r3, r3, #23
 8000cac:	2120      	movs	r1, #32
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f001 fd2d 	bl	800270e <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8000cb4:	20c8      	movs	r0, #200	; 0xc8
 8000cb6:	f000 fa5b 	bl	8001170 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000cba:	2390      	movs	r3, #144	; 0x90
 8000cbc:	05db      	lsls	r3, r3, #23
 8000cbe:	2120      	movs	r1, #32
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f001 fd24 	bl	800270e <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8000cc6:	20c8      	movs	r0, #200	; 0xc8
 8000cc8:	f000 fa52 	bl	8001170 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000ccc:	e7ec      	b.n	8000ca8 <Error_Handler+0xc>
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	20001ab0 	.word	0x20001ab0

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_MspInit+0x50>)
 8000cdc:	699a      	ldr	r2, [r3, #24]
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_MspInit+0x50>)
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	619a      	str	r2, [r3, #24]
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_MspInit+0x50>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	2201      	movs	r2, #1
 8000cec:	4013      	ands	r3, r2
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_MspInit+0x50>)
 8000cf4:	69da      	ldr	r2, [r3, #28]
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_MspInit+0x50>)
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	0549      	lsls	r1, r1, #21
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	61da      	str	r2, [r3, #28]
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <HAL_MspInit+0x50>)
 8000d02:	69da      	ldr	r2, [r3, #28]
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	055b      	lsls	r3, r3, #21
 8000d08:	4013      	ands	r3, r2
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000d0e:	2302      	movs	r3, #2
 8000d10:	425b      	negs	r3, r3
 8000d12:	2200      	movs	r2, #0
 8000d14:	2103      	movs	r1, #3
 8000d16:	0018      	movs	r0, r3
 8000d18:	f001 f96e 	bl	8001ff8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b002      	add	sp, #8
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	2314      	movs	r3, #20
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	0018      	movs	r0, r3
 8000d36:	2314      	movs	r3, #20
 8000d38:	001a      	movs	r2, r3
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	f005 fb43 	bl	80063c6 <memset>
  if(hadc->Instance==ADC1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a2e      	ldr	r2, [pc, #184]	; (8000e00 <HAL_ADC_MspInit+0xd8>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d155      	bne.n	8000df6 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d4a:	4b2e      	ldr	r3, [pc, #184]	; (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000d4c:	699a      	ldr	r2, [r3, #24]
 8000d4e:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	0089      	lsls	r1, r1, #2
 8000d54:	430a      	orrs	r2, r1
 8000d56:	619a      	str	r2, [r3, #24]
 8000d58:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000d5a:	699a      	ldr	r2, [r3, #24]
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000d68:	695a      	ldr	r2, [r3, #20]
 8000d6a:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000d6c:	2180      	movs	r1, #128	; 0x80
 8000d6e:	0289      	lsls	r1, r1, #10
 8000d70:	430a      	orrs	r2, r1
 8000d72:	615a      	str	r2, [r3, #20]
 8000d74:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <HAL_ADC_MspInit+0xdc>)
 8000d76:	695a      	ldr	r2, [r3, #20]
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	029b      	lsls	r3, r3, #10
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000d82:	2114      	movs	r1, #20
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2213      	movs	r2, #19
 8000d88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	187a      	adds	r2, r7, r1
 8000d98:	2390      	movs	r3, #144	; 0x90
 8000d9a:	05db      	lsls	r3, r3, #23
 8000d9c:	0011      	movs	r1, r2
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f001 fb20 	bl	80023e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_ADC_MspInit+0xe0>)
 8000da6:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <HAL_ADC_MspInit+0xe4>)
 8000da8:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <HAL_ADC_MspInit+0xe0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_ADC_MspInit+0xe0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_ADC_MspInit+0xe0>)
 8000db8:	2280      	movs	r2, #128	; 0x80
 8000dba:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_ADC_MspInit+0xe0>)
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	0052      	lsls	r2, r2, #1
 8000dc2:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dc4:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <HAL_ADC_MspInit+0xe0>)
 8000dc6:	2280      	movs	r2, #128	; 0x80
 8000dc8:	00d2      	lsls	r2, r2, #3
 8000dca:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_ADC_MspInit+0xe0>)
 8000dce:	2220      	movs	r2, #32
 8000dd0:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <HAL_ADC_MspInit+0xe0>)
 8000dd4:	22c0      	movs	r2, #192	; 0xc0
 8000dd6:	0192      	lsls	r2, r2, #6
 8000dd8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_ADC_MspInit+0xe0>)
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f001 f931 	bl	8002044 <HAL_DMA_Init>
 8000de2:	1e03      	subs	r3, r0, #0
 8000de4:	d001      	beq.n	8000dea <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000de6:	f7ff ff59 	bl	8000c9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <HAL_ADC_MspInit+0xe0>)
 8000dee:	631a      	str	r2, [r3, #48]	; 0x30
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_ADC_MspInit+0xe0>)
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b00a      	add	sp, #40	; 0x28
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	40012400 	.word	0x40012400
 8000e04:	40021000 	.word	0x40021000
 8000e08:	20001a6c 	.word	0x20001a6c
 8000e0c:	40020008 	.word	0x40020008

08000e10 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	2314      	movs	r3, #20
 8000e1a:	18fb      	adds	r3, r7, r3
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	2314      	movs	r3, #20
 8000e20:	001a      	movs	r2, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	f005 facf 	bl	80063c6 <memset>
  if(hcan->Instance==CAN)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ea4 <HAL_CAN_MspInit+0x94>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d133      	bne.n	8000e9a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e32:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <HAL_CAN_MspInit+0x98>)
 8000e34:	69da      	ldr	r2, [r3, #28]
 8000e36:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <HAL_CAN_MspInit+0x98>)
 8000e38:	2180      	movs	r1, #128	; 0x80
 8000e3a:	0489      	lsls	r1, r1, #18
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	61da      	str	r2, [r3, #28]
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <HAL_CAN_MspInit+0x98>)
 8000e42:	69da      	ldr	r2, [r3, #28]
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	049b      	lsls	r3, r3, #18
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <HAL_CAN_MspInit+0x98>)
 8000e50:	695a      	ldr	r2, [r3, #20]
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_CAN_MspInit+0x98>)
 8000e54:	2180      	movs	r1, #128	; 0x80
 8000e56:	0289      	lsls	r1, r1, #10
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	615a      	str	r2, [r3, #20]
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_CAN_MspInit+0x98>)
 8000e5e:	695a      	ldr	r2, [r3, #20]
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	029b      	lsls	r3, r3, #10
 8000e64:	4013      	ands	r3, r2
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e6a:	2114      	movs	r1, #20
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	22c0      	movs	r2, #192	; 0xc0
 8000e70:	0152      	lsls	r2, r2, #5
 8000e72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2202      	movs	r2, #2
 8000e78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	2203      	movs	r2, #3
 8000e84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	2204      	movs	r2, #4
 8000e8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	187a      	adds	r2, r7, r1
 8000e8e:	2390      	movs	r3, #144	; 0x90
 8000e90:	05db      	lsls	r3, r3, #23
 8000e92:	0011      	movs	r1, r2
 8000e94:	0018      	movs	r0, r3
 8000e96:	f001 faa5 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b00a      	add	sp, #40	; 0x28
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	40006400 	.word	0x40006400
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <HAL_TIM_Base_MspInit+0x60>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d10e      	bne.n	8000edc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <HAL_TIM_Base_MspInit+0x64>)
 8000ec0:	699a      	ldr	r2, [r3, #24]
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <HAL_TIM_Base_MspInit+0x64>)
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	0289      	lsls	r1, r1, #10
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	619a      	str	r2, [r3, #24]
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <HAL_TIM_Base_MspInit+0x64>)
 8000ece:	699a      	ldr	r2, [r3, #24]
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	029b      	lsls	r3, r3, #10
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000eda:	e012      	b.n	8000f02 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM17)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0c      	ldr	r2, [pc, #48]	; (8000f14 <HAL_TIM_Base_MspInit+0x68>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d10d      	bne.n	8000f02 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_TIM_Base_MspInit+0x64>)
 8000ee8:	699a      	ldr	r2, [r3, #24]
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_TIM_Base_MspInit+0x64>)
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	02c9      	lsls	r1, r1, #11
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	619a      	str	r2, [r3, #24]
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_TIM_Base_MspInit+0x64>)
 8000ef6:	699a      	ldr	r2, [r3, #24]
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	02db      	lsls	r3, r3, #11
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b004      	add	sp, #16
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	40014400 	.word	0x40014400
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40014800 	.word	0x40014800

08000f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	2314      	movs	r3, #20
 8000f22:	18fb      	adds	r3, r7, r3
 8000f24:	0018      	movs	r0, r3
 8000f26:	2314      	movs	r3, #20
 8000f28:	001a      	movs	r2, r3
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	f005 fa4b 	bl	80063c6 <memset>
  if(huart->Instance==USART2)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a1c      	ldr	r2, [pc, #112]	; (8000fa8 <HAL_UART_MspInit+0x90>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d132      	bne.n	8000fa0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <HAL_UART_MspInit+0x94>)
 8000f3c:	69da      	ldr	r2, [r3, #28]
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <HAL_UART_MspInit+0x94>)
 8000f40:	2180      	movs	r1, #128	; 0x80
 8000f42:	0289      	lsls	r1, r1, #10
 8000f44:	430a      	orrs	r2, r1
 8000f46:	61da      	str	r2, [r3, #28]
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_UART_MspInit+0x94>)
 8000f4a:	69da      	ldr	r2, [r3, #28]
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	029b      	lsls	r3, r3, #10
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_UART_MspInit+0x94>)
 8000f58:	695a      	ldr	r2, [r3, #20]
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_UART_MspInit+0x94>)
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	0289      	lsls	r1, r1, #10
 8000f60:	430a      	orrs	r2, r1
 8000f62:	615a      	str	r2, [r3, #20]
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <HAL_UART_MspInit+0x94>)
 8000f66:	695a      	ldr	r2, [r3, #20]
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	029b      	lsls	r3, r3, #10
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f72:	2114      	movs	r1, #20
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	220c      	movs	r2, #12
 8000f78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	2201      	movs	r2, #1
 8000f90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	187a      	adds	r2, r7, r1
 8000f94:	2390      	movs	r3, #144	; 0x90
 8000f96:	05db      	lsls	r3, r3, #23
 8000f98:	0011      	movs	r1, r2
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f001 fa22 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b00a      	add	sp, #40	; 0x28
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40004400 	.word	0x40004400
 8000fac:	40021000 	.word	0x40021000

08000fb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM14_IRQn, TickPriority ,0); 
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	0019      	movs	r1, r3
 8000fc6:	2013      	movs	r0, #19
 8000fc8:	f001 f816 	bl	8001ff8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM14_IRQn); 
 8000fcc:	2013      	movs	r0, #19
 8000fce:	f001 f828 	bl	8002022 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <HAL_InitTick+0xa8>)
 8000fd4:	69da      	ldr	r2, [r3, #28]
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <HAL_InitTick+0xa8>)
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	0049      	lsls	r1, r1, #1
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	61da      	str	r2, [r3, #28]
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <HAL_InitTick+0xa8>)
 8000fe2:	69da      	ldr	r2, [r3, #28]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fee:	230c      	movs	r3, #12
 8000ff0:	18fa      	adds	r2, r7, r3
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	18fb      	adds	r3, r7, r3
 8000ff6:	0011      	movs	r1, r2
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f002 f8a1 	bl	8003140 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ffe:	f002 f889 	bl	8003114 <HAL_RCC_GetPCLK1Freq>
 8001002:	0003      	movs	r3, r0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	4914      	ldr	r1, [pc, #80]	; (800105c <HAL_InitTick+0xac>)
 800100a:	0018      	movs	r0, r3
 800100c:	f7ff f87c 	bl	8000108 <__udivsi3>
 8001010:	0003      	movs	r3, r0
 8001012:	3b01      	subs	r3, #1
 8001014:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_InitTick+0xb0>)
 8001018:	4a12      	ldr	r2, [pc, #72]	; (8001064 <HAL_InitTick+0xb4>)
 800101a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_InitTick+0xb0>)
 800101e:	4a12      	ldr	r2, [pc, #72]	; (8001068 <HAL_InitTick+0xb8>)
 8001020:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_InitTick+0xb0>)
 8001024:	6a3a      	ldr	r2, [r7, #32]
 8001026:	605a      	str	r2, [r3, #4]
  htim14.Init.ClockDivision = 0;
 8001028:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <HAL_InitTick+0xb0>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_InitTick+0xb0>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_InitTick+0xb0>)
 8001036:	0018      	movs	r0, r3
 8001038:	f002 f9ac 	bl	8003394 <HAL_TIM_Base_Init>
 800103c:	1e03      	subs	r3, r0, #0
 800103e:	d105      	bne.n	800104c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <HAL_InitTick+0xb0>)
 8001042:	0018      	movs	r0, r3
 8001044:	f002 f9f4 	bl	8003430 <HAL_TIM_Base_Start_IT>
 8001048:	0003      	movs	r3, r0
 800104a:	e000      	b.n	800104e <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
}
 800104e:	0018      	movs	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	b00a      	add	sp, #40	; 0x28
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	40021000 	.word	0x40021000
 800105c:	000f4240 	.word	0x000f4240
 8001060:	20001b30 	.word	0x20001b30
 8001064:	40002000 	.word	0x40002000
 8001068:	000003e7 	.word	0x000003e7

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001070:	46c0      	nop			; (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 800107a:	f7ff fe0f 	bl	8000c9c <Error_Handler>
 800107e:	e7fc      	b.n	800107a <HardFault_Handler+0x4>

08001080 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <DMA1_Channel1_IRQHandler+0x14>)
 8001086:	0018      	movs	r0, r3
 8001088:	f001 f8c2 	bl	8002210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	20001a6c 	.word	0x20001a6c

08001098 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <TIM14_IRQHandler+0x14>)
 800109e:	0018      	movs	r0, r3
 80010a0:	f002 f9e8 	bl	8003474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	20001b30 	.word	0x20001b30

080010b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80010b4:	46c0      	nop			; (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010bc:	480d      	ldr	r0, [pc, #52]	; (80010f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010c2:	490e      	ldr	r1, [pc, #56]	; (80010fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80010c4:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <LoopForever+0xe>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c8:	e002      	b.n	80010d0 <LoopCopyDataInit>

080010ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ce:	3304      	adds	r3, #4

080010d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d4:	d3f9      	bcc.n	80010ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d8:	4c0b      	ldr	r4, [pc, #44]	; (8001108 <LoopForever+0x16>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010dc:	e001      	b.n	80010e2 <LoopFillZerobss>

080010de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e0:	3204      	adds	r2, #4

080010e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e4:	d3fb      	bcc.n	80010de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010e6:	f7ff ffe3 	bl	80010b0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80010ea:	f005 f93f 	bl	800636c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ee:	f7ff fb27 	bl	8000740 <main>

080010f2 <LoopForever>:

LoopForever:
    b LoopForever
 80010f2:	e7fe      	b.n	80010f2 <LoopForever>
  ldr   r0, =_estack
 80010f4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80010f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010fc:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001100:	08006510 	.word	0x08006510
  ldr r2, =_sbss
 8001104:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001108:	20001bb4 	.word	0x20001bb4

0800110c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC1_COMP_IRQHandler>
	...

08001110 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <HAL_Init+0x24>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_Init+0x24>)
 800111a:	2110      	movs	r1, #16
 800111c:	430a      	orrs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001120:	2000      	movs	r0, #0
 8001122:	f7ff ff45 	bl	8000fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001126:	f7ff fdd5 	bl	8000cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	0018      	movs	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	40022000 	.word	0x40022000

08001138 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_IncTick+0x1c>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	001a      	movs	r2, r3
 8001142:	4b05      	ldr	r3, [pc, #20]	; (8001158 <HAL_IncTick+0x20>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	18d2      	adds	r2, r2, r3
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <HAL_IncTick+0x20>)
 800114a:	601a      	str	r2, [r3, #0]
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	20000028 	.word	0x20000028
 8001158:	20001b70 	.word	0x20001b70

0800115c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  return uwTick;
 8001160:	4b02      	ldr	r3, [pc, #8]	; (800116c <HAL_GetTick+0x10>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	0018      	movs	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	20001b70 	.word	0x20001b70

08001170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001178:	f7ff fff0 	bl	800115c <HAL_GetTick>
 800117c:	0003      	movs	r3, r0
 800117e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3301      	adds	r3, #1
 8001188:	d005      	beq.n	8001196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_Delay+0x40>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	001a      	movs	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	189b      	adds	r3, r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	f7ff ffe0 	bl	800115c <HAL_GetTick>
 800119c:	0002      	movs	r2, r0
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d8f7      	bhi.n	8001198 <HAL_Delay+0x28>
  {
  }
}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b004      	add	sp, #16
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000028 	.word	0x20000028

080011b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011bc:	230f      	movs	r3, #15
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e125      	b.n	800141e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10a      	bne.n	80011f0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2234      	movs	r2, #52	; 0x34
 80011e4:	2100      	movs	r1, #0
 80011e6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	0018      	movs	r0, r3
 80011ec:	f7ff fd9c 	bl	8000d28 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f4:	2210      	movs	r2, #16
 80011f6:	4013      	ands	r3, r2
 80011f8:	d000      	beq.n	80011fc <HAL_ADC_Init+0x48>
 80011fa:	e103      	b.n	8001404 <HAL_ADC_Init+0x250>
 80011fc:	230f      	movs	r3, #15
 80011fe:	18fb      	adds	r3, r7, r3
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d000      	beq.n	8001208 <HAL_ADC_Init+0x54>
 8001206:	e0fd      	b.n	8001404 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	2204      	movs	r2, #4
 8001210:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001212:	d000      	beq.n	8001216 <HAL_ADC_Init+0x62>
 8001214:	e0f6      	b.n	8001404 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121a:	4a83      	ldr	r2, [pc, #524]	; (8001428 <HAL_ADC_Init+0x274>)
 800121c:	4013      	ands	r3, r2
 800121e:	2202      	movs	r2, #2
 8001220:	431a      	orrs	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2203      	movs	r2, #3
 800122e:	4013      	ands	r3, r2
 8001230:	2b01      	cmp	r3, #1
 8001232:	d112      	bne.n	800125a <HAL_ADC_Init+0xa6>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2201      	movs	r2, #1
 800123c:	4013      	ands	r3, r2
 800123e:	2b01      	cmp	r3, #1
 8001240:	d009      	beq.n	8001256 <HAL_ADC_Init+0xa2>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68da      	ldr	r2, [r3, #12]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	401a      	ands	r2, r3
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	429a      	cmp	r2, r3
 8001254:	d101      	bne.n	800125a <HAL_ADC_Init+0xa6>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_ADC_Init+0xa8>
 800125a:	2300      	movs	r3, #0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d116      	bne.n	800128e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2218      	movs	r2, #24
 8001268:	4393      	bics	r3, r2
 800126a:	0019      	movs	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	430a      	orrs	r2, r1
 8001276:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	0899      	lsrs	r1, r3, #2
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	430a      	orrs	r2, r1
 800128c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4964      	ldr	r1, [pc, #400]	; (800142c <HAL_ADC_Init+0x278>)
 800129a:	400a      	ands	r2, r1
 800129c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7e1b      	ldrb	r3, [r3, #24]
 80012a2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	7e5b      	ldrb	r3, [r3, #25]
 80012a8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7e9b      	ldrb	r3, [r3, #26]
 80012b0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80012b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d002      	beq.n	80012c2 <HAL_ADC_Init+0x10e>
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	015b      	lsls	r3, r3, #5
 80012c0:	e000      	b.n	80012c4 <HAL_ADC_Init+0x110>
 80012c2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80012c4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80012ca:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d101      	bne.n	80012d8 <HAL_ADC_Init+0x124>
 80012d4:	2304      	movs	r3, #4
 80012d6:	e000      	b.n	80012da <HAL_ADC_Init+0x126>
 80012d8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80012da:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2124      	movs	r1, #36	; 0x24
 80012e0:	5c5b      	ldrb	r3, [r3, r1]
 80012e2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80012e4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7edb      	ldrb	r3, [r3, #27]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d115      	bne.n	8001320 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	7e9b      	ldrb	r3, [r3, #26]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d105      	bne.n	8001308 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2280      	movs	r2, #128	; 0x80
 8001300:	0252      	lsls	r2, r2, #9
 8001302:	4313      	orrs	r3, r2
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	e00b      	b.n	8001320 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130c:	2220      	movs	r2, #32
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001318:	2201      	movs	r2, #1
 800131a:	431a      	orrs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69da      	ldr	r2, [r3, #28]
 8001324:	23c2      	movs	r3, #194	; 0xc2
 8001326:	33ff      	adds	r3, #255	; 0xff
 8001328:	429a      	cmp	r2, r3
 800132a:	d007      	beq.n	800133c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001334:	4313      	orrs	r3, r2
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	4313      	orrs	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68d9      	ldr	r1, [r3, #12]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	430a      	orrs	r2, r1
 800134a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	055b      	lsls	r3, r3, #21
 8001354:	429a      	cmp	r2, r3
 8001356:	d01b      	beq.n	8001390 <HAL_ADC_Init+0x1dc>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	2b01      	cmp	r3, #1
 800135e:	d017      	beq.n	8001390 <HAL_ADC_Init+0x1dc>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001364:	2b02      	cmp	r3, #2
 8001366:	d013      	beq.n	8001390 <HAL_ADC_Init+0x1dc>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136c:	2b03      	cmp	r3, #3
 800136e:	d00f      	beq.n	8001390 <HAL_ADC_Init+0x1dc>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001374:	2b04      	cmp	r3, #4
 8001376:	d00b      	beq.n	8001390 <HAL_ADC_Init+0x1dc>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	2b05      	cmp	r3, #5
 800137e:	d007      	beq.n	8001390 <HAL_ADC_Init+0x1dc>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	2b06      	cmp	r3, #6
 8001386:	d003      	beq.n	8001390 <HAL_ADC_Init+0x1dc>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138c:	2b07      	cmp	r3, #7
 800138e:	d112      	bne.n	80013b6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	695a      	ldr	r2, [r3, #20]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2107      	movs	r1, #7
 800139c:	438a      	bics	r2, r1
 800139e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6959      	ldr	r1, [r3, #20]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013aa:	2207      	movs	r2, #7
 80013ac:	401a      	ands	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <HAL_ADC_Init+0x27c>)
 80013be:	4013      	ands	r3, r2
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d10b      	bne.n	80013de <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d0:	2203      	movs	r2, #3
 80013d2:	4393      	bics	r3, r2
 80013d4:	2201      	movs	r2, #1
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80013dc:	e01c      	b.n	8001418 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e2:	2212      	movs	r2, #18
 80013e4:	4393      	bics	r3, r2
 80013e6:	2210      	movs	r2, #16
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f2:	2201      	movs	r2, #1
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80013fa:	230f      	movs	r3, #15
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001402:	e009      	b.n	8001418 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001408:	2210      	movs	r2, #16
 800140a:	431a      	orrs	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001410:	230f      	movs	r3, #15
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	2201      	movs	r2, #1
 8001416:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001418:	230f      	movs	r3, #15
 800141a:	18fb      	adds	r3, r7, r3
 800141c:	781b      	ldrb	r3, [r3, #0]
}
 800141e:	0018      	movs	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	b004      	add	sp, #16
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	fffffefd 	.word	0xfffffefd
 800142c:	fffe0219 	.word	0xfffe0219
 8001430:	833fffe7 	.word	0x833fffe7

08001434 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001440:	2317      	movs	r3, #23
 8001442:	18fb      	adds	r3, r7, r3
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2204      	movs	r2, #4
 8001450:	4013      	ands	r3, r2
 8001452:	d15e      	bne.n	8001512 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2234      	movs	r2, #52	; 0x34
 8001458:	5c9b      	ldrb	r3, [r3, r2]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d101      	bne.n	8001462 <HAL_ADC_Start_DMA+0x2e>
 800145e:	2302      	movs	r3, #2
 8001460:	e05e      	b.n	8001520 <HAL_ADC_Start_DMA+0xec>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2234      	movs	r2, #52	; 0x34
 8001466:	2101      	movs	r1, #1
 8001468:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	7e5b      	ldrb	r3, [r3, #25]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d007      	beq.n	8001482 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001472:	2317      	movs	r3, #23
 8001474:	18fc      	adds	r4, r7, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	0018      	movs	r0, r3
 800147a:	f000 f9e9 	bl	8001850 <ADC_Enable>
 800147e:	0003      	movs	r3, r0
 8001480:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001482:	2317      	movs	r3, #23
 8001484:	18fb      	adds	r3, r7, r3
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d146      	bne.n	800151a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001490:	4a25      	ldr	r2, [pc, #148]	; (8001528 <HAL_ADC_Start_DMA+0xf4>)
 8001492:	4013      	ands	r3, r2
 8001494:	2280      	movs	r2, #128	; 0x80
 8001496:	0052      	lsls	r2, r2, #1
 8001498:	431a      	orrs	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2234      	movs	r2, #52	; 0x34
 80014a8:	2100      	movs	r1, #0
 80014aa:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	4a1e      	ldr	r2, [pc, #120]	; (800152c <HAL_ADC_Start_DMA+0xf8>)
 80014b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	4a1d      	ldr	r2, [pc, #116]	; (8001530 <HAL_ADC_Start_DMA+0xfc>)
 80014ba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	4a1c      	ldr	r2, [pc, #112]	; (8001534 <HAL_ADC_Start_DMA+0x100>)
 80014c2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	221c      	movs	r2, #28
 80014ca:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2110      	movs	r1, #16
 80014d8:	430a      	orrs	r2, r1
 80014da:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2101      	movs	r1, #1
 80014e8:	430a      	orrs	r2, r1
 80014ea:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3340      	adds	r3, #64	; 0x40
 80014f6:	0019      	movs	r1, r3
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f000 fdea 	bl	80020d4 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2104      	movs	r1, #4
 800150c:	430a      	orrs	r2, r1
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	e003      	b.n	800151a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001512:	2317      	movs	r3, #23
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	2202      	movs	r2, #2
 8001518:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800151a:	2317      	movs	r3, #23
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	781b      	ldrb	r3, [r3, #0]
}
 8001520:	0018      	movs	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	b007      	add	sp, #28
 8001526:	bd90      	pop	{r4, r7, pc}
 8001528:	fffff0fe 	.word	0xfffff0fe
 800152c:	08001aa9 	.word	0x08001aa9
 8001530:	08001b5d 	.word	0x08001b5d
 8001534:	08001b7b 	.word	0x08001b7b

08001538 <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8001538:	b5b0      	push	{r4, r5, r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001540:	230f      	movs	r3, #15
 8001542:	18fb      	adds	r3, r7, r3
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2234      	movs	r2, #52	; 0x34
 800154c:	5c9b      	ldrb	r3, [r3, r2]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d101      	bne.n	8001556 <HAL_ADC_Stop_DMA+0x1e>
 8001552:	2302      	movs	r3, #2
 8001554:	e058      	b.n	8001608 <HAL_ADC_Stop_DMA+0xd0>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2234      	movs	r2, #52	; 0x34
 800155a:	2101      	movs	r1, #1
 800155c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800155e:	250f      	movs	r5, #15
 8001560:	197c      	adds	r4, r7, r5
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	0018      	movs	r0, r3
 8001566:	f000 fa59 	bl	8001a1c <ADC_ConversionStop>
 800156a:	0003      	movs	r3, r0
 800156c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800156e:	197b      	adds	r3, r7, r5
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d141      	bne.n	80015fa <HAL_ADC_Stop_DMA+0xc2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2101      	movs	r1, #1
 8001582:	438a      	bics	r2, r1
 8001584:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	250f      	movs	r5, #15
 800158c:	197c      	adds	r4, r7, r5
 800158e:	0018      	movs	r0, r3
 8001590:	f000 fe06 	bl	80021a0 <HAL_DMA_Abort>
 8001594:	0003      	movs	r3, r0
 8001596:	7023      	strb	r3, [r4, #0]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 8001598:	197b      	adds	r3, r7, r5
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <HAL_ADC_Stop_DMA+0x74>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a4:	2240      	movs	r2, #64	; 0x40
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2110      	movs	r1, #16
 80015b8:	438a      	bics	r2, r1
 80015ba:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 80015bc:	230f      	movs	r3, #15
 80015be:	18fb      	adds	r3, r7, r3
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d108      	bne.n	80015d8 <HAL_ADC_Stop_DMA+0xa0>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80015c6:	230f      	movs	r3, #15
 80015c8:	18fc      	adds	r4, r7, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	0018      	movs	r0, r3
 80015ce:	f000 f9bb 	bl	8001948 <ADC_Disable>
 80015d2:	0003      	movs	r3, r0
 80015d4:	7023      	strb	r3, [r4, #0]
 80015d6:	e003      	b.n	80015e0 <HAL_ADC_Stop_DMA+0xa8>
    }
    else
    {
      ADC_Disable(hadc);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	0018      	movs	r0, r3
 80015dc:	f000 f9b4 	bl	8001948 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80015e0:	230f      	movs	r3, #15
 80015e2:	18fb      	adds	r3, r7, r3
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d107      	bne.n	80015fa <HAL_ADC_Stop_DMA+0xc2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ee:	4a08      	ldr	r2, [pc, #32]	; (8001610 <HAL_ADC_Stop_DMA+0xd8>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	2201      	movs	r2, #1
 80015f4:	431a      	orrs	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2234      	movs	r2, #52	; 0x34
 80015fe:	2100      	movs	r1, #0
 8001600:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001602:	230f      	movs	r3, #15
 8001604:	18fb      	adds	r3, r7, r3
 8001606:	781b      	ldrb	r3, [r3, #0]
}
 8001608:	0018      	movs	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	b004      	add	sp, #16
 800160e:	bdb0      	pop	{r4, r5, r7, pc}
 8001610:	fffffefe 	.word	0xfffffefe

08001614 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800161c:	46c0      	nop			; (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	b002      	add	sp, #8
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800162c:	46c0      	nop			; (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	b002      	add	sp, #8
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800163e:	230f      	movs	r3, #15
 8001640:	18fb      	adds	r3, r7, r3
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	055b      	lsls	r3, r3, #21
 8001652:	429a      	cmp	r2, r3
 8001654:	d011      	beq.n	800167a <HAL_ADC_ConfigChannel+0x46>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165a:	2b01      	cmp	r3, #1
 800165c:	d00d      	beq.n	800167a <HAL_ADC_ConfigChannel+0x46>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	2b02      	cmp	r3, #2
 8001664:	d009      	beq.n	800167a <HAL_ADC_ConfigChannel+0x46>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166a:	2b03      	cmp	r3, #3
 800166c:	d005      	beq.n	800167a <HAL_ADC_ConfigChannel+0x46>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001672:	2b04      	cmp	r3, #4
 8001674:	d001      	beq.n	800167a <HAL_ADC_ConfigChannel+0x46>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2234      	movs	r2, #52	; 0x34
 800167e:	5c9b      	ldrb	r3, [r3, r2]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d101      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x54>
 8001684:	2302      	movs	r3, #2
 8001686:	e0d0      	b.n	800182a <HAL_ADC_ConfigChannel+0x1f6>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2234      	movs	r2, #52	; 0x34
 800168c:	2101      	movs	r1, #1
 800168e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2204      	movs	r2, #4
 8001698:	4013      	ands	r3, r2
 800169a:	d000      	beq.n	800169e <HAL_ADC_ConfigChannel+0x6a>
 800169c:	e0b4      	b.n	8001808 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4a64      	ldr	r2, [pc, #400]	; (8001834 <HAL_ADC_ConfigChannel+0x200>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d100      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x76>
 80016a8:	e082      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2201      	movs	r2, #1
 80016b6:	409a      	lsls	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	055b      	lsls	r3, r3, #21
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d037      	beq.n	800173c <HAL_ADC_ConfigChannel+0x108>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d033      	beq.n	800173c <HAL_ADC_ConfigChannel+0x108>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d02f      	beq.n	800173c <HAL_ADC_ConfigChannel+0x108>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d02b      	beq.n	800173c <HAL_ADC_ConfigChannel+0x108>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d027      	beq.n	800173c <HAL_ADC_ConfigChannel+0x108>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	2b05      	cmp	r3, #5
 80016f2:	d023      	beq.n	800173c <HAL_ADC_ConfigChannel+0x108>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	2b06      	cmp	r3, #6
 80016fa:	d01f      	beq.n	800173c <HAL_ADC_ConfigChannel+0x108>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	2b07      	cmp	r3, #7
 8001702:	d01b      	beq.n	800173c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	2107      	movs	r1, #7
 8001710:	400b      	ands	r3, r1
 8001712:	429a      	cmp	r2, r3
 8001714:	d012      	beq.n	800173c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	695a      	ldr	r2, [r3, #20]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2107      	movs	r1, #7
 8001722:	438a      	bics	r2, r1
 8001724:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6959      	ldr	r1, [r3, #20]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2207      	movs	r2, #7
 8001732:	401a      	ands	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b10      	cmp	r3, #16
 8001742:	d007      	beq.n	8001754 <HAL_ADC_ConfigChannel+0x120>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b11      	cmp	r3, #17
 800174a:	d003      	beq.n	8001754 <HAL_ADC_ConfigChannel+0x120>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b12      	cmp	r3, #18
 8001752:	d163      	bne.n	800181c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001754:	4b38      	ldr	r3, [pc, #224]	; (8001838 <HAL_ADC_ConfigChannel+0x204>)
 8001756:	6819      	ldr	r1, [r3, #0]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b10      	cmp	r3, #16
 800175e:	d009      	beq.n	8001774 <HAL_ADC_ConfigChannel+0x140>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b11      	cmp	r3, #17
 8001766:	d102      	bne.n	800176e <HAL_ADC_ConfigChannel+0x13a>
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	03db      	lsls	r3, r3, #15
 800176c:	e004      	b.n	8001778 <HAL_ADC_ConfigChannel+0x144>
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	045b      	lsls	r3, r3, #17
 8001772:	e001      	b.n	8001778 <HAL_ADC_ConfigChannel+0x144>
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	041b      	lsls	r3, r3, #16
 8001778:	4a2f      	ldr	r2, [pc, #188]	; (8001838 <HAL_ADC_ConfigChannel+0x204>)
 800177a:	430b      	orrs	r3, r1
 800177c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b10      	cmp	r3, #16
 8001784:	d14a      	bne.n	800181c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001786:	4b2d      	ldr	r3, [pc, #180]	; (800183c <HAL_ADC_ConfigChannel+0x208>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	492d      	ldr	r1, [pc, #180]	; (8001840 <HAL_ADC_ConfigChannel+0x20c>)
 800178c:	0018      	movs	r0, r3
 800178e:	f7fe fcbb 	bl	8000108 <__udivsi3>
 8001792:	0003      	movs	r3, r0
 8001794:	001a      	movs	r2, r3
 8001796:	0013      	movs	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	189b      	adds	r3, r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017a0:	e002      	b.n	80017a8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f9      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x16e>
 80017ae:	e035      	b.n	800181c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2101      	movs	r1, #1
 80017bc:	4099      	lsls	r1, r3
 80017be:	000b      	movs	r3, r1
 80017c0:	43d9      	mvns	r1, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	400a      	ands	r2, r1
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b10      	cmp	r3, #16
 80017d0:	d007      	beq.n	80017e2 <HAL_ADC_ConfigChannel+0x1ae>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b11      	cmp	r3, #17
 80017d8:	d003      	beq.n	80017e2 <HAL_ADC_ConfigChannel+0x1ae>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b12      	cmp	r3, #18
 80017e0:	d11c      	bne.n	800181c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_ADC_ConfigChannel+0x204>)
 80017e4:	6819      	ldr	r1, [r3, #0]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b10      	cmp	r3, #16
 80017ec:	d007      	beq.n	80017fe <HAL_ADC_ConfigChannel+0x1ca>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b11      	cmp	r3, #17
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x1c6>
 80017f6:	4b13      	ldr	r3, [pc, #76]	; (8001844 <HAL_ADC_ConfigChannel+0x210>)
 80017f8:	e002      	b.n	8001800 <HAL_ADC_ConfigChannel+0x1cc>
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <HAL_ADC_ConfigChannel+0x214>)
 80017fc:	e000      	b.n	8001800 <HAL_ADC_ConfigChannel+0x1cc>
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <HAL_ADC_ConfigChannel+0x218>)
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <HAL_ADC_ConfigChannel+0x204>)
 8001802:	400b      	ands	r3, r1
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e009      	b.n	800181c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180c:	2220      	movs	r2, #32
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001814:	230f      	movs	r3, #15
 8001816:	18fb      	adds	r3, r7, r3
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2234      	movs	r2, #52	; 0x34
 8001820:	2100      	movs	r1, #0
 8001822:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001824:	230f      	movs	r3, #15
 8001826:	18fb      	adds	r3, r7, r3
 8001828:	781b      	ldrb	r3, [r3, #0]
}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b004      	add	sp, #16
 8001830:	bd80      	pop	{r7, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	00001001 	.word	0x00001001
 8001838:	40012708 	.word	0x40012708
 800183c:	20000024 	.word	0x20000024
 8001840:	000f4240 	.word	0x000f4240
 8001844:	ffbfffff 	.word	0xffbfffff
 8001848:	feffffff 	.word	0xfeffffff
 800184c:	ff7fffff 	.word	0xff7fffff

08001850 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2203      	movs	r2, #3
 8001868:	4013      	ands	r3, r2
 800186a:	2b01      	cmp	r3, #1
 800186c:	d112      	bne.n	8001894 <ADC_Enable+0x44>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2201      	movs	r2, #1
 8001876:	4013      	ands	r3, r2
 8001878:	2b01      	cmp	r3, #1
 800187a:	d009      	beq.n	8001890 <ADC_Enable+0x40>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	021b      	lsls	r3, r3, #8
 8001886:	401a      	ands	r2, r3
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	429a      	cmp	r2, r3
 800188e:	d101      	bne.n	8001894 <ADC_Enable+0x44>
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <ADC_Enable+0x46>
 8001894:	2300      	movs	r3, #0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d14b      	bne.n	8001932 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a26      	ldr	r2, [pc, #152]	; (800193c <ADC_Enable+0xec>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	d00d      	beq.n	80018c2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018aa:	2210      	movs	r2, #16
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b6:	2201      	movs	r2, #1
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e038      	b.n	8001934 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2101      	movs	r1, #1
 80018ce:	430a      	orrs	r2, r1
 80018d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018d2:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <ADC_Enable+0xf0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	491b      	ldr	r1, [pc, #108]	; (8001944 <ADC_Enable+0xf4>)
 80018d8:	0018      	movs	r0, r3
 80018da:	f7fe fc15 	bl	8000108 <__udivsi3>
 80018de:	0003      	movs	r3, r0
 80018e0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018e2:	e002      	b.n	80018ea <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f9      	bne.n	80018e4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80018f0:	f7ff fc34 	bl	800115c <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018f8:	e014      	b.n	8001924 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018fa:	f7ff fc2f 	bl	800115c <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d90d      	bls.n	8001924 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190c:	2210      	movs	r2, #16
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001918:	2201      	movs	r2, #1
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e007      	b.n	8001934 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2201      	movs	r2, #1
 800192c:	4013      	ands	r3, r2
 800192e:	2b01      	cmp	r3, #1
 8001930:	d1e3      	bne.n	80018fa <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	0018      	movs	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	b004      	add	sp, #16
 800193a:	bd80      	pop	{r7, pc}
 800193c:	80000017 	.word	0x80000017
 8001940:	20000024 	.word	0x20000024
 8001944:	000f4240 	.word	0x000f4240

08001948 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2203      	movs	r2, #3
 800195c:	4013      	ands	r3, r2
 800195e:	2b01      	cmp	r3, #1
 8001960:	d112      	bne.n	8001988 <ADC_Disable+0x40>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2201      	movs	r2, #1
 800196a:	4013      	ands	r3, r2
 800196c:	2b01      	cmp	r3, #1
 800196e:	d009      	beq.n	8001984 <ADC_Disable+0x3c>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	401a      	ands	r2, r3
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	429a      	cmp	r2, r3
 8001982:	d101      	bne.n	8001988 <ADC_Disable+0x40>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <ADC_Disable+0x42>
 8001988:	2300      	movs	r3, #0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d041      	beq.n	8001a12 <ADC_Disable+0xca>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2205      	movs	r2, #5
 8001996:	4013      	ands	r3, r2
 8001998:	2b01      	cmp	r3, #1
 800199a:	d110      	bne.n	80019be <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2102      	movs	r1, #2
 80019a8:	430a      	orrs	r2, r1
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2203      	movs	r2, #3
 80019b2:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019b4:	f7ff fbd2 	bl	800115c <HAL_GetTick>
 80019b8:	0003      	movs	r3, r0
 80019ba:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019bc:	e022      	b.n	8001a04 <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c2:	2210      	movs	r2, #16
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ce:	2201      	movs	r2, #1
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e01c      	b.n	8001a14 <ADC_Disable+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019da:	f7ff fbbf 	bl	800115c <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d90d      	bls.n	8001a04 <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ec:	2210      	movs	r2, #16
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f8:	2201      	movs	r2, #1
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e007      	b.n	8001a14 <ADC_Disable+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d0e3      	beq.n	80019da <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	0018      	movs	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b004      	add	sp, #16
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2204      	movs	r2, #4
 8001a30:	4013      	ands	r3, r2
 8001a32:	d034      	beq.n	8001a9e <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2204      	movs	r2, #4
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d10d      	bne.n	8001a5e <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2202      	movs	r2, #2
 8001a4a:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001a4c:	d107      	bne.n	8001a5e <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2110      	movs	r1, #16
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a5e:	f7ff fb7d 	bl	800115c <HAL_GetTick>
 8001a62:	0003      	movs	r3, r0
 8001a64:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001a66:	e014      	b.n	8001a92 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001a68:	f7ff fb78 	bl	800115c <HAL_GetTick>
 8001a6c:	0002      	movs	r2, r0
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d90d      	bls.n	8001a92 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7a:	2210      	movs	r2, #16
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a86:	2201      	movs	r2, #1
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e006      	b.n	8001aa0 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2204      	movs	r2, #4
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d1e4      	bne.n	8001a68 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b004      	add	sp, #16
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aba:	2250      	movs	r2, #80	; 0x50
 8001abc:	4013      	ands	r3, r2
 8001abe:	d140      	bne.n	8001b42 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac4:	2280      	movs	r2, #128	; 0x80
 8001ac6:	0092      	lsls	r2, r2, #2
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	23c0      	movs	r3, #192	; 0xc0
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d12d      	bne.n	8001b38 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d129      	bne.n	8001b38 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2208      	movs	r2, #8
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d122      	bne.n	8001b38 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2204      	movs	r2, #4
 8001afa:	4013      	ands	r3, r2
 8001afc:	d110      	bne.n	8001b20 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	210c      	movs	r1, #12
 8001b0a:	438a      	bics	r2, r1
 8001b0c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b12:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <ADC_DMAConvCplt+0xb0>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	2201      	movs	r2, #1
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	639a      	str	r2, [r3, #56]	; 0x38
 8001b1e:	e00b      	b.n	8001b38 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b24:	2220      	movs	r2, #32
 8001b26:	431a      	orrs	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b30:	2201      	movs	r2, #1
 8001b32:	431a      	orrs	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f7fe fdf2 	bl	8000724 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001b40:	e005      	b.n	8001b4e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	0010      	movs	r0, r2
 8001b4c:	4798      	blx	r3
}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b004      	add	sp, #16
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	fffffefe 	.word	0xfffffefe

08001b5c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f7ff fd51 	bl	8001614 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b004      	add	sp, #16
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8c:	2240      	movs	r2, #64	; 0x40
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b98:	2204      	movs	r2, #4
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f7ff fd3e 	bl	8001624 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ba8:	46c0      	nop			; (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b004      	add	sp, #16
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb8:	2317      	movs	r3, #23
 8001bba:	18fb      	adds	r3, r7, r3
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2234      	movs	r2, #52	; 0x34
 8001bcc:	5c9b      	ldrb	r3, [r3, r2]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_ADCEx_Calibration_Start+0x26>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e084      	b.n	8001ce0 <HAL_ADCEx_Calibration_Start+0x130>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2234      	movs	r2, #52	; 0x34
 8001bda:	2101      	movs	r1, #1
 8001bdc:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2203      	movs	r2, #3
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d112      	bne.n	8001c12 <HAL_ADCEx_Calibration_Start+0x62>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d009      	beq.n	8001c0e <HAL_ADCEx_Calibration_Start+0x5e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	021b      	lsls	r3, r3, #8
 8001c04:	401a      	ands	r2, r3
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADCEx_Calibration_Start+0x62>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <HAL_ADCEx_Calibration_Start+0x64>
 8001c12:	2300      	movs	r3, #0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d152      	bne.n	8001cbe <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1c:	4a32      	ldr	r2, [pc, #200]	; (8001ce8 <HAL_ADCEx_Calibration_Start+0x138>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2202      	movs	r2, #2
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2203      	movs	r2, #3
 8001c30:	4013      	ands	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2103      	movs	r1, #3
 8001c40:	438a      	bics	r2, r1
 8001c42:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2180      	movs	r1, #128	; 0x80
 8001c50:	0609      	lsls	r1, r1, #24
 8001c52:	430a      	orrs	r2, r1
 8001c54:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001c56:	f7ff fa81 	bl	800115c <HAL_GetTick>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001c5e:	e014      	b.n	8001c8a <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c60:	f7ff fa7c 	bl	800115c <HAL_GetTick>
 8001c64:	0002      	movs	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d90d      	bls.n	8001c8a <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c72:	2212      	movs	r2, #18
 8001c74:	4393      	bics	r3, r2
 8001c76:	2210      	movs	r2, #16
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2234      	movs	r2, #52	; 0x34
 8001c82:	2100      	movs	r1, #0
 8001c84:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e02a      	b.n	8001ce0 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	0fdb      	lsrs	r3, r3, #31
 8001c92:	07da      	lsls	r2, r3, #31
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	061b      	lsls	r3, r3, #24
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d0e1      	beq.n	8001c60 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68d9      	ldr	r1, [r3, #12]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	4393      	bics	r3, r2
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	639a      	str	r2, [r3, #56]	; 0x38
 8001cbc:	e009      	b.n	8001cd2 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001cca:	2317      	movs	r3, #23
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2234      	movs	r2, #52	; 0x34
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001cda:	2317      	movs	r3, #23
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	781b      	ldrb	r3, [r3, #0]
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b006      	add	sp, #24
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	fffffefd 	.word	0xfffffefd

08001cec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e0f0      	b.n	8001ee0 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2220      	movs	r2, #32
 8001d02:	5c9b      	ldrb	r3, [r3, r2]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d103      	bne.n	8001d12 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f7ff f87f 	bl	8000e10 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2102      	movs	r1, #2
 8001d1e:	438a      	bics	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d22:	f7ff fa1b 	bl	800115c <HAL_GetTick>
 8001d26:	0003      	movs	r3, r0
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d2a:	e013      	b.n	8001d54 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d2c:	f7ff fa16 	bl	800115c <HAL_GetTick>
 8001d30:	0002      	movs	r2, r0
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b0a      	cmp	r3, #10
 8001d38:	d90c      	bls.n	8001d54 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	2280      	movs	r2, #128	; 0x80
 8001d40:	0292      	lsls	r2, r2, #10
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	2105      	movs	r1, #5
 8001d4e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0c5      	b.n	8001ee0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d1e5      	bne.n	8001d2c <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d70:	f7ff f9f4 	bl	800115c <HAL_GetTick>
 8001d74:	0003      	movs	r3, r0
 8001d76:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d78:	e013      	b.n	8001da2 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d7a:	f7ff f9ef 	bl	800115c <HAL_GetTick>
 8001d7e:	0002      	movs	r2, r0
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b0a      	cmp	r3, #10
 8001d86:	d90c      	bls.n	8001da2 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	2280      	movs	r2, #128	; 0x80
 8001d8e:	0292      	lsls	r2, r2, #10
 8001d90:	431a      	orrs	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	2105      	movs	r1, #5
 8001d9c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e09e      	b.n	8001ee0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	4013      	ands	r3, r2
 8001dac:	d0e5      	beq.n	8001d7a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	7e1b      	ldrb	r3, [r3, #24]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d108      	bne.n	8001dc8 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2180      	movs	r1, #128	; 0x80
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	e007      	b.n	8001dd8 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2180      	movs	r1, #128	; 0x80
 8001dd4:	438a      	bics	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7e5b      	ldrb	r3, [r3, #25]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d108      	bne.n	8001df2 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2140      	movs	r1, #64	; 0x40
 8001dec:	430a      	orrs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	e007      	b.n	8001e02 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2140      	movs	r1, #64	; 0x40
 8001dfe:	438a      	bics	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7e9b      	ldrb	r3, [r3, #26]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d108      	bne.n	8001e1c <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2120      	movs	r1, #32
 8001e16:	430a      	orrs	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	e007      	b.n	8001e2c <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2120      	movs	r1, #32
 8001e28:	438a      	bics	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7edb      	ldrb	r3, [r3, #27]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d108      	bne.n	8001e46 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2110      	movs	r1, #16
 8001e40:	438a      	bics	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	e007      	b.n	8001e56 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2110      	movs	r1, #16
 8001e52:	430a      	orrs	r2, r1
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7f1b      	ldrb	r3, [r3, #28]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d108      	bne.n	8001e70 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2108      	movs	r1, #8
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	e007      	b.n	8001e80 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2108      	movs	r1, #8
 8001e7c:	438a      	bics	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7f5b      	ldrb	r3, [r3, #29]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d108      	bne.n	8001e9a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2104      	movs	r1, #4
 8001e94:	430a      	orrs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	e007      	b.n	8001eaa <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	438a      	bics	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	0011      	movs	r1, r2
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	1e5a      	subs	r2, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	2101      	movs	r1, #1
 8001edc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b004      	add	sp, #16
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	0002      	movs	r2, r0
 8001ef0:	1dfb      	adds	r3, r7, #7
 8001ef2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ef4:	1dfb      	adds	r3, r7, #7
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8001efa:	d809      	bhi.n	8001f10 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efc:	1dfb      	adds	r3, r7, #7
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	001a      	movs	r2, r3
 8001f02:	231f      	movs	r3, #31
 8001f04:	401a      	ands	r2, r3
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <__NVIC_EnableIRQ+0x30>)
 8001f08:	2101      	movs	r1, #1
 8001f0a:	4091      	lsls	r1, r2
 8001f0c:	000a      	movs	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]
  }
}
 8001f10:	46c0      	nop			; (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b002      	add	sp, #8
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	e000e100 	.word	0xe000e100

08001f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	0002      	movs	r2, r0
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	1dfb      	adds	r3, r7, #7
 8001f28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f2a:	1dfb      	adds	r3, r7, #7
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8001f30:	d828      	bhi.n	8001f84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f32:	4a2f      	ldr	r2, [pc, #188]	; (8001ff0 <__NVIC_SetPriority+0xd4>)
 8001f34:	1dfb      	adds	r3, r7, #7
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	b25b      	sxtb	r3, r3
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	33c0      	adds	r3, #192	; 0xc0
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	589b      	ldr	r3, [r3, r2]
 8001f42:	1dfa      	adds	r2, r7, #7
 8001f44:	7812      	ldrb	r2, [r2, #0]
 8001f46:	0011      	movs	r1, r2
 8001f48:	2203      	movs	r2, #3
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	00d2      	lsls	r2, r2, #3
 8001f4e:	21ff      	movs	r1, #255	; 0xff
 8001f50:	4091      	lsls	r1, r2
 8001f52:	000a      	movs	r2, r1
 8001f54:	43d2      	mvns	r2, r2
 8001f56:	401a      	ands	r2, r3
 8001f58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	019b      	lsls	r3, r3, #6
 8001f5e:	22ff      	movs	r2, #255	; 0xff
 8001f60:	401a      	ands	r2, r3
 8001f62:	1dfb      	adds	r3, r7, #7
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	0018      	movs	r0, r3
 8001f68:	2303      	movs	r3, #3
 8001f6a:	4003      	ands	r3, r0
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f70:	481f      	ldr	r0, [pc, #124]	; (8001ff0 <__NVIC_SetPriority+0xd4>)
 8001f72:	1dfb      	adds	r3, r7, #7
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b25b      	sxtb	r3, r3
 8001f78:	089b      	lsrs	r3, r3, #2
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	33c0      	adds	r3, #192	; 0xc0
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f82:	e031      	b.n	8001fe8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f84:	4a1b      	ldr	r2, [pc, #108]	; (8001ff4 <__NVIC_SetPriority+0xd8>)
 8001f86:	1dfb      	adds	r3, r7, #7
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	230f      	movs	r3, #15
 8001f8e:	400b      	ands	r3, r1
 8001f90:	3b08      	subs	r3, #8
 8001f92:	089b      	lsrs	r3, r3, #2
 8001f94:	3306      	adds	r3, #6
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	18d3      	adds	r3, r2, r3
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	1dfa      	adds	r2, r7, #7
 8001fa0:	7812      	ldrb	r2, [r2, #0]
 8001fa2:	0011      	movs	r1, r2
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	00d2      	lsls	r2, r2, #3
 8001faa:	21ff      	movs	r1, #255	; 0xff
 8001fac:	4091      	lsls	r1, r2
 8001fae:	000a      	movs	r2, r1
 8001fb0:	43d2      	mvns	r2, r2
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	019b      	lsls	r3, r3, #6
 8001fba:	22ff      	movs	r2, #255	; 0xff
 8001fbc:	401a      	ands	r2, r3
 8001fbe:	1dfb      	adds	r3, r7, #7
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	4003      	ands	r3, r0
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fcc:	4809      	ldr	r0, [pc, #36]	; (8001ff4 <__NVIC_SetPriority+0xd8>)
 8001fce:	1dfb      	adds	r3, r7, #7
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	001c      	movs	r4, r3
 8001fd4:	230f      	movs	r3, #15
 8001fd6:	4023      	ands	r3, r4
 8001fd8:	3b08      	subs	r3, #8
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	3306      	adds	r3, #6
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	18c3      	adds	r3, r0, r3
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	601a      	str	r2, [r3, #0]
}
 8001fe8:	46c0      	nop			; (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b003      	add	sp, #12
 8001fee:	bd90      	pop	{r4, r7, pc}
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	210f      	movs	r1, #15
 8002004:	187b      	adds	r3, r7, r1
 8002006:	1c02      	adds	r2, r0, #0
 8002008:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	187b      	adds	r3, r7, r1
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	b25b      	sxtb	r3, r3
 8002012:	0011      	movs	r1, r2
 8002014:	0018      	movs	r0, r3
 8002016:	f7ff ff81 	bl	8001f1c <__NVIC_SetPriority>
}
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	46bd      	mov	sp, r7
 800201e:	b004      	add	sp, #16
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	0002      	movs	r2, r0
 800202a:	1dfb      	adds	r3, r7, #7
 800202c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	b25b      	sxtb	r3, r3
 8002034:	0018      	movs	r0, r3
 8002036:	f7ff ff57 	bl	8001ee8 <__NVIC_EnableIRQ>
}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	46bd      	mov	sp, r7
 800203e:	b002      	add	sp, #8
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e036      	b.n	80020c8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2221      	movs	r2, #33	; 0x21
 800205e:	2102      	movs	r1, #2
 8002060:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4a18      	ldr	r2, [pc, #96]	; (80020d0 <HAL_DMA_Init+0x8c>)
 800206e:	4013      	ands	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800207a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002086:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002092:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	0018      	movs	r0, r3
 80020ac:	f000 f97e 	bl	80023ac <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2221      	movs	r2, #33	; 0x21
 80020ba:	2101      	movs	r1, #1
 80020bc:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2220      	movs	r2, #32
 80020c2:	2100      	movs	r1, #0
 80020c4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}  
 80020c8:	0018      	movs	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	b004      	add	sp, #16
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	ffffc00f 	.word	0xffffc00f

080020d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80020e2:	2317      	movs	r3, #23
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2220      	movs	r2, #32
 80020ee:	5c9b      	ldrb	r3, [r3, r2]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_DMA_Start_IT+0x24>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e04f      	b.n	8002198 <HAL_DMA_Start_IT+0xc4>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2220      	movs	r2, #32
 80020fc:	2101      	movs	r1, #1
 80020fe:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2221      	movs	r2, #33	; 0x21
 8002104:	5c9b      	ldrb	r3, [r3, r2]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b01      	cmp	r3, #1
 800210a:	d13a      	bne.n	8002182 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2221      	movs	r2, #33	; 0x21
 8002110:	2102      	movs	r1, #2
 8002112:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2101      	movs	r1, #1
 8002126:	438a      	bics	r2, r1
 8002128:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 f90f 	bl	8002354 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213a:	2b00      	cmp	r3, #0
 800213c:	d008      	beq.n	8002150 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	210e      	movs	r1, #14
 800214a:	430a      	orrs	r2, r1
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	e00f      	b.n	8002170 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	210a      	movs	r1, #10
 800215c:	430a      	orrs	r2, r1
 800215e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2104      	movs	r1, #4
 800216c:	438a      	bics	r2, r1
 800216e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2101      	movs	r1, #1
 800217c:	430a      	orrs	r2, r1
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	e007      	b.n	8002192 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2220      	movs	r2, #32
 8002186:	2100      	movs	r1, #0
 8002188:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800218a:	2317      	movs	r3, #23
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	2202      	movs	r2, #2
 8002190:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002192:	2317      	movs	r3, #23
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	781b      	ldrb	r3, [r3, #0]
} 
 8002198:	0018      	movs	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	b006      	add	sp, #24
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2221      	movs	r2, #33	; 0x21
 80021ac:	5c9b      	ldrb	r3, [r3, r2]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d008      	beq.n	80021c6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2204      	movs	r2, #4
 80021b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2220      	movs	r2, #32
 80021be:	2100      	movs	r1, #0
 80021c0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e020      	b.n	8002208 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	210e      	movs	r1, #14
 80021d2:	438a      	bics	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2101      	movs	r1, #1
 80021e2:	438a      	bics	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ee:	2101      	movs	r1, #1
 80021f0:	4091      	lsls	r1, r2
 80021f2:	000a      	movs	r2, r1
 80021f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2221      	movs	r2, #33	; 0x21
 80021fa:	2101      	movs	r1, #1
 80021fc:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2220      	movs	r2, #32
 8002202:	2100      	movs	r1, #0
 8002204:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	0018      	movs	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	b002      	add	sp, #8
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	2204      	movs	r2, #4
 800222e:	409a      	lsls	r2, r3
 8002230:	0013      	movs	r3, r2
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4013      	ands	r3, r2
 8002236:	d024      	beq.n	8002282 <HAL_DMA_IRQHandler+0x72>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2204      	movs	r2, #4
 800223c:	4013      	ands	r3, r2
 800223e:	d020      	beq.n	8002282 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2220      	movs	r2, #32
 8002248:	4013      	ands	r3, r2
 800224a:	d107      	bne.n	800225c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2104      	movs	r1, #4
 8002258:	438a      	bics	r2, r1
 800225a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002264:	2104      	movs	r1, #4
 8002266:	4091      	lsls	r1, r2
 8002268:	000a      	movs	r2, r1
 800226a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d100      	bne.n	8002276 <HAL_DMA_IRQHandler+0x66>
 8002274:	e06a      	b.n	800234c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	0010      	movs	r0, r2
 800227e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002280:	e064      	b.n	800234c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	2202      	movs	r2, #2
 8002288:	409a      	lsls	r2, r3
 800228a:	0013      	movs	r3, r2
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4013      	ands	r3, r2
 8002290:	d02b      	beq.n	80022ea <HAL_DMA_IRQHandler+0xda>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2202      	movs	r2, #2
 8002296:	4013      	ands	r3, r2
 8002298:	d027      	beq.n	80022ea <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2220      	movs	r2, #32
 80022a2:	4013      	ands	r3, r2
 80022a4:	d10b      	bne.n	80022be <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	210a      	movs	r1, #10
 80022b2:	438a      	bics	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2221      	movs	r2, #33	; 0x21
 80022ba:	2101      	movs	r1, #1
 80022bc:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	2102      	movs	r1, #2
 80022c8:	4091      	lsls	r1, r2
 80022ca:	000a      	movs	r2, r1
 80022cc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2220      	movs	r2, #32
 80022d2:	2100      	movs	r1, #0
 80022d4:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d036      	beq.n	800234c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	0010      	movs	r0, r2
 80022e6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80022e8:	e030      	b.n	800234c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	2208      	movs	r2, #8
 80022f0:	409a      	lsls	r2, r3
 80022f2:	0013      	movs	r3, r2
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4013      	ands	r3, r2
 80022f8:	d028      	beq.n	800234c <HAL_DMA_IRQHandler+0x13c>
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2208      	movs	r2, #8
 80022fe:	4013      	ands	r3, r2
 8002300:	d024      	beq.n	800234c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	210e      	movs	r1, #14
 800230e:	438a      	bics	r2, r1
 8002310:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231a:	2101      	movs	r1, #1
 800231c:	4091      	lsls	r1, r2
 800231e:	000a      	movs	r2, r1
 8002320:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2221      	movs	r2, #33	; 0x21
 800232c:	2101      	movs	r1, #1
 800232e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2220      	movs	r2, #32
 8002334:	2100      	movs	r1, #0
 8002336:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	0010      	movs	r0, r2
 8002348:	4798      	blx	r3
    }
   }
}  
 800234a:	e7ff      	b.n	800234c <HAL_DMA_IRQHandler+0x13c>
 800234c:	46c0      	nop			; (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	b004      	add	sp, #16
 8002352:	bd80      	pop	{r7, pc}

08002354 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236a:	2101      	movs	r1, #1
 800236c:	4091      	lsls	r1, r2
 800236e:	000a      	movs	r2, r1
 8002370:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b10      	cmp	r3, #16
 8002380:	d108      	bne.n	8002394 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002392:	e007      	b.n	80023a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	60da      	str	r2, [r3, #12]
}
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b004      	add	sp, #16
 80023aa:	bd80      	pop	{r7, pc}

080023ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a08      	ldr	r2, [pc, #32]	; (80023dc <DMA_CalcBaseAndBitshift+0x30>)
 80023ba:	4694      	mov	ip, r2
 80023bc:	4463      	add	r3, ip
 80023be:	2114      	movs	r1, #20
 80023c0:	0018      	movs	r0, r3
 80023c2:	f7fd fea1 	bl	8000108 <__udivsi3>
 80023c6:	0003      	movs	r3, r0
 80023c8:	009a      	lsls	r2, r3, #2
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a03      	ldr	r2, [pc, #12]	; (80023e0 <DMA_CalcBaseAndBitshift+0x34>)
 80023d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	bffdfff8 	.word	0xbffdfff8
 80023e0:	40020000 	.word	0x40020000

080023e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f2:	e155      	b.n	80026a0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2101      	movs	r1, #1
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4091      	lsls	r1, r2
 80023fe:	000a      	movs	r2, r1
 8002400:	4013      	ands	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d100      	bne.n	800240c <HAL_GPIO_Init+0x28>
 800240a:	e146      	b.n	800269a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0x38>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b12      	cmp	r3, #18
 800241a:	d123      	bne.n	8002464 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	08da      	lsrs	r2, r3, #3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3208      	adds	r2, #8
 8002424:	0092      	lsls	r2, r2, #2
 8002426:	58d3      	ldr	r3, [r2, r3]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2207      	movs	r2, #7
 800242e:	4013      	ands	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	220f      	movs	r2, #15
 8002434:	409a      	lsls	r2, r3
 8002436:	0013      	movs	r3, r2
 8002438:	43da      	mvns	r2, r3
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2107      	movs	r1, #7
 8002448:	400b      	ands	r3, r1
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	409a      	lsls	r2, r3
 800244e:	0013      	movs	r3, r2
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	08da      	lsrs	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3208      	adds	r2, #8
 800245e:	0092      	lsls	r2, r2, #2
 8002460:	6939      	ldr	r1, [r7, #16]
 8002462:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	2203      	movs	r2, #3
 8002470:	409a      	lsls	r2, r3
 8002472:	0013      	movs	r3, r2
 8002474:	43da      	mvns	r2, r3
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2203      	movs	r2, #3
 8002482:	401a      	ands	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	409a      	lsls	r2, r3
 800248a:	0013      	movs	r3, r2
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d00b      	beq.n	80024b8 <HAL_GPIO_Init+0xd4>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d007      	beq.n	80024b8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024ac:	2b11      	cmp	r3, #17
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b12      	cmp	r3, #18
 80024b6:	d130      	bne.n	800251a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	409a      	lsls	r2, r3
 80024c6:	0013      	movs	r3, r2
 80024c8:	43da      	mvns	r2, r3
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	409a      	lsls	r2, r3
 80024da:	0013      	movs	r3, r2
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ee:	2201      	movs	r2, #1
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
 80024f4:	0013      	movs	r3, r2
 80024f6:	43da      	mvns	r2, r3
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4013      	ands	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	2201      	movs	r2, #1
 8002506:	401a      	ands	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	409a      	lsls	r2, r3
 800250c:	0013      	movs	r3, r2
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	2203      	movs	r2, #3
 8002526:	409a      	lsls	r2, r3
 8002528:	0013      	movs	r3, r2
 800252a:	43da      	mvns	r2, r3
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	409a      	lsls	r2, r3
 800253c:	0013      	movs	r3, r2
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	055b      	lsls	r3, r3, #21
 8002552:	4013      	ands	r3, r2
 8002554:	d100      	bne.n	8002558 <HAL_GPIO_Init+0x174>
 8002556:	e0a0      	b.n	800269a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002558:	4b57      	ldr	r3, [pc, #348]	; (80026b8 <HAL_GPIO_Init+0x2d4>)
 800255a:	699a      	ldr	r2, [r3, #24]
 800255c:	4b56      	ldr	r3, [pc, #344]	; (80026b8 <HAL_GPIO_Init+0x2d4>)
 800255e:	2101      	movs	r1, #1
 8002560:	430a      	orrs	r2, r1
 8002562:	619a      	str	r2, [r3, #24]
 8002564:	4b54      	ldr	r3, [pc, #336]	; (80026b8 <HAL_GPIO_Init+0x2d4>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2201      	movs	r2, #1
 800256a:	4013      	ands	r3, r2
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002570:	4a52      	ldr	r2, [pc, #328]	; (80026bc <HAL_GPIO_Init+0x2d8>)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	3302      	adds	r3, #2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	589b      	ldr	r3, [r3, r2]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2203      	movs	r2, #3
 8002582:	4013      	ands	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	220f      	movs	r2, #15
 8002588:	409a      	lsls	r2, r3
 800258a:	0013      	movs	r3, r2
 800258c:	43da      	mvns	r2, r3
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	2390      	movs	r3, #144	; 0x90
 8002598:	05db      	lsls	r3, r3, #23
 800259a:	429a      	cmp	r2, r3
 800259c:	d019      	beq.n	80025d2 <HAL_GPIO_Init+0x1ee>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a47      	ldr	r2, [pc, #284]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d013      	beq.n	80025ce <HAL_GPIO_Init+0x1ea>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a46      	ldr	r2, [pc, #280]	; (80026c4 <HAL_GPIO_Init+0x2e0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00d      	beq.n	80025ca <HAL_GPIO_Init+0x1e6>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a45      	ldr	r2, [pc, #276]	; (80026c8 <HAL_GPIO_Init+0x2e4>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d007      	beq.n	80025c6 <HAL_GPIO_Init+0x1e2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a44      	ldr	r2, [pc, #272]	; (80026cc <HAL_GPIO_Init+0x2e8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d101      	bne.n	80025c2 <HAL_GPIO_Init+0x1de>
 80025be:	2304      	movs	r3, #4
 80025c0:	e008      	b.n	80025d4 <HAL_GPIO_Init+0x1f0>
 80025c2:	2305      	movs	r3, #5
 80025c4:	e006      	b.n	80025d4 <HAL_GPIO_Init+0x1f0>
 80025c6:	2303      	movs	r3, #3
 80025c8:	e004      	b.n	80025d4 <HAL_GPIO_Init+0x1f0>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e002      	b.n	80025d4 <HAL_GPIO_Init+0x1f0>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_GPIO_Init+0x1f0>
 80025d2:	2300      	movs	r3, #0
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	2103      	movs	r1, #3
 80025d8:	400a      	ands	r2, r1
 80025da:	0092      	lsls	r2, r2, #2
 80025dc:	4093      	lsls	r3, r2
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025e4:	4935      	ldr	r1, [pc, #212]	; (80026bc <HAL_GPIO_Init+0x2d8>)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	089b      	lsrs	r3, r3, #2
 80025ea:	3302      	adds	r3, #2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f2:	4b37      	ldr	r3, [pc, #220]	; (80026d0 <HAL_GPIO_Init+0x2ec>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	43da      	mvns	r2, r3
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	025b      	lsls	r3, r3, #9
 800260a:	4013      	ands	r3, r2
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002616:	4b2e      	ldr	r3, [pc, #184]	; (80026d0 <HAL_GPIO_Init+0x2ec>)
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800261c:	4b2c      	ldr	r3, [pc, #176]	; (80026d0 <HAL_GPIO_Init+0x2ec>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	43da      	mvns	r2, r3
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	029b      	lsls	r3, r3, #10
 8002634:	4013      	ands	r3, r2
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002640:	4b23      	ldr	r3, [pc, #140]	; (80026d0 <HAL_GPIO_Init+0x2ec>)
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002646:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <HAL_GPIO_Init+0x2ec>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	43da      	mvns	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	035b      	lsls	r3, r3, #13
 800265e:	4013      	ands	r3, r2
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800266a:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <HAL_GPIO_Init+0x2ec>)
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002670:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <HAL_GPIO_Init+0x2ec>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	43da      	mvns	r2, r3
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	039b      	lsls	r3, r3, #14
 8002688:	4013      	ands	r3, r2
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4313      	orrs	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <HAL_GPIO_Init+0x2ec>)
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	3301      	adds	r3, #1
 800269e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	40da      	lsrs	r2, r3
 80026a8:	1e13      	subs	r3, r2, #0
 80026aa:	d000      	beq.n	80026ae <HAL_GPIO_Init+0x2ca>
 80026ac:	e6a2      	b.n	80023f4 <HAL_GPIO_Init+0x10>
  } 
}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b006      	add	sp, #24
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40010000 	.word	0x40010000
 80026c0:	48000400 	.word	0x48000400
 80026c4:	48000800 	.word	0x48000800
 80026c8:	48000c00 	.word	0x48000c00
 80026cc:	48001000 	.word	0x48001000
 80026d0:	40010400 	.word	0x40010400

080026d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	0008      	movs	r0, r1
 80026de:	0011      	movs	r1, r2
 80026e0:	1cbb      	adds	r3, r7, #2
 80026e2:	1c02      	adds	r2, r0, #0
 80026e4:	801a      	strh	r2, [r3, #0]
 80026e6:	1c7b      	adds	r3, r7, #1
 80026e8:	1c0a      	adds	r2, r1, #0
 80026ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026ec:	1c7b      	adds	r3, r7, #1
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d004      	beq.n	80026fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026f4:	1cbb      	adds	r3, r7, #2
 80026f6:	881a      	ldrh	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026fc:	e003      	b.n	8002706 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026fe:	1cbb      	adds	r3, r7, #2
 8002700:	881a      	ldrh	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	46bd      	mov	sp, r7
 800270a:	b002      	add	sp, #8
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	000a      	movs	r2, r1
 8002718:	1cbb      	adds	r3, r7, #2
 800271a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	1cba      	adds	r2, r7, #2
 8002722:	8812      	ldrh	r2, [r2, #0]
 8002724:	4013      	ands	r3, r2
 8002726:	d005      	beq.n	8002734 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002728:	1cbb      	adds	r3, r7, #2
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	041a      	lsls	r2, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002732:	e003      	b.n	800273c <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002734:	1cbb      	adds	r3, r7, #2
 8002736:	881a      	ldrh	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	619a      	str	r2, [r3, #24]
}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b002      	add	sp, #8
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d102      	bne.n	8002758 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	f000 fb76 	bl	8002e44 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2201      	movs	r2, #1
 800275e:	4013      	ands	r3, r2
 8002760:	d100      	bne.n	8002764 <HAL_RCC_OscConfig+0x20>
 8002762:	e08e      	b.n	8002882 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002764:	4bc5      	ldr	r3, [pc, #788]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	220c      	movs	r2, #12
 800276a:	4013      	ands	r3, r2
 800276c:	2b04      	cmp	r3, #4
 800276e:	d00e      	beq.n	800278e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002770:	4bc2      	ldr	r3, [pc, #776]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	220c      	movs	r2, #12
 8002776:	4013      	ands	r3, r2
 8002778:	2b08      	cmp	r3, #8
 800277a:	d117      	bne.n	80027ac <HAL_RCC_OscConfig+0x68>
 800277c:	4bbf      	ldr	r3, [pc, #764]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	23c0      	movs	r3, #192	; 0xc0
 8002782:	025b      	lsls	r3, r3, #9
 8002784:	401a      	ands	r2, r3
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	025b      	lsls	r3, r3, #9
 800278a:	429a      	cmp	r2, r3
 800278c:	d10e      	bne.n	80027ac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278e:	4bbb      	ldr	r3, [pc, #748]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	029b      	lsls	r3, r3, #10
 8002796:	4013      	ands	r3, r2
 8002798:	d100      	bne.n	800279c <HAL_RCC_OscConfig+0x58>
 800279a:	e071      	b.n	8002880 <HAL_RCC_OscConfig+0x13c>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d000      	beq.n	80027a6 <HAL_RCC_OscConfig+0x62>
 80027a4:	e06c      	b.n	8002880 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	f000 fb4c 	bl	8002e44 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d107      	bne.n	80027c4 <HAL_RCC_OscConfig+0x80>
 80027b4:	4bb1      	ldr	r3, [pc, #708]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4bb0      	ldr	r3, [pc, #704]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 80027ba:	2180      	movs	r1, #128	; 0x80
 80027bc:	0249      	lsls	r1, r1, #9
 80027be:	430a      	orrs	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	e02f      	b.n	8002824 <HAL_RCC_OscConfig+0xe0>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10c      	bne.n	80027e6 <HAL_RCC_OscConfig+0xa2>
 80027cc:	4bab      	ldr	r3, [pc, #684]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4baa      	ldr	r3, [pc, #680]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 80027d2:	49ab      	ldr	r1, [pc, #684]	; (8002a80 <HAL_RCC_OscConfig+0x33c>)
 80027d4:	400a      	ands	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	4ba8      	ldr	r3, [pc, #672]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4ba7      	ldr	r3, [pc, #668]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 80027de:	49a9      	ldr	r1, [pc, #676]	; (8002a84 <HAL_RCC_OscConfig+0x340>)
 80027e0:	400a      	ands	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	e01e      	b.n	8002824 <HAL_RCC_OscConfig+0xe0>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b05      	cmp	r3, #5
 80027ec:	d10e      	bne.n	800280c <HAL_RCC_OscConfig+0xc8>
 80027ee:	4ba3      	ldr	r3, [pc, #652]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	4ba2      	ldr	r3, [pc, #648]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 80027f4:	2180      	movs	r1, #128	; 0x80
 80027f6:	02c9      	lsls	r1, r1, #11
 80027f8:	430a      	orrs	r2, r1
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	4b9f      	ldr	r3, [pc, #636]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4b9e      	ldr	r3, [pc, #632]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 8002802:	2180      	movs	r1, #128	; 0x80
 8002804:	0249      	lsls	r1, r1, #9
 8002806:	430a      	orrs	r2, r1
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	e00b      	b.n	8002824 <HAL_RCC_OscConfig+0xe0>
 800280c:	4b9b      	ldr	r3, [pc, #620]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b9a      	ldr	r3, [pc, #616]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 8002812:	499b      	ldr	r1, [pc, #620]	; (8002a80 <HAL_RCC_OscConfig+0x33c>)
 8002814:	400a      	ands	r2, r1
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	4b98      	ldr	r3, [pc, #608]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b97      	ldr	r3, [pc, #604]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 800281e:	4999      	ldr	r1, [pc, #612]	; (8002a84 <HAL_RCC_OscConfig+0x340>)
 8002820:	400a      	ands	r2, r1
 8002822:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d014      	beq.n	8002856 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7fe fc96 	bl	800115c <HAL_GetTick>
 8002830:	0003      	movs	r3, r0
 8002832:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002836:	f7fe fc91 	bl	800115c <HAL_GetTick>
 800283a:	0002      	movs	r2, r0
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b64      	cmp	r3, #100	; 0x64
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e2fd      	b.n	8002e44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002848:	4b8c      	ldr	r3, [pc, #560]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	029b      	lsls	r3, r3, #10
 8002850:	4013      	ands	r3, r2
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0xf2>
 8002854:	e015      	b.n	8002882 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7fe fc81 	bl	800115c <HAL_GetTick>
 800285a:	0003      	movs	r3, r0
 800285c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002860:	f7fe fc7c 	bl	800115c <HAL_GetTick>
 8002864:	0002      	movs	r2, r0
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b64      	cmp	r3, #100	; 0x64
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e2e8      	b.n	8002e44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002872:	4b82      	ldr	r3, [pc, #520]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	029b      	lsls	r3, r3, #10
 800287a:	4013      	ands	r3, r2
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x11c>
 800287e:	e000      	b.n	8002882 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002880:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2202      	movs	r2, #2
 8002888:	4013      	ands	r3, r2
 800288a:	d100      	bne.n	800288e <HAL_RCC_OscConfig+0x14a>
 800288c:	e06c      	b.n	8002968 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800288e:	4b7b      	ldr	r3, [pc, #492]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	220c      	movs	r2, #12
 8002894:	4013      	ands	r3, r2
 8002896:	d00e      	beq.n	80028b6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002898:	4b78      	ldr	r3, [pc, #480]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	220c      	movs	r2, #12
 800289e:	4013      	ands	r3, r2
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d11f      	bne.n	80028e4 <HAL_RCC_OscConfig+0x1a0>
 80028a4:	4b75      	ldr	r3, [pc, #468]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	23c0      	movs	r3, #192	; 0xc0
 80028aa:	025b      	lsls	r3, r3, #9
 80028ac:	401a      	ands	r2, r3
 80028ae:	2380      	movs	r3, #128	; 0x80
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d116      	bne.n	80028e4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b6:	4b71      	ldr	r3, [pc, #452]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2202      	movs	r2, #2
 80028bc:	4013      	ands	r3, r2
 80028be:	d005      	beq.n	80028cc <HAL_RCC_OscConfig+0x188>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d001      	beq.n	80028cc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e2bb      	b.n	8002e44 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	4b6b      	ldr	r3, [pc, #428]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	22f8      	movs	r2, #248	; 0xf8
 80028d2:	4393      	bics	r3, r2
 80028d4:	0019      	movs	r1, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	00da      	lsls	r2, r3, #3
 80028dc:	4b67      	ldr	r3, [pc, #412]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 80028de:	430a      	orrs	r2, r1
 80028e0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	e041      	b.n	8002968 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d024      	beq.n	8002936 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ec:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b62      	ldr	r3, [pc, #392]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 80028f2:	2101      	movs	r1, #1
 80028f4:	430a      	orrs	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7fe fc30 	bl	800115c <HAL_GetTick>
 80028fc:	0003      	movs	r3, r0
 80028fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002902:	f7fe fc2b 	bl	800115c <HAL_GetTick>
 8002906:	0002      	movs	r2, r0
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e297      	b.n	8002e44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002914:	4b59      	ldr	r3, [pc, #356]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2202      	movs	r2, #2
 800291a:	4013      	ands	r3, r2
 800291c:	d0f1      	beq.n	8002902 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291e:	4b57      	ldr	r3, [pc, #348]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	22f8      	movs	r2, #248	; 0xf8
 8002924:	4393      	bics	r3, r2
 8002926:	0019      	movs	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	00da      	lsls	r2, r3, #3
 800292e:	4b53      	ldr	r3, [pc, #332]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 8002930:	430a      	orrs	r2, r1
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	e018      	b.n	8002968 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002936:	4b51      	ldr	r3, [pc, #324]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	4b50      	ldr	r3, [pc, #320]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 800293c:	2101      	movs	r1, #1
 800293e:	438a      	bics	r2, r1
 8002940:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002942:	f7fe fc0b 	bl	800115c <HAL_GetTick>
 8002946:	0003      	movs	r3, r0
 8002948:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800294c:	f7fe fc06 	bl	800115c <HAL_GetTick>
 8002950:	0002      	movs	r2, r0
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e272      	b.n	8002e44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295e:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2202      	movs	r2, #2
 8002964:	4013      	ands	r3, r2
 8002966:	d1f1      	bne.n	800294c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2208      	movs	r2, #8
 800296e:	4013      	ands	r3, r2
 8002970:	d036      	beq.n	80029e0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d019      	beq.n	80029ae <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297a:	4b40      	ldr	r3, [pc, #256]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 800297c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800297e:	4b3f      	ldr	r3, [pc, #252]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 8002980:	2101      	movs	r1, #1
 8002982:	430a      	orrs	r2, r1
 8002984:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002986:	f7fe fbe9 	bl	800115c <HAL_GetTick>
 800298a:	0003      	movs	r3, r0
 800298c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002990:	f7fe fbe4 	bl	800115c <HAL_GetTick>
 8002994:	0002      	movs	r2, r0
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e250      	b.n	8002e44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a2:	4b36      	ldr	r3, [pc, #216]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	2202      	movs	r2, #2
 80029a8:	4013      	ands	r3, r2
 80029aa:	d0f1      	beq.n	8002990 <HAL_RCC_OscConfig+0x24c>
 80029ac:	e018      	b.n	80029e0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ae:	4b33      	ldr	r3, [pc, #204]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 80029b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029b2:	4b32      	ldr	r3, [pc, #200]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 80029b4:	2101      	movs	r1, #1
 80029b6:	438a      	bics	r2, r1
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ba:	f7fe fbcf 	bl	800115c <HAL_GetTick>
 80029be:	0003      	movs	r3, r0
 80029c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c4:	f7fe fbca 	bl	800115c <HAL_GetTick>
 80029c8:	0002      	movs	r2, r0
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e236      	b.n	8002e44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d6:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	2202      	movs	r2, #2
 80029dc:	4013      	ands	r3, r2
 80029de:	d1f1      	bne.n	80029c4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2204      	movs	r2, #4
 80029e6:	4013      	ands	r3, r2
 80029e8:	d100      	bne.n	80029ec <HAL_RCC_OscConfig+0x2a8>
 80029ea:	e0b5      	b.n	8002b58 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ec:	231f      	movs	r3, #31
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f4:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	055b      	lsls	r3, r3, #21
 80029fc:	4013      	ands	r3, r2
 80029fe:	d111      	bne.n	8002a24 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a00:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 8002a02:	69da      	ldr	r2, [r3, #28]
 8002a04:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 8002a06:	2180      	movs	r1, #128	; 0x80
 8002a08:	0549      	lsls	r1, r1, #21
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	61da      	str	r2, [r3, #28]
 8002a0e:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 8002a10:	69da      	ldr	r2, [r3, #28]
 8002a12:	2380      	movs	r3, #128	; 0x80
 8002a14:	055b      	lsls	r3, r3, #21
 8002a16:	4013      	ands	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a1c:	231f      	movs	r3, #31
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	2201      	movs	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <HAL_RCC_OscConfig+0x344>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d11a      	bne.n	8002a66 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a30:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <HAL_RCC_OscConfig+0x344>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <HAL_RCC_OscConfig+0x344>)
 8002a36:	2180      	movs	r1, #128	; 0x80
 8002a38:	0049      	lsls	r1, r1, #1
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3e:	f7fe fb8d 	bl	800115c <HAL_GetTick>
 8002a42:	0003      	movs	r3, r0
 8002a44:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a48:	f7fe fb88 	bl	800115c <HAL_GetTick>
 8002a4c:	0002      	movs	r2, r0
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	; 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e1f4      	b.n	8002e44 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_OscConfig+0x344>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4013      	ands	r3, r2
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d10e      	bne.n	8002a8c <HAL_RCC_OscConfig+0x348>
 8002a6e:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 8002a70:	6a1a      	ldr	r2, [r3, #32]
 8002a72:	4b02      	ldr	r3, [pc, #8]	; (8002a7c <HAL_RCC_OscConfig+0x338>)
 8002a74:	2101      	movs	r1, #1
 8002a76:	430a      	orrs	r2, r1
 8002a78:	621a      	str	r2, [r3, #32]
 8002a7a:	e035      	b.n	8002ae8 <HAL_RCC_OscConfig+0x3a4>
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	fffeffff 	.word	0xfffeffff
 8002a84:	fffbffff 	.word	0xfffbffff
 8002a88:	40007000 	.word	0x40007000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10c      	bne.n	8002aae <HAL_RCC_OscConfig+0x36a>
 8002a94:	4bca      	ldr	r3, [pc, #808]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002a96:	6a1a      	ldr	r2, [r3, #32]
 8002a98:	4bc9      	ldr	r3, [pc, #804]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	438a      	bics	r2, r1
 8002a9e:	621a      	str	r2, [r3, #32]
 8002aa0:	4bc7      	ldr	r3, [pc, #796]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002aa2:	6a1a      	ldr	r2, [r3, #32]
 8002aa4:	4bc6      	ldr	r3, [pc, #792]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002aa6:	2104      	movs	r1, #4
 8002aa8:	438a      	bics	r2, r1
 8002aaa:	621a      	str	r2, [r3, #32]
 8002aac:	e01c      	b.n	8002ae8 <HAL_RCC_OscConfig+0x3a4>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x38c>
 8002ab6:	4bc2      	ldr	r3, [pc, #776]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002ab8:	6a1a      	ldr	r2, [r3, #32]
 8002aba:	4bc1      	ldr	r3, [pc, #772]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002abc:	2104      	movs	r1, #4
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	621a      	str	r2, [r3, #32]
 8002ac2:	4bbf      	ldr	r3, [pc, #764]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002ac4:	6a1a      	ldr	r2, [r3, #32]
 8002ac6:	4bbe      	ldr	r3, [pc, #760]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002ac8:	2101      	movs	r1, #1
 8002aca:	430a      	orrs	r2, r1
 8002acc:	621a      	str	r2, [r3, #32]
 8002ace:	e00b      	b.n	8002ae8 <HAL_RCC_OscConfig+0x3a4>
 8002ad0:	4bbb      	ldr	r3, [pc, #748]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002ad2:	6a1a      	ldr	r2, [r3, #32]
 8002ad4:	4bba      	ldr	r3, [pc, #744]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	438a      	bics	r2, r1
 8002ada:	621a      	str	r2, [r3, #32]
 8002adc:	4bb8      	ldr	r3, [pc, #736]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002ade:	6a1a      	ldr	r2, [r3, #32]
 8002ae0:	4bb7      	ldr	r3, [pc, #732]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002ae2:	2104      	movs	r1, #4
 8002ae4:	438a      	bics	r2, r1
 8002ae6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d014      	beq.n	8002b1a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af0:	f7fe fb34 	bl	800115c <HAL_GetTick>
 8002af4:	0003      	movs	r3, r0
 8002af6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af8:	e009      	b.n	8002b0e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	f7fe fb2f 	bl	800115c <HAL_GetTick>
 8002afe:	0002      	movs	r2, r0
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	4aaf      	ldr	r2, [pc, #700]	; (8002dc4 <HAL_RCC_OscConfig+0x680>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e19a      	b.n	8002e44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0e:	4bac      	ldr	r3, [pc, #688]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	2202      	movs	r2, #2
 8002b14:	4013      	ands	r3, r2
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x3b6>
 8002b18:	e013      	b.n	8002b42 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1a:	f7fe fb1f 	bl	800115c <HAL_GetTick>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b22:	e009      	b.n	8002b38 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b24:	f7fe fb1a 	bl	800115c <HAL_GetTick>
 8002b28:	0002      	movs	r2, r0
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	4aa5      	ldr	r2, [pc, #660]	; (8002dc4 <HAL_RCC_OscConfig+0x680>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e185      	b.n	8002e44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b38:	4ba1      	ldr	r3, [pc, #644]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b42:	231f      	movs	r3, #31
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d105      	bne.n	8002b58 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b4c:	4b9c      	ldr	r3, [pc, #624]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	4b9b      	ldr	r3, [pc, #620]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002b52:	499d      	ldr	r1, [pc, #628]	; (8002dc8 <HAL_RCC_OscConfig+0x684>)
 8002b54:	400a      	ands	r2, r1
 8002b56:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2210      	movs	r2, #16
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d063      	beq.n	8002c2a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d12a      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b6a:	4b95      	ldr	r3, [pc, #596]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6e:	4b94      	ldr	r3, [pc, #592]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002b70:	2104      	movs	r1, #4
 8002b72:	430a      	orrs	r2, r1
 8002b74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002b76:	4b92      	ldr	r3, [pc, #584]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b7a:	4b91      	ldr	r3, [pc, #580]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b82:	f7fe faeb 	bl	800115c <HAL_GetTick>
 8002b86:	0003      	movs	r3, r0
 8002b88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b8c:	f7fe fae6 	bl	800115c <HAL_GetTick>
 8002b90:	0002      	movs	r2, r0
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e152      	b.n	8002e44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b9e:	4b88      	ldr	r3, [pc, #544]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d0f1      	beq.n	8002b8c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ba8:	4b85      	ldr	r3, [pc, #532]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bac:	22f8      	movs	r2, #248	; 0xf8
 8002bae:	4393      	bics	r3, r2
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	00da      	lsls	r2, r3, #3
 8002bb8:	4b81      	ldr	r3, [pc, #516]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	635a      	str	r2, [r3, #52]	; 0x34
 8002bbe:	e034      	b.n	8002c2a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	3305      	adds	r3, #5
 8002bc6:	d111      	bne.n	8002bec <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002bc8:	4b7d      	ldr	r3, [pc, #500]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bcc:	4b7c      	ldr	r3, [pc, #496]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002bce:	2104      	movs	r1, #4
 8002bd0:	438a      	bics	r2, r1
 8002bd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002bd4:	4b7a      	ldr	r3, [pc, #488]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd8:	22f8      	movs	r2, #248	; 0xf8
 8002bda:	4393      	bics	r3, r2
 8002bdc:	0019      	movs	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	00da      	lsls	r2, r3, #3
 8002be4:	4b76      	ldr	r3, [pc, #472]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002be6:	430a      	orrs	r2, r1
 8002be8:	635a      	str	r2, [r3, #52]	; 0x34
 8002bea:	e01e      	b.n	8002c2a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002bec:	4b74      	ldr	r3, [pc, #464]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf0:	4b73      	ldr	r3, [pc, #460]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002bf2:	2104      	movs	r1, #4
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002bf8:	4b71      	ldr	r3, [pc, #452]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bfc:	4b70      	ldr	r3, [pc, #448]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002bfe:	2101      	movs	r1, #1
 8002c00:	438a      	bics	r2, r1
 8002c02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c04:	f7fe faaa 	bl	800115c <HAL_GetTick>
 8002c08:	0003      	movs	r3, r0
 8002c0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c0e:	f7fe faa5 	bl	800115c <HAL_GetTick>
 8002c12:	0002      	movs	r2, r0
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e111      	b.n	8002e44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c20:	4b67      	ldr	r3, [pc, #412]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c24:	2202      	movs	r2, #2
 8002c26:	4013      	ands	r3, r2
 8002c28:	d1f1      	bne.n	8002c0e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	4013      	ands	r3, r2
 8002c32:	d05c      	beq.n	8002cee <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002c34:	4b62      	ldr	r3, [pc, #392]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	220c      	movs	r2, #12
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b0c      	cmp	r3, #12
 8002c3e:	d00e      	beq.n	8002c5e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002c40:	4b5f      	ldr	r3, [pc, #380]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	220c      	movs	r2, #12
 8002c46:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d114      	bne.n	8002c76 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002c4c:	4b5c      	ldr	r3, [pc, #368]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	23c0      	movs	r3, #192	; 0xc0
 8002c52:	025b      	lsls	r3, r3, #9
 8002c54:	401a      	ands	r2, r3
 8002c56:	23c0      	movs	r3, #192	; 0xc0
 8002c58:	025b      	lsls	r3, r3, #9
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d10b      	bne.n	8002c76 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002c5e:	4b58      	ldr	r3, [pc, #352]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	025b      	lsls	r3, r3, #9
 8002c66:	4013      	ands	r3, r2
 8002c68:	d040      	beq.n	8002cec <HAL_RCC_OscConfig+0x5a8>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d03c      	beq.n	8002cec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e0e6      	b.n	8002e44 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d01b      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002c7e:	4b50      	ldr	r3, [pc, #320]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c82:	4b4f      	ldr	r3, [pc, #316]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002c84:	2180      	movs	r1, #128	; 0x80
 8002c86:	0249      	lsls	r1, r1, #9
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fa66 	bl	800115c <HAL_GetTick>
 8002c90:	0003      	movs	r3, r0
 8002c92:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c96:	f7fe fa61 	bl	800115c <HAL_GetTick>
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e0cd      	b.n	8002e44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002ca8:	4b45      	ldr	r3, [pc, #276]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	025b      	lsls	r3, r3, #9
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x552>
 8002cb4:	e01b      	b.n	8002cee <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002cb6:	4b42      	ldr	r3, [pc, #264]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cba:	4b41      	ldr	r3, [pc, #260]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002cbc:	4943      	ldr	r1, [pc, #268]	; (8002dcc <HAL_RCC_OscConfig+0x688>)
 8002cbe:	400a      	ands	r2, r1
 8002cc0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc2:	f7fe fa4b 	bl	800115c <HAL_GetTick>
 8002cc6:	0003      	movs	r3, r0
 8002cc8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ccc:	f7fe fa46 	bl	800115c <HAL_GetTick>
 8002cd0:	0002      	movs	r2, r0
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e0b2      	b.n	8002e44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002cde:	4b38      	ldr	r3, [pc, #224]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	025b      	lsls	r3, r3, #9
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x588>
 8002cea:	e000      	b.n	8002cee <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002cec:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d100      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x5b4>
 8002cf6:	e0a4      	b.n	8002e42 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf8:	4b31      	ldr	r3, [pc, #196]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	220c      	movs	r2, #12
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d100      	bne.n	8002d06 <HAL_RCC_OscConfig+0x5c2>
 8002d04:	e078      	b.n	8002df8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d14c      	bne.n	8002da8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0e:	4b2c      	ldr	r3, [pc, #176]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002d14:	492e      	ldr	r1, [pc, #184]	; (8002dd0 <HAL_RCC_OscConfig+0x68c>)
 8002d16:	400a      	ands	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1a:	f7fe fa1f 	bl	800115c <HAL_GetTick>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d24:	f7fe fa1a 	bl	800115c <HAL_GetTick>
 8002d28:	0002      	movs	r2, r0
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e086      	b.n	8002e44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d36:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	049b      	lsls	r3, r3, #18
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d42:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	220f      	movs	r2, #15
 8002d48:	4393      	bics	r3, r2
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d50:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002d52:	430a      	orrs	r2, r1
 8002d54:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d56:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4a1e      	ldr	r2, [pc, #120]	; (8002dd4 <HAL_RCC_OscConfig+0x690>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	0019      	movs	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d70:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002d76:	2180      	movs	r1, #128	; 0x80
 8002d78:	0449      	lsls	r1, r1, #17
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7e:	f7fe f9ed 	bl	800115c <HAL_GetTick>
 8002d82:	0003      	movs	r3, r0
 8002d84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d88:	f7fe f9e8 	bl	800115c <HAL_GetTick>
 8002d8c:	0002      	movs	r2, r0
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e054      	b.n	8002e44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	2380      	movs	r3, #128	; 0x80
 8002da0:	049b      	lsls	r3, r3, #18
 8002da2:	4013      	ands	r3, r2
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x644>
 8002da6:	e04c      	b.n	8002e42 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da8:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <HAL_RCC_OscConfig+0x67c>)
 8002dae:	4908      	ldr	r1, [pc, #32]	; (8002dd0 <HAL_RCC_OscConfig+0x68c>)
 8002db0:	400a      	ands	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe f9d2 	bl	800115c <HAL_GetTick>
 8002db8:	0003      	movs	r3, r0
 8002dba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dbc:	e015      	b.n	8002dea <HAL_RCC_OscConfig+0x6a6>
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	00001388 	.word	0x00001388
 8002dc8:	efffffff 	.word	0xefffffff
 8002dcc:	fffeffff 	.word	0xfffeffff
 8002dd0:	feffffff 	.word	0xfeffffff
 8002dd4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd8:	f7fe f9c0 	bl	800115c <HAL_GetTick>
 8002ddc:	0002      	movs	r2, r0
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e02c      	b.n	8002e44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dea:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <HAL_RCC_OscConfig+0x708>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	049b      	lsls	r3, r3, #18
 8002df2:	4013      	ands	r3, r2
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x694>
 8002df6:	e024      	b.n	8002e42 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e01f      	b.n	8002e44 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002e04:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <HAL_RCC_OscConfig+0x708>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002e0a:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <HAL_RCC_OscConfig+0x708>)
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	23c0      	movs	r3, #192	; 0xc0
 8002e14:	025b      	lsls	r3, r3, #9
 8002e16:	401a      	ands	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d10e      	bne.n	8002e3e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	220f      	movs	r2, #15
 8002e24:	401a      	ands	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d107      	bne.n	8002e3e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	23f0      	movs	r3, #240	; 0xf0
 8002e32:	039b      	lsls	r3, r3, #14
 8002e34:	401a      	ands	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d001      	beq.n	8002e42 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	0018      	movs	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b008      	add	sp, #32
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40021000 	.word	0x40021000

08002e50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0bf      	b.n	8002fe4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e64:	4b61      	ldr	r3, [pc, #388]	; (8002fec <HAL_RCC_ClockConfig+0x19c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d911      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b5e      	ldr	r3, [pc, #376]	; (8002fec <HAL_RCC_ClockConfig+0x19c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2201      	movs	r2, #1
 8002e78:	4393      	bics	r3, r2
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	4b5b      	ldr	r3, [pc, #364]	; (8002fec <HAL_RCC_ClockConfig+0x19c>)
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e84:	4b59      	ldr	r3, [pc, #356]	; (8002fec <HAL_RCC_ClockConfig+0x19c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d001      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e0a6      	b.n	8002fe4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d015      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d006      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002eaa:	4b51      	ldr	r3, [pc, #324]	; (8002ff0 <HAL_RCC_ClockConfig+0x1a0>)
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	4b50      	ldr	r3, [pc, #320]	; (8002ff0 <HAL_RCC_ClockConfig+0x1a0>)
 8002eb0:	21e0      	movs	r1, #224	; 0xe0
 8002eb2:	00c9      	lsls	r1, r1, #3
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb8:	4b4d      	ldr	r3, [pc, #308]	; (8002ff0 <HAL_RCC_ClockConfig+0x1a0>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	22f0      	movs	r2, #240	; 0xf0
 8002ebe:	4393      	bics	r3, r2
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	4b4a      	ldr	r3, [pc, #296]	; (8002ff0 <HAL_RCC_ClockConfig+0x1a0>)
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d04c      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d107      	bne.n	8002eee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	4b44      	ldr	r3, [pc, #272]	; (8002ff0 <HAL_RCC_ClockConfig+0x1a0>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	029b      	lsls	r3, r3, #10
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d120      	bne.n	8002f2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e07a      	b.n	8002fe4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d107      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef6:	4b3e      	ldr	r3, [pc, #248]	; (8002ff0 <HAL_RCC_ClockConfig+0x1a0>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	049b      	lsls	r3, r3, #18
 8002efe:	4013      	ands	r3, r2
 8002f00:	d114      	bne.n	8002f2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e06e      	b.n	8002fe4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d107      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f0e:	4b38      	ldr	r3, [pc, #224]	; (8002ff0 <HAL_RCC_ClockConfig+0x1a0>)
 8002f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	025b      	lsls	r3, r3, #9
 8002f16:	4013      	ands	r3, r2
 8002f18:	d108      	bne.n	8002f2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e062      	b.n	8002fe4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1e:	4b34      	ldr	r3, [pc, #208]	; (8002ff0 <HAL_RCC_ClockConfig+0x1a0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2202      	movs	r2, #2
 8002f24:	4013      	ands	r3, r2
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e05b      	b.n	8002fe4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f2c:	4b30      	ldr	r3, [pc, #192]	; (8002ff0 <HAL_RCC_ClockConfig+0x1a0>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2203      	movs	r2, #3
 8002f32:	4393      	bics	r3, r2
 8002f34:	0019      	movs	r1, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	4b2d      	ldr	r3, [pc, #180]	; (8002ff0 <HAL_RCC_ClockConfig+0x1a0>)
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f40:	f7fe f90c 	bl	800115c <HAL_GetTick>
 8002f44:	0003      	movs	r3, r0
 8002f46:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f48:	e009      	b.n	8002f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4a:	f7fe f907 	bl	800115c <HAL_GetTick>
 8002f4e:	0002      	movs	r2, r0
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	4a27      	ldr	r2, [pc, #156]	; (8002ff4 <HAL_RCC_ClockConfig+0x1a4>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e042      	b.n	8002fe4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5e:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <HAL_RCC_ClockConfig+0x1a0>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	220c      	movs	r2, #12
 8002f64:	401a      	ands	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d1ec      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f70:	4b1e      	ldr	r3, [pc, #120]	; (8002fec <HAL_RCC_ClockConfig+0x19c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2201      	movs	r2, #1
 8002f76:	4013      	ands	r3, r2
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d211      	bcs.n	8002fa2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <HAL_RCC_ClockConfig+0x19c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2201      	movs	r2, #1
 8002f84:	4393      	bics	r3, r2
 8002f86:	0019      	movs	r1, r3
 8002f88:	4b18      	ldr	r3, [pc, #96]	; (8002fec <HAL_RCC_ClockConfig+0x19c>)
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f90:	4b16      	ldr	r3, [pc, #88]	; (8002fec <HAL_RCC_ClockConfig+0x19c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2201      	movs	r2, #1
 8002f96:	4013      	ands	r3, r2
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d001      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e020      	b.n	8002fe4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2204      	movs	r2, #4
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d009      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002fac:	4b10      	ldr	r3, [pc, #64]	; (8002ff0 <HAL_RCC_ClockConfig+0x1a0>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4a11      	ldr	r2, [pc, #68]	; (8002ff8 <HAL_RCC_ClockConfig+0x1a8>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <HAL_RCC_ClockConfig+0x1a0>)
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002fc0:	f000 f820 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8002fc4:	0001      	movs	r1, r0
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <HAL_RCC_ClockConfig+0x1a0>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	091b      	lsrs	r3, r3, #4
 8002fcc:	220f      	movs	r2, #15
 8002fce:	4013      	ands	r3, r2
 8002fd0:	4a0a      	ldr	r2, [pc, #40]	; (8002ffc <HAL_RCC_ClockConfig+0x1ac>)
 8002fd2:	5cd3      	ldrb	r3, [r2, r3]
 8002fd4:	000a      	movs	r2, r1
 8002fd6:	40da      	lsrs	r2, r3
 8002fd8:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_RCC_ClockConfig+0x1b0>)
 8002fda:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f7fd ffe7 	bl	8000fb0 <HAL_InitTick>
  
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b004      	add	sp, #16
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40022000 	.word	0x40022000
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	00001388 	.word	0x00001388
 8002ff8:	fffff8ff 	.word	0xfffff8ff
 8002ffc:	080064c0 	.word	0x080064c0
 8003000:	20000024 	.word	0x20000024

08003004 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003004:	b590      	push	{r4, r7, lr}
 8003006:	b08f      	sub	sp, #60	; 0x3c
 8003008:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800300a:	2314      	movs	r3, #20
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	4a37      	ldr	r2, [pc, #220]	; (80030ec <HAL_RCC_GetSysClockFreq+0xe8>)
 8003010:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003012:	c313      	stmia	r3!, {r0, r1, r4}
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003018:	1d3b      	adds	r3, r7, #4
 800301a:	4a35      	ldr	r2, [pc, #212]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xec>)
 800301c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800301e:	c313      	stmia	r3!, {r0, r1, r4}
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003028:	2300      	movs	r3, #0
 800302a:	62bb      	str	r3, [r7, #40]	; 0x28
 800302c:	2300      	movs	r3, #0
 800302e:	637b      	str	r3, [r7, #52]	; 0x34
 8003030:	2300      	movs	r3, #0
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003038:	4b2e      	ldr	r3, [pc, #184]	; (80030f4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800303e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003040:	220c      	movs	r2, #12
 8003042:	4013      	ands	r3, r2
 8003044:	2b08      	cmp	r3, #8
 8003046:	d006      	beq.n	8003056 <HAL_RCC_GetSysClockFreq+0x52>
 8003048:	2b0c      	cmp	r3, #12
 800304a:	d043      	beq.n	80030d4 <HAL_RCC_GetSysClockFreq+0xd0>
 800304c:	2b04      	cmp	r3, #4
 800304e:	d144      	bne.n	80030da <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003050:	4b29      	ldr	r3, [pc, #164]	; (80030f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003052:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003054:	e044      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	0c9b      	lsrs	r3, r3, #18
 800305a:	220f      	movs	r2, #15
 800305c:	4013      	ands	r3, r2
 800305e:	2214      	movs	r2, #20
 8003060:	18ba      	adds	r2, r7, r2
 8003062:	5cd3      	ldrb	r3, [r2, r3]
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003066:	4b23      	ldr	r3, [pc, #140]	; (80030f4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	220f      	movs	r2, #15
 800306c:	4013      	ands	r3, r2
 800306e:	1d3a      	adds	r2, r7, #4
 8003070:	5cd3      	ldrb	r3, [r2, r3]
 8003072:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003076:	23c0      	movs	r3, #192	; 0xc0
 8003078:	025b      	lsls	r3, r3, #9
 800307a:	401a      	ands	r2, r3
 800307c:	2380      	movs	r3, #128	; 0x80
 800307e:	025b      	lsls	r3, r3, #9
 8003080:	429a      	cmp	r2, r3
 8003082:	d109      	bne.n	8003098 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003086:	481c      	ldr	r0, [pc, #112]	; (80030f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003088:	f7fd f83e 	bl	8000108 <__udivsi3>
 800308c:	0003      	movs	r3, r0
 800308e:	001a      	movs	r2, r3
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	4353      	muls	r3, r2
 8003094:	637b      	str	r3, [r7, #52]	; 0x34
 8003096:	e01a      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800309a:	23c0      	movs	r3, #192	; 0xc0
 800309c:	025b      	lsls	r3, r3, #9
 800309e:	401a      	ands	r2, r3
 80030a0:	23c0      	movs	r3, #192	; 0xc0
 80030a2:	025b      	lsls	r3, r3, #9
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d109      	bne.n	80030bc <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030aa:	4814      	ldr	r0, [pc, #80]	; (80030fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80030ac:	f7fd f82c 	bl	8000108 <__udivsi3>
 80030b0:	0003      	movs	r3, r0
 80030b2:	001a      	movs	r2, r3
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	4353      	muls	r3, r2
 80030b8:	637b      	str	r3, [r7, #52]	; 0x34
 80030ba:	e008      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030be:	480e      	ldr	r0, [pc, #56]	; (80030f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80030c0:	f7fd f822 	bl	8000108 <__udivsi3>
 80030c4:	0003      	movs	r3, r0
 80030c6:	001a      	movs	r2, r3
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	4353      	muls	r3, r2
 80030cc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80030ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030d2:	e005      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80030d4:	4b09      	ldr	r3, [pc, #36]	; (80030fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80030d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030d8:	e002      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030da:	4b07      	ldr	r3, [pc, #28]	; (80030f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80030dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030de:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80030e2:	0018      	movs	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b00f      	add	sp, #60	; 0x3c
 80030e8:	bd90      	pop	{r4, r7, pc}
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	0800641c 	.word	0x0800641c
 80030f0:	0800642c 	.word	0x0800642c
 80030f4:	40021000 	.word	0x40021000
 80030f8:	007a1200 	.word	0x007a1200
 80030fc:	02dc6c00 	.word	0x02dc6c00

08003100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003104:	4b02      	ldr	r3, [pc, #8]	; (8003110 <HAL_RCC_GetHCLKFreq+0x10>)
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	0018      	movs	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	20000024 	.word	0x20000024

08003114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003118:	f7ff fff2 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 800311c:	0001      	movs	r1, r0
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	0a1b      	lsrs	r3, r3, #8
 8003124:	2207      	movs	r2, #7
 8003126:	4013      	ands	r3, r2
 8003128:	4a04      	ldr	r2, [pc, #16]	; (800313c <HAL_RCC_GetPCLK1Freq+0x28>)
 800312a:	5cd3      	ldrb	r3, [r2, r3]
 800312c:	40d9      	lsrs	r1, r3
 800312e:	000b      	movs	r3, r1
}    
 8003130:	0018      	movs	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	40021000 	.word	0x40021000
 800313c:	080064d0 	.word	0x080064d0

08003140 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2207      	movs	r2, #7
 800314e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003150:	4b0e      	ldr	r3, [pc, #56]	; (800318c <HAL_RCC_GetClockConfig+0x4c>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2203      	movs	r2, #3
 8003156:	401a      	ands	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_RCC_GetClockConfig+0x4c>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	22f0      	movs	r2, #240	; 0xf0
 8003162:	401a      	ands	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8003168:	4b08      	ldr	r3, [pc, #32]	; (800318c <HAL_RCC_GetClockConfig+0x4c>)
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	23e0      	movs	r3, #224	; 0xe0
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	401a      	ands	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_RCC_GetClockConfig+0x50>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2201      	movs	r2, #1
 800317c:	401a      	ands	r2, r3
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	601a      	str	r2, [r3, #0]
}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	46bd      	mov	sp, r7
 8003186:	b002      	add	sp, #8
 8003188:	bd80      	pop	{r7, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	40021000 	.word	0x40021000
 8003190:	40022000 	.word	0x40022000

08003194 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	2380      	movs	r3, #128	; 0x80
 80031aa:	025b      	lsls	r3, r3, #9
 80031ac:	4013      	ands	r3, r2
 80031ae:	d100      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80031b0:	e08f      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80031b2:	2317      	movs	r3, #23
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	2200      	movs	r2, #0
 80031b8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ba:	4b6f      	ldr	r3, [pc, #444]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031bc:	69da      	ldr	r2, [r3, #28]
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	055b      	lsls	r3, r3, #21
 80031c2:	4013      	ands	r3, r2
 80031c4:	d111      	bne.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031c6:	4b6c      	ldr	r3, [pc, #432]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031c8:	69da      	ldr	r2, [r3, #28]
 80031ca:	4b6b      	ldr	r3, [pc, #428]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031cc:	2180      	movs	r1, #128	; 0x80
 80031ce:	0549      	lsls	r1, r1, #21
 80031d0:	430a      	orrs	r2, r1
 80031d2:	61da      	str	r2, [r3, #28]
 80031d4:	4b68      	ldr	r3, [pc, #416]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031d6:	69da      	ldr	r2, [r3, #28]
 80031d8:	2380      	movs	r3, #128	; 0x80
 80031da:	055b      	lsls	r3, r3, #21
 80031dc:	4013      	ands	r3, r2
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e2:	2317      	movs	r3, #23
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	2201      	movs	r2, #1
 80031e8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ea:	4b64      	ldr	r3, [pc, #400]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	4013      	ands	r3, r2
 80031f4:	d11a      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f6:	4b61      	ldr	r3, [pc, #388]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	4b60      	ldr	r3, [pc, #384]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80031fc:	2180      	movs	r1, #128	; 0x80
 80031fe:	0049      	lsls	r1, r1, #1
 8003200:	430a      	orrs	r2, r1
 8003202:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003204:	f7fd ffaa 	bl	800115c <HAL_GetTick>
 8003208:	0003      	movs	r3, r0
 800320a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320c:	e008      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320e:	f7fd ffa5 	bl	800115c <HAL_GetTick>
 8003212:	0002      	movs	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b64      	cmp	r3, #100	; 0x64
 800321a:	d901      	bls.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e0a6      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003220:	4b56      	ldr	r3, [pc, #344]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	2380      	movs	r3, #128	; 0x80
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	4013      	ands	r3, r2
 800322a:	d0f0      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800322c:	4b52      	ldr	r3, [pc, #328]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800322e:	6a1a      	ldr	r2, [r3, #32]
 8003230:	23c0      	movs	r3, #192	; 0xc0
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4013      	ands	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d034      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	23c0      	movs	r3, #192	; 0xc0
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4013      	ands	r3, r2
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	429a      	cmp	r2, r3
 800324c:	d02c      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800324e:	4b4a      	ldr	r3, [pc, #296]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	4a4b      	ldr	r2, [pc, #300]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003254:	4013      	ands	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003258:	4b47      	ldr	r3, [pc, #284]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800325a:	6a1a      	ldr	r2, [r3, #32]
 800325c:	4b46      	ldr	r3, [pc, #280]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800325e:	2180      	movs	r1, #128	; 0x80
 8003260:	0249      	lsls	r1, r1, #9
 8003262:	430a      	orrs	r2, r1
 8003264:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003266:	4b44      	ldr	r3, [pc, #272]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003268:	6a1a      	ldr	r2, [r3, #32]
 800326a:	4b43      	ldr	r3, [pc, #268]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800326c:	4945      	ldr	r1, [pc, #276]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800326e:	400a      	ands	r2, r1
 8003270:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003272:	4b41      	ldr	r3, [pc, #260]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	4013      	ands	r3, r2
 800327e:	d013      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7fd ff6c 	bl	800115c <HAL_GetTick>
 8003284:	0003      	movs	r3, r0
 8003286:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003288:	e009      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328a:	f7fd ff67 	bl	800115c <HAL_GetTick>
 800328e:	0002      	movs	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	4a3c      	ldr	r2, [pc, #240]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e067      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329e:	4b36      	ldr	r3, [pc, #216]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	2202      	movs	r2, #2
 80032a4:	4013      	ands	r3, r2
 80032a6:	d0f0      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032a8:	4b33      	ldr	r3, [pc, #204]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	4a34      	ldr	r2, [pc, #208]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	0019      	movs	r1, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	4b30      	ldr	r3, [pc, #192]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032b8:	430a      	orrs	r2, r1
 80032ba:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032bc:	2317      	movs	r3, #23
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d105      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c6:	4b2c      	ldr	r3, [pc, #176]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032c8:	69da      	ldr	r2, [r3, #28]
 80032ca:	4b2b      	ldr	r3, [pc, #172]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032cc:	492f      	ldr	r1, [pc, #188]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032ce:	400a      	ands	r2, r1
 80032d0:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2201      	movs	r2, #1
 80032d8:	4013      	ands	r3, r2
 80032da:	d009      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032dc:	4b26      	ldr	r3, [pc, #152]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	2203      	movs	r2, #3
 80032e2:	4393      	bics	r3, r2
 80032e4:	0019      	movs	r1, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	4b23      	ldr	r3, [pc, #140]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032ec:	430a      	orrs	r2, r1
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2202      	movs	r2, #2
 80032f6:	4013      	ands	r3, r2
 80032f8:	d009      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032fa:	4b1f      	ldr	r3, [pc, #124]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	4a24      	ldr	r2, [pc, #144]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003300:	4013      	ands	r3, r2
 8003302:	0019      	movs	r1, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800330a:	430a      	orrs	r2, r1
 800330c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2220      	movs	r2, #32
 8003314:	4013      	ands	r3, r2
 8003316:	d009      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003318:	4b17      	ldr	r3, [pc, #92]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	2210      	movs	r2, #16
 800331e:	4393      	bics	r3, r2
 8003320:	0019      	movs	r1, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	4b14      	ldr	r3, [pc, #80]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003328:	430a      	orrs	r2, r1
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	029b      	lsls	r3, r3, #10
 8003334:	4013      	ands	r3, r2
 8003336:	d009      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003338:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	2280      	movs	r2, #128	; 0x80
 800333e:	4393      	bics	r3, r2
 8003340:	0019      	movs	r1, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003348:	430a      	orrs	r2, r1
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4013      	ands	r3, r2
 8003356:	d009      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003358:	4b07      	ldr	r3, [pc, #28]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	2240      	movs	r2, #64	; 0x40
 800335e:	4393      	bics	r3, r2
 8003360:	0019      	movs	r1, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	4b04      	ldr	r3, [pc, #16]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003368:	430a      	orrs	r2, r1
 800336a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	0018      	movs	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	b006      	add	sp, #24
 8003374:	bd80      	pop	{r7, pc}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	40021000 	.word	0x40021000
 800337c:	40007000 	.word	0x40007000
 8003380:	fffffcff 	.word	0xfffffcff
 8003384:	fffeffff 	.word	0xfffeffff
 8003388:	00001388 	.word	0x00001388
 800338c:	efffffff 	.word	0xefffffff
 8003390:	fffcffff 	.word	0xfffcffff

08003394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e01e      	b.n	80033e4 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	223d      	movs	r2, #61	; 0x3d
 80033aa:	5c9b      	ldrb	r3, [r3, r2]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d107      	bne.n	80033c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	223c      	movs	r2, #60	; 0x3c
 80033b6:	2100      	movs	r1, #0
 80033b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	0018      	movs	r0, r3
 80033be:	f7fd fd75 	bl	8000eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	223d      	movs	r2, #61	; 0x3d
 80033c6:	2102      	movs	r1, #2
 80033c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3304      	adds	r3, #4
 80033d2:	0019      	movs	r1, r3
 80033d4:	0010      	movs	r0, r2
 80033d6:	f000 f983 	bl	80036e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	223d      	movs	r2, #61	; 0x3d
 80033de:	2101      	movs	r1, #1
 80033e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	0018      	movs	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b002      	add	sp, #8
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	223d      	movs	r2, #61	; 0x3d
 80033f8:	2102      	movs	r1, #2
 80033fa:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2207      	movs	r2, #7
 8003404:	4013      	ands	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b06      	cmp	r3, #6
 800340c:	d007      	beq.n	800341e <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2101      	movs	r1, #1
 800341a:	430a      	orrs	r2, r1
 800341c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	223d      	movs	r2, #61	; 0x3d
 8003422:	2101      	movs	r1, #1
 8003424:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	0018      	movs	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	b004      	add	sp, #16
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2101      	movs	r1, #1
 8003444:	430a      	orrs	r2, r1
 8003446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2207      	movs	r2, #7
 8003450:	4013      	ands	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b06      	cmp	r3, #6
 8003458:	d007      	beq.n	800346a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2101      	movs	r1, #1
 8003466:	430a      	orrs	r2, r1
 8003468:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	0018      	movs	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	b004      	add	sp, #16
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2202      	movs	r2, #2
 8003484:	4013      	ands	r3, r2
 8003486:	2b02      	cmp	r3, #2
 8003488:	d124      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2202      	movs	r2, #2
 8003492:	4013      	ands	r3, r2
 8003494:	2b02      	cmp	r3, #2
 8003496:	d11d      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2203      	movs	r2, #3
 800349e:	4252      	negs	r2, r2
 80034a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	2203      	movs	r2, #3
 80034b0:	4013      	ands	r3, r2
 80034b2:	d004      	beq.n	80034be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	0018      	movs	r0, r3
 80034b8:	f000 f8fa 	bl	80036b0 <HAL_TIM_IC_CaptureCallback>
 80034bc:	e007      	b.n	80034ce <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	0018      	movs	r0, r3
 80034c2:	f000 f8ed 	bl	80036a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	0018      	movs	r0, r3
 80034ca:	f000 f8f9 	bl	80036c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	2204      	movs	r2, #4
 80034dc:	4013      	ands	r3, r2
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d125      	bne.n	800352e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	2204      	movs	r2, #4
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d11e      	bne.n	800352e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2205      	movs	r2, #5
 80034f6:	4252      	negs	r2, r2
 80034f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2202      	movs	r2, #2
 80034fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	23c0      	movs	r3, #192	; 0xc0
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4013      	ands	r3, r2
 800350c:	d004      	beq.n	8003518 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	0018      	movs	r0, r3
 8003512:	f000 f8cd 	bl	80036b0 <HAL_TIM_IC_CaptureCallback>
 8003516:	e007      	b.n	8003528 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	0018      	movs	r0, r3
 800351c:	f000 f8c0 	bl	80036a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	0018      	movs	r0, r3
 8003524:	f000 f8cc 	bl	80036c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	2208      	movs	r2, #8
 8003536:	4013      	ands	r3, r2
 8003538:	2b08      	cmp	r3, #8
 800353a:	d124      	bne.n	8003586 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	2208      	movs	r2, #8
 8003544:	4013      	ands	r3, r2
 8003546:	2b08      	cmp	r3, #8
 8003548:	d11d      	bne.n	8003586 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2209      	movs	r2, #9
 8003550:	4252      	negs	r2, r2
 8003552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2204      	movs	r2, #4
 8003558:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	2203      	movs	r2, #3
 8003562:	4013      	ands	r3, r2
 8003564:	d004      	beq.n	8003570 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	0018      	movs	r0, r3
 800356a:	f000 f8a1 	bl	80036b0 <HAL_TIM_IC_CaptureCallback>
 800356e:	e007      	b.n	8003580 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	0018      	movs	r0, r3
 8003574:	f000 f894 	bl	80036a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	0018      	movs	r0, r3
 800357c:	f000 f8a0 	bl	80036c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2210      	movs	r2, #16
 800358e:	4013      	ands	r3, r2
 8003590:	2b10      	cmp	r3, #16
 8003592:	d125      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	2210      	movs	r2, #16
 800359c:	4013      	ands	r3, r2
 800359e:	2b10      	cmp	r3, #16
 80035a0:	d11e      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2211      	movs	r2, #17
 80035a8:	4252      	negs	r2, r2
 80035aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2208      	movs	r2, #8
 80035b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	23c0      	movs	r3, #192	; 0xc0
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4013      	ands	r3, r2
 80035be:	d004      	beq.n	80035ca <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	0018      	movs	r0, r3
 80035c4:	f000 f874 	bl	80036b0 <HAL_TIM_IC_CaptureCallback>
 80035c8:	e007      	b.n	80035da <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	0018      	movs	r0, r3
 80035ce:	f000 f867 	bl	80036a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	0018      	movs	r0, r3
 80035d6:	f000 f873 	bl	80036c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2201      	movs	r2, #1
 80035e8:	4013      	ands	r3, r2
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d10f      	bne.n	800360e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	2201      	movs	r2, #1
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d108      	bne.n	800360e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2202      	movs	r2, #2
 8003602:	4252      	negs	r2, r2
 8003604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	0018      	movs	r0, r3
 800360a:	f7fd fb35 	bl	8000c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2280      	movs	r2, #128	; 0x80
 8003616:	4013      	ands	r3, r2
 8003618:	2b80      	cmp	r3, #128	; 0x80
 800361a:	d10f      	bne.n	800363c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	2280      	movs	r2, #128	; 0x80
 8003624:	4013      	ands	r3, r2
 8003626:	2b80      	cmp	r3, #128	; 0x80
 8003628:	d108      	bne.n	800363c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2281      	movs	r2, #129	; 0x81
 8003630:	4252      	negs	r2, r2
 8003632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	0018      	movs	r0, r3
 8003638:	f000 f8da 	bl	80037f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	2240      	movs	r2, #64	; 0x40
 8003644:	4013      	ands	r3, r2
 8003646:	2b40      	cmp	r3, #64	; 0x40
 8003648:	d10f      	bne.n	800366a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2240      	movs	r2, #64	; 0x40
 8003652:	4013      	ands	r3, r2
 8003654:	2b40      	cmp	r3, #64	; 0x40
 8003656:	d108      	bne.n	800366a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2241      	movs	r2, #65	; 0x41
 800365e:	4252      	negs	r2, r2
 8003660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	0018      	movs	r0, r3
 8003666:	f000 f833 	bl	80036d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	2220      	movs	r2, #32
 8003672:	4013      	ands	r3, r2
 8003674:	2b20      	cmp	r3, #32
 8003676:	d10f      	bne.n	8003698 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	4013      	ands	r3, r2
 8003682:	2b20      	cmp	r3, #32
 8003684:	d108      	bne.n	8003698 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2221      	movs	r2, #33	; 0x21
 800368c:	4252      	negs	r2, r2
 800368e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	0018      	movs	r0, r3
 8003694:	f000 f8a4 	bl	80037e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003698:	46c0      	nop			; (mov r8, r8)
 800369a:	46bd      	mov	sp, r7
 800369c:	b002      	add	sp, #8
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036a8:	46c0      	nop			; (mov r8, r8)
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b002      	add	sp, #8
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036b8:	46c0      	nop			; (mov r8, r8)
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b002      	add	sp, #8
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036c8:	46c0      	nop			; (mov r8, r8)
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b002      	add	sp, #8
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	b002      	add	sp, #8
 80036de:	bd80      	pop	{r7, pc}

080036e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a34      	ldr	r2, [pc, #208]	; (80037c4 <TIM_Base_SetConfig+0xe4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d008      	beq.n	800370a <TIM_Base_SetConfig+0x2a>
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	2380      	movs	r3, #128	; 0x80
 80036fc:	05db      	lsls	r3, r3, #23
 80036fe:	429a      	cmp	r2, r3
 8003700:	d003      	beq.n	800370a <TIM_Base_SetConfig+0x2a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a30      	ldr	r2, [pc, #192]	; (80037c8 <TIM_Base_SetConfig+0xe8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d108      	bne.n	800371c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2270      	movs	r2, #112	; 0x70
 800370e:	4393      	bics	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4313      	orrs	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a29      	ldr	r2, [pc, #164]	; (80037c4 <TIM_Base_SetConfig+0xe4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d018      	beq.n	8003756 <TIM_Base_SetConfig+0x76>
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	2380      	movs	r3, #128	; 0x80
 8003728:	05db      	lsls	r3, r3, #23
 800372a:	429a      	cmp	r2, r3
 800372c:	d013      	beq.n	8003756 <TIM_Base_SetConfig+0x76>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a25      	ldr	r2, [pc, #148]	; (80037c8 <TIM_Base_SetConfig+0xe8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00f      	beq.n	8003756 <TIM_Base_SetConfig+0x76>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a24      	ldr	r2, [pc, #144]	; (80037cc <TIM_Base_SetConfig+0xec>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00b      	beq.n	8003756 <TIM_Base_SetConfig+0x76>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a23      	ldr	r2, [pc, #140]	; (80037d0 <TIM_Base_SetConfig+0xf0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d007      	beq.n	8003756 <TIM_Base_SetConfig+0x76>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a22      	ldr	r2, [pc, #136]	; (80037d4 <TIM_Base_SetConfig+0xf4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d003      	beq.n	8003756 <TIM_Base_SetConfig+0x76>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a21      	ldr	r2, [pc, #132]	; (80037d8 <TIM_Base_SetConfig+0xf8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d108      	bne.n	8003768 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4a20      	ldr	r2, [pc, #128]	; (80037dc <TIM_Base_SetConfig+0xfc>)
 800375a:	4013      	ands	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2280      	movs	r2, #128	; 0x80
 800376c:	4393      	bics	r3, r2
 800376e:	001a      	movs	r2, r3
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a0c      	ldr	r2, [pc, #48]	; (80037c4 <TIM_Base_SetConfig+0xe4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00b      	beq.n	80037ae <TIM_Base_SetConfig+0xce>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a0d      	ldr	r2, [pc, #52]	; (80037d0 <TIM_Base_SetConfig+0xf0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d007      	beq.n	80037ae <TIM_Base_SetConfig+0xce>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a0c      	ldr	r2, [pc, #48]	; (80037d4 <TIM_Base_SetConfig+0xf4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d003      	beq.n	80037ae <TIM_Base_SetConfig+0xce>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a0b      	ldr	r2, [pc, #44]	; (80037d8 <TIM_Base_SetConfig+0xf8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d103      	bne.n	80037b6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	615a      	str	r2, [r3, #20]
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b004      	add	sp, #16
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40012c00 	.word	0x40012c00
 80037c8:	40000400 	.word	0x40000400
 80037cc:	40002000 	.word	0x40002000
 80037d0:	40014000 	.word	0x40014000
 80037d4:	40014400 	.word	0x40014400
 80037d8:	40014800 	.word	0x40014800
 80037dc:	fffffcff 	.word	0xfffffcff

080037e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037e8:	46c0      	nop			; (mov r8, r8)
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b002      	add	sp, #8
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037f8:	46c0      	nop			; (mov r8, r8)
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b002      	add	sp, #8
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e044      	b.n	800389c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003816:	2b00      	cmp	r3, #0
 8003818:	d107      	bne.n	800382a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2270      	movs	r2, #112	; 0x70
 800381e:	2100      	movs	r1, #0
 8003820:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	0018      	movs	r0, r3
 8003826:	f7fd fb77 	bl	8000f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2224      	movs	r2, #36	; 0x24
 800382e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2101      	movs	r1, #1
 800383c:	438a      	bics	r2, r1
 800383e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	0018      	movs	r0, r3
 8003844:	f000 f830 	bl	80038a8 <UART_SetConfig>
 8003848:	0003      	movs	r3, r0
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e024      	b.n	800389c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	0018      	movs	r0, r3
 800385e:	f000 f9ef 	bl	8003c40 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	490d      	ldr	r1, [pc, #52]	; (80038a4 <HAL_UART_Init+0xa4>)
 800386e:	400a      	ands	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	212a      	movs	r1, #42	; 0x2a
 800387e:	438a      	bics	r2, r1
 8003880:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2101      	movs	r1, #1
 800388e:	430a      	orrs	r2, r1
 8003890:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	0018      	movs	r0, r3
 8003896:	f000 fa87 	bl	8003da8 <UART_CheckIdleState>
 800389a:	0003      	movs	r3, r0
}
 800389c:	0018      	movs	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	b002      	add	sp, #8
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	ffffb7ff 	.word	0xffffb7ff

080038a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80038b4:	2317      	movs	r3, #23
 80038b6:	18fb      	adds	r3, r7, r3
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4ac5      	ldr	r2, [pc, #788]	; (8003bf0 <UART_SetConfig+0x348>)
 80038dc:	4013      	ands	r3, r2
 80038de:	0019      	movs	r1, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4ac0      	ldr	r2, [pc, #768]	; (8003bf4 <UART_SetConfig+0x34c>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	0019      	movs	r1, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4ab7      	ldr	r2, [pc, #732]	; (8003bf8 <UART_SetConfig+0x350>)
 800391a:	4013      	ands	r3, r2
 800391c:	0019      	movs	r1, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	430a      	orrs	r2, r1
 8003926:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4ab3      	ldr	r2, [pc, #716]	; (8003bfc <UART_SetConfig+0x354>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d125      	bne.n	800397e <UART_SetConfig+0xd6>
 8003932:	4bb3      	ldr	r3, [pc, #716]	; (8003c00 <UART_SetConfig+0x358>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	2203      	movs	r2, #3
 8003938:	4013      	ands	r3, r2
 800393a:	2b01      	cmp	r3, #1
 800393c:	d00f      	beq.n	800395e <UART_SetConfig+0xb6>
 800393e:	d304      	bcc.n	800394a <UART_SetConfig+0xa2>
 8003940:	2b02      	cmp	r3, #2
 8003942:	d011      	beq.n	8003968 <UART_SetConfig+0xc0>
 8003944:	2b03      	cmp	r3, #3
 8003946:	d005      	beq.n	8003954 <UART_SetConfig+0xac>
 8003948:	e013      	b.n	8003972 <UART_SetConfig+0xca>
 800394a:	231f      	movs	r3, #31
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	2200      	movs	r2, #0
 8003950:	701a      	strb	r2, [r3, #0]
 8003952:	e064      	b.n	8003a1e <UART_SetConfig+0x176>
 8003954:	231f      	movs	r3, #31
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	2202      	movs	r2, #2
 800395a:	701a      	strb	r2, [r3, #0]
 800395c:	e05f      	b.n	8003a1e <UART_SetConfig+0x176>
 800395e:	231f      	movs	r3, #31
 8003960:	18fb      	adds	r3, r7, r3
 8003962:	2204      	movs	r2, #4
 8003964:	701a      	strb	r2, [r3, #0]
 8003966:	e05a      	b.n	8003a1e <UART_SetConfig+0x176>
 8003968:	231f      	movs	r3, #31
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	2208      	movs	r2, #8
 800396e:	701a      	strb	r2, [r3, #0]
 8003970:	e055      	b.n	8003a1e <UART_SetConfig+0x176>
 8003972:	231f      	movs	r3, #31
 8003974:	18fb      	adds	r3, r7, r3
 8003976:	2210      	movs	r2, #16
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	e04f      	b.n	8003a1e <UART_SetConfig+0x176>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4aa0      	ldr	r2, [pc, #640]	; (8003c04 <UART_SetConfig+0x35c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d132      	bne.n	80039ee <UART_SetConfig+0x146>
 8003988:	4b9d      	ldr	r3, [pc, #628]	; (8003c00 <UART_SetConfig+0x358>)
 800398a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800398c:	23c0      	movs	r3, #192	; 0xc0
 800398e:	029b      	lsls	r3, r3, #10
 8003990:	4013      	ands	r3, r2
 8003992:	2280      	movs	r2, #128	; 0x80
 8003994:	0252      	lsls	r2, r2, #9
 8003996:	4293      	cmp	r3, r2
 8003998:	d019      	beq.n	80039ce <UART_SetConfig+0x126>
 800399a:	2280      	movs	r2, #128	; 0x80
 800399c:	0252      	lsls	r2, r2, #9
 800399e:	4293      	cmp	r3, r2
 80039a0:	d802      	bhi.n	80039a8 <UART_SetConfig+0x100>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d009      	beq.n	80039ba <UART_SetConfig+0x112>
 80039a6:	e01c      	b.n	80039e2 <UART_SetConfig+0x13a>
 80039a8:	2280      	movs	r2, #128	; 0x80
 80039aa:	0292      	lsls	r2, r2, #10
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d013      	beq.n	80039d8 <UART_SetConfig+0x130>
 80039b0:	22c0      	movs	r2, #192	; 0xc0
 80039b2:	0292      	lsls	r2, r2, #10
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d005      	beq.n	80039c4 <UART_SetConfig+0x11c>
 80039b8:	e013      	b.n	80039e2 <UART_SetConfig+0x13a>
 80039ba:	231f      	movs	r3, #31
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	2200      	movs	r2, #0
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	e02c      	b.n	8003a1e <UART_SetConfig+0x176>
 80039c4:	231f      	movs	r3, #31
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	2202      	movs	r2, #2
 80039ca:	701a      	strb	r2, [r3, #0]
 80039cc:	e027      	b.n	8003a1e <UART_SetConfig+0x176>
 80039ce:	231f      	movs	r3, #31
 80039d0:	18fb      	adds	r3, r7, r3
 80039d2:	2204      	movs	r2, #4
 80039d4:	701a      	strb	r2, [r3, #0]
 80039d6:	e022      	b.n	8003a1e <UART_SetConfig+0x176>
 80039d8:	231f      	movs	r3, #31
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	2208      	movs	r2, #8
 80039de:	701a      	strb	r2, [r3, #0]
 80039e0:	e01d      	b.n	8003a1e <UART_SetConfig+0x176>
 80039e2:	231f      	movs	r3, #31
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	2210      	movs	r2, #16
 80039e8:	701a      	strb	r2, [r3, #0]
 80039ea:	46c0      	nop			; (mov r8, r8)
 80039ec:	e017      	b.n	8003a1e <UART_SetConfig+0x176>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a85      	ldr	r2, [pc, #532]	; (8003c08 <UART_SetConfig+0x360>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d104      	bne.n	8003a02 <UART_SetConfig+0x15a>
 80039f8:	231f      	movs	r3, #31
 80039fa:	18fb      	adds	r3, r7, r3
 80039fc:	2200      	movs	r2, #0
 80039fe:	701a      	strb	r2, [r3, #0]
 8003a00:	e00d      	b.n	8003a1e <UART_SetConfig+0x176>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a81      	ldr	r2, [pc, #516]	; (8003c0c <UART_SetConfig+0x364>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d104      	bne.n	8003a16 <UART_SetConfig+0x16e>
 8003a0c:	231f      	movs	r3, #31
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	2200      	movs	r2, #0
 8003a12:	701a      	strb	r2, [r3, #0]
 8003a14:	e003      	b.n	8003a1e <UART_SetConfig+0x176>
 8003a16:	231f      	movs	r3, #31
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	2210      	movs	r2, #16
 8003a1c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69da      	ldr	r2, [r3, #28]
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	021b      	lsls	r3, r3, #8
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d000      	beq.n	8003a2c <UART_SetConfig+0x184>
 8003a2a:	e07d      	b.n	8003b28 <UART_SetConfig+0x280>
  {
    switch (clocksource)
 8003a2c:	231f      	movs	r3, #31
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d01c      	beq.n	8003a70 <UART_SetConfig+0x1c8>
 8003a36:	dc02      	bgt.n	8003a3e <UART_SetConfig+0x196>
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <UART_SetConfig+0x1a0>
 8003a3c:	e04b      	b.n	8003ad6 <UART_SetConfig+0x22e>
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d025      	beq.n	8003a8e <UART_SetConfig+0x1e6>
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d037      	beq.n	8003ab6 <UART_SetConfig+0x20e>
 8003a46:	e046      	b.n	8003ad6 <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a48:	f7ff fb64 	bl	8003114 <HAL_RCC_GetPCLK1Freq>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	005a      	lsls	r2, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	18d2      	adds	r2, r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	0019      	movs	r1, r3
 8003a62:	0010      	movs	r0, r2
 8003a64:	f7fc fb50 	bl	8000108 <__udivsi3>
 8003a68:	0003      	movs	r3, r0
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	61bb      	str	r3, [r7, #24]
        break;
 8003a6e:	e037      	b.n	8003ae0 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	085b      	lsrs	r3, r3, #1
 8003a76:	4a66      	ldr	r2, [pc, #408]	; (8003c10 <UART_SetConfig+0x368>)
 8003a78:	189a      	adds	r2, r3, r2
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	0019      	movs	r1, r3
 8003a80:	0010      	movs	r0, r2
 8003a82:	f7fc fb41 	bl	8000108 <__udivsi3>
 8003a86:	0003      	movs	r3, r0
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	61bb      	str	r3, [r7, #24]
        break;
 8003a8c:	e028      	b.n	8003ae0 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a8e:	f7ff fab9 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8003a92:	0003      	movs	r3, r0
 8003a94:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	005a      	lsls	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	085b      	lsrs	r3, r3, #1
 8003aa0:	18d2      	adds	r2, r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	0010      	movs	r0, r2
 8003aaa:	f7fc fb2d 	bl	8000108 <__udivsi3>
 8003aae:	0003      	movs	r3, r0
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	61bb      	str	r3, [r7, #24]
        break;
 8003ab4:	e014      	b.n	8003ae0 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	2280      	movs	r2, #128	; 0x80
 8003abe:	0252      	lsls	r2, r2, #9
 8003ac0:	189a      	adds	r2, r3, r2
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	0019      	movs	r1, r3
 8003ac8:	0010      	movs	r0, r2
 8003aca:	f7fc fb1d 	bl	8000108 <__udivsi3>
 8003ace:	0003      	movs	r3, r0
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	61bb      	str	r3, [r7, #24]
        break;
 8003ad4:	e004      	b.n	8003ae0 <UART_SetConfig+0x238>
      default:
        ret = HAL_ERROR;
 8003ad6:	2317      	movs	r3, #23
 8003ad8:	18fb      	adds	r3, r7, r3
 8003ada:	2201      	movs	r2, #1
 8003adc:	701a      	strb	r2, [r3, #0]
        break;
 8003ade:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	2b0f      	cmp	r3, #15
 8003ae4:	d91b      	bls.n	8003b1e <UART_SetConfig+0x276>
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	4a4a      	ldr	r2, [pc, #296]	; (8003c14 <UART_SetConfig+0x36c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d817      	bhi.n	8003b1e <UART_SetConfig+0x276>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	200a      	movs	r0, #10
 8003af4:	183b      	adds	r3, r7, r0
 8003af6:	210f      	movs	r1, #15
 8003af8:	438a      	bics	r2, r1
 8003afa:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	085b      	lsrs	r3, r3, #1
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2207      	movs	r2, #7
 8003b04:	4013      	ands	r3, r2
 8003b06:	b299      	uxth	r1, r3
 8003b08:	183b      	adds	r3, r7, r0
 8003b0a:	183a      	adds	r2, r7, r0
 8003b0c:	8812      	ldrh	r2, [r2, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	183a      	adds	r2, r7, r0
 8003b18:	8812      	ldrh	r2, [r2, #0]
 8003b1a:	60da      	str	r2, [r3, #12]
 8003b1c:	e082      	b.n	8003c24 <UART_SetConfig+0x37c>
    }
    else
    {
      ret = HAL_ERROR;
 8003b1e:	2317      	movs	r3, #23
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	2201      	movs	r2, #1
 8003b24:	701a      	strb	r2, [r3, #0]
 8003b26:	e07d      	b.n	8003c24 <UART_SetConfig+0x37c>
    }
  }
  else
  {
    switch (clocksource)
 8003b28:	231f      	movs	r3, #31
 8003b2a:	18fb      	adds	r3, r7, r3
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d01b      	beq.n	8003b6a <UART_SetConfig+0x2c2>
 8003b32:	dc02      	bgt.n	8003b3a <UART_SetConfig+0x292>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <UART_SetConfig+0x29c>
 8003b38:	e049      	b.n	8003bce <UART_SetConfig+0x326>
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d024      	beq.n	8003b88 <UART_SetConfig+0x2e0>
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d035      	beq.n	8003bae <UART_SetConfig+0x306>
 8003b42:	e044      	b.n	8003bce <UART_SetConfig+0x326>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b44:	f7ff fae6 	bl	8003114 <HAL_RCC_GetPCLK1Freq>
 8003b48:	0003      	movs	r3, r0
 8003b4a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	085a      	lsrs	r2, r3, #1
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	18d2      	adds	r2, r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	0019      	movs	r1, r3
 8003b5c:	0010      	movs	r0, r2
 8003b5e:	f7fc fad3 	bl	8000108 <__udivsi3>
 8003b62:	0003      	movs	r3, r0
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	61bb      	str	r3, [r7, #24]
        break;
 8003b68:	e036      	b.n	8003bd8 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	085b      	lsrs	r3, r3, #1
 8003b70:	4a29      	ldr	r2, [pc, #164]	; (8003c18 <UART_SetConfig+0x370>)
 8003b72:	189a      	adds	r2, r3, r2
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	0019      	movs	r1, r3
 8003b7a:	0010      	movs	r0, r2
 8003b7c:	f7fc fac4 	bl	8000108 <__udivsi3>
 8003b80:	0003      	movs	r3, r0
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	61bb      	str	r3, [r7, #24]
        break;
 8003b86:	e027      	b.n	8003bd8 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b88:	f7ff fa3c 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	085a      	lsrs	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	18d2      	adds	r2, r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	0019      	movs	r1, r3
 8003ba0:	0010      	movs	r0, r2
 8003ba2:	f7fc fab1 	bl	8000108 <__udivsi3>
 8003ba6:	0003      	movs	r3, r0
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	61bb      	str	r3, [r7, #24]
        break;
 8003bac:	e014      	b.n	8003bd8 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	085b      	lsrs	r3, r3, #1
 8003bb4:	2280      	movs	r2, #128	; 0x80
 8003bb6:	0212      	lsls	r2, r2, #8
 8003bb8:	189a      	adds	r2, r3, r2
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	0019      	movs	r1, r3
 8003bc0:	0010      	movs	r0, r2
 8003bc2:	f7fc faa1 	bl	8000108 <__udivsi3>
 8003bc6:	0003      	movs	r3, r0
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	61bb      	str	r3, [r7, #24]
        break;
 8003bcc:	e004      	b.n	8003bd8 <UART_SetConfig+0x330>
      default:
        ret = HAL_ERROR;
 8003bce:	2317      	movs	r3, #23
 8003bd0:	18fb      	adds	r3, r7, r3
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	701a      	strb	r2, [r3, #0]
        break;
 8003bd6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	2b0f      	cmp	r3, #15
 8003bdc:	d91e      	bls.n	8003c1c <UART_SetConfig+0x374>
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	4a0c      	ldr	r2, [pc, #48]	; (8003c14 <UART_SetConfig+0x36c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d81a      	bhi.n	8003c1c <UART_SetConfig+0x374>
    {
      huart->Instance->BRR = usartdiv;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	60da      	str	r2, [r3, #12]
 8003bee:	e019      	b.n	8003c24 <UART_SetConfig+0x37c>
 8003bf0:	efff69f3 	.word	0xefff69f3
 8003bf4:	ffffcfff 	.word	0xffffcfff
 8003bf8:	fffff4ff 	.word	0xfffff4ff
 8003bfc:	40013800 	.word	0x40013800
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40004400 	.word	0x40004400
 8003c08:	40004800 	.word	0x40004800
 8003c0c:	40004c00 	.word	0x40004c00
 8003c10:	00f42400 	.word	0x00f42400
 8003c14:	0000ffff 	.word	0x0000ffff
 8003c18:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 8003c1c:	2317      	movs	r3, #23
 8003c1e:	18fb      	adds	r3, r7, r3
 8003c20:	2201      	movs	r2, #1
 8003c22:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003c30:	2317      	movs	r3, #23
 8003c32:	18fb      	adds	r3, r7, r3
 8003c34:	781b      	ldrb	r3, [r3, #0]
}
 8003c36:	0018      	movs	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b008      	add	sp, #32
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	46c0      	nop			; (mov r8, r8)

08003c40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d00b      	beq.n	8003c6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	4a4a      	ldr	r2, [pc, #296]	; (8003d84 <UART_AdvFeatureConfig+0x144>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	0019      	movs	r1, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	2202      	movs	r2, #2
 8003c70:	4013      	ands	r3, r2
 8003c72:	d00b      	beq.n	8003c8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4a43      	ldr	r2, [pc, #268]	; (8003d88 <UART_AdvFeatureConfig+0x148>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	0019      	movs	r1, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	2204      	movs	r2, #4
 8003c92:	4013      	ands	r3, r2
 8003c94:	d00b      	beq.n	8003cae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	4a3b      	ldr	r2, [pc, #236]	; (8003d8c <UART_AdvFeatureConfig+0x14c>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	0019      	movs	r1, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	2208      	movs	r2, #8
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d00b      	beq.n	8003cd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4a34      	ldr	r2, [pc, #208]	; (8003d90 <UART_AdvFeatureConfig+0x150>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	2210      	movs	r2, #16
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	d00b      	beq.n	8003cf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4a2c      	ldr	r2, [pc, #176]	; (8003d94 <UART_AdvFeatureConfig+0x154>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	0019      	movs	r1, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d00b      	beq.n	8003d14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	4a25      	ldr	r2, [pc, #148]	; (8003d98 <UART_AdvFeatureConfig+0x158>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	0019      	movs	r1, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	2240      	movs	r2, #64	; 0x40
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d01d      	beq.n	8003d5a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	4a1d      	ldr	r2, [pc, #116]	; (8003d9c <UART_AdvFeatureConfig+0x15c>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	0019      	movs	r1, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	035b      	lsls	r3, r3, #13
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d10b      	bne.n	8003d5a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4a15      	ldr	r2, [pc, #84]	; (8003da0 <UART_AdvFeatureConfig+0x160>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	0019      	movs	r1, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	2280      	movs	r2, #128	; 0x80
 8003d60:	4013      	ands	r3, r2
 8003d62:	d00b      	beq.n	8003d7c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4a0e      	ldr	r2, [pc, #56]	; (8003da4 <UART_AdvFeatureConfig+0x164>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	0019      	movs	r1, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	605a      	str	r2, [r3, #4]
  }
}
 8003d7c:	46c0      	nop			; (mov r8, r8)
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b002      	add	sp, #8
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	fffdffff 	.word	0xfffdffff
 8003d88:	fffeffff 	.word	0xfffeffff
 8003d8c:	fffbffff 	.word	0xfffbffff
 8003d90:	ffff7fff 	.word	0xffff7fff
 8003d94:	ffffefff 	.word	0xffffefff
 8003d98:	ffffdfff 	.word	0xffffdfff
 8003d9c:	ffefffff 	.word	0xffefffff
 8003da0:	ff9fffff 	.word	0xff9fffff
 8003da4:	fff7ffff 	.word	0xfff7ffff

08003da8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003db6:	f7fd f9d1 	bl	800115c <HAL_GetTick>
 8003dba:	0003      	movs	r3, r0
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d10d      	bne.n	8003de8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	2380      	movs	r3, #128	; 0x80
 8003dd0:	0399      	lsls	r1, r3, #14
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	4b16      	ldr	r3, [pc, #88]	; (8003e30 <UART_CheckIdleState+0x88>)
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	0013      	movs	r3, r2
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f000 f82a 	bl	8003e34 <UART_WaitOnFlagUntilTimeout>
 8003de0:	1e03      	subs	r3, r0, #0
 8003de2:	d001      	beq.n	8003de8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e01f      	b.n	8003e28 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2204      	movs	r2, #4
 8003df0:	4013      	ands	r3, r2
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d10d      	bne.n	8003e12 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	2380      	movs	r3, #128	; 0x80
 8003dfa:	03d9      	lsls	r1, r3, #15
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <UART_CheckIdleState+0x88>)
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	0013      	movs	r3, r2
 8003e04:	2200      	movs	r2, #0
 8003e06:	f000 f815 	bl	8003e34 <UART_WaitOnFlagUntilTimeout>
 8003e0a:	1e03      	subs	r3, r0, #0
 8003e0c:	d001      	beq.n	8003e12 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e00a      	b.n	8003e28 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2270      	movs	r2, #112	; 0x70
 8003e22:	2100      	movs	r1, #0
 8003e24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	0018      	movs	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b004      	add	sp, #16
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	01ffffff 	.word	0x01ffffff

08003e34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	1dfb      	adds	r3, r7, #7
 8003e42:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e44:	e05d      	b.n	8003f02 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	d05a      	beq.n	8003f02 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4c:	f7fd f986 	bl	800115c <HAL_GetTick>
 8003e50:	0002      	movs	r2, r0
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d302      	bcc.n	8003e62 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d11b      	bne.n	8003e9a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	492f      	ldr	r1, [pc, #188]	; (8003f2c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003e6e:	400a      	ands	r2, r1
 8003e70:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	438a      	bics	r2, r1
 8003e80:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2220      	movs	r2, #32
 8003e86:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2270      	movs	r2, #112	; 0x70
 8003e92:	2100      	movs	r1, #0
 8003e94:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e043      	b.n	8003f22 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	d02d      	beq.n	8003f02 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69da      	ldr	r2, [r3, #28]
 8003eac:	2380      	movs	r3, #128	; 0x80
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	401a      	ands	r2, r3
 8003eb2:	2380      	movs	r3, #128	; 0x80
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d123      	bne.n	8003f02 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2280      	movs	r2, #128	; 0x80
 8003ec0:	0112      	lsls	r2, r2, #4
 8003ec2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4917      	ldr	r1, [pc, #92]	; (8003f2c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003ed0:	400a      	ands	r2, r1
 8003ed2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2101      	movs	r1, #1
 8003ee0:	438a      	bics	r2, r1
 8003ee2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2220      	movs	r2, #32
 8003eee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2270      	movs	r2, #112	; 0x70
 8003efa:	2100      	movs	r1, #0
 8003efc:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e00f      	b.n	8003f22 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	425a      	negs	r2, r3
 8003f12:	4153      	adcs	r3, r2
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	001a      	movs	r2, r3
 8003f18:	1dfb      	adds	r3, r7, #7
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d092      	beq.n	8003e46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	0018      	movs	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	b004      	add	sp, #16
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	fffffe5f 	.word	0xfffffe5f

08003f30 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f36:	f3ef 8305 	mrs	r3, IPSR
 8003f3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f42:	f3ef 8310 	mrs	r3, PRIMASK
 8003f46:	607b      	str	r3, [r7, #4]
  return(result);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d007      	beq.n	8003f5e <osKernelInitialize+0x2e>
 8003f4e:	4b0d      	ldr	r3, [pc, #52]	; (8003f84 <osKernelInitialize+0x54>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d103      	bne.n	8003f5e <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8003f56:	2306      	movs	r3, #6
 8003f58:	425b      	negs	r3, r3
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	e00c      	b.n	8003f78 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f5e:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <osKernelInitialize+0x54>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d105      	bne.n	8003f72 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003f66:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <osKernelInitialize+0x54>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	e002      	b.n	8003f78 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8003f72:	2301      	movs	r3, #1
 8003f74:	425b      	negs	r3, r3
 8003f76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f78:	68fb      	ldr	r3, [r7, #12]
}
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b004      	add	sp, #16
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	20000078 	.word	0x20000078

08003f88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f8e:	f3ef 8305 	mrs	r3, IPSR
 8003f92:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f9e:	607b      	str	r3, [r7, #4]
  return(result);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d007      	beq.n	8003fb6 <osKernelStart+0x2e>
 8003fa6:	4b0e      	ldr	r3, [pc, #56]	; (8003fe0 <osKernelStart+0x58>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d103      	bne.n	8003fb6 <osKernelStart+0x2e>
    stat = osErrorISR;
 8003fae:	2306      	movs	r3, #6
 8003fb0:	425b      	negs	r3, r3
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	e00e      	b.n	8003fd4 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003fb6:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <osKernelStart+0x58>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d107      	bne.n	8003fce <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8003fbe:	4b08      	ldr	r3, [pc, #32]	; (8003fe0 <osKernelStart+0x58>)
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003fc4:	f000 ff7e 	bl	8004ec4 <vTaskStartScheduler>
      stat = osOK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	e002      	b.n	8003fd4 <osKernelStart+0x4c>
    } else {
      stat = osError;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	425b      	negs	r3, r3
 8003fd2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
}
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b004      	add	sp, #16
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	20000078 	.word	0x20000078

08003fe4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003fe4:	b5b0      	push	{r4, r5, r7, lr}
 8003fe6:	b090      	sub	sp, #64	; 0x40
 8003fe8:	af04      	add	r7, sp, #16
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ff4:	f3ef 8305 	mrs	r3, IPSR
 8003ff8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ffa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d000      	beq.n	8004002 <osThreadNew+0x1e>
 8004000:	e090      	b.n	8004124 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004002:	f3ef 8310 	mrs	r3, PRIMASK
 8004006:	61bb      	str	r3, [r7, #24]
  return(result);
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d004      	beq.n	8004018 <osThreadNew+0x34>
 800400e:	4b48      	ldr	r3, [pc, #288]	; (8004130 <osThreadNew+0x14c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d100      	bne.n	8004018 <osThreadNew+0x34>
 8004016:	e085      	b.n	8004124 <osThreadNew+0x140>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d100      	bne.n	8004020 <osThreadNew+0x3c>
 800401e:	e081      	b.n	8004124 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8004020:	2380      	movs	r3, #128	; 0x80
 8004022:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004024:	2318      	movs	r3, #24
 8004026:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8004028:	2117      	movs	r1, #23
 800402a:	187b      	adds	r3, r7, r1
 800402c:	2200      	movs	r2, #0
 800402e:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8004030:	187b      	adds	r3, r7, r1
 8004032:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8004034:	2301      	movs	r3, #1
 8004036:	425b      	negs	r3, r3
 8004038:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d044      	beq.n	80040ca <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <osThreadNew+0x6a>
        name = attr->name;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	2b00      	cmp	r3, #0
 8004060:	d007      	beq.n	8004072 <osThreadNew+0x8e>
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	2b38      	cmp	r3, #56	; 0x38
 8004066:	d804      	bhi.n	8004072 <osThreadNew+0x8e>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	4013      	ands	r3, r2
 8004070:	d001      	beq.n	8004076 <osThreadNew+0x92>
        return (NULL);
 8004072:	2300      	movs	r3, #0
 8004074:	e057      	b.n	8004126 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	089b      	lsrs	r3, r3, #2
 8004084:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00e      	beq.n	80040ac <osThreadNew+0xc8>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	2b5b      	cmp	r3, #91	; 0x5b
 8004094:	d90a      	bls.n	80040ac <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800409a:	2b00      	cmp	r3, #0
 800409c:	d006      	beq.n	80040ac <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <osThreadNew+0xc8>
        mem = 1;
 80040a6:	2301      	movs	r3, #1
 80040a8:	623b      	str	r3, [r7, #32]
 80040aa:	e010      	b.n	80040ce <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10c      	bne.n	80040ce <osThreadNew+0xea>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d108      	bne.n	80040ce <osThreadNew+0xea>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d104      	bne.n	80040ce <osThreadNew+0xea>
          mem = 0;
 80040c4:	2300      	movs	r3, #0
 80040c6:	623b      	str	r3, [r7, #32]
 80040c8:	e001      	b.n	80040ce <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d112      	bne.n	80040fa <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040dc:	68bd      	ldr	r5, [r7, #8]
 80040de:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80040e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	9302      	str	r3, [sp, #8]
 80040e6:	9201      	str	r2, [sp, #4]
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	002b      	movs	r3, r5
 80040ee:	0022      	movs	r2, r4
 80040f0:	f000 fd49 	bl	8004b86 <xTaskCreateStatic>
 80040f4:	0003      	movs	r3, r0
 80040f6:	613b      	str	r3, [r7, #16]
 80040f8:	e014      	b.n	8004124 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d111      	bne.n	8004124 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	b29a      	uxth	r2, r3
 8004104:	68bc      	ldr	r4, [r7, #8]
 8004106:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	2310      	movs	r3, #16
 800410c:	18fb      	adds	r3, r7, r3
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	0023      	movs	r3, r4
 8004116:	f000 fd79 	bl	8004c0c <xTaskCreate>
 800411a:	0003      	movs	r3, r0
 800411c:	2b01      	cmp	r3, #1
 800411e:	d001      	beq.n	8004124 <osThreadNew+0x140>
          hTask = NULL;
 8004120:	2300      	movs	r3, #0
 8004122:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004124:	693b      	ldr	r3, [r7, #16]
}
 8004126:	0018      	movs	r0, r3
 8004128:	46bd      	mov	sp, r7
 800412a:	b00c      	add	sp, #48	; 0x30
 800412c:	bdb0      	pop	{r4, r5, r7, pc}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	20000078 	.word	0x20000078

08004134 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800413c:	f3ef 8305 	mrs	r3, IPSR
 8004140:	613b      	str	r3, [r7, #16]
  return(result);
 8004142:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004144:	2b00      	cmp	r3, #0
 8004146:	d109      	bne.n	800415c <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004148:	f3ef 8310 	mrs	r3, PRIMASK
 800414c:	60fb      	str	r3, [r7, #12]
  return(result);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d007      	beq.n	8004164 <osDelay+0x30>
 8004154:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <osDelay+0x4c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b02      	cmp	r3, #2
 800415a:	d103      	bne.n	8004164 <osDelay+0x30>
    stat = osErrorISR;
 800415c:	2306      	movs	r3, #6
 800415e:	425b      	negs	r3, r3
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	e008      	b.n	8004176 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <osDelay+0x42>
      vTaskDelay(ticks);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	0018      	movs	r0, r3
 8004172:	f000 fe81 	bl	8004e78 <vTaskDelay>
    }
  }

  return (stat);
 8004176:	697b      	ldr	r3, [r7, #20]
}
 8004178:	0018      	movs	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	b006      	add	sp, #24
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20000078 	.word	0x20000078

08004184 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4a06      	ldr	r2, [pc, #24]	; (80041ac <vApplicationGetIdleTaskMemory+0x28>)
 8004194:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	4a05      	ldr	r2, [pc, #20]	; (80041b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800419a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2280      	movs	r2, #128	; 0x80
 80041a0:	601a      	str	r2, [r3, #0]
}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	46bd      	mov	sp, r7
 80041a6:	b004      	add	sp, #16
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	2000007c 	.word	0x2000007c
 80041b0:	200000d8 	.word	0x200000d8

080041b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a06      	ldr	r2, [pc, #24]	; (80041dc <vApplicationGetTimerTaskMemory+0x28>)
 80041c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4a05      	ldr	r2, [pc, #20]	; (80041e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80041ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2280      	movs	r2, #128	; 0x80
 80041d0:	0052      	lsls	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]
}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b004      	add	sp, #16
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	200002d8 	.word	0x200002d8
 80041e0:	20000334 	.word	0x20000334

080041e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3308      	adds	r3, #8
 80041f0:	001a      	movs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	4252      	negs	r2, r2
 80041fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3308      	adds	r3, #8
 8004202:	001a      	movs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3308      	adds	r3, #8
 800420c:	001a      	movs	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004218:	46c0      	nop			; (mov r8, r8)
 800421a:	46bd      	mov	sp, r7
 800421c:	b002      	add	sp, #8
 800421e:	bd80      	pop	{r7, pc}

08004220 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	46bd      	mov	sp, r7
 8004232:	b002      	add	sp, #8
 8004234:	bd80      	pop	{r7, pc}

08004236 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b084      	sub	sp, #16
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	601a      	str	r2, [r3, #0]
}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	46bd      	mov	sp, r7
 8004276:	b004      	add	sp, #16
 8004278:	bd80      	pop	{r7, pc}

0800427a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	3301      	adds	r3, #1
 800428e:	d103      	bne.n	8004298 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	e00c      	b.n	80042b2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3308      	adds	r3, #8
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	e002      	b.n	80042a6 <vListInsert+0x2c>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d2f6      	bcs.n	80042a0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	601a      	str	r2, [r3, #0]
}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	46bd      	mov	sp, r7
 80042e2:	b004      	add	sp, #16
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6892      	ldr	r2, [r2, #8]
 80042fc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6852      	ldr	r2, [r2, #4]
 8004306:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	429a      	cmp	r2, r3
 8004310:	d103      	bne.n	800431a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	1e5a      	subs	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
}
 800432e:	0018      	movs	r0, r3
 8004330:	46bd      	mov	sp, r7
 8004332:	b004      	add	sp, #16
 8004334:	bd80      	pop	{r7, pc}

08004336 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <xQueueGenericReset+0x18>
 800434a:	b672      	cpsid	i
 800434c:	e7fe      	b.n	800434c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800434e:	f001 fdcf 	bl	8005ef0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	434b      	muls	r3, r1
 8004360:	18d2      	adds	r2, r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437c:	1e59      	subs	r1, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	434b      	muls	r3, r1
 8004384:	18d2      	adds	r2, r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2244      	movs	r2, #68	; 0x44
 800438e:	21ff      	movs	r1, #255	; 0xff
 8004390:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2245      	movs	r2, #69	; 0x45
 8004396:	21ff      	movs	r1, #255	; 0xff
 8004398:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10d      	bne.n	80043bc <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d013      	beq.n	80043d0 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	3310      	adds	r3, #16
 80043ac:	0018      	movs	r0, r3
 80043ae:	f000 ffcd 	bl	800534c <xTaskRemoveFromEventList>
 80043b2:	1e03      	subs	r3, r0, #0
 80043b4:	d00c      	beq.n	80043d0 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80043b6:	f001 fd8b 	bl	8005ed0 <vPortYield>
 80043ba:	e009      	b.n	80043d0 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	3310      	adds	r3, #16
 80043c0:	0018      	movs	r0, r3
 80043c2:	f7ff ff0f 	bl	80041e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3324      	adds	r3, #36	; 0x24
 80043ca:	0018      	movs	r0, r3
 80043cc:	f7ff ff0a 	bl	80041e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043d0:	f001 fda0 	bl	8005f14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043d4:	2301      	movs	r3, #1
}
 80043d6:	0018      	movs	r0, r3
 80043d8:	46bd      	mov	sp, r7
 80043da:	b004      	add	sp, #16
 80043dc:	bd80      	pop	{r7, pc}

080043de <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80043de:	b590      	push	{r4, r7, lr}
 80043e0:	b089      	sub	sp, #36	; 0x24
 80043e2:	af02      	add	r7, sp, #8
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	607a      	str	r2, [r7, #4]
 80043ea:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <xQueueGenericCreateStatic+0x18>
 80043f2:	b672      	cpsid	i
 80043f4:	e7fe      	b.n	80043f4 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <xQueueGenericCreateStatic+0x22>
 80043fc:	b672      	cpsid	i
 80043fe:	e7fe      	b.n	80043fe <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <xQueueGenericCreateStatic+0x2e>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <xQueueGenericCreateStatic+0x32>
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <xQueueGenericCreateStatic+0x34>
 8004410:	2300      	movs	r3, #0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <xQueueGenericCreateStatic+0x3c>
 8004416:	b672      	cpsid	i
 8004418:	e7fe      	b.n	8004418 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <xQueueGenericCreateStatic+0x48>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <xQueueGenericCreateStatic+0x4c>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <xQueueGenericCreateStatic+0x4e>
 800442a:	2300      	movs	r3, #0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <xQueueGenericCreateStatic+0x56>
 8004430:	b672      	cpsid	i
 8004432:	e7fe      	b.n	8004432 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004434:	2350      	movs	r3, #80	; 0x50
 8004436:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	2b50      	cmp	r3, #80	; 0x50
 800443c:	d001      	beq.n	8004442 <xQueueGenericCreateStatic+0x64>
 800443e:	b672      	cpsid	i
 8004440:	e7fe      	b.n	8004440 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00e      	beq.n	800446a <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	2246      	movs	r2, #70	; 0x46
 8004450:	2101      	movs	r1, #1
 8004452:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004454:	2328      	movs	r3, #40	; 0x28
 8004456:	18fb      	adds	r3, r7, r3
 8004458:	781c      	ldrb	r4, [r3, #0]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	68b9      	ldr	r1, [r7, #8]
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	0023      	movs	r3, r4
 8004466:	f000 f805 	bl	8004474 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800446a:	697b      	ldr	r3, [r7, #20]
	}
 800446c:	0018      	movs	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	b007      	add	sp, #28
 8004472:	bd90      	pop	{r4, r7, pc}

08004474 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	001a      	movs	r2, r3
 8004482:	1cfb      	adds	r3, r7, #3
 8004484:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d103      	bne.n	8004494 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	e002      	b.n	800449a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2101      	movs	r1, #1
 80044aa:	0018      	movs	r0, r3
 80044ac:	f7ff ff43 	bl	8004336 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	1cfa      	adds	r2, r7, #3
 80044b4:	214c      	movs	r1, #76	; 0x4c
 80044b6:	7812      	ldrb	r2, [r2, #0]
 80044b8:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044ba:	46c0      	nop			; (mov r8, r8)
 80044bc:	46bd      	mov	sp, r7
 80044be:	b004      	add	sp, #16
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b08a      	sub	sp, #40	; 0x28
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	607a      	str	r2, [r7, #4]
 80044ce:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80044d0:	2300      	movs	r3, #0
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <xQueueGenericSend+0x20>
 80044de:	b672      	cpsid	i
 80044e0:	e7fe      	b.n	80044e0 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d103      	bne.n	80044f0 <xQueueGenericSend+0x2e>
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <xQueueGenericSend+0x32>
 80044f0:	2301      	movs	r3, #1
 80044f2:	e000      	b.n	80044f6 <xQueueGenericSend+0x34>
 80044f4:	2300      	movs	r3, #0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <xQueueGenericSend+0x3c>
 80044fa:	b672      	cpsid	i
 80044fc:	e7fe      	b.n	80044fc <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b02      	cmp	r3, #2
 8004502:	d103      	bne.n	800450c <xQueueGenericSend+0x4a>
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <xQueueGenericSend+0x4e>
 800450c:	2301      	movs	r3, #1
 800450e:	e000      	b.n	8004512 <xQueueGenericSend+0x50>
 8004510:	2300      	movs	r3, #0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <xQueueGenericSend+0x58>
 8004516:	b672      	cpsid	i
 8004518:	e7fe      	b.n	8004518 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800451a:	f001 f8af 	bl	800567c <xTaskGetSchedulerState>
 800451e:	1e03      	subs	r3, r0, #0
 8004520:	d102      	bne.n	8004528 <xQueueGenericSend+0x66>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <xQueueGenericSend+0x6a>
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <xQueueGenericSend+0x6c>
 800452c:	2300      	movs	r3, #0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <xQueueGenericSend+0x74>
 8004532:	b672      	cpsid	i
 8004534:	e7fe      	b.n	8004534 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004536:	f001 fcdb 	bl	8005ef0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004542:	429a      	cmp	r2, r3
 8004544:	d302      	bcc.n	800454c <xQueueGenericSend+0x8a>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b02      	cmp	r3, #2
 800454a:	d11e      	bne.n	800458a <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	0018      	movs	r0, r3
 8004554:	f000 f99f 	bl	8004896 <prvCopyDataToQueue>
 8004558:	0003      	movs	r3, r0
 800455a:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	2b00      	cmp	r3, #0
 8004562:	d009      	beq.n	8004578 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	3324      	adds	r3, #36	; 0x24
 8004568:	0018      	movs	r0, r3
 800456a:	f000 feef 	bl	800534c <xTaskRemoveFromEventList>
 800456e:	1e03      	subs	r3, r0, #0
 8004570:	d007      	beq.n	8004582 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004572:	f001 fcad 	bl	8005ed0 <vPortYield>
 8004576:	e004      	b.n	8004582 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800457e:	f001 fca7 	bl	8005ed0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004582:	f001 fcc7 	bl	8005f14 <vPortExitCritical>
				return pdPASS;
 8004586:	2301      	movs	r3, #1
 8004588:	e05b      	b.n	8004642 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d103      	bne.n	8004598 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004590:	f001 fcc0 	bl	8005f14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004594:	2300      	movs	r3, #0
 8004596:	e054      	b.n	8004642 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800459e:	2314      	movs	r3, #20
 80045a0:	18fb      	adds	r3, r7, r3
 80045a2:	0018      	movs	r0, r3
 80045a4:	f000 ff2e 	bl	8005404 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045a8:	2301      	movs	r3, #1
 80045aa:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045ac:	f001 fcb2 	bl	8005f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045b0:	f000 fcdc 	bl	8004f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045b4:	f001 fc9c 	bl	8005ef0 <vPortEnterCritical>
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	2244      	movs	r2, #68	; 0x44
 80045bc:	5c9b      	ldrb	r3, [r3, r2]
 80045be:	b25b      	sxtb	r3, r3
 80045c0:	3301      	adds	r3, #1
 80045c2:	d103      	bne.n	80045cc <xQueueGenericSend+0x10a>
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	2244      	movs	r2, #68	; 0x44
 80045c8:	2100      	movs	r1, #0
 80045ca:	5499      	strb	r1, [r3, r2]
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	2245      	movs	r2, #69	; 0x45
 80045d0:	5c9b      	ldrb	r3, [r3, r2]
 80045d2:	b25b      	sxtb	r3, r3
 80045d4:	3301      	adds	r3, #1
 80045d6:	d103      	bne.n	80045e0 <xQueueGenericSend+0x11e>
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	2245      	movs	r2, #69	; 0x45
 80045dc:	2100      	movs	r1, #0
 80045de:	5499      	strb	r1, [r3, r2]
 80045e0:	f001 fc98 	bl	8005f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045e4:	1d3a      	adds	r2, r7, #4
 80045e6:	2314      	movs	r3, #20
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	0011      	movs	r1, r2
 80045ec:	0018      	movs	r0, r3
 80045ee:	f000 ff1d 	bl	800542c <xTaskCheckForTimeOut>
 80045f2:	1e03      	subs	r3, r0, #0
 80045f4:	d11e      	bne.n	8004634 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	0018      	movs	r0, r3
 80045fa:	f000 fa51 	bl	8004aa0 <prvIsQueueFull>
 80045fe:	1e03      	subs	r3, r0, #0
 8004600:	d011      	beq.n	8004626 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	3310      	adds	r3, #16
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	0011      	movs	r1, r2
 800460a:	0018      	movs	r0, r3
 800460c:	f000 fe5a 	bl	80052c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	0018      	movs	r0, r3
 8004614:	f000 f9d0 	bl	80049b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004618:	f000 fcb4 	bl	8004f84 <xTaskResumeAll>
 800461c:	1e03      	subs	r3, r0, #0
 800461e:	d18a      	bne.n	8004536 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8004620:	f001 fc56 	bl	8005ed0 <vPortYield>
 8004624:	e787      	b.n	8004536 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	0018      	movs	r0, r3
 800462a:	f000 f9c5 	bl	80049b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800462e:	f000 fca9 	bl	8004f84 <xTaskResumeAll>
 8004632:	e780      	b.n	8004536 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	0018      	movs	r0, r3
 8004638:	f000 f9be 	bl	80049b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800463c:	f000 fca2 	bl	8004f84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004640:	2300      	movs	r3, #0
		}
	}
}
 8004642:	0018      	movs	r0, r3
 8004644:	46bd      	mov	sp, r7
 8004646:	b00a      	add	sp, #40	; 0x28
 8004648:	bd80      	pop	{r7, pc}

0800464a <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800464a:	b590      	push	{r4, r7, lr}
 800464c:	b089      	sub	sp, #36	; 0x24
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
 8004656:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <xQueueGenericSendFromISR+0x1c>
 8004662:	b672      	cpsid	i
 8004664:	e7fe      	b.n	8004664 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d103      	bne.n	8004674 <xQueueGenericSendFromISR+0x2a>
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <xQueueGenericSendFromISR+0x2e>
 8004674:	2301      	movs	r3, #1
 8004676:	e000      	b.n	800467a <xQueueGenericSendFromISR+0x30>
 8004678:	2300      	movs	r3, #0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <xQueueGenericSendFromISR+0x38>
 800467e:	b672      	cpsid	i
 8004680:	e7fe      	b.n	8004680 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d103      	bne.n	8004690 <xQueueGenericSendFromISR+0x46>
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <xQueueGenericSendFromISR+0x4a>
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <xQueueGenericSendFromISR+0x4c>
 8004694:	2300      	movs	r3, #0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <xQueueGenericSendFromISR+0x54>
 800469a:	b672      	cpsid	i
 800469c:	e7fe      	b.n	800469c <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800469e:	f001 fc51 	bl	8005f44 <ulSetInterruptMaskFromISR>
 80046a2:	0003      	movs	r3, r0
 80046a4:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d302      	bcc.n	80046b8 <xQueueGenericSendFromISR+0x6e>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d12e      	bne.n	8004716 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80046b8:	2413      	movs	r4, #19
 80046ba:	193b      	adds	r3, r7, r4
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	2145      	movs	r1, #69	; 0x45
 80046c0:	5c52      	ldrb	r2, [r2, r1]
 80046c2:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	68b9      	ldr	r1, [r7, #8]
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	0018      	movs	r0, r3
 80046cc:	f000 f8e3 	bl	8004896 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80046d0:	193b      	adds	r3, r7, r4
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	b25b      	sxtb	r3, r3
 80046d6:	3301      	adds	r3, #1
 80046d8:	d111      	bne.n	80046fe <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d016      	beq.n	8004710 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	3324      	adds	r3, #36	; 0x24
 80046e6:	0018      	movs	r0, r3
 80046e8:	f000 fe30 	bl	800534c <xTaskRemoveFromEventList>
 80046ec:	1e03      	subs	r3, r0, #0
 80046ee:	d00f      	beq.n	8004710 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00c      	beq.n	8004710 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	e008      	b.n	8004710 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80046fe:	2313      	movs	r3, #19
 8004700:	18fb      	adds	r3, r7, r3
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	3301      	adds	r3, #1
 8004706:	b2db      	uxtb	r3, r3
 8004708:	b259      	sxtb	r1, r3
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	2245      	movs	r2, #69	; 0x45
 800470e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8004710:	2301      	movs	r3, #1
 8004712:	61fb      	str	r3, [r7, #28]
		{
 8004714:	e001      	b.n	800471a <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	0018      	movs	r0, r3
 800471e:	f001 fc17 	bl	8005f50 <vClearInterruptMaskFromISR>

	return xReturn;
 8004722:	69fb      	ldr	r3, [r7, #28]
}
 8004724:	0018      	movs	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	b009      	add	sp, #36	; 0x24
 800472a:	bd90      	pop	{r4, r7, pc}

0800472c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b08a      	sub	sp, #40	; 0x28
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004738:	2300      	movs	r3, #0
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <xQueueReceive+0x1e>
 8004746:	b672      	cpsid	i
 8004748:	e7fe      	b.n	8004748 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d103      	bne.n	8004758 <xQueueReceive+0x2c>
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <xQueueReceive+0x30>
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <xQueueReceive+0x32>
 800475c:	2300      	movs	r3, #0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <xQueueReceive+0x3a>
 8004762:	b672      	cpsid	i
 8004764:	e7fe      	b.n	8004764 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004766:	f000 ff89 	bl	800567c <xTaskGetSchedulerState>
 800476a:	1e03      	subs	r3, r0, #0
 800476c:	d102      	bne.n	8004774 <xQueueReceive+0x48>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <xQueueReceive+0x4c>
 8004774:	2301      	movs	r3, #1
 8004776:	e000      	b.n	800477a <xQueueReceive+0x4e>
 8004778:	2300      	movs	r3, #0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <xQueueReceive+0x56>
 800477e:	b672      	cpsid	i
 8004780:	e7fe      	b.n	8004780 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004782:	f001 fbb5 	bl	8005ef0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d01a      	beq.n	80047c8 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	0011      	movs	r1, r2
 8004798:	0018      	movs	r0, r3
 800479a:	f000 f8e7 	bl	800496c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	1e5a      	subs	r2, r3, #1
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d008      	beq.n	80047c0 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	3310      	adds	r3, #16
 80047b2:	0018      	movs	r0, r3
 80047b4:	f000 fdca 	bl	800534c <xTaskRemoveFromEventList>
 80047b8:	1e03      	subs	r3, r0, #0
 80047ba:	d001      	beq.n	80047c0 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047bc:	f001 fb88 	bl	8005ed0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047c0:	f001 fba8 	bl	8005f14 <vPortExitCritical>
				return pdPASS;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e062      	b.n	800488e <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d103      	bne.n	80047d6 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047ce:	f001 fba1 	bl	8005f14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047d2:	2300      	movs	r3, #0
 80047d4:	e05b      	b.n	800488e <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d106      	bne.n	80047ea <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047dc:	2314      	movs	r3, #20
 80047de:	18fb      	adds	r3, r7, r3
 80047e0:	0018      	movs	r0, r3
 80047e2:	f000 fe0f 	bl	8005404 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047e6:	2301      	movs	r3, #1
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047ea:	f001 fb93 	bl	8005f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047ee:	f000 fbbd 	bl	8004f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047f2:	f001 fb7d 	bl	8005ef0 <vPortEnterCritical>
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	2244      	movs	r2, #68	; 0x44
 80047fa:	5c9b      	ldrb	r3, [r3, r2]
 80047fc:	b25b      	sxtb	r3, r3
 80047fe:	3301      	adds	r3, #1
 8004800:	d103      	bne.n	800480a <xQueueReceive+0xde>
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	2244      	movs	r2, #68	; 0x44
 8004806:	2100      	movs	r1, #0
 8004808:	5499      	strb	r1, [r3, r2]
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	2245      	movs	r2, #69	; 0x45
 800480e:	5c9b      	ldrb	r3, [r3, r2]
 8004810:	b25b      	sxtb	r3, r3
 8004812:	3301      	adds	r3, #1
 8004814:	d103      	bne.n	800481e <xQueueReceive+0xf2>
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	2245      	movs	r2, #69	; 0x45
 800481a:	2100      	movs	r1, #0
 800481c:	5499      	strb	r1, [r3, r2]
 800481e:	f001 fb79 	bl	8005f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004822:	1d3a      	adds	r2, r7, #4
 8004824:	2314      	movs	r3, #20
 8004826:	18fb      	adds	r3, r7, r3
 8004828:	0011      	movs	r1, r2
 800482a:	0018      	movs	r0, r3
 800482c:	f000 fdfe 	bl	800542c <xTaskCheckForTimeOut>
 8004830:	1e03      	subs	r3, r0, #0
 8004832:	d11e      	bne.n	8004872 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	0018      	movs	r0, r3
 8004838:	f000 f91c 	bl	8004a74 <prvIsQueueEmpty>
 800483c:	1e03      	subs	r3, r0, #0
 800483e:	d011      	beq.n	8004864 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	3324      	adds	r3, #36	; 0x24
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	0011      	movs	r1, r2
 8004848:	0018      	movs	r0, r3
 800484a:	f000 fd3b 	bl	80052c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	0018      	movs	r0, r3
 8004852:	f000 f8b1 	bl	80049b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004856:	f000 fb95 	bl	8004f84 <xTaskResumeAll>
 800485a:	1e03      	subs	r3, r0, #0
 800485c:	d191      	bne.n	8004782 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800485e:	f001 fb37 	bl	8005ed0 <vPortYield>
 8004862:	e78e      	b.n	8004782 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	0018      	movs	r0, r3
 8004868:	f000 f8a6 	bl	80049b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800486c:	f000 fb8a 	bl	8004f84 <xTaskResumeAll>
 8004870:	e787      	b.n	8004782 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	0018      	movs	r0, r3
 8004876:	f000 f89f 	bl	80049b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800487a:	f000 fb83 	bl	8004f84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	0018      	movs	r0, r3
 8004882:	f000 f8f7 	bl	8004a74 <prvIsQueueEmpty>
 8004886:	1e03      	subs	r3, r0, #0
 8004888:	d100      	bne.n	800488c <xQueueReceive+0x160>
 800488a:	e77a      	b.n	8004782 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800488c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800488e:	0018      	movs	r0, r3
 8004890:	46bd      	mov	sp, r7
 8004892:	b00a      	add	sp, #40	; 0x28
 8004894:	bd80      	pop	{r7, pc}

08004896 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b086      	sub	sp, #24
 800489a:	af00      	add	r7, sp, #0
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048a2:	2300      	movs	r3, #0
 80048a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10e      	bne.n	80048d2 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d14e      	bne.n	800495a <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f000 fef7 	bl	80056b4 <xTaskPriorityDisinherit>
 80048c6:	0003      	movs	r3, r0
 80048c8:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	605a      	str	r2, [r3, #4]
 80048d0:	e043      	b.n	800495a <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d119      	bne.n	800490c <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6898      	ldr	r0, [r3, #8]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	0019      	movs	r1, r3
 80048e4:	f001 fd66 	bl	80063b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	18d2      	adds	r2, r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d32b      	bcc.n	800495a <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	609a      	str	r2, [r3, #8]
 800490a:	e026      	b.n	800495a <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	68d8      	ldr	r0, [r3, #12]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	0019      	movs	r1, r3
 8004918:	f001 fd4c 	bl	80063b4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	68da      	ldr	r2, [r3, #12]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	425b      	negs	r3, r3
 8004926:	18d2      	adds	r2, r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d207      	bcs.n	8004948 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	425b      	negs	r3, r3
 8004942:	18d2      	adds	r2, r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d105      	bne.n	800495a <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	3b01      	subs	r3, #1
 8004958:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004962:	697b      	ldr	r3, [r7, #20]
}
 8004964:	0018      	movs	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	b006      	add	sp, #24
 800496a:	bd80      	pop	{r7, pc}

0800496c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	2b00      	cmp	r3, #0
 800497c:	d018      	beq.n	80049b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	18d2      	adds	r2, r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	429a      	cmp	r2, r3
 8004996:	d303      	bcc.n	80049a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68d9      	ldr	r1, [r3, #12]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	0018      	movs	r0, r3
 80049ac:	f001 fd02 	bl	80063b4 <memcpy>
	}
}
 80049b0:	46c0      	nop			; (mov r8, r8)
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b002      	add	sp, #8
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80049c0:	f001 fa96 	bl	8005ef0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049c4:	230f      	movs	r3, #15
 80049c6:	18fb      	adds	r3, r7, r3
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	2145      	movs	r1, #69	; 0x45
 80049cc:	5c52      	ldrb	r2, [r2, r1]
 80049ce:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049d0:	e013      	b.n	80049fa <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d016      	beq.n	8004a08 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3324      	adds	r3, #36	; 0x24
 80049de:	0018      	movs	r0, r3
 80049e0:	f000 fcb4 	bl	800534c <xTaskRemoveFromEventList>
 80049e4:	1e03      	subs	r3, r0, #0
 80049e6:	d001      	beq.n	80049ec <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80049e8:	f000 fd70 	bl	80054cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80049ec:	210f      	movs	r1, #15
 80049ee:	187b      	adds	r3, r7, r1
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	187b      	adds	r3, r7, r1
 80049f8:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049fa:	230f      	movs	r3, #15
 80049fc:	18fb      	adds	r3, r7, r3
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	b25b      	sxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	dce5      	bgt.n	80049d2 <prvUnlockQueue+0x1a>
 8004a06:	e000      	b.n	8004a0a <prvUnlockQueue+0x52>
					break;
 8004a08:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2245      	movs	r2, #69	; 0x45
 8004a0e:	21ff      	movs	r1, #255	; 0xff
 8004a10:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004a12:	f001 fa7f 	bl	8005f14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a16:	f001 fa6b 	bl	8005ef0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a1a:	230e      	movs	r3, #14
 8004a1c:	18fb      	adds	r3, r7, r3
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	2144      	movs	r1, #68	; 0x44
 8004a22:	5c52      	ldrb	r2, [r2, r1]
 8004a24:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a26:	e013      	b.n	8004a50 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d016      	beq.n	8004a5e <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3310      	adds	r3, #16
 8004a34:	0018      	movs	r0, r3
 8004a36:	f000 fc89 	bl	800534c <xTaskRemoveFromEventList>
 8004a3a:	1e03      	subs	r3, r0, #0
 8004a3c:	d001      	beq.n	8004a42 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8004a3e:	f000 fd45 	bl	80054cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a42:	210e      	movs	r1, #14
 8004a44:	187b      	adds	r3, r7, r1
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	187b      	adds	r3, r7, r1
 8004a4e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a50:	230e      	movs	r3, #14
 8004a52:	18fb      	adds	r3, r7, r3
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	b25b      	sxtb	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	dce5      	bgt.n	8004a28 <prvUnlockQueue+0x70>
 8004a5c:	e000      	b.n	8004a60 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8004a5e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2244      	movs	r2, #68	; 0x44
 8004a64:	21ff      	movs	r1, #255	; 0xff
 8004a66:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004a68:	f001 fa54 	bl	8005f14 <vPortExitCritical>
}
 8004a6c:	46c0      	nop			; (mov r8, r8)
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	b004      	add	sp, #16
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a7c:	f001 fa38 	bl	8005ef0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d102      	bne.n	8004a8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	e001      	b.n	8004a92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a92:	f001 fa3f 	bl	8005f14 <vPortExitCritical>

	return xReturn;
 8004a96:	68fb      	ldr	r3, [r7, #12]
}
 8004a98:	0018      	movs	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	b004      	add	sp, #16
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004aa8:	f001 fa22 	bl	8005ef0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d102      	bne.n	8004abe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	e001      	b.n	8004ac2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ac2:	f001 fa27 	bl	8005f14 <vPortExitCritical>

	return xReturn;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
}
 8004ac8:	0018      	movs	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b004      	add	sp, #16
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	e015      	b.n	8004b0c <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ae0:	4b0e      	ldr	r3, [pc, #56]	; (8004b1c <vQueueAddToRegistry+0x4c>)
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	00d2      	lsls	r2, r2, #3
 8004ae6:	58d3      	ldr	r3, [r2, r3]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10c      	bne.n	8004b06 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004aec:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <vQueueAddToRegistry+0x4c>)
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	00d2      	lsls	r2, r2, #3
 8004af2:	6839      	ldr	r1, [r7, #0]
 8004af4:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004af6:	4a09      	ldr	r2, [pc, #36]	; (8004b1c <vQueueAddToRegistry+0x4c>)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	18d3      	adds	r3, r2, r3
 8004afe:	3304      	adds	r3, #4
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b04:	e005      	b.n	8004b12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b07      	cmp	r3, #7
 8004b10:	d9e6      	bls.n	8004ae0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b12:	46c0      	nop			; (mov r8, r8)
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b004      	add	sp, #16
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	20001b74 	.word	0x20001b74

08004b20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b30:	f001 f9de 	bl	8005ef0 <vPortEnterCritical>
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2244      	movs	r2, #68	; 0x44
 8004b38:	5c9b      	ldrb	r3, [r3, r2]
 8004b3a:	b25b      	sxtb	r3, r3
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	d103      	bne.n	8004b48 <vQueueWaitForMessageRestricted+0x28>
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2244      	movs	r2, #68	; 0x44
 8004b44:	2100      	movs	r1, #0
 8004b46:	5499      	strb	r1, [r3, r2]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2245      	movs	r2, #69	; 0x45
 8004b4c:	5c9b      	ldrb	r3, [r3, r2]
 8004b4e:	b25b      	sxtb	r3, r3
 8004b50:	3301      	adds	r3, #1
 8004b52:	d103      	bne.n	8004b5c <vQueueWaitForMessageRestricted+0x3c>
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2245      	movs	r2, #69	; 0x45
 8004b58:	2100      	movs	r1, #0
 8004b5a:	5499      	strb	r1, [r3, r2]
 8004b5c:	f001 f9da 	bl	8005f14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d106      	bne.n	8004b76 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	3324      	adds	r3, #36	; 0x24
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	0018      	movs	r0, r3
 8004b72:	f000 fbc5 	bl	8005300 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f7ff ff1d 	bl	80049b8 <prvUnlockQueue>
	}
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	46bd      	mov	sp, r7
 8004b82:	b006      	add	sp, #24
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b86:	b590      	push	{r4, r7, lr}
 8004b88:	b08d      	sub	sp, #52	; 0x34
 8004b8a:	af04      	add	r7, sp, #16
 8004b8c:	60f8      	str	r0, [r7, #12]
 8004b8e:	60b9      	str	r1, [r7, #8]
 8004b90:	607a      	str	r2, [r7, #4]
 8004b92:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <xTaskCreateStatic+0x18>
 8004b9a:	b672      	cpsid	i
 8004b9c:	e7fe      	b.n	8004b9c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <xTaskCreateStatic+0x22>
 8004ba4:	b672      	cpsid	i
 8004ba6:	e7fe      	b.n	8004ba6 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ba8:	235c      	movs	r3, #92	; 0x5c
 8004baa:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2b5c      	cmp	r3, #92	; 0x5c
 8004bb0:	d001      	beq.n	8004bb6 <xTaskCreateStatic+0x30>
 8004bb2:	b672      	cpsid	i
 8004bb4:	e7fe      	b.n	8004bb4 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d020      	beq.n	8004bfe <xTaskCreateStatic+0x78>
 8004bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d01d      	beq.n	8004bfe <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc4:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	2259      	movs	r2, #89	; 0x59
 8004bd0:	2102      	movs	r1, #2
 8004bd2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bd4:	683c      	ldr	r4, [r7, #0]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	2300      	movs	r3, #0
 8004bde:	9303      	str	r3, [sp, #12]
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	9302      	str	r3, [sp, #8]
 8004be4:	2318      	movs	r3, #24
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	9301      	str	r3, [sp, #4]
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	0023      	movs	r3, r4
 8004bf0:	f000 f858 	bl	8004ca4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f000 f8d6 	bl	8004da8 <prvAddNewTaskToReadyList>
 8004bfc:	e001      	b.n	8004c02 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c02:	69bb      	ldr	r3, [r7, #24]
	}
 8004c04:	0018      	movs	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	b009      	add	sp, #36	; 0x24
 8004c0a:	bd90      	pop	{r4, r7, pc}

08004c0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c0c:	b590      	push	{r4, r7, lr}
 8004c0e:	b08d      	sub	sp, #52	; 0x34
 8004c10:	af04      	add	r7, sp, #16
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	1dbb      	adds	r3, r7, #6
 8004c1a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c1c:	1dbb      	adds	r3, r7, #6
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	0018      	movs	r0, r3
 8004c24:	f001 f9fc 	bl	8006020 <pvPortMalloc>
 8004c28:	0003      	movs	r3, r0
 8004c2a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d010      	beq.n	8004c54 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004c32:	205c      	movs	r0, #92	; 0x5c
 8004c34:	f001 f9f4 	bl	8006020 <pvPortMalloc>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30
 8004c48:	e006      	b.n	8004c58 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f001 fa8d 	bl	800616c <vPortFree>
 8004c52:	e001      	b.n	8004c58 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d01a      	beq.n	8004c94 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	2259      	movs	r2, #89	; 0x59
 8004c62:	2100      	movs	r1, #0
 8004c64:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c66:	1dbb      	adds	r3, r7, #6
 8004c68:	881a      	ldrh	r2, [r3, #0]
 8004c6a:	683c      	ldr	r4, [r7, #0]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	2300      	movs	r3, #0
 8004c72:	9303      	str	r3, [sp, #12]
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	9302      	str	r3, [sp, #8]
 8004c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	0023      	movs	r3, r4
 8004c82:	f000 f80f 	bl	8004ca4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	0018      	movs	r0, r3
 8004c8a:	f000 f88d 	bl	8004da8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	e002      	b.n	8004c9a <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c94:	2301      	movs	r3, #1
 8004c96:	425b      	negs	r3, r3
 8004c98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c9a:	69bb      	ldr	r3, [r7, #24]
	}
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b009      	add	sp, #36	; 0x24
 8004ca2:	bd90      	pop	{r4, r7, pc}

08004ca4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	001a      	movs	r2, r3
 8004cbc:	21a5      	movs	r1, #165	; 0xa5
 8004cbe:	f001 fb82 	bl	80063c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4936      	ldr	r1, [pc, #216]	; (8004da4 <prvInitialiseNewTask+0x100>)
 8004cca:	468c      	mov	ip, r1
 8004ccc:	4463      	add	r3, ip
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	18d3      	adds	r3, r2, r3
 8004cd2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2207      	movs	r2, #7
 8004cd8:	4393      	bics	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	2207      	movs	r2, #7
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	d001      	beq.n	8004ce8 <prvInitialiseNewTask+0x44>
 8004ce4:	b672      	cpsid	i
 8004ce6:	e7fe      	b.n	8004ce6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ce8:	2300      	movs	r3, #0
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	e013      	b.n	8004d16 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	18d3      	adds	r3, r2, r3
 8004cf4:	7818      	ldrb	r0, [r3, #0]
 8004cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cf8:	2134      	movs	r1, #52	; 0x34
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	18d3      	adds	r3, r2, r3
 8004cfe:	185b      	adds	r3, r3, r1
 8004d00:	1c02      	adds	r2, r0, #0
 8004d02:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	18d3      	adds	r3, r2, r3
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d006      	beq.n	8004d1e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	3301      	adds	r3, #1
 8004d14:	617b      	str	r3, [r7, #20]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b0f      	cmp	r3, #15
 8004d1a:	d9e8      	bls.n	8004cee <prvInitialiseNewTask+0x4a>
 8004d1c:	e000      	b.n	8004d20 <prvInitialiseNewTask+0x7c>
		{
			break;
 8004d1e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d22:	2243      	movs	r2, #67	; 0x43
 8004d24:	2100      	movs	r1, #0
 8004d26:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	2b37      	cmp	r3, #55	; 0x37
 8004d2c:	d901      	bls.n	8004d32 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d2e:	2337      	movs	r3, #55	; 0x37
 8004d30:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	6a3a      	ldr	r2, [r7, #32]
 8004d36:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	6a3a      	ldr	r2, [r7, #32]
 8004d3c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	2200      	movs	r2, #0
 8004d42:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	3304      	adds	r3, #4
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f7ff fa69 	bl	8004220 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d50:	3318      	adds	r3, #24
 8004d52:	0018      	movs	r0, r3
 8004d54:	f7ff fa64 	bl	8004220 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	2238      	movs	r2, #56	; 0x38
 8004d62:	1ad2      	subs	r2, r2, r3
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	2200      	movs	r2, #0
 8004d72:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d76:	2258      	movs	r2, #88	; 0x58
 8004d78:	2100      	movs	r1, #0
 8004d7a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	68f9      	ldr	r1, [r7, #12]
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	0018      	movs	r0, r3
 8004d84:	f001 f81c 	bl	8005dc0 <pxPortInitialiseStack>
 8004d88:	0002      	movs	r2, r0
 8004d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	b006      	add	sp, #24
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	46c0      	nop			; (mov r8, r8)
 8004da4:	3fffffff 	.word	0x3fffffff

08004da8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004db0:	f001 f89e 	bl	8005ef0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004db4:	4b2a      	ldr	r3, [pc, #168]	; (8004e60 <prvAddNewTaskToReadyList+0xb8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	4b29      	ldr	r3, [pc, #164]	; (8004e60 <prvAddNewTaskToReadyList+0xb8>)
 8004dbc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004dbe:	4b29      	ldr	r3, [pc, #164]	; (8004e64 <prvAddNewTaskToReadyList+0xbc>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d109      	bne.n	8004dda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004dc6:	4b27      	ldr	r3, [pc, #156]	; (8004e64 <prvAddNewTaskToReadyList+0xbc>)
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004dcc:	4b24      	ldr	r3, [pc, #144]	; (8004e60 <prvAddNewTaskToReadyList+0xb8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d110      	bne.n	8004df6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004dd4:	f000 fb94 	bl	8005500 <prvInitialiseTaskLists>
 8004dd8:	e00d      	b.n	8004df6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004dda:	4b23      	ldr	r3, [pc, #140]	; (8004e68 <prvAddNewTaskToReadyList+0xc0>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d109      	bne.n	8004df6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004de2:	4b20      	ldr	r3, [pc, #128]	; (8004e64 <prvAddNewTaskToReadyList+0xbc>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d802      	bhi.n	8004df6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004df0:	4b1c      	ldr	r3, [pc, #112]	; (8004e64 <prvAddNewTaskToReadyList+0xbc>)
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004df6:	4b1d      	ldr	r3, [pc, #116]	; (8004e6c <prvAddNewTaskToReadyList+0xc4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	4b1b      	ldr	r3, [pc, #108]	; (8004e6c <prvAddNewTaskToReadyList+0xc4>)
 8004dfe:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e00:	4b1a      	ldr	r3, [pc, #104]	; (8004e6c <prvAddNewTaskToReadyList+0xc4>)
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e0c:	4b18      	ldr	r3, [pc, #96]	; (8004e70 <prvAddNewTaskToReadyList+0xc8>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d903      	bls.n	8004e1c <prvAddNewTaskToReadyList+0x74>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e18:	4b15      	ldr	r3, [pc, #84]	; (8004e70 <prvAddNewTaskToReadyList+0xc8>)
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e20:	0013      	movs	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	189b      	adds	r3, r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4a12      	ldr	r2, [pc, #72]	; (8004e74 <prvAddNewTaskToReadyList+0xcc>)
 8004e2a:	189a      	adds	r2, r3, r2
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	0019      	movs	r1, r3
 8004e32:	0010      	movs	r0, r2
 8004e34:	f7ff f9ff 	bl	8004236 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e38:	f001 f86c 	bl	8005f14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <prvAddNewTaskToReadyList+0xc0>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d008      	beq.n	8004e56 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e44:	4b07      	ldr	r3, [pc, #28]	; (8004e64 <prvAddNewTaskToReadyList+0xbc>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d201      	bcs.n	8004e56 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e52:	f001 f83d 	bl	8005ed0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	b002      	add	sp, #8
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	20000c08 	.word	0x20000c08
 8004e64:	20000734 	.word	0x20000734
 8004e68:	20000c14 	.word	0x20000c14
 8004e6c:	20000c24 	.word	0x20000c24
 8004e70:	20000c10 	.word	0x20000c10
 8004e74:	20000738 	.word	0x20000738

08004e78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d010      	beq.n	8004eac <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ec0 <vTaskDelay+0x48>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <vTaskDelay+0x1e>
 8004e92:	b672      	cpsid	i
 8004e94:	e7fe      	b.n	8004e94 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004e96:	f000 f869 	bl	8004f6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f000 fc64 	bl	800576c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ea4:	f000 f86e 	bl	8004f84 <xTaskResumeAll>
 8004ea8:	0003      	movs	r3, r0
 8004eaa:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8004eb2:	f001 f80d 	bl	8005ed0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	b004      	add	sp, #16
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	20000c30 	.word	0x20000c30

08004ec4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ec4:	b590      	push	{r4, r7, lr}
 8004ec6:	b089      	sub	sp, #36	; 0x24
 8004ec8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ed2:	003a      	movs	r2, r7
 8004ed4:	1d39      	adds	r1, r7, #4
 8004ed6:	2308      	movs	r3, #8
 8004ed8:	18fb      	adds	r3, r7, r3
 8004eda:	0018      	movs	r0, r3
 8004edc:	f7ff f952 	bl	8004184 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ee0:	683c      	ldr	r4, [r7, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	491b      	ldr	r1, [pc, #108]	; (8004f54 <vTaskStartScheduler+0x90>)
 8004ee8:	481b      	ldr	r0, [pc, #108]	; (8004f58 <vTaskStartScheduler+0x94>)
 8004eea:	9202      	str	r2, [sp, #8]
 8004eec:	9301      	str	r3, [sp, #4]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	0022      	movs	r2, r4
 8004ef6:	f7ff fe46 	bl	8004b86 <xTaskCreateStatic>
 8004efa:	0002      	movs	r2, r0
 8004efc:	4b17      	ldr	r3, [pc, #92]	; (8004f5c <vTaskStartScheduler+0x98>)
 8004efe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f00:	4b16      	ldr	r3, [pc, #88]	; (8004f5c <vTaskStartScheduler+0x98>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	e001      	b.n	8004f12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d103      	bne.n	8004f20 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8004f18:	f000 fc7c 	bl	8005814 <xTimerCreateTimerTask>
 8004f1c:	0003      	movs	r3, r0
 8004f1e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d10d      	bne.n	8004f42 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004f26:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f28:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <vTaskStartScheduler+0x9c>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	4252      	negs	r2, r2
 8004f2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f30:	4b0c      	ldr	r3, [pc, #48]	; (8004f64 <vTaskStartScheduler+0xa0>)
 8004f32:	2201      	movs	r2, #1
 8004f34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004f36:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <vTaskStartScheduler+0xa4>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f3c:	f000 ffa4 	bl	8005e88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f40:	e004      	b.n	8004f4c <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3301      	adds	r3, #1
 8004f46:	d101      	bne.n	8004f4c <vTaskStartScheduler+0x88>
 8004f48:	b672      	cpsid	i
 8004f4a:	e7fe      	b.n	8004f4a <vTaskStartScheduler+0x86>
}
 8004f4c:	46c0      	nop			; (mov r8, r8)
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	b005      	add	sp, #20
 8004f52:	bd90      	pop	{r4, r7, pc}
 8004f54:	0800643c 	.word	0x0800643c
 8004f58:	080054e1 	.word	0x080054e1
 8004f5c:	20000c2c 	.word	0x20000c2c
 8004f60:	20000c28 	.word	0x20000c28
 8004f64:	20000c14 	.word	0x20000c14
 8004f68:	20000c0c 	.word	0x20000c0c

08004f6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004f70:	4b03      	ldr	r3, [pc, #12]	; (8004f80 <vTaskSuspendAll+0x14>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	4b02      	ldr	r3, [pc, #8]	; (8004f80 <vTaskSuspendAll+0x14>)
 8004f78:	601a      	str	r2, [r3, #0]
}
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	20000c30 	.word	0x20000c30

08004f84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f92:	4b3a      	ldr	r3, [pc, #232]	; (800507c <xTaskResumeAll+0xf8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <xTaskResumeAll+0x1a>
 8004f9a:	b672      	cpsid	i
 8004f9c:	e7fe      	b.n	8004f9c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f9e:	f000 ffa7 	bl	8005ef0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004fa2:	4b36      	ldr	r3, [pc, #216]	; (800507c <xTaskResumeAll+0xf8>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	1e5a      	subs	r2, r3, #1
 8004fa8:	4b34      	ldr	r3, [pc, #208]	; (800507c <xTaskResumeAll+0xf8>)
 8004faa:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fac:	4b33      	ldr	r3, [pc, #204]	; (800507c <xTaskResumeAll+0xf8>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d15b      	bne.n	800506c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004fb4:	4b32      	ldr	r3, [pc, #200]	; (8005080 <xTaskResumeAll+0xfc>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d057      	beq.n	800506c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fbc:	e02f      	b.n	800501e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004fbe:	4b31      	ldr	r3, [pc, #196]	; (8005084 <xTaskResumeAll+0x100>)
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3318      	adds	r3, #24
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f7ff f98b 	bl	80042e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f7ff f986 	bl	80042e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fde:	4b2a      	ldr	r3, [pc, #168]	; (8005088 <xTaskResumeAll+0x104>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d903      	bls.n	8004fee <xTaskResumeAll+0x6a>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fea:	4b27      	ldr	r3, [pc, #156]	; (8005088 <xTaskResumeAll+0x104>)
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff2:	0013      	movs	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	189b      	adds	r3, r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4a24      	ldr	r2, [pc, #144]	; (800508c <xTaskResumeAll+0x108>)
 8004ffc:	189a      	adds	r2, r3, r2
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	3304      	adds	r3, #4
 8005002:	0019      	movs	r1, r3
 8005004:	0010      	movs	r0, r2
 8005006:	f7ff f916 	bl	8004236 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500e:	4b20      	ldr	r3, [pc, #128]	; (8005090 <xTaskResumeAll+0x10c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	429a      	cmp	r2, r3
 8005016:	d302      	bcc.n	800501e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8005018:	4b1e      	ldr	r3, [pc, #120]	; (8005094 <xTaskResumeAll+0x110>)
 800501a:	2201      	movs	r2, #1
 800501c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800501e:	4b19      	ldr	r3, [pc, #100]	; (8005084 <xTaskResumeAll+0x100>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1cb      	bne.n	8004fbe <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800502c:	f000 fb02 	bl	8005634 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005030:	4b19      	ldr	r3, [pc, #100]	; (8005098 <xTaskResumeAll+0x114>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00f      	beq.n	800505c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800503c:	f000 f83c 	bl	80050b8 <xTaskIncrementTick>
 8005040:	1e03      	subs	r3, r0, #0
 8005042:	d002      	beq.n	800504a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8005044:	4b13      	ldr	r3, [pc, #76]	; (8005094 <xTaskResumeAll+0x110>)
 8005046:	2201      	movs	r2, #1
 8005048:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3b01      	subs	r3, #1
 800504e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f2      	bne.n	800503c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8005056:	4b10      	ldr	r3, [pc, #64]	; (8005098 <xTaskResumeAll+0x114>)
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800505c:	4b0d      	ldr	r3, [pc, #52]	; (8005094 <xTaskResumeAll+0x110>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005064:	2301      	movs	r3, #1
 8005066:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005068:	f000 ff32 	bl	8005ed0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800506c:	f000 ff52 	bl	8005f14 <vPortExitCritical>

	return xAlreadyYielded;
 8005070:	68bb      	ldr	r3, [r7, #8]
}
 8005072:	0018      	movs	r0, r3
 8005074:	46bd      	mov	sp, r7
 8005076:	b004      	add	sp, #16
 8005078:	bd80      	pop	{r7, pc}
 800507a:	46c0      	nop			; (mov r8, r8)
 800507c:	20000c30 	.word	0x20000c30
 8005080:	20000c08 	.word	0x20000c08
 8005084:	20000bc8 	.word	0x20000bc8
 8005088:	20000c10 	.word	0x20000c10
 800508c:	20000738 	.word	0x20000738
 8005090:	20000734 	.word	0x20000734
 8005094:	20000c1c 	.word	0x20000c1c
 8005098:	20000c18 	.word	0x20000c18

0800509c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80050a2:	4b04      	ldr	r3, [pc, #16]	; (80050b4 <xTaskGetTickCount+0x18>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80050a8:	687b      	ldr	r3, [r7, #4]
}
 80050aa:	0018      	movs	r0, r3
 80050ac:	46bd      	mov	sp, r7
 80050ae:	b002      	add	sp, #8
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	20000c0c 	.word	0x20000c0c

080050b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80050be:	2300      	movs	r3, #0
 80050c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050c2:	4b4c      	ldr	r3, [pc, #304]	; (80051f4 <xTaskIncrementTick+0x13c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d000      	beq.n	80050cc <xTaskIncrementTick+0x14>
 80050ca:	e083      	b.n	80051d4 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050cc:	4b4a      	ldr	r3, [pc, #296]	; (80051f8 <xTaskIncrementTick+0x140>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3301      	adds	r3, #1
 80050d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050d4:	4b48      	ldr	r3, [pc, #288]	; (80051f8 <xTaskIncrementTick+0x140>)
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d117      	bne.n	8005110 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80050e0:	4b46      	ldr	r3, [pc, #280]	; (80051fc <xTaskIncrementTick+0x144>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <xTaskIncrementTick+0x36>
 80050ea:	b672      	cpsid	i
 80050ec:	e7fe      	b.n	80050ec <xTaskIncrementTick+0x34>
 80050ee:	4b43      	ldr	r3, [pc, #268]	; (80051fc <xTaskIncrementTick+0x144>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	4b42      	ldr	r3, [pc, #264]	; (8005200 <xTaskIncrementTick+0x148>)
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	4b40      	ldr	r3, [pc, #256]	; (80051fc <xTaskIncrementTick+0x144>)
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	4b40      	ldr	r3, [pc, #256]	; (8005200 <xTaskIncrementTick+0x148>)
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	4b40      	ldr	r3, [pc, #256]	; (8005204 <xTaskIncrementTick+0x14c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	4b3e      	ldr	r3, [pc, #248]	; (8005204 <xTaskIncrementTick+0x14c>)
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	f000 fa92 	bl	8005634 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005110:	4b3d      	ldr	r3, [pc, #244]	; (8005208 <xTaskIncrementTick+0x150>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	429a      	cmp	r2, r3
 8005118:	d34e      	bcc.n	80051b8 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800511a:	4b38      	ldr	r3, [pc, #224]	; (80051fc <xTaskIncrementTick+0x144>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <xTaskIncrementTick+0x70>
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <xTaskIncrementTick+0x72>
 8005128:	2300      	movs	r3, #0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d004      	beq.n	8005138 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800512e:	4b36      	ldr	r3, [pc, #216]	; (8005208 <xTaskIncrementTick+0x150>)
 8005130:	2201      	movs	r2, #1
 8005132:	4252      	negs	r2, r2
 8005134:	601a      	str	r2, [r3, #0]
					break;
 8005136:	e03f      	b.n	80051b8 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005138:	4b30      	ldr	r3, [pc, #192]	; (80051fc <xTaskIncrementTick+0x144>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	429a      	cmp	r2, r3
 800514e:	d203      	bcs.n	8005158 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005150:	4b2d      	ldr	r3, [pc, #180]	; (8005208 <xTaskIncrementTick+0x150>)
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	601a      	str	r2, [r3, #0]
						break;
 8005156:	e02f      	b.n	80051b8 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	3304      	adds	r3, #4
 800515c:	0018      	movs	r0, r3
 800515e:	f7ff f8c2 	bl	80042e6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	2b00      	cmp	r3, #0
 8005168:	d004      	beq.n	8005174 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	3318      	adds	r3, #24
 800516e:	0018      	movs	r0, r3
 8005170:	f7ff f8b9 	bl	80042e6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005178:	4b24      	ldr	r3, [pc, #144]	; (800520c <xTaskIncrementTick+0x154>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d903      	bls.n	8005188 <xTaskIncrementTick+0xd0>
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005184:	4b21      	ldr	r3, [pc, #132]	; (800520c <xTaskIncrementTick+0x154>)
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518c:	0013      	movs	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	189b      	adds	r3, r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4a1e      	ldr	r2, [pc, #120]	; (8005210 <xTaskIncrementTick+0x158>)
 8005196:	189a      	adds	r2, r3, r2
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	3304      	adds	r3, #4
 800519c:	0019      	movs	r1, r3
 800519e:	0010      	movs	r0, r2
 80051a0:	f7ff f849 	bl	8004236 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a8:	4b1a      	ldr	r3, [pc, #104]	; (8005214 <xTaskIncrementTick+0x15c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d3b3      	bcc.n	800511a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80051b2:	2301      	movs	r3, #1
 80051b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051b6:	e7b0      	b.n	800511a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80051b8:	4b16      	ldr	r3, [pc, #88]	; (8005214 <xTaskIncrementTick+0x15c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051be:	4914      	ldr	r1, [pc, #80]	; (8005210 <xTaskIncrementTick+0x158>)
 80051c0:	0013      	movs	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	189b      	adds	r3, r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	585b      	ldr	r3, [r3, r1]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d907      	bls.n	80051de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80051ce:	2301      	movs	r3, #1
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	e004      	b.n	80051de <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80051d4:	4b10      	ldr	r3, [pc, #64]	; (8005218 <xTaskIncrementTick+0x160>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	4b0f      	ldr	r3, [pc, #60]	; (8005218 <xTaskIncrementTick+0x160>)
 80051dc:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80051de:	4b0f      	ldr	r3, [pc, #60]	; (800521c <xTaskIncrementTick+0x164>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80051e6:	2301      	movs	r3, #1
 80051e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80051ea:	697b      	ldr	r3, [r7, #20]
}
 80051ec:	0018      	movs	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	b006      	add	sp, #24
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	20000c30 	.word	0x20000c30
 80051f8:	20000c0c 	.word	0x20000c0c
 80051fc:	20000bc0 	.word	0x20000bc0
 8005200:	20000bc4 	.word	0x20000bc4
 8005204:	20000c20 	.word	0x20000c20
 8005208:	20000c28 	.word	0x20000c28
 800520c:	20000c10 	.word	0x20000c10
 8005210:	20000738 	.word	0x20000738
 8005214:	20000734 	.word	0x20000734
 8005218:	20000c18 	.word	0x20000c18
 800521c:	20000c1c 	.word	0x20000c1c

08005220 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005226:	4b22      	ldr	r3, [pc, #136]	; (80052b0 <vTaskSwitchContext+0x90>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800522e:	4b21      	ldr	r3, [pc, #132]	; (80052b4 <vTaskSwitchContext+0x94>)
 8005230:	2201      	movs	r2, #1
 8005232:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005234:	e037      	b.n	80052a6 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8005236:	4b1f      	ldr	r3, [pc, #124]	; (80052b4 <vTaskSwitchContext+0x94>)
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800523c:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <vTaskSwitchContext+0x98>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	607b      	str	r3, [r7, #4]
 8005242:	e007      	b.n	8005254 <vTaskSwitchContext+0x34>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <vTaskSwitchContext+0x2e>
 800524a:	b672      	cpsid	i
 800524c:	e7fe      	b.n	800524c <vTaskSwitchContext+0x2c>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	3b01      	subs	r3, #1
 8005252:	607b      	str	r3, [r7, #4]
 8005254:	4919      	ldr	r1, [pc, #100]	; (80052bc <vTaskSwitchContext+0x9c>)
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	0013      	movs	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	189b      	adds	r3, r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	585b      	ldr	r3, [r3, r1]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0ee      	beq.n	8005244 <vTaskSwitchContext+0x24>
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	0013      	movs	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	189b      	adds	r3, r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4a12      	ldr	r2, [pc, #72]	; (80052bc <vTaskSwitchContext+0x9c>)
 8005272:	189b      	adds	r3, r3, r2
 8005274:	603b      	str	r3, [r7, #0]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	605a      	str	r2, [r3, #4]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	3308      	adds	r3, #8
 8005288:	429a      	cmp	r2, r3
 800528a:	d104      	bne.n	8005296 <vTaskSwitchContext+0x76>
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	605a      	str	r2, [r3, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	4b08      	ldr	r3, [pc, #32]	; (80052c0 <vTaskSwitchContext+0xa0>)
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <vTaskSwitchContext+0x98>)
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	601a      	str	r2, [r3, #0]
}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	46bd      	mov	sp, r7
 80052aa:	b002      	add	sp, #8
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	20000c30 	.word	0x20000c30
 80052b4:	20000c1c 	.word	0x20000c1c
 80052b8:	20000c10 	.word	0x20000c10
 80052bc:	20000738 	.word	0x20000738
 80052c0:	20000734 	.word	0x20000734

080052c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <vTaskPlaceOnEventList+0x14>
 80052d4:	b672      	cpsid	i
 80052d6:	e7fe      	b.n	80052d6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052d8:	4b08      	ldr	r3, [pc, #32]	; (80052fc <vTaskPlaceOnEventList+0x38>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3318      	adds	r3, #24
 80052de:	001a      	movs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	0011      	movs	r1, r2
 80052e4:	0018      	movs	r0, r3
 80052e6:	f7fe ffc8 	bl	800427a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2101      	movs	r1, #1
 80052ee:	0018      	movs	r0, r3
 80052f0:	f000 fa3c 	bl	800576c <prvAddCurrentTaskToDelayedList>
}
 80052f4:	46c0      	nop			; (mov r8, r8)
 80052f6:	46bd      	mov	sp, r7
 80052f8:	b002      	add	sp, #8
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20000734 	.word	0x20000734

08005300 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <vTaskPlaceOnEventListRestricted+0x16>
 8005312:	b672      	cpsid	i
 8005314:	e7fe      	b.n	8005314 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005316:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <vTaskPlaceOnEventListRestricted+0x48>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3318      	adds	r3, #24
 800531c:	001a      	movs	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	0011      	movs	r1, r2
 8005322:	0018      	movs	r0, r3
 8005324:	f7fe ff87 	bl	8004236 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800532e:	2301      	movs	r3, #1
 8005330:	425b      	negs	r3, r3
 8005332:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	0011      	movs	r1, r2
 800533a:	0018      	movs	r0, r3
 800533c:	f000 fa16 	bl	800576c <prvAddCurrentTaskToDelayedList>
	}
 8005340:	46c0      	nop			; (mov r8, r8)
 8005342:	46bd      	mov	sp, r7
 8005344:	b004      	add	sp, #16
 8005346:	bd80      	pop	{r7, pc}
 8005348:	20000734 	.word	0x20000734

0800534c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <xTaskRemoveFromEventList+0x1a>
 8005362:	b672      	cpsid	i
 8005364:	e7fe      	b.n	8005364 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	3318      	adds	r3, #24
 800536a:	0018      	movs	r0, r3
 800536c:	f7fe ffbb 	bl	80042e6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005370:	4b1e      	ldr	r3, [pc, #120]	; (80053ec <xTaskRemoveFromEventList+0xa0>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d11d      	bne.n	80053b4 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	3304      	adds	r3, #4
 800537c:	0018      	movs	r0, r3
 800537e:	f7fe ffb2 	bl	80042e6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005386:	4b1a      	ldr	r3, [pc, #104]	; (80053f0 <xTaskRemoveFromEventList+0xa4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d903      	bls.n	8005396 <xTaskRemoveFromEventList+0x4a>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005392:	4b17      	ldr	r3, [pc, #92]	; (80053f0 <xTaskRemoveFromEventList+0xa4>)
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539a:	0013      	movs	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	189b      	adds	r3, r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4a14      	ldr	r2, [pc, #80]	; (80053f4 <xTaskRemoveFromEventList+0xa8>)
 80053a4:	189a      	adds	r2, r3, r2
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	3304      	adds	r3, #4
 80053aa:	0019      	movs	r1, r3
 80053ac:	0010      	movs	r0, r2
 80053ae:	f7fe ff42 	bl	8004236 <vListInsertEnd>
 80053b2:	e007      	b.n	80053c4 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	3318      	adds	r3, #24
 80053b8:	001a      	movs	r2, r3
 80053ba:	4b0f      	ldr	r3, [pc, #60]	; (80053f8 <xTaskRemoveFromEventList+0xac>)
 80053bc:	0011      	movs	r1, r2
 80053be:	0018      	movs	r0, r3
 80053c0:	f7fe ff39 	bl	8004236 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c8:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <xTaskRemoveFromEventList+0xb0>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d905      	bls.n	80053de <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80053d2:	2301      	movs	r3, #1
 80053d4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80053d6:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <xTaskRemoveFromEventList+0xb4>)
 80053d8:	2201      	movs	r2, #1
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	e001      	b.n	80053e2 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80053de:	2300      	movs	r3, #0
 80053e0:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80053e2:	68fb      	ldr	r3, [r7, #12]
}
 80053e4:	0018      	movs	r0, r3
 80053e6:	46bd      	mov	sp, r7
 80053e8:	b004      	add	sp, #16
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	20000c30 	.word	0x20000c30
 80053f0:	20000c10 	.word	0x20000c10
 80053f4:	20000738 	.word	0x20000738
 80053f8:	20000bc8 	.word	0x20000bc8
 80053fc:	20000734 	.word	0x20000734
 8005400:	20000c1c 	.word	0x20000c1c

08005404 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800540c:	4b05      	ldr	r3, [pc, #20]	; (8005424 <vTaskInternalSetTimeOutState+0x20>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005414:	4b04      	ldr	r3, [pc, #16]	; (8005428 <vTaskInternalSetTimeOutState+0x24>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	605a      	str	r2, [r3, #4]
}
 800541c:	46c0      	nop			; (mov r8, r8)
 800541e:	46bd      	mov	sp, r7
 8005420:	b002      	add	sp, #8
 8005422:	bd80      	pop	{r7, pc}
 8005424:	20000c20 	.word	0x20000c20
 8005428:	20000c0c 	.word	0x20000c0c

0800542c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <xTaskCheckForTimeOut+0x14>
 800543c:	b672      	cpsid	i
 800543e:	e7fe      	b.n	800543e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <xTaskCheckForTimeOut+0x1e>
 8005446:	b672      	cpsid	i
 8005448:	e7fe      	b.n	8005448 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800544a:	f000 fd51 	bl	8005ef0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800544e:	4b1d      	ldr	r3, [pc, #116]	; (80054c4 <xTaskCheckForTimeOut+0x98>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3301      	adds	r3, #1
 8005464:	d102      	bne.n	800546c <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005466:	2300      	movs	r3, #0
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	e024      	b.n	80054b6 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	4b15      	ldr	r3, [pc, #84]	; (80054c8 <xTaskCheckForTimeOut+0x9c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d007      	beq.n	8005488 <xTaskCheckForTimeOut+0x5c>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	429a      	cmp	r2, r3
 8005480:	d302      	bcc.n	8005488 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005482:	2301      	movs	r3, #1
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	e016      	b.n	80054b6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	429a      	cmp	r2, r3
 8005490:	d20c      	bcs.n	80054ac <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	1ad2      	subs	r2, r2, r3
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	0018      	movs	r0, r3
 80054a2:	f7ff ffaf 	bl	8005404 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80054a6:	2300      	movs	r3, #0
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	e004      	b.n	80054b6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80054b2:	2301      	movs	r3, #1
 80054b4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80054b6:	f000 fd2d 	bl	8005f14 <vPortExitCritical>

	return xReturn;
 80054ba:	697b      	ldr	r3, [r7, #20]
}
 80054bc:	0018      	movs	r0, r3
 80054be:	46bd      	mov	sp, r7
 80054c0:	b006      	add	sp, #24
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20000c0c 	.word	0x20000c0c
 80054c8:	20000c20 	.word	0x20000c20

080054cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054d0:	4b02      	ldr	r3, [pc, #8]	; (80054dc <vTaskMissedYield+0x10>)
 80054d2:	2201      	movs	r2, #1
 80054d4:	601a      	str	r2, [r3, #0]
}
 80054d6:	46c0      	nop			; (mov r8, r8)
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20000c1c 	.word	0x20000c1c

080054e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054e8:	f000 f84e 	bl	8005588 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054ec:	4b03      	ldr	r3, [pc, #12]	; (80054fc <prvIdleTask+0x1c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d9f9      	bls.n	80054e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80054f4:	f000 fcec 	bl	8005ed0 <vPortYield>
		prvCheckTasksWaitingTermination();
 80054f8:	e7f6      	b.n	80054e8 <prvIdleTask+0x8>
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	20000738 	.word	0x20000738

08005500 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005506:	2300      	movs	r3, #0
 8005508:	607b      	str	r3, [r7, #4]
 800550a:	e00c      	b.n	8005526 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	0013      	movs	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	189b      	adds	r3, r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4a14      	ldr	r2, [pc, #80]	; (8005568 <prvInitialiseTaskLists+0x68>)
 8005518:	189b      	adds	r3, r3, r2
 800551a:	0018      	movs	r0, r3
 800551c:	f7fe fe62 	bl	80041e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3301      	adds	r3, #1
 8005524:	607b      	str	r3, [r7, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b37      	cmp	r3, #55	; 0x37
 800552a:	d9ef      	bls.n	800550c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800552c:	4b0f      	ldr	r3, [pc, #60]	; (800556c <prvInitialiseTaskLists+0x6c>)
 800552e:	0018      	movs	r0, r3
 8005530:	f7fe fe58 	bl	80041e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005534:	4b0e      	ldr	r3, [pc, #56]	; (8005570 <prvInitialiseTaskLists+0x70>)
 8005536:	0018      	movs	r0, r3
 8005538:	f7fe fe54 	bl	80041e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800553c:	4b0d      	ldr	r3, [pc, #52]	; (8005574 <prvInitialiseTaskLists+0x74>)
 800553e:	0018      	movs	r0, r3
 8005540:	f7fe fe50 	bl	80041e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005544:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <prvInitialiseTaskLists+0x78>)
 8005546:	0018      	movs	r0, r3
 8005548:	f7fe fe4c 	bl	80041e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800554c:	4b0b      	ldr	r3, [pc, #44]	; (800557c <prvInitialiseTaskLists+0x7c>)
 800554e:	0018      	movs	r0, r3
 8005550:	f7fe fe48 	bl	80041e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005554:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <prvInitialiseTaskLists+0x80>)
 8005556:	4a05      	ldr	r2, [pc, #20]	; (800556c <prvInitialiseTaskLists+0x6c>)
 8005558:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800555a:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <prvInitialiseTaskLists+0x84>)
 800555c:	4a04      	ldr	r2, [pc, #16]	; (8005570 <prvInitialiseTaskLists+0x70>)
 800555e:	601a      	str	r2, [r3, #0]
}
 8005560:	46c0      	nop			; (mov r8, r8)
 8005562:	46bd      	mov	sp, r7
 8005564:	b002      	add	sp, #8
 8005566:	bd80      	pop	{r7, pc}
 8005568:	20000738 	.word	0x20000738
 800556c:	20000b98 	.word	0x20000b98
 8005570:	20000bac 	.word	0x20000bac
 8005574:	20000bc8 	.word	0x20000bc8
 8005578:	20000bdc 	.word	0x20000bdc
 800557c:	20000bf4 	.word	0x20000bf4
 8005580:	20000bc0 	.word	0x20000bc0
 8005584:	20000bc4 	.word	0x20000bc4

08005588 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800558e:	e01a      	b.n	80055c6 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005590:	f000 fcae 	bl	8005ef0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005594:	4b10      	ldr	r3, [pc, #64]	; (80055d8 <prvCheckTasksWaitingTermination+0x50>)
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3304      	adds	r3, #4
 80055a0:	0018      	movs	r0, r3
 80055a2:	f7fe fea0 	bl	80042e6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80055a6:	4b0d      	ldr	r3, [pc, #52]	; (80055dc <prvCheckTasksWaitingTermination+0x54>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	1e5a      	subs	r2, r3, #1
 80055ac:	4b0b      	ldr	r3, [pc, #44]	; (80055dc <prvCheckTasksWaitingTermination+0x54>)
 80055ae:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80055b0:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <prvCheckTasksWaitingTermination+0x58>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	1e5a      	subs	r2, r3, #1
 80055b6:	4b0a      	ldr	r3, [pc, #40]	; (80055e0 <prvCheckTasksWaitingTermination+0x58>)
 80055b8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80055ba:	f000 fcab 	bl	8005f14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	0018      	movs	r0, r3
 80055c2:	f000 f80f 	bl	80055e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055c6:	4b06      	ldr	r3, [pc, #24]	; (80055e0 <prvCheckTasksWaitingTermination+0x58>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e0      	bne.n	8005590 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	46bd      	mov	sp, r7
 80055d2:	b002      	add	sp, #8
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	20000bdc 	.word	0x20000bdc
 80055dc:	20000c08 	.word	0x20000c08
 80055e0:	20000bf0 	.word	0x20000bf0

080055e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2259      	movs	r2, #89	; 0x59
 80055f0:	5c9b      	ldrb	r3, [r3, r2]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d109      	bne.n	800560a <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fa:	0018      	movs	r0, r3
 80055fc:	f000 fdb6 	bl	800616c <vPortFree>
				vPortFree( pxTCB );
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	0018      	movs	r0, r3
 8005604:	f000 fdb2 	bl	800616c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005608:	e010      	b.n	800562c <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2259      	movs	r2, #89	; 0x59
 800560e:	5c9b      	ldrb	r3, [r3, r2]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d104      	bne.n	800561e <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	0018      	movs	r0, r3
 8005618:	f000 fda8 	bl	800616c <vPortFree>
	}
 800561c:	e006      	b.n	800562c <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2259      	movs	r2, #89	; 0x59
 8005622:	5c9b      	ldrb	r3, [r3, r2]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d001      	beq.n	800562c <prvDeleteTCB+0x48>
 8005628:	b672      	cpsid	i
 800562a:	e7fe      	b.n	800562a <prvDeleteTCB+0x46>
	}
 800562c:	46c0      	nop			; (mov r8, r8)
 800562e:	46bd      	mov	sp, r7
 8005630:	b002      	add	sp, #8
 8005632:	bd80      	pop	{r7, pc}

08005634 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800563a:	4b0e      	ldr	r3, [pc, #56]	; (8005674 <prvResetNextTaskUnblockTime+0x40>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <prvResetNextTaskUnblockTime+0x14>
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <prvResetNextTaskUnblockTime+0x16>
 8005648:	2300      	movs	r3, #0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d004      	beq.n	8005658 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800564e:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <prvResetNextTaskUnblockTime+0x44>)
 8005650:	2201      	movs	r2, #1
 8005652:	4252      	negs	r2, r2
 8005654:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005656:	e008      	b.n	800566a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005658:	4b06      	ldr	r3, [pc, #24]	; (8005674 <prvResetNextTaskUnblockTime+0x40>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	4b04      	ldr	r3, [pc, #16]	; (8005678 <prvResetNextTaskUnblockTime+0x44>)
 8005668:	601a      	str	r2, [r3, #0]
}
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	46bd      	mov	sp, r7
 800566e:	b002      	add	sp, #8
 8005670:	bd80      	pop	{r7, pc}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	20000bc0 	.word	0x20000bc0
 8005678:	20000c28 	.word	0x20000c28

0800567c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005682:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <xTaskGetSchedulerState+0x30>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d102      	bne.n	8005690 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800568a:	2301      	movs	r3, #1
 800568c:	607b      	str	r3, [r7, #4]
 800568e:	e008      	b.n	80056a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005690:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <xTaskGetSchedulerState+0x34>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d102      	bne.n	800569e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005698:	2302      	movs	r3, #2
 800569a:	607b      	str	r3, [r7, #4]
 800569c:	e001      	b.n	80056a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800569e:	2300      	movs	r3, #0
 80056a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80056a2:	687b      	ldr	r3, [r7, #4]
	}
 80056a4:	0018      	movs	r0, r3
 80056a6:	46bd      	mov	sp, r7
 80056a8:	b002      	add	sp, #8
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	20000c14 	.word	0x20000c14
 80056b0:	20000c30 	.word	0x20000c30

080056b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d044      	beq.n	8005754 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80056ca:	4b25      	ldr	r3, [pc, #148]	; (8005760 <xTaskPriorityDisinherit+0xac>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d001      	beq.n	80056d8 <xTaskPriorityDisinherit+0x24>
 80056d4:	b672      	cpsid	i
 80056d6:	e7fe      	b.n	80056d6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <xTaskPriorityDisinherit+0x30>
 80056e0:	b672      	cpsid	i
 80056e2:	e7fe      	b.n	80056e2 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e8:	1e5a      	subs	r2, r3, #1
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d02c      	beq.n	8005754 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d128      	bne.n	8005754 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	3304      	adds	r3, #4
 8005706:	0018      	movs	r0, r3
 8005708:	f7fe fded 	bl	80042e6 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	2238      	movs	r2, #56	; 0x38
 800571a:	1ad2      	subs	r2, r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005724:	4b0f      	ldr	r3, [pc, #60]	; (8005764 <xTaskPriorityDisinherit+0xb0>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d903      	bls.n	8005734 <xTaskPriorityDisinherit+0x80>
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005730:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <xTaskPriorityDisinherit+0xb0>)
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005738:	0013      	movs	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	189b      	adds	r3, r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4a09      	ldr	r2, [pc, #36]	; (8005768 <xTaskPriorityDisinherit+0xb4>)
 8005742:	189a      	adds	r2, r3, r2
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	3304      	adds	r3, #4
 8005748:	0019      	movs	r1, r3
 800574a:	0010      	movs	r0, r2
 800574c:	f7fe fd73 	bl	8004236 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005750:	2301      	movs	r3, #1
 8005752:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005754:	68fb      	ldr	r3, [r7, #12]
	}
 8005756:	0018      	movs	r0, r3
 8005758:	46bd      	mov	sp, r7
 800575a:	b004      	add	sp, #16
 800575c:	bd80      	pop	{r7, pc}
 800575e:	46c0      	nop			; (mov r8, r8)
 8005760:	20000734 	.word	0x20000734
 8005764:	20000c10 	.word	0x20000c10
 8005768:	20000738 	.word	0x20000738

0800576c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005776:	4b21      	ldr	r3, [pc, #132]	; (80057fc <prvAddCurrentTaskToDelayedList+0x90>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800577c:	4b20      	ldr	r3, [pc, #128]	; (8005800 <prvAddCurrentTaskToDelayedList+0x94>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3304      	adds	r3, #4
 8005782:	0018      	movs	r0, r3
 8005784:	f7fe fdaf 	bl	80042e6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3301      	adds	r3, #1
 800578c:	d10b      	bne.n	80057a6 <prvAddCurrentTaskToDelayedList+0x3a>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d008      	beq.n	80057a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005794:	4b1a      	ldr	r3, [pc, #104]	; (8005800 <prvAddCurrentTaskToDelayedList+0x94>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	1d1a      	adds	r2, r3, #4
 800579a:	4b1a      	ldr	r3, [pc, #104]	; (8005804 <prvAddCurrentTaskToDelayedList+0x98>)
 800579c:	0011      	movs	r1, r2
 800579e:	0018      	movs	r0, r3
 80057a0:	f7fe fd49 	bl	8004236 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057a4:	e026      	b.n	80057f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	18d3      	adds	r3, r2, r3
 80057ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057ae:	4b14      	ldr	r3, [pc, #80]	; (8005800 <prvAddCurrentTaskToDelayedList+0x94>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d209      	bcs.n	80057d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057be:	4b12      	ldr	r3, [pc, #72]	; (8005808 <prvAddCurrentTaskToDelayedList+0x9c>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b0f      	ldr	r3, [pc, #60]	; (8005800 <prvAddCurrentTaskToDelayedList+0x94>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3304      	adds	r3, #4
 80057c8:	0019      	movs	r1, r3
 80057ca:	0010      	movs	r0, r2
 80057cc:	f7fe fd55 	bl	800427a <vListInsert>
}
 80057d0:	e010      	b.n	80057f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057d2:	4b0e      	ldr	r3, [pc, #56]	; (800580c <prvAddCurrentTaskToDelayedList+0xa0>)
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	4b0a      	ldr	r3, [pc, #40]	; (8005800 <prvAddCurrentTaskToDelayedList+0x94>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3304      	adds	r3, #4
 80057dc:	0019      	movs	r1, r3
 80057de:	0010      	movs	r0, r2
 80057e0:	f7fe fd4b 	bl	800427a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057e4:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d202      	bcs.n	80057f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80057ee:	4b08      	ldr	r3, [pc, #32]	; (8005810 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	601a      	str	r2, [r3, #0]
}
 80057f4:	46c0      	nop			; (mov r8, r8)
 80057f6:	46bd      	mov	sp, r7
 80057f8:	b004      	add	sp, #16
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	20000c0c 	.word	0x20000c0c
 8005800:	20000734 	.word	0x20000734
 8005804:	20000bf4 	.word	0x20000bf4
 8005808:	20000bc4 	.word	0x20000bc4
 800580c:	20000bc0 	.word	0x20000bc0
 8005810:	20000c28 	.word	0x20000c28

08005814 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005814:	b590      	push	{r4, r7, lr}
 8005816:	b089      	sub	sp, #36	; 0x24
 8005818:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800581e:	f000 fa8b 	bl	8005d38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005822:	4b17      	ldr	r3, [pc, #92]	; (8005880 <xTimerCreateTimerTask+0x6c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d020      	beq.n	800586c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800582a:	2300      	movs	r3, #0
 800582c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800582e:	2300      	movs	r3, #0
 8005830:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005832:	003a      	movs	r2, r7
 8005834:	1d39      	adds	r1, r7, #4
 8005836:	2308      	movs	r3, #8
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	0018      	movs	r0, r3
 800583c:	f7fe fcba 	bl	80041b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005840:	683c      	ldr	r4, [r7, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	490f      	ldr	r1, [pc, #60]	; (8005884 <xTimerCreateTimerTask+0x70>)
 8005848:	480f      	ldr	r0, [pc, #60]	; (8005888 <xTimerCreateTimerTask+0x74>)
 800584a:	9202      	str	r2, [sp, #8]
 800584c:	9301      	str	r3, [sp, #4]
 800584e:	2302      	movs	r3, #2
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	2300      	movs	r3, #0
 8005854:	0022      	movs	r2, r4
 8005856:	f7ff f996 	bl	8004b86 <xTaskCreateStatic>
 800585a:	0002      	movs	r2, r0
 800585c:	4b0b      	ldr	r3, [pc, #44]	; (800588c <xTimerCreateTimerTask+0x78>)
 800585e:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005860:	4b0a      	ldr	r3, [pc, #40]	; (800588c <xTimerCreateTimerTask+0x78>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8005868:	2301      	movs	r3, #1
 800586a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <xTimerCreateTimerTask+0x62>
 8005872:	b672      	cpsid	i
 8005874:	e7fe      	b.n	8005874 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8005876:	68fb      	ldr	r3, [r7, #12]
}
 8005878:	0018      	movs	r0, r3
 800587a:	46bd      	mov	sp, r7
 800587c:	b005      	add	sp, #20
 800587e:	bd90      	pop	{r4, r7, pc}
 8005880:	20000c64 	.word	0x20000c64
 8005884:	08006444 	.word	0x08006444
 8005888:	08005999 	.word	0x08005999
 800588c:	20000c68 	.word	0x20000c68

08005890 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b08a      	sub	sp, #40	; 0x28
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800589e:	2300      	movs	r3, #0
 80058a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <xTimerGenericCommand+0x1c>
 80058a8:	b672      	cpsid	i
 80058aa:	e7fe      	b.n	80058aa <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80058ac:	4b1d      	ldr	r3, [pc, #116]	; (8005924 <xTimerGenericCommand+0x94>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d031      	beq.n	8005918 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80058b4:	2114      	movs	r1, #20
 80058b6:	187b      	adds	r3, r7, r1
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80058bc:	187b      	adds	r3, r7, r1
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80058c2:	187b      	adds	r3, r7, r1
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b05      	cmp	r3, #5
 80058cc:	dc1a      	bgt.n	8005904 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80058ce:	f7ff fed5 	bl	800567c <xTaskGetSchedulerState>
 80058d2:	0003      	movs	r3, r0
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d10a      	bne.n	80058ee <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058d8:	4b12      	ldr	r3, [pc, #72]	; (8005924 <xTimerGenericCommand+0x94>)
 80058da:	6818      	ldr	r0, [r3, #0]
 80058dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058de:	2314      	movs	r3, #20
 80058e0:	18f9      	adds	r1, r7, r3
 80058e2:	2300      	movs	r3, #0
 80058e4:	f7fe fded 	bl	80044c2 <xQueueGenericSend>
 80058e8:	0003      	movs	r3, r0
 80058ea:	627b      	str	r3, [r7, #36]	; 0x24
 80058ec:	e014      	b.n	8005918 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80058ee:	4b0d      	ldr	r3, [pc, #52]	; (8005924 <xTimerGenericCommand+0x94>)
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	2314      	movs	r3, #20
 80058f4:	18f9      	adds	r1, r7, r3
 80058f6:	2300      	movs	r3, #0
 80058f8:	2200      	movs	r2, #0
 80058fa:	f7fe fde2 	bl	80044c2 <xQueueGenericSend>
 80058fe:	0003      	movs	r3, r0
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
 8005902:	e009      	b.n	8005918 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005904:	4b07      	ldr	r3, [pc, #28]	; (8005924 <xTimerGenericCommand+0x94>)
 8005906:	6818      	ldr	r0, [r3, #0]
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	2314      	movs	r3, #20
 800590c:	18f9      	adds	r1, r7, r3
 800590e:	2300      	movs	r3, #0
 8005910:	f7fe fe9b 	bl	800464a <xQueueGenericSendFromISR>
 8005914:	0003      	movs	r3, r0
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800591a:	0018      	movs	r0, r3
 800591c:	46bd      	mov	sp, r7
 800591e:	b00a      	add	sp, #40	; 0x28
 8005920:	bd80      	pop	{r7, pc}
 8005922:	46c0      	nop			; (mov r8, r8)
 8005924:	20000c64 	.word	0x20000c64

08005928 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af02      	add	r7, sp, #8
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005932:	4b18      	ldr	r3, [pc, #96]	; (8005994 <prvProcessExpiredTimer+0x6c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	3304      	adds	r3, #4
 8005940:	0018      	movs	r0, r3
 8005942:	f7fe fcd0 	bl	80042e6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d119      	bne.n	8005982 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	18d1      	adds	r1, r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 f8b6 	bl	8005acc <prvInsertTimerInActiveList>
 8005960:	1e03      	subs	r3, r0, #0
 8005962:	d00e      	beq.n	8005982 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	2300      	movs	r3, #0
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	2300      	movs	r3, #0
 800596e:	2100      	movs	r1, #0
 8005970:	f7ff ff8e 	bl	8005890 <xTimerGenericCommand>
 8005974:	0003      	movs	r3, r0
 8005976:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <prvProcessExpiredTimer+0x5a>
 800597e:	b672      	cpsid	i
 8005980:	e7fe      	b.n	8005980 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	0010      	movs	r0, r2
 800598a:	4798      	blx	r3
}
 800598c:	46c0      	nop			; (mov r8, r8)
 800598e:	46bd      	mov	sp, r7
 8005990:	b004      	add	sp, #16
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20000c5c 	.word	0x20000c5c

08005998 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059a0:	2308      	movs	r3, #8
 80059a2:	18fb      	adds	r3, r7, r3
 80059a4:	0018      	movs	r0, r3
 80059a6:	f000 f851 	bl	8005a4c <prvGetNextExpireTime>
 80059aa:	0003      	movs	r3, r0
 80059ac:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	0011      	movs	r1, r2
 80059b4:	0018      	movs	r0, r3
 80059b6:	f000 f803 	bl	80059c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80059ba:	f000 f8c9 	bl	8005b50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059be:	e7ef      	b.n	80059a0 <prvTimerTask+0x8>

080059c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80059ca:	f7ff facf 	bl	8004f6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059ce:	2308      	movs	r3, #8
 80059d0:	18fb      	adds	r3, r7, r3
 80059d2:	0018      	movs	r0, r3
 80059d4:	f000 f85a 	bl	8005a8c <prvSampleTimeNow>
 80059d8:	0003      	movs	r3, r0
 80059da:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d129      	bne.n	8005a36 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10c      	bne.n	8005a02 <prvProcessTimerOrBlockTask+0x42>
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d808      	bhi.n	8005a02 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80059f0:	f7ff fac8 	bl	8004f84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	0011      	movs	r1, r2
 80059fa:	0018      	movs	r0, r3
 80059fc:	f7ff ff94 	bl	8005928 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a00:	e01b      	b.n	8005a3a <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d006      	beq.n	8005a16 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a08:	4b0e      	ldr	r3, [pc, #56]	; (8005a44 <prvProcessTimerOrBlockTask+0x84>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	425a      	negs	r2, r3
 8005a10:	4153      	adcs	r3, r2
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a16:	4b0c      	ldr	r3, [pc, #48]	; (8005a48 <prvProcessTimerOrBlockTask+0x88>)
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	0019      	movs	r1, r3
 8005a24:	f7ff f87c 	bl	8004b20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a28:	f7ff faac 	bl	8004f84 <xTaskResumeAll>
 8005a2c:	1e03      	subs	r3, r0, #0
 8005a2e:	d104      	bne.n	8005a3a <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8005a30:	f000 fa4e 	bl	8005ed0 <vPortYield>
}
 8005a34:	e001      	b.n	8005a3a <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8005a36:	f7ff faa5 	bl	8004f84 <xTaskResumeAll>
}
 8005a3a:	46c0      	nop			; (mov r8, r8)
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	b004      	add	sp, #16
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	46c0      	nop			; (mov r8, r8)
 8005a44:	20000c60 	.word	0x20000c60
 8005a48:	20000c64 	.word	0x20000c64

08005a4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a54:	4b0c      	ldr	r3, [pc, #48]	; (8005a88 <prvGetNextExpireTime+0x3c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	425a      	negs	r2, r3
 8005a5c:	4153      	adcs	r3, r2
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	001a      	movs	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d105      	bne.n	8005a7a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a6e:	4b06      	ldr	r3, [pc, #24]	; (8005a88 <prvGetNextExpireTime+0x3c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	e001      	b.n	8005a7e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
}
 8005a80:	0018      	movs	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	b004      	add	sp, #16
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	20000c5c 	.word	0x20000c5c

08005a8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a94:	f7ff fb02 	bl	800509c <xTaskGetTickCount>
 8005a98:	0003      	movs	r3, r0
 8005a9a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ac8 <prvSampleTimeNow+0x3c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d205      	bcs.n	8005ab2 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8005aa6:	f000 f8ed 	bl	8005c84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	e002      	b.n	8005ab8 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005ab8:	4b03      	ldr	r3, [pc, #12]	; (8005ac8 <prvSampleTimeNow+0x3c>)
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8005abe:	68fb      	ldr	r3, [r7, #12]
}
 8005ac0:	0018      	movs	r0, r3
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	b004      	add	sp, #16
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	20000c6c 	.word	0x20000c6c

08005acc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005ada:	2300      	movs	r3, #0
 8005adc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d812      	bhi.n	8005b18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	1ad2      	subs	r2, r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d302      	bcc.n	8005b06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b00:	2301      	movs	r3, #1
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	e01b      	b.n	8005b3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b06:	4b10      	ldr	r3, [pc, #64]	; (8005b48 <prvInsertTimerInActiveList+0x7c>)
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	0019      	movs	r1, r3
 8005b10:	0010      	movs	r0, r2
 8005b12:	f7fe fbb2 	bl	800427a <vListInsert>
 8005b16:	e012      	b.n	8005b3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d206      	bcs.n	8005b2e <prvInsertTimerInActiveList+0x62>
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d302      	bcc.n	8005b2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	617b      	str	r3, [r7, #20]
 8005b2c:	e007      	b.n	8005b3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b2e:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <prvInsertTimerInActiveList+0x80>)
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3304      	adds	r3, #4
 8005b36:	0019      	movs	r1, r3
 8005b38:	0010      	movs	r0, r2
 8005b3a:	f7fe fb9e 	bl	800427a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b3e:	697b      	ldr	r3, [r7, #20]
}
 8005b40:	0018      	movs	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	b006      	add	sp, #24
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	20000c60 	.word	0x20000c60
 8005b4c:	20000c5c 	.word	0x20000c5c

08005b50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08c      	sub	sp, #48	; 0x30
 8005b54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b56:	e082      	b.n	8005c5e <prvProcessReceivedCommands+0x10e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b58:	2308      	movs	r3, #8
 8005b5a:	18fb      	adds	r3, r7, r3
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	da10      	bge.n	8005b84 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b62:	2308      	movs	r3, #8
 8005b64:	18fb      	adds	r3, r7, r3
 8005b66:	3304      	adds	r3, #4
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <prvProcessReceivedCommands+0x24>
 8005b70:	b672      	cpsid	i
 8005b72:	e7fe      	b.n	8005b72 <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	6858      	ldr	r0, [r3, #4]
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	0019      	movs	r1, r3
 8005b82:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b84:	2308      	movs	r3, #8
 8005b86:	18fb      	adds	r3, r7, r3
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	db66      	blt.n	8005c5c <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b8e:	2308      	movs	r3, #8
 8005b90:	18fb      	adds	r3, r7, r3
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d004      	beq.n	8005ba8 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	f7fe fb9f 	bl	80042e6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ba8:	1d3b      	adds	r3, r7, #4
 8005baa:	0018      	movs	r0, r3
 8005bac:	f7ff ff6e 	bl	8005a8c <prvSampleTimeNow>
 8005bb0:	0003      	movs	r3, r0
 8005bb2:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8005bb4:	2308      	movs	r3, #8
 8005bb6:	18fb      	adds	r3, r7, r3
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b09      	cmp	r3, #9
 8005bbc:	d84f      	bhi.n	8005c5e <prvProcessReceivedCommands+0x10e>
 8005bbe:	009a      	lsls	r2, r3, #2
 8005bc0:	4b2e      	ldr	r3, [pc, #184]	; (8005c7c <prvProcessReceivedCommands+0x12c>)
 8005bc2:	18d3      	adds	r3, r2, r3
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005bc8:	2008      	movs	r0, #8
 8005bca:	183b      	adds	r3, r7, r0
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	18d1      	adds	r1, r2, r3
 8005bd4:	183b      	adds	r3, r7, r0
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	69fa      	ldr	r2, [r7, #28]
 8005bda:	6a38      	ldr	r0, [r7, #32]
 8005bdc:	f7ff ff76 	bl	8005acc <prvInsertTimerInActiveList>
 8005be0:	1e03      	subs	r3, r0, #0
 8005be2:	d03c      	beq.n	8005c5e <prvProcessReceivedCommands+0x10e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	6a3a      	ldr	r2, [r7, #32]
 8005bea:	0010      	movs	r0, r2
 8005bec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d133      	bne.n	8005c5e <prvProcessReceivedCommands+0x10e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005bf6:	2308      	movs	r3, #8
 8005bf8:	18fb      	adds	r3, r7, r3
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	18d2      	adds	r2, r2, r3
 8005c02:	6a38      	ldr	r0, [r7, #32]
 8005c04:	2300      	movs	r3, #0
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	2300      	movs	r3, #0
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	f7ff fe40 	bl	8005890 <xTimerGenericCommand>
 8005c10:	0003      	movs	r3, r0
 8005c12:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d121      	bne.n	8005c5e <prvProcessReceivedCommands+0x10e>
 8005c1a:	b672      	cpsid	i
 8005c1c:	e7fe      	b.n	8005c1c <prvProcessReceivedCommands+0xcc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c1e:	2308      	movs	r3, #8
 8005c20:	18fb      	adds	r3, r7, r3
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <prvProcessReceivedCommands+0xe4>
 8005c30:	b672      	cpsid	i
 8005c32:	e7fe      	b.n	8005c32 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	699a      	ldr	r2, [r3, #24]
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	18d1      	adds	r1, r2, r3
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	69fa      	ldr	r2, [r7, #28]
 8005c40:	6a38      	ldr	r0, [r7, #32]
 8005c42:	f7ff ff43 	bl	8005acc <prvInsertTimerInActiveList>
					break;
 8005c46:	e00a      	b.n	8005c5e <prvProcessReceivedCommands+0x10e>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	222c      	movs	r2, #44	; 0x2c
 8005c4c:	5c9b      	ldrb	r3, [r3, r2]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d105      	bne.n	8005c5e <prvProcessReceivedCommands+0x10e>
						{
							vPortFree( pxTimer );
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	0018      	movs	r0, r3
 8005c56:	f000 fa89 	bl	800616c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005c5a:	e000      	b.n	8005c5e <prvProcessReceivedCommands+0x10e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005c5c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c5e:	4b08      	ldr	r3, [pc, #32]	; (8005c80 <prvProcessReceivedCommands+0x130>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2208      	movs	r2, #8
 8005c64:	18b9      	adds	r1, r7, r2
 8005c66:	2200      	movs	r2, #0
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f7fe fd5f 	bl	800472c <xQueueReceive>
 8005c6e:	1e03      	subs	r3, r0, #0
 8005c70:	d000      	beq.n	8005c74 <prvProcessReceivedCommands+0x124>
 8005c72:	e771      	b.n	8005b58 <prvProcessReceivedCommands+0x8>
	}
}
 8005c74:	46c0      	nop			; (mov r8, r8)
 8005c76:	46bd      	mov	sp, r7
 8005c78:	b00a      	add	sp, #40	; 0x28
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	080064d8 	.word	0x080064d8
 8005c80:	20000c64 	.word	0x20000c64

08005c84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b088      	sub	sp, #32
 8005c88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c8a:	e03e      	b.n	8005d0a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c8c:	4b28      	ldr	r3, [pc, #160]	; (8005d30 <prvSwitchTimerLists+0xac>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c96:	4b26      	ldr	r3, [pc, #152]	; (8005d30 <prvSwitchTimerLists+0xac>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	f7fe fb1e 	bl	80042e6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	0010      	movs	r0, r2
 8005cb2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d126      	bne.n	8005d0a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	18d3      	adds	r3, r2, r3
 8005cc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d90e      	bls.n	8005cec <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005cda:	4b15      	ldr	r3, [pc, #84]	; (8005d30 <prvSwitchTimerLists+0xac>)
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	0019      	movs	r1, r3
 8005ce4:	0010      	movs	r0, r2
 8005ce6:	f7fe fac8 	bl	800427a <vListInsert>
 8005cea:	e00e      	b.n	8005d0a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	f7ff fdca 	bl	8005890 <xTimerGenericCommand>
 8005cfc:	0003      	movs	r3, r0
 8005cfe:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <prvSwitchTimerLists+0x86>
 8005d06:	b672      	cpsid	i
 8005d08:	e7fe      	b.n	8005d08 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d0a:	4b09      	ldr	r3, [pc, #36]	; (8005d30 <prvSwitchTimerLists+0xac>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1bb      	bne.n	8005c8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005d14:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <prvSwitchTimerLists+0xac>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005d1a:	4b06      	ldr	r3, [pc, #24]	; (8005d34 <prvSwitchTimerLists+0xb0>)
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4b04      	ldr	r3, [pc, #16]	; (8005d30 <prvSwitchTimerLists+0xac>)
 8005d20:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8005d22:	4b04      	ldr	r3, [pc, #16]	; (8005d34 <prvSwitchTimerLists+0xb0>)
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	601a      	str	r2, [r3, #0]
}
 8005d28:	46c0      	nop			; (mov r8, r8)
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	b006      	add	sp, #24
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	20000c5c 	.word	0x20000c5c
 8005d34:	20000c60 	.word	0x20000c60

08005d38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005d3e:	f000 f8d7 	bl	8005ef0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005d42:	4b17      	ldr	r3, [pc, #92]	; (8005da0 <prvCheckForValidListAndQueue+0x68>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d124      	bne.n	8005d94 <prvCheckForValidListAndQueue+0x5c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005d4a:	4b16      	ldr	r3, [pc, #88]	; (8005da4 <prvCheckForValidListAndQueue+0x6c>)
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f7fe fa49 	bl	80041e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d52:	4b15      	ldr	r3, [pc, #84]	; (8005da8 <prvCheckForValidListAndQueue+0x70>)
 8005d54:	0018      	movs	r0, r3
 8005d56:	f7fe fa45 	bl	80041e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d5a:	4b14      	ldr	r3, [pc, #80]	; (8005dac <prvCheckForValidListAndQueue+0x74>)
 8005d5c:	4a11      	ldr	r2, [pc, #68]	; (8005da4 <prvCheckForValidListAndQueue+0x6c>)
 8005d5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005d60:	4b13      	ldr	r3, [pc, #76]	; (8005db0 <prvCheckForValidListAndQueue+0x78>)
 8005d62:	4a11      	ldr	r2, [pc, #68]	; (8005da8 <prvCheckForValidListAndQueue+0x70>)
 8005d64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d66:	4913      	ldr	r1, [pc, #76]	; (8005db4 <prvCheckForValidListAndQueue+0x7c>)
 8005d68:	4a13      	ldr	r2, [pc, #76]	; (8005db8 <prvCheckForValidListAndQueue+0x80>)
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	000b      	movs	r3, r1
 8005d70:	2110      	movs	r1, #16
 8005d72:	200a      	movs	r0, #10
 8005d74:	f7fe fb33 	bl	80043de <xQueueGenericCreateStatic>
 8005d78:	0002      	movs	r2, r0
 8005d7a:	4b09      	ldr	r3, [pc, #36]	; (8005da0 <prvCheckForValidListAndQueue+0x68>)
 8005d7c:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005d7e:	4b08      	ldr	r3, [pc, #32]	; (8005da0 <prvCheckForValidListAndQueue+0x68>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d006      	beq.n	8005d94 <prvCheckForValidListAndQueue+0x5c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d86:	4b06      	ldr	r3, [pc, #24]	; (8005da0 <prvCheckForValidListAndQueue+0x68>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a0c      	ldr	r2, [pc, #48]	; (8005dbc <prvCheckForValidListAndQueue+0x84>)
 8005d8c:	0011      	movs	r1, r2
 8005d8e:	0018      	movs	r0, r3
 8005d90:	f7fe fe9e 	bl	8004ad0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d94:	f000 f8be 	bl	8005f14 <vPortExitCritical>
}
 8005d98:	46c0      	nop			; (mov r8, r8)
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	46c0      	nop			; (mov r8, r8)
 8005da0:	20000c64 	.word	0x20000c64
 8005da4:	20000c34 	.word	0x20000c34
 8005da8:	20000c48 	.word	0x20000c48
 8005dac:	20000c5c 	.word	0x20000c5c
 8005db0:	20000c60 	.word	0x20000c60
 8005db4:	20000d10 	.word	0x20000d10
 8005db8:	20000c70 	.word	0x20000c70
 8005dbc:	0800644c 	.word	0x0800644c

08005dc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3b04      	subs	r3, #4
 8005dd0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2280      	movs	r2, #128	; 0x80
 8005dd6:	0452      	lsls	r2, r2, #17
 8005dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	3b04      	subs	r3, #4
 8005dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3b04      	subs	r3, #4
 8005dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005dec:	4a08      	ldr	r2, [pc, #32]	; (8005e10 <pxPortInitialiseStack+0x50>)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3b14      	subs	r3, #20
 8005df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3b20      	subs	r3, #32
 8005e02:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e04:	68fb      	ldr	r3, [r7, #12]
}
 8005e06:	0018      	movs	r0, r3
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	b004      	add	sp, #16
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	46c0      	nop			; (mov r8, r8)
 8005e10:	08005e15 	.word	0x08005e15

08005e14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e1e:	4b07      	ldr	r3, [pc, #28]	; (8005e3c <prvTaskExitError+0x28>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3301      	adds	r3, #1
 8005e24:	d001      	beq.n	8005e2a <prvTaskExitError+0x16>
 8005e26:	b672      	cpsid	i
 8005e28:	e7fe      	b.n	8005e28 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005e2a:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005e2c:	46c0      	nop			; (mov r8, r8)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0fc      	beq.n	8005e2e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e34:	46c0      	nop			; (mov r8, r8)
 8005e36:	46bd      	mov	sp, r7
 8005e38:	b002      	add	sp, #8
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	2000002c 	.word	0x2000002c

08005e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005e44:	46c0      	nop			; (mov r8, r8)
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	0000      	movs	r0, r0
 8005e4c:	0000      	movs	r0, r0
	...

08005e50 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005e50:	4a0b      	ldr	r2, [pc, #44]	; (8005e80 <pxCurrentTCBConst2>)
 8005e52:	6813      	ldr	r3, [r2, #0]
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	3020      	adds	r0, #32
 8005e58:	f380 8809 	msr	PSP, r0
 8005e5c:	2002      	movs	r0, #2
 8005e5e:	f380 8814 	msr	CONTROL, r0
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005e68:	46ae      	mov	lr, r5
 8005e6a:	bc08      	pop	{r3}
 8005e6c:	bc04      	pop	{r2}
 8005e6e:	b662      	cpsie	i
 8005e70:	4718      	bx	r3
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	46c0      	nop			; (mov r8, r8)
 8005e76:	46c0      	nop			; (mov r8, r8)
 8005e78:	46c0      	nop			; (mov r8, r8)
 8005e7a:	46c0      	nop			; (mov r8, r8)
 8005e7c:	46c0      	nop			; (mov r8, r8)
 8005e7e:	46c0      	nop			; (mov r8, r8)

08005e80 <pxCurrentTCBConst2>:
 8005e80:	20000734 	.word	0x20000734
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005e84:	46c0      	nop			; (mov r8, r8)
 8005e86:	46c0      	nop			; (mov r8, r8)

08005e88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8005e8c:	4b0e      	ldr	r3, [pc, #56]	; (8005ec8 <xPortStartScheduler+0x40>)
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	4b0d      	ldr	r3, [pc, #52]	; (8005ec8 <xPortStartScheduler+0x40>)
 8005e92:	21ff      	movs	r1, #255	; 0xff
 8005e94:	0409      	lsls	r1, r1, #16
 8005e96:	430a      	orrs	r2, r1
 8005e98:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8005e9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ec8 <xPortStartScheduler+0x40>)
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <xPortStartScheduler+0x40>)
 8005ea0:	21ff      	movs	r1, #255	; 0xff
 8005ea2:	0609      	lsls	r1, r1, #24
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005ea8:	f000 f898 	bl	8005fdc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005eac:	4b07      	ldr	r3, [pc, #28]	; (8005ecc <xPortStartScheduler+0x44>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005eb2:	f7ff ffcd 	bl	8005e50 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005eb6:	f7ff f9b3 	bl	8005220 <vTaskSwitchContext>
	prvTaskExitError();
 8005eba:	f7ff ffab 	bl	8005e14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	46c0      	nop			; (mov r8, r8)
 8005ec8:	e000ed20 	.word	0xe000ed20
 8005ecc:	2000002c 	.word	0x2000002c

08005ed0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005ed4:	4b05      	ldr	r3, [pc, #20]	; (8005eec <vPortYield+0x1c>)
 8005ed6:	2280      	movs	r2, #128	; 0x80
 8005ed8:	0552      	lsls	r2, r2, #21
 8005eda:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8005edc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005ee0:	f3bf 8f6f 	isb	sy
}
 8005ee4:	46c0      	nop			; (mov r8, r8)
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	e000ed04 	.word	0xe000ed04

08005ef0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005ef4:	b672      	cpsid	i
    uxCriticalNesting++;
 8005ef6:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <vPortEnterCritical+0x20>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	4b04      	ldr	r3, [pc, #16]	; (8005f10 <vPortEnterCritical+0x20>)
 8005efe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005f00:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005f04:	f3bf 8f6f 	isb	sy
}
 8005f08:	46c0      	nop			; (mov r8, r8)
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	46c0      	nop			; (mov r8, r8)
 8005f10:	2000002c 	.word	0x2000002c

08005f14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f18:	4b09      	ldr	r3, [pc, #36]	; (8005f40 <vPortExitCritical+0x2c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <vPortExitCritical+0x10>
 8005f20:	b672      	cpsid	i
 8005f22:	e7fe      	b.n	8005f22 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005f24:	4b06      	ldr	r3, [pc, #24]	; (8005f40 <vPortExitCritical+0x2c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	1e5a      	subs	r2, r3, #1
 8005f2a:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <vPortExitCritical+0x2c>)
 8005f2c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8005f2e:	4b04      	ldr	r3, [pc, #16]	; (8005f40 <vPortExitCritical+0x2c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d100      	bne.n	8005f38 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005f36:	b662      	cpsie	i
    }
}
 8005f38:	46c0      	nop			; (mov r8, r8)
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	2000002c 	.word	0x2000002c

08005f44 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005f44:	f3ef 8010 	mrs	r0, PRIMASK
 8005f48:	b672      	cpsid	i
 8005f4a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8005f4c:	46c0      	nop			; (mov r8, r8)
 8005f4e:	0018      	movs	r0, r3

08005f50 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005f50:	f380 8810 	msr	PRIMASK, r0
 8005f54:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005f56:	46c0      	nop			; (mov r8, r8)
	...

08005f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f60:	f3ef 8009 	mrs	r0, PSP
 8005f64:	4b0e      	ldr	r3, [pc, #56]	; (8005fa0 <pxCurrentTCBConst>)
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	3820      	subs	r0, #32
 8005f6a:	6010      	str	r0, [r2, #0]
 8005f6c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005f6e:	4644      	mov	r4, r8
 8005f70:	464d      	mov	r5, r9
 8005f72:	4656      	mov	r6, sl
 8005f74:	465f      	mov	r7, fp
 8005f76:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005f78:	b508      	push	{r3, lr}
 8005f7a:	b672      	cpsid	i
 8005f7c:	f7ff f950 	bl	8005220 <vTaskSwitchContext>
 8005f80:	b662      	cpsie	i
 8005f82:	bc0c      	pop	{r2, r3}
 8005f84:	6811      	ldr	r1, [r2, #0]
 8005f86:	6808      	ldr	r0, [r1, #0]
 8005f88:	3010      	adds	r0, #16
 8005f8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005f8c:	46a0      	mov	r8, r4
 8005f8e:	46a9      	mov	r9, r5
 8005f90:	46b2      	mov	sl, r6
 8005f92:	46bb      	mov	fp, r7
 8005f94:	f380 8809 	msr	PSP, r0
 8005f98:	3820      	subs	r0, #32
 8005f9a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005f9c:	4718      	bx	r3
 8005f9e:	46c0      	nop			; (mov r8, r8)

08005fa0 <pxCurrentTCBConst>:
 8005fa0:	20000734 	.word	0x20000734
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005fa4:	46c0      	nop			; (mov r8, r8)
 8005fa6:	46c0      	nop			; (mov r8, r8)

08005fa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fae:	f7ff ffc9 	bl	8005f44 <ulSetInterruptMaskFromISR>
 8005fb2:	0003      	movs	r3, r0
 8005fb4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005fb6:	f7ff f87f 	bl	80050b8 <xTaskIncrementTick>
 8005fba:	1e03      	subs	r3, r0, #0
 8005fbc:	d003      	beq.n	8005fc6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8005fbe:	4b06      	ldr	r3, [pc, #24]	; (8005fd8 <SysTick_Handler+0x30>)
 8005fc0:	2280      	movs	r2, #128	; 0x80
 8005fc2:	0552      	lsls	r2, r2, #21
 8005fc4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f7ff ffc1 	bl	8005f50 <vClearInterruptMaskFromISR>
}
 8005fce:	46c0      	nop			; (mov r8, r8)
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	b002      	add	sp, #8
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	46c0      	nop			; (mov r8, r8)
 8005fd8:	e000ed04 	.word	0xe000ed04

08005fdc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <prvSetupTimerInterrupt+0x34>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005fe6:	4b0b      	ldr	r3, [pc, #44]	; (8006014 <prvSetupTimerInterrupt+0x38>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005fec:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <prvSetupTimerInterrupt+0x3c>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	23fa      	movs	r3, #250	; 0xfa
 8005ff2:	0099      	lsls	r1, r3, #2
 8005ff4:	0010      	movs	r0, r2
 8005ff6:	f7fa f887 	bl	8000108 <__udivsi3>
 8005ffa:	0003      	movs	r3, r0
 8005ffc:	001a      	movs	r2, r3
 8005ffe:	4b07      	ldr	r3, [pc, #28]	; (800601c <prvSetupTimerInterrupt+0x40>)
 8006000:	3a01      	subs	r2, #1
 8006002:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8006004:	4b02      	ldr	r3, [pc, #8]	; (8006010 <prvSetupTimerInterrupt+0x34>)
 8006006:	2207      	movs	r2, #7
 8006008:	601a      	str	r2, [r3, #0]
}
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	e000e010 	.word	0xe000e010
 8006014:	e000e018 	.word	0xe000e018
 8006018:	20000024 	.word	0x20000024
 800601c:	e000e014 	.word	0xe000e014

08006020 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006028:	2300      	movs	r3, #0
 800602a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800602c:	f7fe ff9e 	bl	8004f6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006030:	4b49      	ldr	r3, [pc, #292]	; (8006158 <pvPortMalloc+0x138>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006038:	f000 f8e0 	bl	80061fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800603c:	4b47      	ldr	r3, [pc, #284]	; (800615c <pvPortMalloc+0x13c>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	4013      	ands	r3, r2
 8006044:	d000      	beq.n	8006048 <pvPortMalloc+0x28>
 8006046:	e079      	b.n	800613c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d012      	beq.n	8006074 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800604e:	2208      	movs	r2, #8
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	189b      	adds	r3, r3, r2
 8006054:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2207      	movs	r2, #7
 800605a:	4013      	ands	r3, r2
 800605c:	d00a      	beq.n	8006074 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2207      	movs	r2, #7
 8006062:	4393      	bics	r3, r2
 8006064:	3308      	adds	r3, #8
 8006066:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2207      	movs	r2, #7
 800606c:	4013      	ands	r3, r2
 800606e:	d001      	beq.n	8006074 <pvPortMalloc+0x54>
 8006070:	b672      	cpsid	i
 8006072:	e7fe      	b.n	8006072 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d060      	beq.n	800613c <pvPortMalloc+0x11c>
 800607a:	4b39      	ldr	r3, [pc, #228]	; (8006160 <pvPortMalloc+0x140>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	429a      	cmp	r2, r3
 8006082:	d85b      	bhi.n	800613c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006084:	4b37      	ldr	r3, [pc, #220]	; (8006164 <pvPortMalloc+0x144>)
 8006086:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8006088:	4b36      	ldr	r3, [pc, #216]	; (8006164 <pvPortMalloc+0x144>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800608e:	e004      	b.n	800609a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d903      	bls.n	80060ac <pvPortMalloc+0x8c>
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1f1      	bne.n	8006090 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80060ac:	4b2a      	ldr	r3, [pc, #168]	; (8006158 <pvPortMalloc+0x138>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d042      	beq.n	800613c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2208      	movs	r2, #8
 80060bc:	189b      	adds	r3, r3, r2
 80060be:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	1ad2      	subs	r2, r2, r3
 80060d0:	2308      	movs	r3, #8
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d916      	bls.n	8006106 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	18d3      	adds	r3, r2, r3
 80060de:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2207      	movs	r2, #7
 80060e4:	4013      	ands	r3, r2
 80060e6:	d001      	beq.n	80060ec <pvPortMalloc+0xcc>
 80060e8:	b672      	cpsid	i
 80060ea:	e7fe      	b.n	80060ea <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	1ad2      	subs	r2, r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	0018      	movs	r0, r3
 8006102:	f000 f8db 	bl	80062bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006106:	4b16      	ldr	r3, [pc, #88]	; (8006160 <pvPortMalloc+0x140>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	1ad2      	subs	r2, r2, r3
 8006110:	4b13      	ldr	r3, [pc, #76]	; (8006160 <pvPortMalloc+0x140>)
 8006112:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006114:	4b12      	ldr	r3, [pc, #72]	; (8006160 <pvPortMalloc+0x140>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	4b13      	ldr	r3, [pc, #76]	; (8006168 <pvPortMalloc+0x148>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	429a      	cmp	r2, r3
 800611e:	d203      	bcs.n	8006128 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006120:	4b0f      	ldr	r3, [pc, #60]	; (8006160 <pvPortMalloc+0x140>)
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	4b10      	ldr	r3, [pc, #64]	; (8006168 <pvPortMalloc+0x148>)
 8006126:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	4b0b      	ldr	r3, [pc, #44]	; (800615c <pvPortMalloc+0x13c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	431a      	orrs	r2, r3
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800613c:	f7fe ff22 	bl	8004f84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2207      	movs	r2, #7
 8006144:	4013      	ands	r3, r2
 8006146:	d001      	beq.n	800614c <pvPortMalloc+0x12c>
 8006148:	b672      	cpsid	i
 800614a:	e7fe      	b.n	800614a <pvPortMalloc+0x12a>
	return pvReturn;
 800614c:	68fb      	ldr	r3, [r7, #12]
}
 800614e:	0018      	movs	r0, r3
 8006150:	46bd      	mov	sp, r7
 8006152:	b006      	add	sp, #24
 8006154:	bd80      	pop	{r7, pc}
 8006156:	46c0      	nop			; (mov r8, r8)
 8006158:	20001968 	.word	0x20001968
 800615c:	20001974 	.word	0x20001974
 8006160:	2000196c 	.word	0x2000196c
 8006164:	20001960 	.word	0x20001960
 8006168:	20001970 	.word	0x20001970

0800616c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d035      	beq.n	80061ea <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800617e:	2308      	movs	r3, #8
 8006180:	425b      	negs	r3, r3
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	18d3      	adds	r3, r2, r3
 8006186:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	4b18      	ldr	r3, [pc, #96]	; (80061f4 <vPortFree+0x88>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4013      	ands	r3, r2
 8006196:	d101      	bne.n	800619c <vPortFree+0x30>
 8006198:	b672      	cpsid	i
 800619a:	e7fe      	b.n	800619a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <vPortFree+0x3c>
 80061a4:	b672      	cpsid	i
 80061a6:	e7fe      	b.n	80061a6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	4b11      	ldr	r3, [pc, #68]	; (80061f4 <vPortFree+0x88>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4013      	ands	r3, r2
 80061b2:	d01a      	beq.n	80061ea <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d116      	bne.n	80061ea <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	4b0c      	ldr	r3, [pc, #48]	; (80061f4 <vPortFree+0x88>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	43db      	mvns	r3, r3
 80061c6:	401a      	ands	r2, r3
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061cc:	f7fe fece 	bl	8004f6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	4b08      	ldr	r3, [pc, #32]	; (80061f8 <vPortFree+0x8c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	18d2      	adds	r2, r2, r3
 80061da:	4b07      	ldr	r3, [pc, #28]	; (80061f8 <vPortFree+0x8c>)
 80061dc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	0018      	movs	r0, r3
 80061e2:	f000 f86b 	bl	80062bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80061e6:	f7fe fecd 	bl	8004f84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061ea:	46c0      	nop			; (mov r8, r8)
 80061ec:	46bd      	mov	sp, r7
 80061ee:	b004      	add	sp, #16
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	20001974 	.word	0x20001974
 80061f8:	2000196c 	.word	0x2000196c

080061fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006202:	23c0      	movs	r3, #192	; 0xc0
 8006204:	011b      	lsls	r3, r3, #4
 8006206:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006208:	4b26      	ldr	r3, [pc, #152]	; (80062a4 <prvHeapInit+0xa8>)
 800620a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2207      	movs	r2, #7
 8006210:	4013      	ands	r3, r2
 8006212:	d00c      	beq.n	800622e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	3307      	adds	r3, #7
 8006218:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2207      	movs	r2, #7
 800621e:	4393      	bics	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	1ad2      	subs	r2, r2, r3
 8006228:	4b1e      	ldr	r3, [pc, #120]	; (80062a4 <prvHeapInit+0xa8>)
 800622a:	18d3      	adds	r3, r2, r3
 800622c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006232:	4b1d      	ldr	r3, [pc, #116]	; (80062a8 <prvHeapInit+0xac>)
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006238:	4b1b      	ldr	r3, [pc, #108]	; (80062a8 <prvHeapInit+0xac>)
 800623a:	2200      	movs	r2, #0
 800623c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	18d3      	adds	r3, r2, r3
 8006244:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006246:	2208      	movs	r2, #8
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	1a9b      	subs	r3, r3, r2
 800624c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2207      	movs	r2, #7
 8006252:	4393      	bics	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	4b14      	ldr	r3, [pc, #80]	; (80062ac <prvHeapInit+0xb0>)
 800625a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800625c:	4b13      	ldr	r3, [pc, #76]	; (80062ac <prvHeapInit+0xb0>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2200      	movs	r2, #0
 8006262:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006264:	4b11      	ldr	r3, [pc, #68]	; (80062ac <prvHeapInit+0xb0>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	1ad2      	subs	r2, r2, r3
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800627a:	4b0c      	ldr	r3, [pc, #48]	; (80062ac <prvHeapInit+0xb0>)
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	4b0a      	ldr	r3, [pc, #40]	; (80062b0 <prvHeapInit+0xb4>)
 8006288:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	4b09      	ldr	r3, [pc, #36]	; (80062b4 <prvHeapInit+0xb8>)
 8006290:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006292:	4b09      	ldr	r3, [pc, #36]	; (80062b8 <prvHeapInit+0xbc>)
 8006294:	2280      	movs	r2, #128	; 0x80
 8006296:	0612      	lsls	r2, r2, #24
 8006298:	601a      	str	r2, [r3, #0]
}
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	46bd      	mov	sp, r7
 800629e:	b004      	add	sp, #16
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	20000d60 	.word	0x20000d60
 80062a8:	20001960 	.word	0x20001960
 80062ac:	20001968 	.word	0x20001968
 80062b0:	20001970 	.word	0x20001970
 80062b4:	2000196c 	.word	0x2000196c
 80062b8:	20001974 	.word	0x20001974

080062bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062c4:	4b27      	ldr	r3, [pc, #156]	; (8006364 <prvInsertBlockIntoFreeList+0xa8>)
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	e002      	b.n	80062d0 <prvInsertBlockIntoFreeList+0x14>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d8f7      	bhi.n	80062ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	18d3      	adds	r3, r2, r3
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d108      	bne.n	80062fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	18d2      	adds	r2, r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	18d2      	adds	r2, r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d118      	bne.n	8006344 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	4b14      	ldr	r3, [pc, #80]	; (8006368 <prvInsertBlockIntoFreeList+0xac>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	429a      	cmp	r2, r3
 800631c:	d00d      	beq.n	800633a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	18d2      	adds	r2, r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	e008      	b.n	800634c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800633a:	4b0b      	ldr	r3, [pc, #44]	; (8006368 <prvInsertBlockIntoFreeList+0xac>)
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	e003      	b.n	800634c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	429a      	cmp	r2, r3
 8006352:	d002      	beq.n	800635a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800635a:	46c0      	nop			; (mov r8, r8)
 800635c:	46bd      	mov	sp, r7
 800635e:	b004      	add	sp, #16
 8006360:	bd80      	pop	{r7, pc}
 8006362:	46c0      	nop			; (mov r8, r8)
 8006364:	20001960 	.word	0x20001960
 8006368:	20001968 	.word	0x20001968

0800636c <__libc_init_array>:
 800636c:	b570      	push	{r4, r5, r6, lr}
 800636e:	2600      	movs	r6, #0
 8006370:	4d0c      	ldr	r5, [pc, #48]	; (80063a4 <__libc_init_array+0x38>)
 8006372:	4c0d      	ldr	r4, [pc, #52]	; (80063a8 <__libc_init_array+0x3c>)
 8006374:	1b64      	subs	r4, r4, r5
 8006376:	10a4      	asrs	r4, r4, #2
 8006378:	42a6      	cmp	r6, r4
 800637a:	d109      	bne.n	8006390 <__libc_init_array+0x24>
 800637c:	2600      	movs	r6, #0
 800637e:	f000 f82b 	bl	80063d8 <_init>
 8006382:	4d0a      	ldr	r5, [pc, #40]	; (80063ac <__libc_init_array+0x40>)
 8006384:	4c0a      	ldr	r4, [pc, #40]	; (80063b0 <__libc_init_array+0x44>)
 8006386:	1b64      	subs	r4, r4, r5
 8006388:	10a4      	asrs	r4, r4, #2
 800638a:	42a6      	cmp	r6, r4
 800638c:	d105      	bne.n	800639a <__libc_init_array+0x2e>
 800638e:	bd70      	pop	{r4, r5, r6, pc}
 8006390:	00b3      	lsls	r3, r6, #2
 8006392:	58eb      	ldr	r3, [r5, r3]
 8006394:	4798      	blx	r3
 8006396:	3601      	adds	r6, #1
 8006398:	e7ee      	b.n	8006378 <__libc_init_array+0xc>
 800639a:	00b3      	lsls	r3, r6, #2
 800639c:	58eb      	ldr	r3, [r5, r3]
 800639e:	4798      	blx	r3
 80063a0:	3601      	adds	r6, #1
 80063a2:	e7f2      	b.n	800638a <__libc_init_array+0x1e>
 80063a4:	08006508 	.word	0x08006508
 80063a8:	08006508 	.word	0x08006508
 80063ac:	08006508 	.word	0x08006508
 80063b0:	0800650c 	.word	0x0800650c

080063b4 <memcpy>:
 80063b4:	2300      	movs	r3, #0
 80063b6:	b510      	push	{r4, lr}
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d100      	bne.n	80063be <memcpy+0xa>
 80063bc:	bd10      	pop	{r4, pc}
 80063be:	5ccc      	ldrb	r4, [r1, r3]
 80063c0:	54c4      	strb	r4, [r0, r3]
 80063c2:	3301      	adds	r3, #1
 80063c4:	e7f8      	b.n	80063b8 <memcpy+0x4>

080063c6 <memset>:
 80063c6:	0003      	movs	r3, r0
 80063c8:	1812      	adds	r2, r2, r0
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d100      	bne.n	80063d0 <memset+0xa>
 80063ce:	4770      	bx	lr
 80063d0:	7019      	strb	r1, [r3, #0]
 80063d2:	3301      	adds	r3, #1
 80063d4:	e7f9      	b.n	80063ca <memset+0x4>
	...

080063d8 <_init>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	46c0      	nop			; (mov r8, r8)
 80063dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063de:	bc08      	pop	{r3}
 80063e0:	469e      	mov	lr, r3
 80063e2:	4770      	bx	lr

080063e4 <_fini>:
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e6:	46c0      	nop			; (mov r8, r8)
 80063e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ea:	bc08      	pop	{r3}
 80063ec:	469e      	mov	lr, r3
 80063ee:	4770      	bx	lr
