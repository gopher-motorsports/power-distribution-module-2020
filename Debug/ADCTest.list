
ADCTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008170  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08008230  08008230  00018230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083c0  080083c0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080083c0  080083c0  000183c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083c8  080083c8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083c8  080083c8  000183c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083cc  080083cc  000183cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080083d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c08  20000088  08008454  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001c90  08008454  00021c90  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018895  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000338b  00000000  00000000  00038941  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001620  00000000  00000000  0003bcd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001488  00000000  00000000  0003d2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001889f  00000000  00000000  0003e778  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000115e4  00000000  00000000  00057017  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e053  00000000  00000000  000685fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f664e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005250  00000000  00000000  000f66cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008218 	.word	0x08008218

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	08008218 	.word	0x08008218

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 f807 	bl	8001244 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 ff5f 	bl	8001104 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fff9 	bl	8001244 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 ffef 	bl	8001244 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 ff81 	bl	800117c <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 ff77 	bl	800117c <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_uldivmod>:
 800029c:	2b00      	cmp	r3, #0
 800029e:	d111      	bne.n	80002c4 <__aeabi_uldivmod+0x28>
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	d10f      	bne.n	80002c4 <__aeabi_uldivmod+0x28>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	d100      	bne.n	80002aa <__aeabi_uldivmod+0xe>
 80002a8:	2800      	cmp	r0, #0
 80002aa:	d002      	beq.n	80002b2 <__aeabi_uldivmod+0x16>
 80002ac:	2100      	movs	r1, #0
 80002ae:	43c9      	mvns	r1, r1
 80002b0:	1c08      	adds	r0, r1, #0
 80002b2:	b407      	push	{r0, r1, r2}
 80002b4:	4802      	ldr	r0, [pc, #8]	; (80002c0 <__aeabi_uldivmod+0x24>)
 80002b6:	a102      	add	r1, pc, #8	; (adr r1, 80002c0 <__aeabi_uldivmod+0x24>)
 80002b8:	1840      	adds	r0, r0, r1
 80002ba:	9002      	str	r0, [sp, #8]
 80002bc:	bd03      	pop	{r0, r1, pc}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	ffffff5d 	.word	0xffffff5d
 80002c4:	b403      	push	{r0, r1}
 80002c6:	4668      	mov	r0, sp
 80002c8:	b501      	push	{r0, lr}
 80002ca:	9802      	ldr	r0, [sp, #8]
 80002cc:	f000 f83a 	bl	8000344 <__udivmoddi4>
 80002d0:	9b01      	ldr	r3, [sp, #4]
 80002d2:	469e      	mov	lr, r3
 80002d4:	b002      	add	sp, #8
 80002d6:	bc0c      	pop	{r2, r3}
 80002d8:	4770      	bx	lr
 80002da:	46c0      	nop			; (mov r8, r8)

080002dc <__aeabi_d2ulz>:
 80002dc:	b570      	push	{r4, r5, r6, lr}
 80002de:	2200      	movs	r2, #0
 80002e0:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <__aeabi_d2ulz+0x34>)
 80002e2:	000d      	movs	r5, r1
 80002e4:	0004      	movs	r4, r0
 80002e6:	f001 f815 	bl	8001314 <__aeabi_dmul>
 80002ea:	f001 fe63 	bl	8001fb4 <__aeabi_d2uiz>
 80002ee:	0006      	movs	r6, r0
 80002f0:	f001 fe04 	bl	8001efc <__aeabi_ui2d>
 80002f4:	2200      	movs	r2, #0
 80002f6:	4b07      	ldr	r3, [pc, #28]	; (8000314 <__aeabi_d2ulz+0x38>)
 80002f8:	f001 f80c 	bl	8001314 <__aeabi_dmul>
 80002fc:	0002      	movs	r2, r0
 80002fe:	000b      	movs	r3, r1
 8000300:	0020      	movs	r0, r4
 8000302:	0029      	movs	r1, r5
 8000304:	f001 fa78 	bl	80017f8 <__aeabi_dsub>
 8000308:	f001 fe54 	bl	8001fb4 <__aeabi_d2uiz>
 800030c:	0031      	movs	r1, r6
 800030e:	bd70      	pop	{r4, r5, r6, pc}
 8000310:	3df00000 	.word	0x3df00000
 8000314:	41f00000 	.word	0x41f00000

08000318 <__aeabi_ul2d>:
 8000318:	b570      	push	{r4, r5, r6, lr}
 800031a:	0006      	movs	r6, r0
 800031c:	0008      	movs	r0, r1
 800031e:	f001 fded 	bl	8001efc <__aeabi_ui2d>
 8000322:	2200      	movs	r2, #0
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <__aeabi_ul2d+0x28>)
 8000326:	f000 fff5 	bl	8001314 <__aeabi_dmul>
 800032a:	000d      	movs	r5, r1
 800032c:	0004      	movs	r4, r0
 800032e:	0030      	movs	r0, r6
 8000330:	f001 fde4 	bl	8001efc <__aeabi_ui2d>
 8000334:	002b      	movs	r3, r5
 8000336:	0022      	movs	r2, r4
 8000338:	f000 f8c6 	bl	80004c8 <__aeabi_dadd>
 800033c:	bd70      	pop	{r4, r5, r6, pc}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	41f00000 	.word	0x41f00000

08000344 <__udivmoddi4>:
 8000344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000346:	464f      	mov	r7, r9
 8000348:	4646      	mov	r6, r8
 800034a:	46d6      	mov	lr, sl
 800034c:	b5c0      	push	{r6, r7, lr}
 800034e:	0004      	movs	r4, r0
 8000350:	b082      	sub	sp, #8
 8000352:	000d      	movs	r5, r1
 8000354:	4691      	mov	r9, r2
 8000356:	4698      	mov	r8, r3
 8000358:	428b      	cmp	r3, r1
 800035a:	d82f      	bhi.n	80003bc <__udivmoddi4+0x78>
 800035c:	d02c      	beq.n	80003b8 <__udivmoddi4+0x74>
 800035e:	4641      	mov	r1, r8
 8000360:	4648      	mov	r0, r9
 8000362:	f001 fe1b 	bl	8001f9c <__clzdi2>
 8000366:	0029      	movs	r1, r5
 8000368:	0006      	movs	r6, r0
 800036a:	0020      	movs	r0, r4
 800036c:	f001 fe16 	bl	8001f9c <__clzdi2>
 8000370:	1a33      	subs	r3, r6, r0
 8000372:	469c      	mov	ip, r3
 8000374:	3b20      	subs	r3, #32
 8000376:	469a      	mov	sl, r3
 8000378:	d500      	bpl.n	800037c <__udivmoddi4+0x38>
 800037a:	e076      	b.n	800046a <__udivmoddi4+0x126>
 800037c:	464b      	mov	r3, r9
 800037e:	4652      	mov	r2, sl
 8000380:	4093      	lsls	r3, r2
 8000382:	001f      	movs	r7, r3
 8000384:	464b      	mov	r3, r9
 8000386:	4662      	mov	r2, ip
 8000388:	4093      	lsls	r3, r2
 800038a:	001e      	movs	r6, r3
 800038c:	42af      	cmp	r7, r5
 800038e:	d828      	bhi.n	80003e2 <__udivmoddi4+0x9e>
 8000390:	d025      	beq.n	80003de <__udivmoddi4+0x9a>
 8000392:	4653      	mov	r3, sl
 8000394:	1ba4      	subs	r4, r4, r6
 8000396:	41bd      	sbcs	r5, r7
 8000398:	2b00      	cmp	r3, #0
 800039a:	da00      	bge.n	800039e <__udivmoddi4+0x5a>
 800039c:	e07b      	b.n	8000496 <__udivmoddi4+0x152>
 800039e:	2200      	movs	r2, #0
 80003a0:	2300      	movs	r3, #0
 80003a2:	9200      	str	r2, [sp, #0]
 80003a4:	9301      	str	r3, [sp, #4]
 80003a6:	2301      	movs	r3, #1
 80003a8:	4652      	mov	r2, sl
 80003aa:	4093      	lsls	r3, r2
 80003ac:	9301      	str	r3, [sp, #4]
 80003ae:	2301      	movs	r3, #1
 80003b0:	4662      	mov	r2, ip
 80003b2:	4093      	lsls	r3, r2
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	e018      	b.n	80003ea <__udivmoddi4+0xa6>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	d9d0      	bls.n	800035e <__udivmoddi4+0x1a>
 80003bc:	2200      	movs	r2, #0
 80003be:	2300      	movs	r3, #0
 80003c0:	9200      	str	r2, [sp, #0]
 80003c2:	9301      	str	r3, [sp, #4]
 80003c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <__udivmoddi4+0x8a>
 80003ca:	601c      	str	r4, [r3, #0]
 80003cc:	605d      	str	r5, [r3, #4]
 80003ce:	9800      	ldr	r0, [sp, #0]
 80003d0:	9901      	ldr	r1, [sp, #4]
 80003d2:	b002      	add	sp, #8
 80003d4:	bc1c      	pop	{r2, r3, r4}
 80003d6:	4690      	mov	r8, r2
 80003d8:	4699      	mov	r9, r3
 80003da:	46a2      	mov	sl, r4
 80003dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d9d7      	bls.n	8000392 <__udivmoddi4+0x4e>
 80003e2:	2200      	movs	r2, #0
 80003e4:	2300      	movs	r3, #0
 80003e6:	9200      	str	r2, [sp, #0]
 80003e8:	9301      	str	r3, [sp, #4]
 80003ea:	4663      	mov	r3, ip
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d0e9      	beq.n	80003c4 <__udivmoddi4+0x80>
 80003f0:	07fb      	lsls	r3, r7, #31
 80003f2:	4698      	mov	r8, r3
 80003f4:	4641      	mov	r1, r8
 80003f6:	0872      	lsrs	r2, r6, #1
 80003f8:	430a      	orrs	r2, r1
 80003fa:	087b      	lsrs	r3, r7, #1
 80003fc:	4666      	mov	r6, ip
 80003fe:	e00e      	b.n	800041e <__udivmoddi4+0xda>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d101      	bne.n	8000408 <__udivmoddi4+0xc4>
 8000404:	42a2      	cmp	r2, r4
 8000406:	d80c      	bhi.n	8000422 <__udivmoddi4+0xde>
 8000408:	1aa4      	subs	r4, r4, r2
 800040a:	419d      	sbcs	r5, r3
 800040c:	2001      	movs	r0, #1
 800040e:	1924      	adds	r4, r4, r4
 8000410:	416d      	adcs	r5, r5
 8000412:	2100      	movs	r1, #0
 8000414:	3e01      	subs	r6, #1
 8000416:	1824      	adds	r4, r4, r0
 8000418:	414d      	adcs	r5, r1
 800041a:	2e00      	cmp	r6, #0
 800041c:	d006      	beq.n	800042c <__udivmoddi4+0xe8>
 800041e:	42ab      	cmp	r3, r5
 8000420:	d9ee      	bls.n	8000400 <__udivmoddi4+0xbc>
 8000422:	3e01      	subs	r6, #1
 8000424:	1924      	adds	r4, r4, r4
 8000426:	416d      	adcs	r5, r5
 8000428:	2e00      	cmp	r6, #0
 800042a:	d1f8      	bne.n	800041e <__udivmoddi4+0xda>
 800042c:	9800      	ldr	r0, [sp, #0]
 800042e:	9901      	ldr	r1, [sp, #4]
 8000430:	4653      	mov	r3, sl
 8000432:	1900      	adds	r0, r0, r4
 8000434:	4169      	adcs	r1, r5
 8000436:	2b00      	cmp	r3, #0
 8000438:	db23      	blt.n	8000482 <__udivmoddi4+0x13e>
 800043a:	002b      	movs	r3, r5
 800043c:	4652      	mov	r2, sl
 800043e:	40d3      	lsrs	r3, r2
 8000440:	002a      	movs	r2, r5
 8000442:	4664      	mov	r4, ip
 8000444:	40e2      	lsrs	r2, r4
 8000446:	001c      	movs	r4, r3
 8000448:	4653      	mov	r3, sl
 800044a:	0015      	movs	r5, r2
 800044c:	2b00      	cmp	r3, #0
 800044e:	db2d      	blt.n	80004ac <__udivmoddi4+0x168>
 8000450:	0026      	movs	r6, r4
 8000452:	4657      	mov	r7, sl
 8000454:	40be      	lsls	r6, r7
 8000456:	0033      	movs	r3, r6
 8000458:	0026      	movs	r6, r4
 800045a:	4667      	mov	r7, ip
 800045c:	40be      	lsls	r6, r7
 800045e:	0032      	movs	r2, r6
 8000460:	1a80      	subs	r0, r0, r2
 8000462:	4199      	sbcs	r1, r3
 8000464:	9000      	str	r0, [sp, #0]
 8000466:	9101      	str	r1, [sp, #4]
 8000468:	e7ac      	b.n	80003c4 <__udivmoddi4+0x80>
 800046a:	4662      	mov	r2, ip
 800046c:	2320      	movs	r3, #32
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	464a      	mov	r2, r9
 8000472:	40da      	lsrs	r2, r3
 8000474:	4661      	mov	r1, ip
 8000476:	0013      	movs	r3, r2
 8000478:	4642      	mov	r2, r8
 800047a:	408a      	lsls	r2, r1
 800047c:	0017      	movs	r7, r2
 800047e:	431f      	orrs	r7, r3
 8000480:	e780      	b.n	8000384 <__udivmoddi4+0x40>
 8000482:	4662      	mov	r2, ip
 8000484:	2320      	movs	r3, #32
 8000486:	1a9b      	subs	r3, r3, r2
 8000488:	002a      	movs	r2, r5
 800048a:	4666      	mov	r6, ip
 800048c:	409a      	lsls	r2, r3
 800048e:	0023      	movs	r3, r4
 8000490:	40f3      	lsrs	r3, r6
 8000492:	4313      	orrs	r3, r2
 8000494:	e7d4      	b.n	8000440 <__udivmoddi4+0xfc>
 8000496:	4662      	mov	r2, ip
 8000498:	2320      	movs	r3, #32
 800049a:	2100      	movs	r1, #0
 800049c:	1a9b      	subs	r3, r3, r2
 800049e:	2200      	movs	r2, #0
 80004a0:	9100      	str	r1, [sp, #0]
 80004a2:	9201      	str	r2, [sp, #4]
 80004a4:	2201      	movs	r2, #1
 80004a6:	40da      	lsrs	r2, r3
 80004a8:	9201      	str	r2, [sp, #4]
 80004aa:	e780      	b.n	80003ae <__udivmoddi4+0x6a>
 80004ac:	2320      	movs	r3, #32
 80004ae:	4662      	mov	r2, ip
 80004b0:	0026      	movs	r6, r4
 80004b2:	1a9b      	subs	r3, r3, r2
 80004b4:	40de      	lsrs	r6, r3
 80004b6:	002f      	movs	r7, r5
 80004b8:	46b0      	mov	r8, r6
 80004ba:	4666      	mov	r6, ip
 80004bc:	40b7      	lsls	r7, r6
 80004be:	4646      	mov	r6, r8
 80004c0:	003b      	movs	r3, r7
 80004c2:	4333      	orrs	r3, r6
 80004c4:	e7c8      	b.n	8000458 <__udivmoddi4+0x114>
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_dadd>:
 80004c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ca:	464f      	mov	r7, r9
 80004cc:	4646      	mov	r6, r8
 80004ce:	46d6      	mov	lr, sl
 80004d0:	000c      	movs	r4, r1
 80004d2:	0309      	lsls	r1, r1, #12
 80004d4:	b5c0      	push	{r6, r7, lr}
 80004d6:	0a49      	lsrs	r1, r1, #9
 80004d8:	0f47      	lsrs	r7, r0, #29
 80004da:	005e      	lsls	r6, r3, #1
 80004dc:	4339      	orrs	r1, r7
 80004de:	031f      	lsls	r7, r3, #12
 80004e0:	0fdb      	lsrs	r3, r3, #31
 80004e2:	469c      	mov	ip, r3
 80004e4:	0065      	lsls	r5, r4, #1
 80004e6:	0a7b      	lsrs	r3, r7, #9
 80004e8:	0f57      	lsrs	r7, r2, #29
 80004ea:	431f      	orrs	r7, r3
 80004ec:	0d6d      	lsrs	r5, r5, #21
 80004ee:	0fe4      	lsrs	r4, r4, #31
 80004f0:	0d76      	lsrs	r6, r6, #21
 80004f2:	46a1      	mov	r9, r4
 80004f4:	00c0      	lsls	r0, r0, #3
 80004f6:	46b8      	mov	r8, r7
 80004f8:	00d2      	lsls	r2, r2, #3
 80004fa:	1bab      	subs	r3, r5, r6
 80004fc:	4564      	cmp	r4, ip
 80004fe:	d07b      	beq.n	80005f8 <__aeabi_dadd+0x130>
 8000500:	2b00      	cmp	r3, #0
 8000502:	dd5f      	ble.n	80005c4 <__aeabi_dadd+0xfc>
 8000504:	2e00      	cmp	r6, #0
 8000506:	d000      	beq.n	800050a <__aeabi_dadd+0x42>
 8000508:	e0a4      	b.n	8000654 <__aeabi_dadd+0x18c>
 800050a:	003e      	movs	r6, r7
 800050c:	4316      	orrs	r6, r2
 800050e:	d100      	bne.n	8000512 <__aeabi_dadd+0x4a>
 8000510:	e112      	b.n	8000738 <__aeabi_dadd+0x270>
 8000512:	1e5e      	subs	r6, r3, #1
 8000514:	2e00      	cmp	r6, #0
 8000516:	d000      	beq.n	800051a <__aeabi_dadd+0x52>
 8000518:	e19e      	b.n	8000858 <__aeabi_dadd+0x390>
 800051a:	1a87      	subs	r7, r0, r2
 800051c:	4643      	mov	r3, r8
 800051e:	42b8      	cmp	r0, r7
 8000520:	4180      	sbcs	r0, r0
 8000522:	2501      	movs	r5, #1
 8000524:	1ac9      	subs	r1, r1, r3
 8000526:	4240      	negs	r0, r0
 8000528:	1a09      	subs	r1, r1, r0
 800052a:	020b      	lsls	r3, r1, #8
 800052c:	d400      	bmi.n	8000530 <__aeabi_dadd+0x68>
 800052e:	e131      	b.n	8000794 <__aeabi_dadd+0x2cc>
 8000530:	0249      	lsls	r1, r1, #9
 8000532:	0a4e      	lsrs	r6, r1, #9
 8000534:	2e00      	cmp	r6, #0
 8000536:	d100      	bne.n	800053a <__aeabi_dadd+0x72>
 8000538:	e16e      	b.n	8000818 <__aeabi_dadd+0x350>
 800053a:	0030      	movs	r0, r6
 800053c:	f001 fd10 	bl	8001f60 <__clzsi2>
 8000540:	0003      	movs	r3, r0
 8000542:	3b08      	subs	r3, #8
 8000544:	2b1f      	cmp	r3, #31
 8000546:	dd00      	ble.n	800054a <__aeabi_dadd+0x82>
 8000548:	e161      	b.n	800080e <__aeabi_dadd+0x346>
 800054a:	2220      	movs	r2, #32
 800054c:	0039      	movs	r1, r7
 800054e:	1ad2      	subs	r2, r2, r3
 8000550:	409e      	lsls	r6, r3
 8000552:	40d1      	lsrs	r1, r2
 8000554:	409f      	lsls	r7, r3
 8000556:	430e      	orrs	r6, r1
 8000558:	429d      	cmp	r5, r3
 800055a:	dd00      	ble.n	800055e <__aeabi_dadd+0x96>
 800055c:	e151      	b.n	8000802 <__aeabi_dadd+0x33a>
 800055e:	1b5d      	subs	r5, r3, r5
 8000560:	1c6b      	adds	r3, r5, #1
 8000562:	2b1f      	cmp	r3, #31
 8000564:	dd00      	ble.n	8000568 <__aeabi_dadd+0xa0>
 8000566:	e17c      	b.n	8000862 <__aeabi_dadd+0x39a>
 8000568:	2120      	movs	r1, #32
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	003d      	movs	r5, r7
 800056e:	0030      	movs	r0, r6
 8000570:	408f      	lsls	r7, r1
 8000572:	4088      	lsls	r0, r1
 8000574:	40dd      	lsrs	r5, r3
 8000576:	1e79      	subs	r1, r7, #1
 8000578:	418f      	sbcs	r7, r1
 800057a:	0031      	movs	r1, r6
 800057c:	2207      	movs	r2, #7
 800057e:	4328      	orrs	r0, r5
 8000580:	40d9      	lsrs	r1, r3
 8000582:	2500      	movs	r5, #0
 8000584:	4307      	orrs	r7, r0
 8000586:	403a      	ands	r2, r7
 8000588:	2a00      	cmp	r2, #0
 800058a:	d009      	beq.n	80005a0 <__aeabi_dadd+0xd8>
 800058c:	230f      	movs	r3, #15
 800058e:	403b      	ands	r3, r7
 8000590:	2b04      	cmp	r3, #4
 8000592:	d005      	beq.n	80005a0 <__aeabi_dadd+0xd8>
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	42bb      	cmp	r3, r7
 8000598:	41bf      	sbcs	r7, r7
 800059a:	427f      	negs	r7, r7
 800059c:	19c9      	adds	r1, r1, r7
 800059e:	001f      	movs	r7, r3
 80005a0:	020b      	lsls	r3, r1, #8
 80005a2:	d400      	bmi.n	80005a6 <__aeabi_dadd+0xde>
 80005a4:	e226      	b.n	80009f4 <__aeabi_dadd+0x52c>
 80005a6:	1c6a      	adds	r2, r5, #1
 80005a8:	4bc6      	ldr	r3, [pc, #792]	; (80008c4 <__aeabi_dadd+0x3fc>)
 80005aa:	0555      	lsls	r5, r2, #21
 80005ac:	0d6d      	lsrs	r5, r5, #21
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d100      	bne.n	80005b4 <__aeabi_dadd+0xec>
 80005b2:	e106      	b.n	80007c2 <__aeabi_dadd+0x2fa>
 80005b4:	4ac4      	ldr	r2, [pc, #784]	; (80008c8 <__aeabi_dadd+0x400>)
 80005b6:	08ff      	lsrs	r7, r7, #3
 80005b8:	400a      	ands	r2, r1
 80005ba:	0753      	lsls	r3, r2, #29
 80005bc:	0252      	lsls	r2, r2, #9
 80005be:	433b      	orrs	r3, r7
 80005c0:	0b12      	lsrs	r2, r2, #12
 80005c2:	e08e      	b.n	80006e2 <__aeabi_dadd+0x21a>
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d000      	beq.n	80005ca <__aeabi_dadd+0x102>
 80005c8:	e0b8      	b.n	800073c <__aeabi_dadd+0x274>
 80005ca:	1c6b      	adds	r3, r5, #1
 80005cc:	055b      	lsls	r3, r3, #21
 80005ce:	0d5b      	lsrs	r3, r3, #21
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	dc00      	bgt.n	80005d6 <__aeabi_dadd+0x10e>
 80005d4:	e130      	b.n	8000838 <__aeabi_dadd+0x370>
 80005d6:	1a87      	subs	r7, r0, r2
 80005d8:	4643      	mov	r3, r8
 80005da:	42b8      	cmp	r0, r7
 80005dc:	41b6      	sbcs	r6, r6
 80005de:	1acb      	subs	r3, r1, r3
 80005e0:	4276      	negs	r6, r6
 80005e2:	1b9e      	subs	r6, r3, r6
 80005e4:	0233      	lsls	r3, r6, #8
 80005e6:	d500      	bpl.n	80005ea <__aeabi_dadd+0x122>
 80005e8:	e14c      	b.n	8000884 <__aeabi_dadd+0x3bc>
 80005ea:	003b      	movs	r3, r7
 80005ec:	4333      	orrs	r3, r6
 80005ee:	d1a1      	bne.n	8000534 <__aeabi_dadd+0x6c>
 80005f0:	2200      	movs	r2, #0
 80005f2:	2400      	movs	r4, #0
 80005f4:	2500      	movs	r5, #0
 80005f6:	e070      	b.n	80006da <__aeabi_dadd+0x212>
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	dc00      	bgt.n	80005fe <__aeabi_dadd+0x136>
 80005fc:	e0e5      	b.n	80007ca <__aeabi_dadd+0x302>
 80005fe:	2e00      	cmp	r6, #0
 8000600:	d100      	bne.n	8000604 <__aeabi_dadd+0x13c>
 8000602:	e083      	b.n	800070c <__aeabi_dadd+0x244>
 8000604:	4eaf      	ldr	r6, [pc, #700]	; (80008c4 <__aeabi_dadd+0x3fc>)
 8000606:	42b5      	cmp	r5, r6
 8000608:	d060      	beq.n	80006cc <__aeabi_dadd+0x204>
 800060a:	2680      	movs	r6, #128	; 0x80
 800060c:	0436      	lsls	r6, r6, #16
 800060e:	4337      	orrs	r7, r6
 8000610:	46b8      	mov	r8, r7
 8000612:	2b38      	cmp	r3, #56	; 0x38
 8000614:	dc00      	bgt.n	8000618 <__aeabi_dadd+0x150>
 8000616:	e13e      	b.n	8000896 <__aeabi_dadd+0x3ce>
 8000618:	4643      	mov	r3, r8
 800061a:	4313      	orrs	r3, r2
 800061c:	001f      	movs	r7, r3
 800061e:	1e7a      	subs	r2, r7, #1
 8000620:	4197      	sbcs	r7, r2
 8000622:	183f      	adds	r7, r7, r0
 8000624:	4287      	cmp	r7, r0
 8000626:	4180      	sbcs	r0, r0
 8000628:	4240      	negs	r0, r0
 800062a:	1809      	adds	r1, r1, r0
 800062c:	020b      	lsls	r3, r1, #8
 800062e:	d400      	bmi.n	8000632 <__aeabi_dadd+0x16a>
 8000630:	e0b0      	b.n	8000794 <__aeabi_dadd+0x2cc>
 8000632:	4ba4      	ldr	r3, [pc, #656]	; (80008c4 <__aeabi_dadd+0x3fc>)
 8000634:	3501      	adds	r5, #1
 8000636:	429d      	cmp	r5, r3
 8000638:	d100      	bne.n	800063c <__aeabi_dadd+0x174>
 800063a:	e0c3      	b.n	80007c4 <__aeabi_dadd+0x2fc>
 800063c:	4aa2      	ldr	r2, [pc, #648]	; (80008c8 <__aeabi_dadd+0x400>)
 800063e:	087b      	lsrs	r3, r7, #1
 8000640:	400a      	ands	r2, r1
 8000642:	2101      	movs	r1, #1
 8000644:	400f      	ands	r7, r1
 8000646:	431f      	orrs	r7, r3
 8000648:	0851      	lsrs	r1, r2, #1
 800064a:	07d3      	lsls	r3, r2, #31
 800064c:	2207      	movs	r2, #7
 800064e:	431f      	orrs	r7, r3
 8000650:	403a      	ands	r2, r7
 8000652:	e799      	b.n	8000588 <__aeabi_dadd+0xc0>
 8000654:	4e9b      	ldr	r6, [pc, #620]	; (80008c4 <__aeabi_dadd+0x3fc>)
 8000656:	42b5      	cmp	r5, r6
 8000658:	d038      	beq.n	80006cc <__aeabi_dadd+0x204>
 800065a:	2680      	movs	r6, #128	; 0x80
 800065c:	0436      	lsls	r6, r6, #16
 800065e:	4337      	orrs	r7, r6
 8000660:	46b8      	mov	r8, r7
 8000662:	2b38      	cmp	r3, #56	; 0x38
 8000664:	dd00      	ble.n	8000668 <__aeabi_dadd+0x1a0>
 8000666:	e0dc      	b.n	8000822 <__aeabi_dadd+0x35a>
 8000668:	2b1f      	cmp	r3, #31
 800066a:	dc00      	bgt.n	800066e <__aeabi_dadd+0x1a6>
 800066c:	e130      	b.n	80008d0 <__aeabi_dadd+0x408>
 800066e:	001e      	movs	r6, r3
 8000670:	4647      	mov	r7, r8
 8000672:	3e20      	subs	r6, #32
 8000674:	40f7      	lsrs	r7, r6
 8000676:	46bc      	mov	ip, r7
 8000678:	2b20      	cmp	r3, #32
 800067a:	d004      	beq.n	8000686 <__aeabi_dadd+0x1be>
 800067c:	2640      	movs	r6, #64	; 0x40
 800067e:	1af3      	subs	r3, r6, r3
 8000680:	4646      	mov	r6, r8
 8000682:	409e      	lsls	r6, r3
 8000684:	4332      	orrs	r2, r6
 8000686:	0017      	movs	r7, r2
 8000688:	4663      	mov	r3, ip
 800068a:	1e7a      	subs	r2, r7, #1
 800068c:	4197      	sbcs	r7, r2
 800068e:	431f      	orrs	r7, r3
 8000690:	e0cc      	b.n	800082c <__aeabi_dadd+0x364>
 8000692:	2b00      	cmp	r3, #0
 8000694:	d100      	bne.n	8000698 <__aeabi_dadd+0x1d0>
 8000696:	e204      	b.n	8000aa2 <__aeabi_dadd+0x5da>
 8000698:	4643      	mov	r3, r8
 800069a:	4313      	orrs	r3, r2
 800069c:	d100      	bne.n	80006a0 <__aeabi_dadd+0x1d8>
 800069e:	e159      	b.n	8000954 <__aeabi_dadd+0x48c>
 80006a0:	074b      	lsls	r3, r1, #29
 80006a2:	08c0      	lsrs	r0, r0, #3
 80006a4:	4318      	orrs	r0, r3
 80006a6:	2380      	movs	r3, #128	; 0x80
 80006a8:	08c9      	lsrs	r1, r1, #3
 80006aa:	031b      	lsls	r3, r3, #12
 80006ac:	4219      	tst	r1, r3
 80006ae:	d008      	beq.n	80006c2 <__aeabi_dadd+0x1fa>
 80006b0:	4645      	mov	r5, r8
 80006b2:	08ed      	lsrs	r5, r5, #3
 80006b4:	421d      	tst	r5, r3
 80006b6:	d104      	bne.n	80006c2 <__aeabi_dadd+0x1fa>
 80006b8:	4643      	mov	r3, r8
 80006ba:	08d0      	lsrs	r0, r2, #3
 80006bc:	0759      	lsls	r1, r3, #29
 80006be:	4308      	orrs	r0, r1
 80006c0:	0029      	movs	r1, r5
 80006c2:	0f42      	lsrs	r2, r0, #29
 80006c4:	00c9      	lsls	r1, r1, #3
 80006c6:	4d7f      	ldr	r5, [pc, #508]	; (80008c4 <__aeabi_dadd+0x3fc>)
 80006c8:	4311      	orrs	r1, r2
 80006ca:	00c0      	lsls	r0, r0, #3
 80006cc:	074b      	lsls	r3, r1, #29
 80006ce:	08ca      	lsrs	r2, r1, #3
 80006d0:	497c      	ldr	r1, [pc, #496]	; (80008c4 <__aeabi_dadd+0x3fc>)
 80006d2:	08c0      	lsrs	r0, r0, #3
 80006d4:	4303      	orrs	r3, r0
 80006d6:	428d      	cmp	r5, r1
 80006d8:	d068      	beq.n	80007ac <__aeabi_dadd+0x2e4>
 80006da:	0312      	lsls	r2, r2, #12
 80006dc:	056d      	lsls	r5, r5, #21
 80006de:	0b12      	lsrs	r2, r2, #12
 80006e0:	0d6d      	lsrs	r5, r5, #21
 80006e2:	2100      	movs	r1, #0
 80006e4:	0312      	lsls	r2, r2, #12
 80006e6:	0018      	movs	r0, r3
 80006e8:	0b13      	lsrs	r3, r2, #12
 80006ea:	0d0a      	lsrs	r2, r1, #20
 80006ec:	0512      	lsls	r2, r2, #20
 80006ee:	431a      	orrs	r2, r3
 80006f0:	4b76      	ldr	r3, [pc, #472]	; (80008cc <__aeabi_dadd+0x404>)
 80006f2:	052d      	lsls	r5, r5, #20
 80006f4:	4013      	ands	r3, r2
 80006f6:	432b      	orrs	r3, r5
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	07e4      	lsls	r4, r4, #31
 80006fc:	085b      	lsrs	r3, r3, #1
 80006fe:	4323      	orrs	r3, r4
 8000700:	0019      	movs	r1, r3
 8000702:	bc1c      	pop	{r2, r3, r4}
 8000704:	4690      	mov	r8, r2
 8000706:	4699      	mov	r9, r3
 8000708:	46a2      	mov	sl, r4
 800070a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800070c:	003e      	movs	r6, r7
 800070e:	4316      	orrs	r6, r2
 8000710:	d012      	beq.n	8000738 <__aeabi_dadd+0x270>
 8000712:	1e5e      	subs	r6, r3, #1
 8000714:	2e00      	cmp	r6, #0
 8000716:	d000      	beq.n	800071a <__aeabi_dadd+0x252>
 8000718:	e100      	b.n	800091c <__aeabi_dadd+0x454>
 800071a:	1887      	adds	r7, r0, r2
 800071c:	4287      	cmp	r7, r0
 800071e:	4180      	sbcs	r0, r0
 8000720:	4441      	add	r1, r8
 8000722:	4240      	negs	r0, r0
 8000724:	1809      	adds	r1, r1, r0
 8000726:	2501      	movs	r5, #1
 8000728:	020b      	lsls	r3, r1, #8
 800072a:	d533      	bpl.n	8000794 <__aeabi_dadd+0x2cc>
 800072c:	2502      	movs	r5, #2
 800072e:	e785      	b.n	800063c <__aeabi_dadd+0x174>
 8000730:	4664      	mov	r4, ip
 8000732:	0033      	movs	r3, r6
 8000734:	4641      	mov	r1, r8
 8000736:	0010      	movs	r0, r2
 8000738:	001d      	movs	r5, r3
 800073a:	e7c7      	b.n	80006cc <__aeabi_dadd+0x204>
 800073c:	2d00      	cmp	r5, #0
 800073e:	d000      	beq.n	8000742 <__aeabi_dadd+0x27a>
 8000740:	e0da      	b.n	80008f8 <__aeabi_dadd+0x430>
 8000742:	000c      	movs	r4, r1
 8000744:	4304      	orrs	r4, r0
 8000746:	d0f3      	beq.n	8000730 <__aeabi_dadd+0x268>
 8000748:	1c5c      	adds	r4, r3, #1
 800074a:	d100      	bne.n	800074e <__aeabi_dadd+0x286>
 800074c:	e19f      	b.n	8000a8e <__aeabi_dadd+0x5c6>
 800074e:	4c5d      	ldr	r4, [pc, #372]	; (80008c4 <__aeabi_dadd+0x3fc>)
 8000750:	42a6      	cmp	r6, r4
 8000752:	d100      	bne.n	8000756 <__aeabi_dadd+0x28e>
 8000754:	e12f      	b.n	80009b6 <__aeabi_dadd+0x4ee>
 8000756:	43db      	mvns	r3, r3
 8000758:	2b38      	cmp	r3, #56	; 0x38
 800075a:	dd00      	ble.n	800075e <__aeabi_dadd+0x296>
 800075c:	e166      	b.n	8000a2c <__aeabi_dadd+0x564>
 800075e:	2b1f      	cmp	r3, #31
 8000760:	dd00      	ble.n	8000764 <__aeabi_dadd+0x29c>
 8000762:	e183      	b.n	8000a6c <__aeabi_dadd+0x5a4>
 8000764:	2420      	movs	r4, #32
 8000766:	0005      	movs	r5, r0
 8000768:	1ae4      	subs	r4, r4, r3
 800076a:	000f      	movs	r7, r1
 800076c:	40dd      	lsrs	r5, r3
 800076e:	40d9      	lsrs	r1, r3
 8000770:	40a0      	lsls	r0, r4
 8000772:	4643      	mov	r3, r8
 8000774:	40a7      	lsls	r7, r4
 8000776:	1a5b      	subs	r3, r3, r1
 8000778:	1e44      	subs	r4, r0, #1
 800077a:	41a0      	sbcs	r0, r4
 800077c:	4698      	mov	r8, r3
 800077e:	432f      	orrs	r7, r5
 8000780:	4338      	orrs	r0, r7
 8000782:	1a17      	subs	r7, r2, r0
 8000784:	42ba      	cmp	r2, r7
 8000786:	4192      	sbcs	r2, r2
 8000788:	4643      	mov	r3, r8
 800078a:	4252      	negs	r2, r2
 800078c:	1a99      	subs	r1, r3, r2
 800078e:	4664      	mov	r4, ip
 8000790:	0035      	movs	r5, r6
 8000792:	e6ca      	b.n	800052a <__aeabi_dadd+0x62>
 8000794:	2207      	movs	r2, #7
 8000796:	403a      	ands	r2, r7
 8000798:	2a00      	cmp	r2, #0
 800079a:	d000      	beq.n	800079e <__aeabi_dadd+0x2d6>
 800079c:	e6f6      	b.n	800058c <__aeabi_dadd+0xc4>
 800079e:	074b      	lsls	r3, r1, #29
 80007a0:	08ca      	lsrs	r2, r1, #3
 80007a2:	4948      	ldr	r1, [pc, #288]	; (80008c4 <__aeabi_dadd+0x3fc>)
 80007a4:	08ff      	lsrs	r7, r7, #3
 80007a6:	433b      	orrs	r3, r7
 80007a8:	428d      	cmp	r5, r1
 80007aa:	d196      	bne.n	80006da <__aeabi_dadd+0x212>
 80007ac:	0019      	movs	r1, r3
 80007ae:	4311      	orrs	r1, r2
 80007b0:	d100      	bne.n	80007b4 <__aeabi_dadd+0x2ec>
 80007b2:	e19e      	b.n	8000af2 <__aeabi_dadd+0x62a>
 80007b4:	2180      	movs	r1, #128	; 0x80
 80007b6:	0309      	lsls	r1, r1, #12
 80007b8:	430a      	orrs	r2, r1
 80007ba:	0312      	lsls	r2, r2, #12
 80007bc:	0b12      	lsrs	r2, r2, #12
 80007be:	4d41      	ldr	r5, [pc, #260]	; (80008c4 <__aeabi_dadd+0x3fc>)
 80007c0:	e78f      	b.n	80006e2 <__aeabi_dadd+0x21a>
 80007c2:	0015      	movs	r5, r2
 80007c4:	2200      	movs	r2, #0
 80007c6:	2300      	movs	r3, #0
 80007c8:	e78b      	b.n	80006e2 <__aeabi_dadd+0x21a>
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d000      	beq.n	80007d0 <__aeabi_dadd+0x308>
 80007ce:	e0c7      	b.n	8000960 <__aeabi_dadd+0x498>
 80007d0:	1c6b      	adds	r3, r5, #1
 80007d2:	055f      	lsls	r7, r3, #21
 80007d4:	0d7f      	lsrs	r7, r7, #21
 80007d6:	2f01      	cmp	r7, #1
 80007d8:	dc00      	bgt.n	80007dc <__aeabi_dadd+0x314>
 80007da:	e0f1      	b.n	80009c0 <__aeabi_dadd+0x4f8>
 80007dc:	4d39      	ldr	r5, [pc, #228]	; (80008c4 <__aeabi_dadd+0x3fc>)
 80007de:	42ab      	cmp	r3, r5
 80007e0:	d100      	bne.n	80007e4 <__aeabi_dadd+0x31c>
 80007e2:	e0b9      	b.n	8000958 <__aeabi_dadd+0x490>
 80007e4:	1885      	adds	r5, r0, r2
 80007e6:	000a      	movs	r2, r1
 80007e8:	4285      	cmp	r5, r0
 80007ea:	4189      	sbcs	r1, r1
 80007ec:	4442      	add	r2, r8
 80007ee:	4249      	negs	r1, r1
 80007f0:	1851      	adds	r1, r2, r1
 80007f2:	2207      	movs	r2, #7
 80007f4:	07cf      	lsls	r7, r1, #31
 80007f6:	086d      	lsrs	r5, r5, #1
 80007f8:	432f      	orrs	r7, r5
 80007fa:	0849      	lsrs	r1, r1, #1
 80007fc:	403a      	ands	r2, r7
 80007fe:	001d      	movs	r5, r3
 8000800:	e6c2      	b.n	8000588 <__aeabi_dadd+0xc0>
 8000802:	2207      	movs	r2, #7
 8000804:	4930      	ldr	r1, [pc, #192]	; (80008c8 <__aeabi_dadd+0x400>)
 8000806:	1aed      	subs	r5, r5, r3
 8000808:	4031      	ands	r1, r6
 800080a:	403a      	ands	r2, r7
 800080c:	e6bc      	b.n	8000588 <__aeabi_dadd+0xc0>
 800080e:	003e      	movs	r6, r7
 8000810:	3828      	subs	r0, #40	; 0x28
 8000812:	4086      	lsls	r6, r0
 8000814:	2700      	movs	r7, #0
 8000816:	e69f      	b.n	8000558 <__aeabi_dadd+0x90>
 8000818:	0038      	movs	r0, r7
 800081a:	f001 fba1 	bl	8001f60 <__clzsi2>
 800081e:	3020      	adds	r0, #32
 8000820:	e68e      	b.n	8000540 <__aeabi_dadd+0x78>
 8000822:	4643      	mov	r3, r8
 8000824:	4313      	orrs	r3, r2
 8000826:	001f      	movs	r7, r3
 8000828:	1e7a      	subs	r2, r7, #1
 800082a:	4197      	sbcs	r7, r2
 800082c:	1bc7      	subs	r7, r0, r7
 800082e:	42b8      	cmp	r0, r7
 8000830:	4180      	sbcs	r0, r0
 8000832:	4240      	negs	r0, r0
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	e678      	b.n	800052a <__aeabi_dadd+0x62>
 8000838:	000e      	movs	r6, r1
 800083a:	003b      	movs	r3, r7
 800083c:	4306      	orrs	r6, r0
 800083e:	4313      	orrs	r3, r2
 8000840:	2d00      	cmp	r5, #0
 8000842:	d161      	bne.n	8000908 <__aeabi_dadd+0x440>
 8000844:	2e00      	cmp	r6, #0
 8000846:	d000      	beq.n	800084a <__aeabi_dadd+0x382>
 8000848:	e0f4      	b.n	8000a34 <__aeabi_dadd+0x56c>
 800084a:	2b00      	cmp	r3, #0
 800084c:	d100      	bne.n	8000850 <__aeabi_dadd+0x388>
 800084e:	e11b      	b.n	8000a88 <__aeabi_dadd+0x5c0>
 8000850:	4664      	mov	r4, ip
 8000852:	0039      	movs	r1, r7
 8000854:	0010      	movs	r0, r2
 8000856:	e739      	b.n	80006cc <__aeabi_dadd+0x204>
 8000858:	4f1a      	ldr	r7, [pc, #104]	; (80008c4 <__aeabi_dadd+0x3fc>)
 800085a:	42bb      	cmp	r3, r7
 800085c:	d07a      	beq.n	8000954 <__aeabi_dadd+0x48c>
 800085e:	0033      	movs	r3, r6
 8000860:	e6ff      	b.n	8000662 <__aeabi_dadd+0x19a>
 8000862:	0030      	movs	r0, r6
 8000864:	3d1f      	subs	r5, #31
 8000866:	40e8      	lsrs	r0, r5
 8000868:	2b20      	cmp	r3, #32
 800086a:	d003      	beq.n	8000874 <__aeabi_dadd+0x3ac>
 800086c:	2140      	movs	r1, #64	; 0x40
 800086e:	1acb      	subs	r3, r1, r3
 8000870:	409e      	lsls	r6, r3
 8000872:	4337      	orrs	r7, r6
 8000874:	1e7b      	subs	r3, r7, #1
 8000876:	419f      	sbcs	r7, r3
 8000878:	2207      	movs	r2, #7
 800087a:	4307      	orrs	r7, r0
 800087c:	403a      	ands	r2, r7
 800087e:	2100      	movs	r1, #0
 8000880:	2500      	movs	r5, #0
 8000882:	e789      	b.n	8000798 <__aeabi_dadd+0x2d0>
 8000884:	1a17      	subs	r7, r2, r0
 8000886:	4643      	mov	r3, r8
 8000888:	42ba      	cmp	r2, r7
 800088a:	41b6      	sbcs	r6, r6
 800088c:	1a59      	subs	r1, r3, r1
 800088e:	4276      	negs	r6, r6
 8000890:	1b8e      	subs	r6, r1, r6
 8000892:	4664      	mov	r4, ip
 8000894:	e64e      	b.n	8000534 <__aeabi_dadd+0x6c>
 8000896:	2b1f      	cmp	r3, #31
 8000898:	dd00      	ble.n	800089c <__aeabi_dadd+0x3d4>
 800089a:	e0ad      	b.n	80009f8 <__aeabi_dadd+0x530>
 800089c:	2620      	movs	r6, #32
 800089e:	4647      	mov	r7, r8
 80008a0:	1af6      	subs	r6, r6, r3
 80008a2:	40b7      	lsls	r7, r6
 80008a4:	46b9      	mov	r9, r7
 80008a6:	0017      	movs	r7, r2
 80008a8:	46b2      	mov	sl, r6
 80008aa:	40df      	lsrs	r7, r3
 80008ac:	464e      	mov	r6, r9
 80008ae:	433e      	orrs	r6, r7
 80008b0:	0037      	movs	r7, r6
 80008b2:	4656      	mov	r6, sl
 80008b4:	40b2      	lsls	r2, r6
 80008b6:	1e56      	subs	r6, r2, #1
 80008b8:	41b2      	sbcs	r2, r6
 80008ba:	4317      	orrs	r7, r2
 80008bc:	4642      	mov	r2, r8
 80008be:	40da      	lsrs	r2, r3
 80008c0:	1889      	adds	r1, r1, r2
 80008c2:	e6ae      	b.n	8000622 <__aeabi_dadd+0x15a>
 80008c4:	000007ff 	.word	0x000007ff
 80008c8:	ff7fffff 	.word	0xff7fffff
 80008cc:	800fffff 	.word	0x800fffff
 80008d0:	2620      	movs	r6, #32
 80008d2:	4647      	mov	r7, r8
 80008d4:	1af6      	subs	r6, r6, r3
 80008d6:	40b7      	lsls	r7, r6
 80008d8:	46b9      	mov	r9, r7
 80008da:	0017      	movs	r7, r2
 80008dc:	46b2      	mov	sl, r6
 80008de:	40df      	lsrs	r7, r3
 80008e0:	464e      	mov	r6, r9
 80008e2:	433e      	orrs	r6, r7
 80008e4:	0037      	movs	r7, r6
 80008e6:	4656      	mov	r6, sl
 80008e8:	40b2      	lsls	r2, r6
 80008ea:	1e56      	subs	r6, r2, #1
 80008ec:	41b2      	sbcs	r2, r6
 80008ee:	4317      	orrs	r7, r2
 80008f0:	4642      	mov	r2, r8
 80008f2:	40da      	lsrs	r2, r3
 80008f4:	1a89      	subs	r1, r1, r2
 80008f6:	e799      	b.n	800082c <__aeabi_dadd+0x364>
 80008f8:	4c7f      	ldr	r4, [pc, #508]	; (8000af8 <__aeabi_dadd+0x630>)
 80008fa:	42a6      	cmp	r6, r4
 80008fc:	d05b      	beq.n	80009b6 <__aeabi_dadd+0x4ee>
 80008fe:	2480      	movs	r4, #128	; 0x80
 8000900:	0424      	lsls	r4, r4, #16
 8000902:	425b      	negs	r3, r3
 8000904:	4321      	orrs	r1, r4
 8000906:	e727      	b.n	8000758 <__aeabi_dadd+0x290>
 8000908:	2e00      	cmp	r6, #0
 800090a:	d10c      	bne.n	8000926 <__aeabi_dadd+0x45e>
 800090c:	2b00      	cmp	r3, #0
 800090e:	d100      	bne.n	8000912 <__aeabi_dadd+0x44a>
 8000910:	e0cb      	b.n	8000aaa <__aeabi_dadd+0x5e2>
 8000912:	4664      	mov	r4, ip
 8000914:	0039      	movs	r1, r7
 8000916:	0010      	movs	r0, r2
 8000918:	4d77      	ldr	r5, [pc, #476]	; (8000af8 <__aeabi_dadd+0x630>)
 800091a:	e6d7      	b.n	80006cc <__aeabi_dadd+0x204>
 800091c:	4f76      	ldr	r7, [pc, #472]	; (8000af8 <__aeabi_dadd+0x630>)
 800091e:	42bb      	cmp	r3, r7
 8000920:	d018      	beq.n	8000954 <__aeabi_dadd+0x48c>
 8000922:	0033      	movs	r3, r6
 8000924:	e675      	b.n	8000612 <__aeabi_dadd+0x14a>
 8000926:	2b00      	cmp	r3, #0
 8000928:	d014      	beq.n	8000954 <__aeabi_dadd+0x48c>
 800092a:	074b      	lsls	r3, r1, #29
 800092c:	08c0      	lsrs	r0, r0, #3
 800092e:	4318      	orrs	r0, r3
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	08c9      	lsrs	r1, r1, #3
 8000934:	031b      	lsls	r3, r3, #12
 8000936:	4219      	tst	r1, r3
 8000938:	d007      	beq.n	800094a <__aeabi_dadd+0x482>
 800093a:	08fc      	lsrs	r4, r7, #3
 800093c:	421c      	tst	r4, r3
 800093e:	d104      	bne.n	800094a <__aeabi_dadd+0x482>
 8000940:	0779      	lsls	r1, r7, #29
 8000942:	08d0      	lsrs	r0, r2, #3
 8000944:	4308      	orrs	r0, r1
 8000946:	46e1      	mov	r9, ip
 8000948:	0021      	movs	r1, r4
 800094a:	464c      	mov	r4, r9
 800094c:	0f42      	lsrs	r2, r0, #29
 800094e:	00c9      	lsls	r1, r1, #3
 8000950:	4311      	orrs	r1, r2
 8000952:	00c0      	lsls	r0, r0, #3
 8000954:	4d68      	ldr	r5, [pc, #416]	; (8000af8 <__aeabi_dadd+0x630>)
 8000956:	e6b9      	b.n	80006cc <__aeabi_dadd+0x204>
 8000958:	001d      	movs	r5, r3
 800095a:	2200      	movs	r2, #0
 800095c:	2300      	movs	r3, #0
 800095e:	e6c0      	b.n	80006e2 <__aeabi_dadd+0x21a>
 8000960:	2d00      	cmp	r5, #0
 8000962:	d15b      	bne.n	8000a1c <__aeabi_dadd+0x554>
 8000964:	000d      	movs	r5, r1
 8000966:	4305      	orrs	r5, r0
 8000968:	d100      	bne.n	800096c <__aeabi_dadd+0x4a4>
 800096a:	e6e2      	b.n	8000732 <__aeabi_dadd+0x26a>
 800096c:	1c5d      	adds	r5, r3, #1
 800096e:	d100      	bne.n	8000972 <__aeabi_dadd+0x4aa>
 8000970:	e0b0      	b.n	8000ad4 <__aeabi_dadd+0x60c>
 8000972:	4d61      	ldr	r5, [pc, #388]	; (8000af8 <__aeabi_dadd+0x630>)
 8000974:	42ae      	cmp	r6, r5
 8000976:	d01f      	beq.n	80009b8 <__aeabi_dadd+0x4f0>
 8000978:	43db      	mvns	r3, r3
 800097a:	2b38      	cmp	r3, #56	; 0x38
 800097c:	dc71      	bgt.n	8000a62 <__aeabi_dadd+0x59a>
 800097e:	2b1f      	cmp	r3, #31
 8000980:	dd00      	ble.n	8000984 <__aeabi_dadd+0x4bc>
 8000982:	e096      	b.n	8000ab2 <__aeabi_dadd+0x5ea>
 8000984:	2520      	movs	r5, #32
 8000986:	000f      	movs	r7, r1
 8000988:	1aed      	subs	r5, r5, r3
 800098a:	40af      	lsls	r7, r5
 800098c:	46b9      	mov	r9, r7
 800098e:	0007      	movs	r7, r0
 8000990:	46aa      	mov	sl, r5
 8000992:	40df      	lsrs	r7, r3
 8000994:	464d      	mov	r5, r9
 8000996:	433d      	orrs	r5, r7
 8000998:	002f      	movs	r7, r5
 800099a:	4655      	mov	r5, sl
 800099c:	40a8      	lsls	r0, r5
 800099e:	40d9      	lsrs	r1, r3
 80009a0:	1e45      	subs	r5, r0, #1
 80009a2:	41a8      	sbcs	r0, r5
 80009a4:	4488      	add	r8, r1
 80009a6:	4307      	orrs	r7, r0
 80009a8:	18bf      	adds	r7, r7, r2
 80009aa:	4297      	cmp	r7, r2
 80009ac:	4192      	sbcs	r2, r2
 80009ae:	4251      	negs	r1, r2
 80009b0:	4441      	add	r1, r8
 80009b2:	0035      	movs	r5, r6
 80009b4:	e63a      	b.n	800062c <__aeabi_dadd+0x164>
 80009b6:	4664      	mov	r4, ip
 80009b8:	0035      	movs	r5, r6
 80009ba:	4641      	mov	r1, r8
 80009bc:	0010      	movs	r0, r2
 80009be:	e685      	b.n	80006cc <__aeabi_dadd+0x204>
 80009c0:	000b      	movs	r3, r1
 80009c2:	4303      	orrs	r3, r0
 80009c4:	2d00      	cmp	r5, #0
 80009c6:	d000      	beq.n	80009ca <__aeabi_dadd+0x502>
 80009c8:	e663      	b.n	8000692 <__aeabi_dadd+0x1ca>
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d0f5      	beq.n	80009ba <__aeabi_dadd+0x4f2>
 80009ce:	4643      	mov	r3, r8
 80009d0:	4313      	orrs	r3, r2
 80009d2:	d100      	bne.n	80009d6 <__aeabi_dadd+0x50e>
 80009d4:	e67a      	b.n	80006cc <__aeabi_dadd+0x204>
 80009d6:	1887      	adds	r7, r0, r2
 80009d8:	4287      	cmp	r7, r0
 80009da:	4180      	sbcs	r0, r0
 80009dc:	2207      	movs	r2, #7
 80009de:	4441      	add	r1, r8
 80009e0:	4240      	negs	r0, r0
 80009e2:	1809      	adds	r1, r1, r0
 80009e4:	403a      	ands	r2, r7
 80009e6:	020b      	lsls	r3, r1, #8
 80009e8:	d400      	bmi.n	80009ec <__aeabi_dadd+0x524>
 80009ea:	e6d5      	b.n	8000798 <__aeabi_dadd+0x2d0>
 80009ec:	4b43      	ldr	r3, [pc, #268]	; (8000afc <__aeabi_dadd+0x634>)
 80009ee:	3501      	adds	r5, #1
 80009f0:	4019      	ands	r1, r3
 80009f2:	e5c9      	b.n	8000588 <__aeabi_dadd+0xc0>
 80009f4:	0038      	movs	r0, r7
 80009f6:	e669      	b.n	80006cc <__aeabi_dadd+0x204>
 80009f8:	001e      	movs	r6, r3
 80009fa:	4647      	mov	r7, r8
 80009fc:	3e20      	subs	r6, #32
 80009fe:	40f7      	lsrs	r7, r6
 8000a00:	46bc      	mov	ip, r7
 8000a02:	2b20      	cmp	r3, #32
 8000a04:	d004      	beq.n	8000a10 <__aeabi_dadd+0x548>
 8000a06:	2640      	movs	r6, #64	; 0x40
 8000a08:	1af3      	subs	r3, r6, r3
 8000a0a:	4646      	mov	r6, r8
 8000a0c:	409e      	lsls	r6, r3
 8000a0e:	4332      	orrs	r2, r6
 8000a10:	0017      	movs	r7, r2
 8000a12:	4663      	mov	r3, ip
 8000a14:	1e7a      	subs	r2, r7, #1
 8000a16:	4197      	sbcs	r7, r2
 8000a18:	431f      	orrs	r7, r3
 8000a1a:	e602      	b.n	8000622 <__aeabi_dadd+0x15a>
 8000a1c:	4d36      	ldr	r5, [pc, #216]	; (8000af8 <__aeabi_dadd+0x630>)
 8000a1e:	42ae      	cmp	r6, r5
 8000a20:	d0ca      	beq.n	80009b8 <__aeabi_dadd+0x4f0>
 8000a22:	2580      	movs	r5, #128	; 0x80
 8000a24:	042d      	lsls	r5, r5, #16
 8000a26:	425b      	negs	r3, r3
 8000a28:	4329      	orrs	r1, r5
 8000a2a:	e7a6      	b.n	800097a <__aeabi_dadd+0x4b2>
 8000a2c:	4308      	orrs	r0, r1
 8000a2e:	1e41      	subs	r1, r0, #1
 8000a30:	4188      	sbcs	r0, r1
 8000a32:	e6a6      	b.n	8000782 <__aeabi_dadd+0x2ba>
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d100      	bne.n	8000a3a <__aeabi_dadd+0x572>
 8000a38:	e648      	b.n	80006cc <__aeabi_dadd+0x204>
 8000a3a:	1a87      	subs	r7, r0, r2
 8000a3c:	4643      	mov	r3, r8
 8000a3e:	42b8      	cmp	r0, r7
 8000a40:	41b6      	sbcs	r6, r6
 8000a42:	1acb      	subs	r3, r1, r3
 8000a44:	4276      	negs	r6, r6
 8000a46:	1b9e      	subs	r6, r3, r6
 8000a48:	0233      	lsls	r3, r6, #8
 8000a4a:	d54b      	bpl.n	8000ae4 <__aeabi_dadd+0x61c>
 8000a4c:	1a17      	subs	r7, r2, r0
 8000a4e:	4643      	mov	r3, r8
 8000a50:	42ba      	cmp	r2, r7
 8000a52:	4192      	sbcs	r2, r2
 8000a54:	1a59      	subs	r1, r3, r1
 8000a56:	4252      	negs	r2, r2
 8000a58:	1a89      	subs	r1, r1, r2
 8000a5a:	2207      	movs	r2, #7
 8000a5c:	4664      	mov	r4, ip
 8000a5e:	403a      	ands	r2, r7
 8000a60:	e592      	b.n	8000588 <__aeabi_dadd+0xc0>
 8000a62:	4301      	orrs	r1, r0
 8000a64:	000f      	movs	r7, r1
 8000a66:	1e79      	subs	r1, r7, #1
 8000a68:	418f      	sbcs	r7, r1
 8000a6a:	e79d      	b.n	80009a8 <__aeabi_dadd+0x4e0>
 8000a6c:	001c      	movs	r4, r3
 8000a6e:	000f      	movs	r7, r1
 8000a70:	3c20      	subs	r4, #32
 8000a72:	40e7      	lsrs	r7, r4
 8000a74:	2b20      	cmp	r3, #32
 8000a76:	d003      	beq.n	8000a80 <__aeabi_dadd+0x5b8>
 8000a78:	2440      	movs	r4, #64	; 0x40
 8000a7a:	1ae3      	subs	r3, r4, r3
 8000a7c:	4099      	lsls	r1, r3
 8000a7e:	4308      	orrs	r0, r1
 8000a80:	1e41      	subs	r1, r0, #1
 8000a82:	4188      	sbcs	r0, r1
 8000a84:	4338      	orrs	r0, r7
 8000a86:	e67c      	b.n	8000782 <__aeabi_dadd+0x2ba>
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2400      	movs	r4, #0
 8000a8c:	e625      	b.n	80006da <__aeabi_dadd+0x212>
 8000a8e:	1a17      	subs	r7, r2, r0
 8000a90:	4643      	mov	r3, r8
 8000a92:	42ba      	cmp	r2, r7
 8000a94:	4192      	sbcs	r2, r2
 8000a96:	1a59      	subs	r1, r3, r1
 8000a98:	4252      	negs	r2, r2
 8000a9a:	1a89      	subs	r1, r1, r2
 8000a9c:	4664      	mov	r4, ip
 8000a9e:	0035      	movs	r5, r6
 8000aa0:	e543      	b.n	800052a <__aeabi_dadd+0x62>
 8000aa2:	4641      	mov	r1, r8
 8000aa4:	0010      	movs	r0, r2
 8000aa6:	4d14      	ldr	r5, [pc, #80]	; (8000af8 <__aeabi_dadd+0x630>)
 8000aa8:	e610      	b.n	80006cc <__aeabi_dadd+0x204>
 8000aaa:	2280      	movs	r2, #128	; 0x80
 8000aac:	2400      	movs	r4, #0
 8000aae:	0312      	lsls	r2, r2, #12
 8000ab0:	e680      	b.n	80007b4 <__aeabi_dadd+0x2ec>
 8000ab2:	001d      	movs	r5, r3
 8000ab4:	000f      	movs	r7, r1
 8000ab6:	3d20      	subs	r5, #32
 8000ab8:	40ef      	lsrs	r7, r5
 8000aba:	46bc      	mov	ip, r7
 8000abc:	2b20      	cmp	r3, #32
 8000abe:	d003      	beq.n	8000ac8 <__aeabi_dadd+0x600>
 8000ac0:	2540      	movs	r5, #64	; 0x40
 8000ac2:	1aeb      	subs	r3, r5, r3
 8000ac4:	4099      	lsls	r1, r3
 8000ac6:	4308      	orrs	r0, r1
 8000ac8:	0007      	movs	r7, r0
 8000aca:	4663      	mov	r3, ip
 8000acc:	1e78      	subs	r0, r7, #1
 8000ace:	4187      	sbcs	r7, r0
 8000ad0:	431f      	orrs	r7, r3
 8000ad2:	e769      	b.n	80009a8 <__aeabi_dadd+0x4e0>
 8000ad4:	1887      	adds	r7, r0, r2
 8000ad6:	4297      	cmp	r7, r2
 8000ad8:	419b      	sbcs	r3, r3
 8000ada:	4441      	add	r1, r8
 8000adc:	425b      	negs	r3, r3
 8000ade:	18c9      	adds	r1, r1, r3
 8000ae0:	0035      	movs	r5, r6
 8000ae2:	e5a3      	b.n	800062c <__aeabi_dadd+0x164>
 8000ae4:	003b      	movs	r3, r7
 8000ae6:	4333      	orrs	r3, r6
 8000ae8:	d0ce      	beq.n	8000a88 <__aeabi_dadd+0x5c0>
 8000aea:	2207      	movs	r2, #7
 8000aec:	0031      	movs	r1, r6
 8000aee:	403a      	ands	r2, r7
 8000af0:	e652      	b.n	8000798 <__aeabi_dadd+0x2d0>
 8000af2:	2300      	movs	r3, #0
 8000af4:	001a      	movs	r2, r3
 8000af6:	e5f4      	b.n	80006e2 <__aeabi_dadd+0x21a>
 8000af8:	000007ff 	.word	0x000007ff
 8000afc:	ff7fffff 	.word	0xff7fffff

08000b00 <__aeabi_ddiv>:
 8000b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b02:	4657      	mov	r7, sl
 8000b04:	46de      	mov	lr, fp
 8000b06:	464e      	mov	r6, r9
 8000b08:	4645      	mov	r5, r8
 8000b0a:	b5e0      	push	{r5, r6, r7, lr}
 8000b0c:	4683      	mov	fp, r0
 8000b0e:	0007      	movs	r7, r0
 8000b10:	030e      	lsls	r6, r1, #12
 8000b12:	0048      	lsls	r0, r1, #1
 8000b14:	b085      	sub	sp, #20
 8000b16:	4692      	mov	sl, r2
 8000b18:	001c      	movs	r4, r3
 8000b1a:	0b36      	lsrs	r6, r6, #12
 8000b1c:	0d40      	lsrs	r0, r0, #21
 8000b1e:	0fcd      	lsrs	r5, r1, #31
 8000b20:	2800      	cmp	r0, #0
 8000b22:	d100      	bne.n	8000b26 <__aeabi_ddiv+0x26>
 8000b24:	e09d      	b.n	8000c62 <__aeabi_ddiv+0x162>
 8000b26:	4b95      	ldr	r3, [pc, #596]	; (8000d7c <__aeabi_ddiv+0x27c>)
 8000b28:	4298      	cmp	r0, r3
 8000b2a:	d039      	beq.n	8000ba0 <__aeabi_ddiv+0xa0>
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	00f6      	lsls	r6, r6, #3
 8000b30:	041b      	lsls	r3, r3, #16
 8000b32:	431e      	orrs	r6, r3
 8000b34:	4a92      	ldr	r2, [pc, #584]	; (8000d80 <__aeabi_ddiv+0x280>)
 8000b36:	0f7b      	lsrs	r3, r7, #29
 8000b38:	4333      	orrs	r3, r6
 8000b3a:	4699      	mov	r9, r3
 8000b3c:	4694      	mov	ip, r2
 8000b3e:	0003      	movs	r3, r0
 8000b40:	4463      	add	r3, ip
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	2300      	movs	r3, #0
 8000b46:	2600      	movs	r6, #0
 8000b48:	00ff      	lsls	r7, r7, #3
 8000b4a:	9302      	str	r3, [sp, #8]
 8000b4c:	0323      	lsls	r3, r4, #12
 8000b4e:	0b1b      	lsrs	r3, r3, #12
 8000b50:	4698      	mov	r8, r3
 8000b52:	0063      	lsls	r3, r4, #1
 8000b54:	0fe4      	lsrs	r4, r4, #31
 8000b56:	4652      	mov	r2, sl
 8000b58:	0d5b      	lsrs	r3, r3, #21
 8000b5a:	9401      	str	r4, [sp, #4]
 8000b5c:	d100      	bne.n	8000b60 <__aeabi_ddiv+0x60>
 8000b5e:	e0b3      	b.n	8000cc8 <__aeabi_ddiv+0x1c8>
 8000b60:	4986      	ldr	r1, [pc, #536]	; (8000d7c <__aeabi_ddiv+0x27c>)
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d100      	bne.n	8000b68 <__aeabi_ddiv+0x68>
 8000b66:	e09e      	b.n	8000ca6 <__aeabi_ddiv+0x1a6>
 8000b68:	4642      	mov	r2, r8
 8000b6a:	00d1      	lsls	r1, r2, #3
 8000b6c:	2280      	movs	r2, #128	; 0x80
 8000b6e:	0412      	lsls	r2, r2, #16
 8000b70:	430a      	orrs	r2, r1
 8000b72:	4651      	mov	r1, sl
 8000b74:	0f49      	lsrs	r1, r1, #29
 8000b76:	4311      	orrs	r1, r2
 8000b78:	468b      	mov	fp, r1
 8000b7a:	4981      	ldr	r1, [pc, #516]	; (8000d80 <__aeabi_ddiv+0x280>)
 8000b7c:	4652      	mov	r2, sl
 8000b7e:	468c      	mov	ip, r1
 8000b80:	9900      	ldr	r1, [sp, #0]
 8000b82:	4463      	add	r3, ip
 8000b84:	1acb      	subs	r3, r1, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	00d2      	lsls	r2, r2, #3
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	002b      	movs	r3, r5
 8000b8e:	4063      	eors	r3, r4
 8000b90:	469a      	mov	sl, r3
 8000b92:	2e0f      	cmp	r6, #15
 8000b94:	d900      	bls.n	8000b98 <__aeabi_ddiv+0x98>
 8000b96:	e105      	b.n	8000da4 <__aeabi_ddiv+0x2a4>
 8000b98:	4b7a      	ldr	r3, [pc, #488]	; (8000d84 <__aeabi_ddiv+0x284>)
 8000b9a:	00b6      	lsls	r6, r6, #2
 8000b9c:	599b      	ldr	r3, [r3, r6]
 8000b9e:	469f      	mov	pc, r3
 8000ba0:	465b      	mov	r3, fp
 8000ba2:	4333      	orrs	r3, r6
 8000ba4:	4699      	mov	r9, r3
 8000ba6:	d000      	beq.n	8000baa <__aeabi_ddiv+0xaa>
 8000ba8:	e0b8      	b.n	8000d1c <__aeabi_ddiv+0x21c>
 8000baa:	2302      	movs	r3, #2
 8000bac:	2608      	movs	r6, #8
 8000bae:	2700      	movs	r7, #0
 8000bb0:	9000      	str	r0, [sp, #0]
 8000bb2:	9302      	str	r3, [sp, #8]
 8000bb4:	e7ca      	b.n	8000b4c <__aeabi_ddiv+0x4c>
 8000bb6:	46cb      	mov	fp, r9
 8000bb8:	003a      	movs	r2, r7
 8000bba:	9902      	ldr	r1, [sp, #8]
 8000bbc:	9501      	str	r5, [sp, #4]
 8000bbe:	9b01      	ldr	r3, [sp, #4]
 8000bc0:	469a      	mov	sl, r3
 8000bc2:	2902      	cmp	r1, #2
 8000bc4:	d027      	beq.n	8000c16 <__aeabi_ddiv+0x116>
 8000bc6:	2903      	cmp	r1, #3
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_ddiv+0xcc>
 8000bca:	e280      	b.n	80010ce <__aeabi_ddiv+0x5ce>
 8000bcc:	2901      	cmp	r1, #1
 8000bce:	d044      	beq.n	8000c5a <__aeabi_ddiv+0x15a>
 8000bd0:	496d      	ldr	r1, [pc, #436]	; (8000d88 <__aeabi_ddiv+0x288>)
 8000bd2:	9b00      	ldr	r3, [sp, #0]
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	4463      	add	r3, ip
 8000bd8:	001c      	movs	r4, r3
 8000bda:	2c00      	cmp	r4, #0
 8000bdc:	dd38      	ble.n	8000c50 <__aeabi_ddiv+0x150>
 8000bde:	0753      	lsls	r3, r2, #29
 8000be0:	d000      	beq.n	8000be4 <__aeabi_ddiv+0xe4>
 8000be2:	e213      	b.n	800100c <__aeabi_ddiv+0x50c>
 8000be4:	08d2      	lsrs	r2, r2, #3
 8000be6:	465b      	mov	r3, fp
 8000be8:	01db      	lsls	r3, r3, #7
 8000bea:	d509      	bpl.n	8000c00 <__aeabi_ddiv+0x100>
 8000bec:	4659      	mov	r1, fp
 8000bee:	4b67      	ldr	r3, [pc, #412]	; (8000d8c <__aeabi_ddiv+0x28c>)
 8000bf0:	4019      	ands	r1, r3
 8000bf2:	468b      	mov	fp, r1
 8000bf4:	2180      	movs	r1, #128	; 0x80
 8000bf6:	00c9      	lsls	r1, r1, #3
 8000bf8:	468c      	mov	ip, r1
 8000bfa:	9b00      	ldr	r3, [sp, #0]
 8000bfc:	4463      	add	r3, ip
 8000bfe:	001c      	movs	r4, r3
 8000c00:	4b63      	ldr	r3, [pc, #396]	; (8000d90 <__aeabi_ddiv+0x290>)
 8000c02:	429c      	cmp	r4, r3
 8000c04:	dc07      	bgt.n	8000c16 <__aeabi_ddiv+0x116>
 8000c06:	465b      	mov	r3, fp
 8000c08:	0564      	lsls	r4, r4, #21
 8000c0a:	075f      	lsls	r7, r3, #29
 8000c0c:	025b      	lsls	r3, r3, #9
 8000c0e:	4317      	orrs	r7, r2
 8000c10:	0b1b      	lsrs	r3, r3, #12
 8000c12:	0d62      	lsrs	r2, r4, #21
 8000c14:	e002      	b.n	8000c1c <__aeabi_ddiv+0x11c>
 8000c16:	2300      	movs	r3, #0
 8000c18:	2700      	movs	r7, #0
 8000c1a:	4a58      	ldr	r2, [pc, #352]	; (8000d7c <__aeabi_ddiv+0x27c>)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	031b      	lsls	r3, r3, #12
 8000c20:	0b1c      	lsrs	r4, r3, #12
 8000c22:	0d0b      	lsrs	r3, r1, #20
 8000c24:	051b      	lsls	r3, r3, #20
 8000c26:	4323      	orrs	r3, r4
 8000c28:	0514      	lsls	r4, r2, #20
 8000c2a:	4a5a      	ldr	r2, [pc, #360]	; (8000d94 <__aeabi_ddiv+0x294>)
 8000c2c:	0038      	movs	r0, r7
 8000c2e:	4013      	ands	r3, r2
 8000c30:	431c      	orrs	r4, r3
 8000c32:	4653      	mov	r3, sl
 8000c34:	0064      	lsls	r4, r4, #1
 8000c36:	07db      	lsls	r3, r3, #31
 8000c38:	0864      	lsrs	r4, r4, #1
 8000c3a:	431c      	orrs	r4, r3
 8000c3c:	0021      	movs	r1, r4
 8000c3e:	b005      	add	sp, #20
 8000c40:	bc3c      	pop	{r2, r3, r4, r5}
 8000c42:	4690      	mov	r8, r2
 8000c44:	4699      	mov	r9, r3
 8000c46:	46a2      	mov	sl, r4
 8000c48:	46ab      	mov	fp, r5
 8000c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4252      	negs	r2, r2
 8000c50:	2301      	movs	r3, #1
 8000c52:	1b1b      	subs	r3, r3, r4
 8000c54:	2b38      	cmp	r3, #56	; 0x38
 8000c56:	dc00      	bgt.n	8000c5a <__aeabi_ddiv+0x15a>
 8000c58:	e1ad      	b.n	8000fb6 <__aeabi_ddiv+0x4b6>
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	2700      	movs	r7, #0
 8000c60:	e7dc      	b.n	8000c1c <__aeabi_ddiv+0x11c>
 8000c62:	465b      	mov	r3, fp
 8000c64:	4333      	orrs	r3, r6
 8000c66:	4699      	mov	r9, r3
 8000c68:	d05e      	beq.n	8000d28 <__aeabi_ddiv+0x228>
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_ddiv+0x170>
 8000c6e:	e18a      	b.n	8000f86 <__aeabi_ddiv+0x486>
 8000c70:	0030      	movs	r0, r6
 8000c72:	f001 f975 	bl	8001f60 <__clzsi2>
 8000c76:	0003      	movs	r3, r0
 8000c78:	3b0b      	subs	r3, #11
 8000c7a:	2b1c      	cmp	r3, #28
 8000c7c:	dd00      	ble.n	8000c80 <__aeabi_ddiv+0x180>
 8000c7e:	e17b      	b.n	8000f78 <__aeabi_ddiv+0x478>
 8000c80:	221d      	movs	r2, #29
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	465a      	mov	r2, fp
 8000c86:	0001      	movs	r1, r0
 8000c88:	40da      	lsrs	r2, r3
 8000c8a:	3908      	subs	r1, #8
 8000c8c:	408e      	lsls	r6, r1
 8000c8e:	0013      	movs	r3, r2
 8000c90:	465f      	mov	r7, fp
 8000c92:	4333      	orrs	r3, r6
 8000c94:	4699      	mov	r9, r3
 8000c96:	408f      	lsls	r7, r1
 8000c98:	4b3f      	ldr	r3, [pc, #252]	; (8000d98 <__aeabi_ddiv+0x298>)
 8000c9a:	2600      	movs	r6, #0
 8000c9c:	1a1b      	subs	r3, r3, r0
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	9302      	str	r3, [sp, #8]
 8000ca4:	e752      	b.n	8000b4c <__aeabi_ddiv+0x4c>
 8000ca6:	4641      	mov	r1, r8
 8000ca8:	4653      	mov	r3, sl
 8000caa:	430b      	orrs	r3, r1
 8000cac:	493b      	ldr	r1, [pc, #236]	; (8000d9c <__aeabi_ddiv+0x29c>)
 8000cae:	469b      	mov	fp, r3
 8000cb0:	468c      	mov	ip, r1
 8000cb2:	9b00      	ldr	r3, [sp, #0]
 8000cb4:	4463      	add	r3, ip
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	465b      	mov	r3, fp
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d13b      	bne.n	8000d36 <__aeabi_ddiv+0x236>
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	431e      	orrs	r6, r3
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	e761      	b.n	8000b8c <__aeabi_ddiv+0x8c>
 8000cc8:	4643      	mov	r3, r8
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	469b      	mov	fp, r3
 8000cce:	d037      	beq.n	8000d40 <__aeabi_ddiv+0x240>
 8000cd0:	4643      	mov	r3, r8
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_ddiv+0x1d8>
 8000cd6:	e162      	b.n	8000f9e <__aeabi_ddiv+0x49e>
 8000cd8:	4640      	mov	r0, r8
 8000cda:	f001 f941 	bl	8001f60 <__clzsi2>
 8000cde:	0003      	movs	r3, r0
 8000ce0:	3b0b      	subs	r3, #11
 8000ce2:	2b1c      	cmp	r3, #28
 8000ce4:	dd00      	ble.n	8000ce8 <__aeabi_ddiv+0x1e8>
 8000ce6:	e153      	b.n	8000f90 <__aeabi_ddiv+0x490>
 8000ce8:	0002      	movs	r2, r0
 8000cea:	4641      	mov	r1, r8
 8000cec:	3a08      	subs	r2, #8
 8000cee:	4091      	lsls	r1, r2
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	211d      	movs	r1, #29
 8000cf4:	1acb      	subs	r3, r1, r3
 8000cf6:	4651      	mov	r1, sl
 8000cf8:	40d9      	lsrs	r1, r3
 8000cfa:	000b      	movs	r3, r1
 8000cfc:	4641      	mov	r1, r8
 8000cfe:	430b      	orrs	r3, r1
 8000d00:	469b      	mov	fp, r3
 8000d02:	4653      	mov	r3, sl
 8000d04:	4093      	lsls	r3, r2
 8000d06:	001a      	movs	r2, r3
 8000d08:	9b00      	ldr	r3, [sp, #0]
 8000d0a:	4925      	ldr	r1, [pc, #148]	; (8000da0 <__aeabi_ddiv+0x2a0>)
 8000d0c:	469c      	mov	ip, r3
 8000d0e:	4460      	add	r0, ip
 8000d10:	0003      	movs	r3, r0
 8000d12:	468c      	mov	ip, r1
 8000d14:	4463      	add	r3, ip
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2100      	movs	r1, #0
 8000d1a:	e737      	b.n	8000b8c <__aeabi_ddiv+0x8c>
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	46b1      	mov	r9, r6
 8000d20:	9000      	str	r0, [sp, #0]
 8000d22:	260c      	movs	r6, #12
 8000d24:	9302      	str	r3, [sp, #8]
 8000d26:	e711      	b.n	8000b4c <__aeabi_ddiv+0x4c>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	2604      	movs	r6, #4
 8000d30:	2700      	movs	r7, #0
 8000d32:	9302      	str	r3, [sp, #8]
 8000d34:	e70a      	b.n	8000b4c <__aeabi_ddiv+0x4c>
 8000d36:	2303      	movs	r3, #3
 8000d38:	46c3      	mov	fp, r8
 8000d3a:	431e      	orrs	r6, r3
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	e725      	b.n	8000b8c <__aeabi_ddiv+0x8c>
 8000d40:	3301      	adds	r3, #1
 8000d42:	431e      	orrs	r6, r3
 8000d44:	2200      	movs	r2, #0
 8000d46:	2101      	movs	r1, #1
 8000d48:	e720      	b.n	8000b8c <__aeabi_ddiv+0x8c>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	469a      	mov	sl, r3
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	2700      	movs	r7, #0
 8000d52:	031b      	lsls	r3, r3, #12
 8000d54:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <__aeabi_ddiv+0x27c>)
 8000d56:	e761      	b.n	8000c1c <__aeabi_ddiv+0x11c>
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	4649      	mov	r1, r9
 8000d5c:	031b      	lsls	r3, r3, #12
 8000d5e:	4219      	tst	r1, r3
 8000d60:	d100      	bne.n	8000d64 <__aeabi_ddiv+0x264>
 8000d62:	e0e2      	b.n	8000f2a <__aeabi_ddiv+0x42a>
 8000d64:	4659      	mov	r1, fp
 8000d66:	4219      	tst	r1, r3
 8000d68:	d000      	beq.n	8000d6c <__aeabi_ddiv+0x26c>
 8000d6a:	e0de      	b.n	8000f2a <__aeabi_ddiv+0x42a>
 8000d6c:	430b      	orrs	r3, r1
 8000d6e:	031b      	lsls	r3, r3, #12
 8000d70:	0017      	movs	r7, r2
 8000d72:	0b1b      	lsrs	r3, r3, #12
 8000d74:	46a2      	mov	sl, r4
 8000d76:	4a01      	ldr	r2, [pc, #4]	; (8000d7c <__aeabi_ddiv+0x27c>)
 8000d78:	e750      	b.n	8000c1c <__aeabi_ddiv+0x11c>
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	000007ff 	.word	0x000007ff
 8000d80:	fffffc01 	.word	0xfffffc01
 8000d84:	08008294 	.word	0x08008294
 8000d88:	000003ff 	.word	0x000003ff
 8000d8c:	feffffff 	.word	0xfeffffff
 8000d90:	000007fe 	.word	0x000007fe
 8000d94:	800fffff 	.word	0x800fffff
 8000d98:	fffffc0d 	.word	0xfffffc0d
 8000d9c:	fffff801 	.word	0xfffff801
 8000da0:	000003f3 	.word	0x000003f3
 8000da4:	45d9      	cmp	r9, fp
 8000da6:	d900      	bls.n	8000daa <__aeabi_ddiv+0x2aa>
 8000da8:	e0cb      	b.n	8000f42 <__aeabi_ddiv+0x442>
 8000daa:	d100      	bne.n	8000dae <__aeabi_ddiv+0x2ae>
 8000dac:	e0c6      	b.n	8000f3c <__aeabi_ddiv+0x43c>
 8000dae:	003c      	movs	r4, r7
 8000db0:	4648      	mov	r0, r9
 8000db2:	2700      	movs	r7, #0
 8000db4:	9b00      	ldr	r3, [sp, #0]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	465b      	mov	r3, fp
 8000dbc:	0e16      	lsrs	r6, r2, #24
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	431e      	orrs	r6, r3
 8000dc2:	0213      	lsls	r3, r2, #8
 8000dc4:	4698      	mov	r8, r3
 8000dc6:	0433      	lsls	r3, r6, #16
 8000dc8:	0c1b      	lsrs	r3, r3, #16
 8000dca:	4699      	mov	r9, r3
 8000dcc:	0c31      	lsrs	r1, r6, #16
 8000dce:	9101      	str	r1, [sp, #4]
 8000dd0:	f7ff fa20 	bl	8000214 <__aeabi_uidivmod>
 8000dd4:	464a      	mov	r2, r9
 8000dd6:	4342      	muls	r2, r0
 8000dd8:	040b      	lsls	r3, r1, #16
 8000dda:	0c21      	lsrs	r1, r4, #16
 8000ddc:	0005      	movs	r5, r0
 8000dde:	4319      	orrs	r1, r3
 8000de0:	428a      	cmp	r2, r1
 8000de2:	d907      	bls.n	8000df4 <__aeabi_ddiv+0x2f4>
 8000de4:	1989      	adds	r1, r1, r6
 8000de6:	3d01      	subs	r5, #1
 8000de8:	428e      	cmp	r6, r1
 8000dea:	d803      	bhi.n	8000df4 <__aeabi_ddiv+0x2f4>
 8000dec:	428a      	cmp	r2, r1
 8000dee:	d901      	bls.n	8000df4 <__aeabi_ddiv+0x2f4>
 8000df0:	1e85      	subs	r5, r0, #2
 8000df2:	1989      	adds	r1, r1, r6
 8000df4:	1a88      	subs	r0, r1, r2
 8000df6:	9901      	ldr	r1, [sp, #4]
 8000df8:	f7ff fa0c 	bl	8000214 <__aeabi_uidivmod>
 8000dfc:	0409      	lsls	r1, r1, #16
 8000dfe:	468c      	mov	ip, r1
 8000e00:	464a      	mov	r2, r9
 8000e02:	0421      	lsls	r1, r4, #16
 8000e04:	4664      	mov	r4, ip
 8000e06:	4342      	muls	r2, r0
 8000e08:	0c09      	lsrs	r1, r1, #16
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	4321      	orrs	r1, r4
 8000e0e:	428a      	cmp	r2, r1
 8000e10:	d904      	bls.n	8000e1c <__aeabi_ddiv+0x31c>
 8000e12:	1989      	adds	r1, r1, r6
 8000e14:	3b01      	subs	r3, #1
 8000e16:	428e      	cmp	r6, r1
 8000e18:	d800      	bhi.n	8000e1c <__aeabi_ddiv+0x31c>
 8000e1a:	e0f1      	b.n	8001000 <__aeabi_ddiv+0x500>
 8000e1c:	042d      	lsls	r5, r5, #16
 8000e1e:	431d      	orrs	r5, r3
 8000e20:	46ab      	mov	fp, r5
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a89      	subs	r1, r1, r2
 8000e26:	4642      	mov	r2, r8
 8000e28:	0c28      	lsrs	r0, r5, #16
 8000e2a:	0412      	lsls	r2, r2, #16
 8000e2c:	0c1d      	lsrs	r5, r3, #16
 8000e2e:	465b      	mov	r3, fp
 8000e30:	0c14      	lsrs	r4, r2, #16
 8000e32:	0022      	movs	r2, r4
 8000e34:	041b      	lsls	r3, r3, #16
 8000e36:	0c1b      	lsrs	r3, r3, #16
 8000e38:	435a      	muls	r2, r3
 8000e3a:	9403      	str	r4, [sp, #12]
 8000e3c:	436b      	muls	r3, r5
 8000e3e:	4344      	muls	r4, r0
 8000e40:	9502      	str	r5, [sp, #8]
 8000e42:	4368      	muls	r0, r5
 8000e44:	191b      	adds	r3, r3, r4
 8000e46:	0c15      	lsrs	r5, r2, #16
 8000e48:	18eb      	adds	r3, r5, r3
 8000e4a:	429c      	cmp	r4, r3
 8000e4c:	d903      	bls.n	8000e56 <__aeabi_ddiv+0x356>
 8000e4e:	2480      	movs	r4, #128	; 0x80
 8000e50:	0264      	lsls	r4, r4, #9
 8000e52:	46a4      	mov	ip, r4
 8000e54:	4460      	add	r0, ip
 8000e56:	0c1c      	lsrs	r4, r3, #16
 8000e58:	0415      	lsls	r5, r2, #16
 8000e5a:	041b      	lsls	r3, r3, #16
 8000e5c:	0c2d      	lsrs	r5, r5, #16
 8000e5e:	1820      	adds	r0, r4, r0
 8000e60:	195d      	adds	r5, r3, r5
 8000e62:	4281      	cmp	r1, r0
 8000e64:	d377      	bcc.n	8000f56 <__aeabi_ddiv+0x456>
 8000e66:	d073      	beq.n	8000f50 <__aeabi_ddiv+0x450>
 8000e68:	1a0c      	subs	r4, r1, r0
 8000e6a:	4aa2      	ldr	r2, [pc, #648]	; (80010f4 <__aeabi_ddiv+0x5f4>)
 8000e6c:	1b7d      	subs	r5, r7, r5
 8000e6e:	42af      	cmp	r7, r5
 8000e70:	41bf      	sbcs	r7, r7
 8000e72:	4694      	mov	ip, r2
 8000e74:	9b00      	ldr	r3, [sp, #0]
 8000e76:	427f      	negs	r7, r7
 8000e78:	4463      	add	r3, ip
 8000e7a:	1be0      	subs	r0, r4, r7
 8000e7c:	001c      	movs	r4, r3
 8000e7e:	4286      	cmp	r6, r0
 8000e80:	d100      	bne.n	8000e84 <__aeabi_ddiv+0x384>
 8000e82:	e0db      	b.n	800103c <__aeabi_ddiv+0x53c>
 8000e84:	9901      	ldr	r1, [sp, #4]
 8000e86:	f7ff f9c5 	bl	8000214 <__aeabi_uidivmod>
 8000e8a:	464a      	mov	r2, r9
 8000e8c:	4342      	muls	r2, r0
 8000e8e:	040b      	lsls	r3, r1, #16
 8000e90:	0c29      	lsrs	r1, r5, #16
 8000e92:	0007      	movs	r7, r0
 8000e94:	4319      	orrs	r1, r3
 8000e96:	428a      	cmp	r2, r1
 8000e98:	d907      	bls.n	8000eaa <__aeabi_ddiv+0x3aa>
 8000e9a:	1989      	adds	r1, r1, r6
 8000e9c:	3f01      	subs	r7, #1
 8000e9e:	428e      	cmp	r6, r1
 8000ea0:	d803      	bhi.n	8000eaa <__aeabi_ddiv+0x3aa>
 8000ea2:	428a      	cmp	r2, r1
 8000ea4:	d901      	bls.n	8000eaa <__aeabi_ddiv+0x3aa>
 8000ea6:	1e87      	subs	r7, r0, #2
 8000ea8:	1989      	adds	r1, r1, r6
 8000eaa:	1a88      	subs	r0, r1, r2
 8000eac:	9901      	ldr	r1, [sp, #4]
 8000eae:	f7ff f9b1 	bl	8000214 <__aeabi_uidivmod>
 8000eb2:	0409      	lsls	r1, r1, #16
 8000eb4:	464a      	mov	r2, r9
 8000eb6:	4689      	mov	r9, r1
 8000eb8:	0429      	lsls	r1, r5, #16
 8000eba:	464d      	mov	r5, r9
 8000ebc:	4342      	muls	r2, r0
 8000ebe:	0c09      	lsrs	r1, r1, #16
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	4329      	orrs	r1, r5
 8000ec4:	428a      	cmp	r2, r1
 8000ec6:	d907      	bls.n	8000ed8 <__aeabi_ddiv+0x3d8>
 8000ec8:	1989      	adds	r1, r1, r6
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	428e      	cmp	r6, r1
 8000ece:	d803      	bhi.n	8000ed8 <__aeabi_ddiv+0x3d8>
 8000ed0:	428a      	cmp	r2, r1
 8000ed2:	d901      	bls.n	8000ed8 <__aeabi_ddiv+0x3d8>
 8000ed4:	1e83      	subs	r3, r0, #2
 8000ed6:	1989      	adds	r1, r1, r6
 8000ed8:	043f      	lsls	r7, r7, #16
 8000eda:	1a89      	subs	r1, r1, r2
 8000edc:	003a      	movs	r2, r7
 8000ede:	9f03      	ldr	r7, [sp, #12]
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	0038      	movs	r0, r7
 8000ee4:	0413      	lsls	r3, r2, #16
 8000ee6:	0c1b      	lsrs	r3, r3, #16
 8000ee8:	4358      	muls	r0, r3
 8000eea:	4681      	mov	r9, r0
 8000eec:	9802      	ldr	r0, [sp, #8]
 8000eee:	0c15      	lsrs	r5, r2, #16
 8000ef0:	436f      	muls	r7, r5
 8000ef2:	4343      	muls	r3, r0
 8000ef4:	4345      	muls	r5, r0
 8000ef6:	4648      	mov	r0, r9
 8000ef8:	0c00      	lsrs	r0, r0, #16
 8000efa:	4684      	mov	ip, r0
 8000efc:	19db      	adds	r3, r3, r7
 8000efe:	4463      	add	r3, ip
 8000f00:	429f      	cmp	r7, r3
 8000f02:	d903      	bls.n	8000f0c <__aeabi_ddiv+0x40c>
 8000f04:	2080      	movs	r0, #128	; 0x80
 8000f06:	0240      	lsls	r0, r0, #9
 8000f08:	4684      	mov	ip, r0
 8000f0a:	4465      	add	r5, ip
 8000f0c:	4648      	mov	r0, r9
 8000f0e:	0c1f      	lsrs	r7, r3, #16
 8000f10:	0400      	lsls	r0, r0, #16
 8000f12:	041b      	lsls	r3, r3, #16
 8000f14:	0c00      	lsrs	r0, r0, #16
 8000f16:	197d      	adds	r5, r7, r5
 8000f18:	1818      	adds	r0, r3, r0
 8000f1a:	42a9      	cmp	r1, r5
 8000f1c:	d200      	bcs.n	8000f20 <__aeabi_ddiv+0x420>
 8000f1e:	e084      	b.n	800102a <__aeabi_ddiv+0x52a>
 8000f20:	d100      	bne.n	8000f24 <__aeabi_ddiv+0x424>
 8000f22:	e07f      	b.n	8001024 <__aeabi_ddiv+0x524>
 8000f24:	2301      	movs	r3, #1
 8000f26:	431a      	orrs	r2, r3
 8000f28:	e657      	b.n	8000bda <__aeabi_ddiv+0xda>
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	464a      	mov	r2, r9
 8000f2e:	031b      	lsls	r3, r3, #12
 8000f30:	4313      	orrs	r3, r2
 8000f32:	031b      	lsls	r3, r3, #12
 8000f34:	0b1b      	lsrs	r3, r3, #12
 8000f36:	46aa      	mov	sl, r5
 8000f38:	4a6f      	ldr	r2, [pc, #444]	; (80010f8 <__aeabi_ddiv+0x5f8>)
 8000f3a:	e66f      	b.n	8000c1c <__aeabi_ddiv+0x11c>
 8000f3c:	42ba      	cmp	r2, r7
 8000f3e:	d900      	bls.n	8000f42 <__aeabi_ddiv+0x442>
 8000f40:	e735      	b.n	8000dae <__aeabi_ddiv+0x2ae>
 8000f42:	464b      	mov	r3, r9
 8000f44:	07dc      	lsls	r4, r3, #31
 8000f46:	0858      	lsrs	r0, r3, #1
 8000f48:	087b      	lsrs	r3, r7, #1
 8000f4a:	431c      	orrs	r4, r3
 8000f4c:	07ff      	lsls	r7, r7, #31
 8000f4e:	e734      	b.n	8000dba <__aeabi_ddiv+0x2ba>
 8000f50:	2400      	movs	r4, #0
 8000f52:	42af      	cmp	r7, r5
 8000f54:	d289      	bcs.n	8000e6a <__aeabi_ddiv+0x36a>
 8000f56:	4447      	add	r7, r8
 8000f58:	4547      	cmp	r7, r8
 8000f5a:	41a4      	sbcs	r4, r4
 8000f5c:	465b      	mov	r3, fp
 8000f5e:	4264      	negs	r4, r4
 8000f60:	19a4      	adds	r4, r4, r6
 8000f62:	1864      	adds	r4, r4, r1
 8000f64:	3b01      	subs	r3, #1
 8000f66:	42a6      	cmp	r6, r4
 8000f68:	d21e      	bcs.n	8000fa8 <__aeabi_ddiv+0x4a8>
 8000f6a:	42a0      	cmp	r0, r4
 8000f6c:	d86d      	bhi.n	800104a <__aeabi_ddiv+0x54a>
 8000f6e:	d100      	bne.n	8000f72 <__aeabi_ddiv+0x472>
 8000f70:	e0b6      	b.n	80010e0 <__aeabi_ddiv+0x5e0>
 8000f72:	1a24      	subs	r4, r4, r0
 8000f74:	469b      	mov	fp, r3
 8000f76:	e778      	b.n	8000e6a <__aeabi_ddiv+0x36a>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	465a      	mov	r2, fp
 8000f7c:	3b28      	subs	r3, #40	; 0x28
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	2700      	movs	r7, #0
 8000f82:	4691      	mov	r9, r2
 8000f84:	e688      	b.n	8000c98 <__aeabi_ddiv+0x198>
 8000f86:	4658      	mov	r0, fp
 8000f88:	f000 ffea 	bl	8001f60 <__clzsi2>
 8000f8c:	3020      	adds	r0, #32
 8000f8e:	e672      	b.n	8000c76 <__aeabi_ddiv+0x176>
 8000f90:	0003      	movs	r3, r0
 8000f92:	4652      	mov	r2, sl
 8000f94:	3b28      	subs	r3, #40	; 0x28
 8000f96:	409a      	lsls	r2, r3
 8000f98:	4693      	mov	fp, r2
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	e6b4      	b.n	8000d08 <__aeabi_ddiv+0x208>
 8000f9e:	4650      	mov	r0, sl
 8000fa0:	f000 ffde 	bl	8001f60 <__clzsi2>
 8000fa4:	3020      	adds	r0, #32
 8000fa6:	e69a      	b.n	8000cde <__aeabi_ddiv+0x1de>
 8000fa8:	42a6      	cmp	r6, r4
 8000faa:	d1e2      	bne.n	8000f72 <__aeabi_ddiv+0x472>
 8000fac:	45b8      	cmp	r8, r7
 8000fae:	d9dc      	bls.n	8000f6a <__aeabi_ddiv+0x46a>
 8000fb0:	1a34      	subs	r4, r6, r0
 8000fb2:	469b      	mov	fp, r3
 8000fb4:	e759      	b.n	8000e6a <__aeabi_ddiv+0x36a>
 8000fb6:	2b1f      	cmp	r3, #31
 8000fb8:	dc65      	bgt.n	8001086 <__aeabi_ddiv+0x586>
 8000fba:	4c50      	ldr	r4, [pc, #320]	; (80010fc <__aeabi_ddiv+0x5fc>)
 8000fbc:	9900      	ldr	r1, [sp, #0]
 8000fbe:	46a4      	mov	ip, r4
 8000fc0:	465c      	mov	r4, fp
 8000fc2:	4461      	add	r1, ip
 8000fc4:	0008      	movs	r0, r1
 8000fc6:	408c      	lsls	r4, r1
 8000fc8:	0011      	movs	r1, r2
 8000fca:	4082      	lsls	r2, r0
 8000fcc:	40d9      	lsrs	r1, r3
 8000fce:	1e50      	subs	r0, r2, #1
 8000fd0:	4182      	sbcs	r2, r0
 8000fd2:	430c      	orrs	r4, r1
 8000fd4:	4314      	orrs	r4, r2
 8000fd6:	465a      	mov	r2, fp
 8000fd8:	40da      	lsrs	r2, r3
 8000fda:	0013      	movs	r3, r2
 8000fdc:	0762      	lsls	r2, r4, #29
 8000fde:	d009      	beq.n	8000ff4 <__aeabi_ddiv+0x4f4>
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	4022      	ands	r2, r4
 8000fe4:	2a04      	cmp	r2, #4
 8000fe6:	d005      	beq.n	8000ff4 <__aeabi_ddiv+0x4f4>
 8000fe8:	0022      	movs	r2, r4
 8000fea:	1d14      	adds	r4, r2, #4
 8000fec:	4294      	cmp	r4, r2
 8000fee:	4189      	sbcs	r1, r1
 8000ff0:	4249      	negs	r1, r1
 8000ff2:	185b      	adds	r3, r3, r1
 8000ff4:	021a      	lsls	r2, r3, #8
 8000ff6:	d562      	bpl.n	80010be <__aeabi_ddiv+0x5be>
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	2700      	movs	r7, #0
 8000ffe:	e60d      	b.n	8000c1c <__aeabi_ddiv+0x11c>
 8001000:	428a      	cmp	r2, r1
 8001002:	d800      	bhi.n	8001006 <__aeabi_ddiv+0x506>
 8001004:	e70a      	b.n	8000e1c <__aeabi_ddiv+0x31c>
 8001006:	1e83      	subs	r3, r0, #2
 8001008:	1989      	adds	r1, r1, r6
 800100a:	e707      	b.n	8000e1c <__aeabi_ddiv+0x31c>
 800100c:	230f      	movs	r3, #15
 800100e:	4013      	ands	r3, r2
 8001010:	2b04      	cmp	r3, #4
 8001012:	d100      	bne.n	8001016 <__aeabi_ddiv+0x516>
 8001014:	e5e6      	b.n	8000be4 <__aeabi_ddiv+0xe4>
 8001016:	1d17      	adds	r7, r2, #4
 8001018:	4297      	cmp	r7, r2
 800101a:	4192      	sbcs	r2, r2
 800101c:	4253      	negs	r3, r2
 800101e:	449b      	add	fp, r3
 8001020:	08fa      	lsrs	r2, r7, #3
 8001022:	e5e0      	b.n	8000be6 <__aeabi_ddiv+0xe6>
 8001024:	2800      	cmp	r0, #0
 8001026:	d100      	bne.n	800102a <__aeabi_ddiv+0x52a>
 8001028:	e5d7      	b.n	8000bda <__aeabi_ddiv+0xda>
 800102a:	1871      	adds	r1, r6, r1
 800102c:	1e53      	subs	r3, r2, #1
 800102e:	42b1      	cmp	r1, r6
 8001030:	d327      	bcc.n	8001082 <__aeabi_ddiv+0x582>
 8001032:	42a9      	cmp	r1, r5
 8001034:	d315      	bcc.n	8001062 <__aeabi_ddiv+0x562>
 8001036:	d058      	beq.n	80010ea <__aeabi_ddiv+0x5ea>
 8001038:	001a      	movs	r2, r3
 800103a:	e773      	b.n	8000f24 <__aeabi_ddiv+0x424>
 800103c:	2b00      	cmp	r3, #0
 800103e:	dc00      	bgt.n	8001042 <__aeabi_ddiv+0x542>
 8001040:	e604      	b.n	8000c4c <__aeabi_ddiv+0x14c>
 8001042:	2301      	movs	r3, #1
 8001044:	2200      	movs	r2, #0
 8001046:	449b      	add	fp, r3
 8001048:	e5cd      	b.n	8000be6 <__aeabi_ddiv+0xe6>
 800104a:	2302      	movs	r3, #2
 800104c:	4447      	add	r7, r8
 800104e:	4547      	cmp	r7, r8
 8001050:	4189      	sbcs	r1, r1
 8001052:	425b      	negs	r3, r3
 8001054:	469c      	mov	ip, r3
 8001056:	4249      	negs	r1, r1
 8001058:	1989      	adds	r1, r1, r6
 800105a:	190c      	adds	r4, r1, r4
 800105c:	44e3      	add	fp, ip
 800105e:	1a24      	subs	r4, r4, r0
 8001060:	e703      	b.n	8000e6a <__aeabi_ddiv+0x36a>
 8001062:	4643      	mov	r3, r8
 8001064:	005f      	lsls	r7, r3, #1
 8001066:	4547      	cmp	r7, r8
 8001068:	419b      	sbcs	r3, r3
 800106a:	46b8      	mov	r8, r7
 800106c:	425b      	negs	r3, r3
 800106e:	199e      	adds	r6, r3, r6
 8001070:	3a02      	subs	r2, #2
 8001072:	1989      	adds	r1, r1, r6
 8001074:	42a9      	cmp	r1, r5
 8001076:	d000      	beq.n	800107a <__aeabi_ddiv+0x57a>
 8001078:	e754      	b.n	8000f24 <__aeabi_ddiv+0x424>
 800107a:	4540      	cmp	r0, r8
 800107c:	d000      	beq.n	8001080 <__aeabi_ddiv+0x580>
 800107e:	e751      	b.n	8000f24 <__aeabi_ddiv+0x424>
 8001080:	e5ab      	b.n	8000bda <__aeabi_ddiv+0xda>
 8001082:	001a      	movs	r2, r3
 8001084:	e7f6      	b.n	8001074 <__aeabi_ddiv+0x574>
 8001086:	211f      	movs	r1, #31
 8001088:	465f      	mov	r7, fp
 800108a:	4249      	negs	r1, r1
 800108c:	1b0c      	subs	r4, r1, r4
 800108e:	40e7      	lsrs	r7, r4
 8001090:	2b20      	cmp	r3, #32
 8001092:	d007      	beq.n	80010a4 <__aeabi_ddiv+0x5a4>
 8001094:	491a      	ldr	r1, [pc, #104]	; (8001100 <__aeabi_ddiv+0x600>)
 8001096:	9b00      	ldr	r3, [sp, #0]
 8001098:	468c      	mov	ip, r1
 800109a:	4463      	add	r3, ip
 800109c:	0018      	movs	r0, r3
 800109e:	465b      	mov	r3, fp
 80010a0:	4083      	lsls	r3, r0
 80010a2:	431a      	orrs	r2, r3
 80010a4:	1e50      	subs	r0, r2, #1
 80010a6:	4182      	sbcs	r2, r0
 80010a8:	433a      	orrs	r2, r7
 80010aa:	2707      	movs	r7, #7
 80010ac:	2300      	movs	r3, #0
 80010ae:	4017      	ands	r7, r2
 80010b0:	d009      	beq.n	80010c6 <__aeabi_ddiv+0x5c6>
 80010b2:	210f      	movs	r1, #15
 80010b4:	2300      	movs	r3, #0
 80010b6:	4011      	ands	r1, r2
 80010b8:	0014      	movs	r4, r2
 80010ba:	2904      	cmp	r1, #4
 80010bc:	d195      	bne.n	8000fea <__aeabi_ddiv+0x4ea>
 80010be:	0022      	movs	r2, r4
 80010c0:	075f      	lsls	r7, r3, #29
 80010c2:	025b      	lsls	r3, r3, #9
 80010c4:	0b1b      	lsrs	r3, r3, #12
 80010c6:	08d2      	lsrs	r2, r2, #3
 80010c8:	4317      	orrs	r7, r2
 80010ca:	2200      	movs	r2, #0
 80010cc:	e5a6      	b.n	8000c1c <__aeabi_ddiv+0x11c>
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	4659      	mov	r1, fp
 80010d2:	031b      	lsls	r3, r3, #12
 80010d4:	430b      	orrs	r3, r1
 80010d6:	031b      	lsls	r3, r3, #12
 80010d8:	0017      	movs	r7, r2
 80010da:	0b1b      	lsrs	r3, r3, #12
 80010dc:	4a06      	ldr	r2, [pc, #24]	; (80010f8 <__aeabi_ddiv+0x5f8>)
 80010de:	e59d      	b.n	8000c1c <__aeabi_ddiv+0x11c>
 80010e0:	42bd      	cmp	r5, r7
 80010e2:	d8b2      	bhi.n	800104a <__aeabi_ddiv+0x54a>
 80010e4:	469b      	mov	fp, r3
 80010e6:	2400      	movs	r4, #0
 80010e8:	e6bf      	b.n	8000e6a <__aeabi_ddiv+0x36a>
 80010ea:	4580      	cmp	r8, r0
 80010ec:	d3b9      	bcc.n	8001062 <__aeabi_ddiv+0x562>
 80010ee:	001a      	movs	r2, r3
 80010f0:	e7c3      	b.n	800107a <__aeabi_ddiv+0x57a>
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	000003ff 	.word	0x000003ff
 80010f8:	000007ff 	.word	0x000007ff
 80010fc:	0000041e 	.word	0x0000041e
 8001100:	0000043e 	.word	0x0000043e

08001104 <__eqdf2>:
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001106:	464f      	mov	r7, r9
 8001108:	4646      	mov	r6, r8
 800110a:	46d6      	mov	lr, sl
 800110c:	4684      	mov	ip, r0
 800110e:	b5c0      	push	{r6, r7, lr}
 8001110:	4680      	mov	r8, r0
 8001112:	4e19      	ldr	r6, [pc, #100]	; (8001178 <__eqdf2+0x74>)
 8001114:	0318      	lsls	r0, r3, #12
 8001116:	030f      	lsls	r7, r1, #12
 8001118:	004d      	lsls	r5, r1, #1
 800111a:	0b00      	lsrs	r0, r0, #12
 800111c:	005c      	lsls	r4, r3, #1
 800111e:	4682      	mov	sl, r0
 8001120:	0b3f      	lsrs	r7, r7, #12
 8001122:	0d6d      	lsrs	r5, r5, #21
 8001124:	0fc9      	lsrs	r1, r1, #31
 8001126:	4691      	mov	r9, r2
 8001128:	0d64      	lsrs	r4, r4, #21
 800112a:	0fdb      	lsrs	r3, r3, #31
 800112c:	2001      	movs	r0, #1
 800112e:	42b5      	cmp	r5, r6
 8001130:	d00a      	beq.n	8001148 <__eqdf2+0x44>
 8001132:	42b4      	cmp	r4, r6
 8001134:	d003      	beq.n	800113e <__eqdf2+0x3a>
 8001136:	42a5      	cmp	r5, r4
 8001138:	d101      	bne.n	800113e <__eqdf2+0x3a>
 800113a:	4557      	cmp	r7, sl
 800113c:	d00c      	beq.n	8001158 <__eqdf2+0x54>
 800113e:	bc1c      	pop	{r2, r3, r4}
 8001140:	4690      	mov	r8, r2
 8001142:	4699      	mov	r9, r3
 8001144:	46a2      	mov	sl, r4
 8001146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001148:	4666      	mov	r6, ip
 800114a:	433e      	orrs	r6, r7
 800114c:	d1f7      	bne.n	800113e <__eqdf2+0x3a>
 800114e:	42ac      	cmp	r4, r5
 8001150:	d1f5      	bne.n	800113e <__eqdf2+0x3a>
 8001152:	4654      	mov	r4, sl
 8001154:	4314      	orrs	r4, r2
 8001156:	d1f2      	bne.n	800113e <__eqdf2+0x3a>
 8001158:	2001      	movs	r0, #1
 800115a:	45c8      	cmp	r8, r9
 800115c:	d1ef      	bne.n	800113e <__eqdf2+0x3a>
 800115e:	4299      	cmp	r1, r3
 8001160:	d007      	beq.n	8001172 <__eqdf2+0x6e>
 8001162:	2d00      	cmp	r5, #0
 8001164:	d1eb      	bne.n	800113e <__eqdf2+0x3a>
 8001166:	4663      	mov	r3, ip
 8001168:	431f      	orrs	r7, r3
 800116a:	0038      	movs	r0, r7
 800116c:	1e47      	subs	r7, r0, #1
 800116e:	41b8      	sbcs	r0, r7
 8001170:	e7e5      	b.n	800113e <__eqdf2+0x3a>
 8001172:	2000      	movs	r0, #0
 8001174:	e7e3      	b.n	800113e <__eqdf2+0x3a>
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	000007ff 	.word	0x000007ff

0800117c <__gedf2>:
 800117c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117e:	464f      	mov	r7, r9
 8001180:	4646      	mov	r6, r8
 8001182:	46d6      	mov	lr, sl
 8001184:	004d      	lsls	r5, r1, #1
 8001186:	b5c0      	push	{r6, r7, lr}
 8001188:	030e      	lsls	r6, r1, #12
 800118a:	0fc9      	lsrs	r1, r1, #31
 800118c:	468a      	mov	sl, r1
 800118e:	492c      	ldr	r1, [pc, #176]	; (8001240 <__gedf2+0xc4>)
 8001190:	031f      	lsls	r7, r3, #12
 8001192:	005c      	lsls	r4, r3, #1
 8001194:	4680      	mov	r8, r0
 8001196:	0b36      	lsrs	r6, r6, #12
 8001198:	0d6d      	lsrs	r5, r5, #21
 800119a:	4691      	mov	r9, r2
 800119c:	0b3f      	lsrs	r7, r7, #12
 800119e:	0d64      	lsrs	r4, r4, #21
 80011a0:	0fdb      	lsrs	r3, r3, #31
 80011a2:	428d      	cmp	r5, r1
 80011a4:	d01e      	beq.n	80011e4 <__gedf2+0x68>
 80011a6:	428c      	cmp	r4, r1
 80011a8:	d016      	beq.n	80011d8 <__gedf2+0x5c>
 80011aa:	2d00      	cmp	r5, #0
 80011ac:	d11e      	bne.n	80011ec <__gedf2+0x70>
 80011ae:	4330      	orrs	r0, r6
 80011b0:	4684      	mov	ip, r0
 80011b2:	2c00      	cmp	r4, #0
 80011b4:	d101      	bne.n	80011ba <__gedf2+0x3e>
 80011b6:	433a      	orrs	r2, r7
 80011b8:	d023      	beq.n	8001202 <__gedf2+0x86>
 80011ba:	4662      	mov	r2, ip
 80011bc:	2a00      	cmp	r2, #0
 80011be:	d01a      	beq.n	80011f6 <__gedf2+0x7a>
 80011c0:	459a      	cmp	sl, r3
 80011c2:	d029      	beq.n	8001218 <__gedf2+0x9c>
 80011c4:	4651      	mov	r1, sl
 80011c6:	2002      	movs	r0, #2
 80011c8:	3901      	subs	r1, #1
 80011ca:	4008      	ands	r0, r1
 80011cc:	3801      	subs	r0, #1
 80011ce:	bc1c      	pop	{r2, r3, r4}
 80011d0:	4690      	mov	r8, r2
 80011d2:	4699      	mov	r9, r3
 80011d4:	46a2      	mov	sl, r4
 80011d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d8:	0039      	movs	r1, r7
 80011da:	4311      	orrs	r1, r2
 80011dc:	d0e5      	beq.n	80011aa <__gedf2+0x2e>
 80011de:	2002      	movs	r0, #2
 80011e0:	4240      	negs	r0, r0
 80011e2:	e7f4      	b.n	80011ce <__gedf2+0x52>
 80011e4:	4330      	orrs	r0, r6
 80011e6:	d1fa      	bne.n	80011de <__gedf2+0x62>
 80011e8:	42ac      	cmp	r4, r5
 80011ea:	d00f      	beq.n	800120c <__gedf2+0x90>
 80011ec:	2c00      	cmp	r4, #0
 80011ee:	d10f      	bne.n	8001210 <__gedf2+0x94>
 80011f0:	433a      	orrs	r2, r7
 80011f2:	d0e7      	beq.n	80011c4 <__gedf2+0x48>
 80011f4:	e00c      	b.n	8001210 <__gedf2+0x94>
 80011f6:	2201      	movs	r2, #1
 80011f8:	3b01      	subs	r3, #1
 80011fa:	4393      	bics	r3, r2
 80011fc:	0018      	movs	r0, r3
 80011fe:	3001      	adds	r0, #1
 8001200:	e7e5      	b.n	80011ce <__gedf2+0x52>
 8001202:	4663      	mov	r3, ip
 8001204:	2000      	movs	r0, #0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0e1      	beq.n	80011ce <__gedf2+0x52>
 800120a:	e7db      	b.n	80011c4 <__gedf2+0x48>
 800120c:	433a      	orrs	r2, r7
 800120e:	d1e6      	bne.n	80011de <__gedf2+0x62>
 8001210:	459a      	cmp	sl, r3
 8001212:	d1d7      	bne.n	80011c4 <__gedf2+0x48>
 8001214:	42a5      	cmp	r5, r4
 8001216:	dcd5      	bgt.n	80011c4 <__gedf2+0x48>
 8001218:	42a5      	cmp	r5, r4
 800121a:	db05      	blt.n	8001228 <__gedf2+0xac>
 800121c:	42be      	cmp	r6, r7
 800121e:	d8d1      	bhi.n	80011c4 <__gedf2+0x48>
 8001220:	d008      	beq.n	8001234 <__gedf2+0xb8>
 8001222:	2000      	movs	r0, #0
 8001224:	42be      	cmp	r6, r7
 8001226:	d2d2      	bcs.n	80011ce <__gedf2+0x52>
 8001228:	4650      	mov	r0, sl
 800122a:	2301      	movs	r3, #1
 800122c:	3801      	subs	r0, #1
 800122e:	4398      	bics	r0, r3
 8001230:	3001      	adds	r0, #1
 8001232:	e7cc      	b.n	80011ce <__gedf2+0x52>
 8001234:	45c8      	cmp	r8, r9
 8001236:	d8c5      	bhi.n	80011c4 <__gedf2+0x48>
 8001238:	2000      	movs	r0, #0
 800123a:	45c8      	cmp	r8, r9
 800123c:	d3f4      	bcc.n	8001228 <__gedf2+0xac>
 800123e:	e7c6      	b.n	80011ce <__gedf2+0x52>
 8001240:	000007ff 	.word	0x000007ff

08001244 <__ledf2>:
 8001244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001246:	464f      	mov	r7, r9
 8001248:	4646      	mov	r6, r8
 800124a:	46d6      	mov	lr, sl
 800124c:	004d      	lsls	r5, r1, #1
 800124e:	b5c0      	push	{r6, r7, lr}
 8001250:	030e      	lsls	r6, r1, #12
 8001252:	0fc9      	lsrs	r1, r1, #31
 8001254:	468a      	mov	sl, r1
 8001256:	492e      	ldr	r1, [pc, #184]	; (8001310 <__ledf2+0xcc>)
 8001258:	031f      	lsls	r7, r3, #12
 800125a:	005c      	lsls	r4, r3, #1
 800125c:	4680      	mov	r8, r0
 800125e:	0b36      	lsrs	r6, r6, #12
 8001260:	0d6d      	lsrs	r5, r5, #21
 8001262:	4691      	mov	r9, r2
 8001264:	0b3f      	lsrs	r7, r7, #12
 8001266:	0d64      	lsrs	r4, r4, #21
 8001268:	0fdb      	lsrs	r3, r3, #31
 800126a:	428d      	cmp	r5, r1
 800126c:	d018      	beq.n	80012a0 <__ledf2+0x5c>
 800126e:	428c      	cmp	r4, r1
 8001270:	d011      	beq.n	8001296 <__ledf2+0x52>
 8001272:	2d00      	cmp	r5, #0
 8001274:	d118      	bne.n	80012a8 <__ledf2+0x64>
 8001276:	4330      	orrs	r0, r6
 8001278:	4684      	mov	ip, r0
 800127a:	2c00      	cmp	r4, #0
 800127c:	d11e      	bne.n	80012bc <__ledf2+0x78>
 800127e:	433a      	orrs	r2, r7
 8001280:	d11c      	bne.n	80012bc <__ledf2+0x78>
 8001282:	4663      	mov	r3, ip
 8001284:	2000      	movs	r0, #0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d030      	beq.n	80012ec <__ledf2+0xa8>
 800128a:	4651      	mov	r1, sl
 800128c:	2002      	movs	r0, #2
 800128e:	3901      	subs	r1, #1
 8001290:	4008      	ands	r0, r1
 8001292:	3801      	subs	r0, #1
 8001294:	e02a      	b.n	80012ec <__ledf2+0xa8>
 8001296:	0039      	movs	r1, r7
 8001298:	4311      	orrs	r1, r2
 800129a:	d0ea      	beq.n	8001272 <__ledf2+0x2e>
 800129c:	2002      	movs	r0, #2
 800129e:	e025      	b.n	80012ec <__ledf2+0xa8>
 80012a0:	4330      	orrs	r0, r6
 80012a2:	d1fb      	bne.n	800129c <__ledf2+0x58>
 80012a4:	42ac      	cmp	r4, r5
 80012a6:	d026      	beq.n	80012f6 <__ledf2+0xb2>
 80012a8:	2c00      	cmp	r4, #0
 80012aa:	d126      	bne.n	80012fa <__ledf2+0xb6>
 80012ac:	433a      	orrs	r2, r7
 80012ae:	d124      	bne.n	80012fa <__ledf2+0xb6>
 80012b0:	4651      	mov	r1, sl
 80012b2:	2002      	movs	r0, #2
 80012b4:	3901      	subs	r1, #1
 80012b6:	4008      	ands	r0, r1
 80012b8:	3801      	subs	r0, #1
 80012ba:	e017      	b.n	80012ec <__ledf2+0xa8>
 80012bc:	4662      	mov	r2, ip
 80012be:	2a00      	cmp	r2, #0
 80012c0:	d00f      	beq.n	80012e2 <__ledf2+0x9e>
 80012c2:	459a      	cmp	sl, r3
 80012c4:	d1e1      	bne.n	800128a <__ledf2+0x46>
 80012c6:	42a5      	cmp	r5, r4
 80012c8:	db05      	blt.n	80012d6 <__ledf2+0x92>
 80012ca:	42be      	cmp	r6, r7
 80012cc:	d8dd      	bhi.n	800128a <__ledf2+0x46>
 80012ce:	d019      	beq.n	8001304 <__ledf2+0xc0>
 80012d0:	2000      	movs	r0, #0
 80012d2:	42be      	cmp	r6, r7
 80012d4:	d20a      	bcs.n	80012ec <__ledf2+0xa8>
 80012d6:	4650      	mov	r0, sl
 80012d8:	2301      	movs	r3, #1
 80012da:	3801      	subs	r0, #1
 80012dc:	4398      	bics	r0, r3
 80012de:	3001      	adds	r0, #1
 80012e0:	e004      	b.n	80012ec <__ledf2+0xa8>
 80012e2:	2201      	movs	r2, #1
 80012e4:	3b01      	subs	r3, #1
 80012e6:	4393      	bics	r3, r2
 80012e8:	0018      	movs	r0, r3
 80012ea:	3001      	adds	r0, #1
 80012ec:	bc1c      	pop	{r2, r3, r4}
 80012ee:	4690      	mov	r8, r2
 80012f0:	4699      	mov	r9, r3
 80012f2:	46a2      	mov	sl, r4
 80012f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f6:	433a      	orrs	r2, r7
 80012f8:	d1d0      	bne.n	800129c <__ledf2+0x58>
 80012fa:	459a      	cmp	sl, r3
 80012fc:	d1c5      	bne.n	800128a <__ledf2+0x46>
 80012fe:	42a5      	cmp	r5, r4
 8001300:	dcc3      	bgt.n	800128a <__ledf2+0x46>
 8001302:	e7e0      	b.n	80012c6 <__ledf2+0x82>
 8001304:	45c8      	cmp	r8, r9
 8001306:	d8c0      	bhi.n	800128a <__ledf2+0x46>
 8001308:	2000      	movs	r0, #0
 800130a:	45c8      	cmp	r8, r9
 800130c:	d3e3      	bcc.n	80012d6 <__ledf2+0x92>
 800130e:	e7ed      	b.n	80012ec <__ledf2+0xa8>
 8001310:	000007ff 	.word	0x000007ff

08001314 <__aeabi_dmul>:
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001316:	4657      	mov	r7, sl
 8001318:	46de      	mov	lr, fp
 800131a:	464e      	mov	r6, r9
 800131c:	4645      	mov	r5, r8
 800131e:	b5e0      	push	{r5, r6, r7, lr}
 8001320:	4683      	mov	fp, r0
 8001322:	0006      	movs	r6, r0
 8001324:	030f      	lsls	r7, r1, #12
 8001326:	0048      	lsls	r0, r1, #1
 8001328:	b087      	sub	sp, #28
 800132a:	4692      	mov	sl, r2
 800132c:	001d      	movs	r5, r3
 800132e:	0b3f      	lsrs	r7, r7, #12
 8001330:	0d40      	lsrs	r0, r0, #21
 8001332:	0fcc      	lsrs	r4, r1, #31
 8001334:	2800      	cmp	r0, #0
 8001336:	d100      	bne.n	800133a <__aeabi_dmul+0x26>
 8001338:	e06f      	b.n	800141a <__aeabi_dmul+0x106>
 800133a:	4bde      	ldr	r3, [pc, #888]	; (80016b4 <__aeabi_dmul+0x3a0>)
 800133c:	4298      	cmp	r0, r3
 800133e:	d038      	beq.n	80013b2 <__aeabi_dmul+0x9e>
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	00ff      	lsls	r7, r7, #3
 8001344:	041b      	lsls	r3, r3, #16
 8001346:	431f      	orrs	r7, r3
 8001348:	0f73      	lsrs	r3, r6, #29
 800134a:	433b      	orrs	r3, r7
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	4bda      	ldr	r3, [pc, #872]	; (80016b8 <__aeabi_dmul+0x3a4>)
 8001350:	2700      	movs	r7, #0
 8001352:	4699      	mov	r9, r3
 8001354:	2300      	movs	r3, #0
 8001356:	469b      	mov	fp, r3
 8001358:	00f6      	lsls	r6, r6, #3
 800135a:	4481      	add	r9, r0
 800135c:	032b      	lsls	r3, r5, #12
 800135e:	0069      	lsls	r1, r5, #1
 8001360:	0b1b      	lsrs	r3, r3, #12
 8001362:	4652      	mov	r2, sl
 8001364:	4698      	mov	r8, r3
 8001366:	0d49      	lsrs	r1, r1, #21
 8001368:	0fed      	lsrs	r5, r5, #31
 800136a:	2900      	cmp	r1, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_dmul+0x5c>
 800136e:	e085      	b.n	800147c <__aeabi_dmul+0x168>
 8001370:	4bd0      	ldr	r3, [pc, #832]	; (80016b4 <__aeabi_dmul+0x3a0>)
 8001372:	4299      	cmp	r1, r3
 8001374:	d100      	bne.n	8001378 <__aeabi_dmul+0x64>
 8001376:	e073      	b.n	8001460 <__aeabi_dmul+0x14c>
 8001378:	4643      	mov	r3, r8
 800137a:	00da      	lsls	r2, r3, #3
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	041b      	lsls	r3, r3, #16
 8001380:	4313      	orrs	r3, r2
 8001382:	4652      	mov	r2, sl
 8001384:	48cc      	ldr	r0, [pc, #816]	; (80016b8 <__aeabi_dmul+0x3a4>)
 8001386:	0f52      	lsrs	r2, r2, #29
 8001388:	4684      	mov	ip, r0
 800138a:	4313      	orrs	r3, r2
 800138c:	4652      	mov	r2, sl
 800138e:	2000      	movs	r0, #0
 8001390:	4461      	add	r1, ip
 8001392:	00d2      	lsls	r2, r2, #3
 8001394:	4489      	add	r9, r1
 8001396:	0021      	movs	r1, r4
 8001398:	4069      	eors	r1, r5
 800139a:	9100      	str	r1, [sp, #0]
 800139c:	468c      	mov	ip, r1
 800139e:	2101      	movs	r1, #1
 80013a0:	4449      	add	r1, r9
 80013a2:	468a      	mov	sl, r1
 80013a4:	2f0f      	cmp	r7, #15
 80013a6:	d900      	bls.n	80013aa <__aeabi_dmul+0x96>
 80013a8:	e090      	b.n	80014cc <__aeabi_dmul+0x1b8>
 80013aa:	49c4      	ldr	r1, [pc, #784]	; (80016bc <__aeabi_dmul+0x3a8>)
 80013ac:	00bf      	lsls	r7, r7, #2
 80013ae:	59cf      	ldr	r7, [r1, r7]
 80013b0:	46bf      	mov	pc, r7
 80013b2:	465b      	mov	r3, fp
 80013b4:	433b      	orrs	r3, r7
 80013b6:	9301      	str	r3, [sp, #4]
 80013b8:	d000      	beq.n	80013bc <__aeabi_dmul+0xa8>
 80013ba:	e16a      	b.n	8001692 <__aeabi_dmul+0x37e>
 80013bc:	2302      	movs	r3, #2
 80013be:	2708      	movs	r7, #8
 80013c0:	2600      	movs	r6, #0
 80013c2:	4681      	mov	r9, r0
 80013c4:	469b      	mov	fp, r3
 80013c6:	e7c9      	b.n	800135c <__aeabi_dmul+0x48>
 80013c8:	0032      	movs	r2, r6
 80013ca:	4658      	mov	r0, fp
 80013cc:	9b01      	ldr	r3, [sp, #4]
 80013ce:	4661      	mov	r1, ip
 80013d0:	9100      	str	r1, [sp, #0]
 80013d2:	2802      	cmp	r0, #2
 80013d4:	d100      	bne.n	80013d8 <__aeabi_dmul+0xc4>
 80013d6:	e075      	b.n	80014c4 <__aeabi_dmul+0x1b0>
 80013d8:	2803      	cmp	r0, #3
 80013da:	d100      	bne.n	80013de <__aeabi_dmul+0xca>
 80013dc:	e1fe      	b.n	80017dc <__aeabi_dmul+0x4c8>
 80013de:	2801      	cmp	r0, #1
 80013e0:	d000      	beq.n	80013e4 <__aeabi_dmul+0xd0>
 80013e2:	e12c      	b.n	800163e <__aeabi_dmul+0x32a>
 80013e4:	2300      	movs	r3, #0
 80013e6:	2700      	movs	r7, #0
 80013e8:	2600      	movs	r6, #0
 80013ea:	2500      	movs	r5, #0
 80013ec:	033f      	lsls	r7, r7, #12
 80013ee:	0d2a      	lsrs	r2, r5, #20
 80013f0:	0b3f      	lsrs	r7, r7, #12
 80013f2:	48b3      	ldr	r0, [pc, #716]	; (80016c0 <__aeabi_dmul+0x3ac>)
 80013f4:	0512      	lsls	r2, r2, #20
 80013f6:	433a      	orrs	r2, r7
 80013f8:	4002      	ands	r2, r0
 80013fa:	051b      	lsls	r3, r3, #20
 80013fc:	4313      	orrs	r3, r2
 80013fe:	9a00      	ldr	r2, [sp, #0]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	07d1      	lsls	r1, r2, #31
 8001404:	085b      	lsrs	r3, r3, #1
 8001406:	430b      	orrs	r3, r1
 8001408:	0030      	movs	r0, r6
 800140a:	0019      	movs	r1, r3
 800140c:	b007      	add	sp, #28
 800140e:	bc3c      	pop	{r2, r3, r4, r5}
 8001410:	4690      	mov	r8, r2
 8001412:	4699      	mov	r9, r3
 8001414:	46a2      	mov	sl, r4
 8001416:	46ab      	mov	fp, r5
 8001418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141a:	465b      	mov	r3, fp
 800141c:	433b      	orrs	r3, r7
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	d100      	bne.n	8001424 <__aeabi_dmul+0x110>
 8001422:	e12f      	b.n	8001684 <__aeabi_dmul+0x370>
 8001424:	2f00      	cmp	r7, #0
 8001426:	d100      	bne.n	800142a <__aeabi_dmul+0x116>
 8001428:	e1a5      	b.n	8001776 <__aeabi_dmul+0x462>
 800142a:	0038      	movs	r0, r7
 800142c:	f000 fd98 	bl	8001f60 <__clzsi2>
 8001430:	0003      	movs	r3, r0
 8001432:	3b0b      	subs	r3, #11
 8001434:	2b1c      	cmp	r3, #28
 8001436:	dd00      	ble.n	800143a <__aeabi_dmul+0x126>
 8001438:	e196      	b.n	8001768 <__aeabi_dmul+0x454>
 800143a:	221d      	movs	r2, #29
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	465a      	mov	r2, fp
 8001440:	0001      	movs	r1, r0
 8001442:	40da      	lsrs	r2, r3
 8001444:	465e      	mov	r6, fp
 8001446:	3908      	subs	r1, #8
 8001448:	408f      	lsls	r7, r1
 800144a:	0013      	movs	r3, r2
 800144c:	408e      	lsls	r6, r1
 800144e:	433b      	orrs	r3, r7
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	4b9c      	ldr	r3, [pc, #624]	; (80016c4 <__aeabi_dmul+0x3b0>)
 8001454:	2700      	movs	r7, #0
 8001456:	1a1b      	subs	r3, r3, r0
 8001458:	4699      	mov	r9, r3
 800145a:	2300      	movs	r3, #0
 800145c:	469b      	mov	fp, r3
 800145e:	e77d      	b.n	800135c <__aeabi_dmul+0x48>
 8001460:	4641      	mov	r1, r8
 8001462:	4653      	mov	r3, sl
 8001464:	430b      	orrs	r3, r1
 8001466:	4993      	ldr	r1, [pc, #588]	; (80016b4 <__aeabi_dmul+0x3a0>)
 8001468:	468c      	mov	ip, r1
 800146a:	44e1      	add	r9, ip
 800146c:	2b00      	cmp	r3, #0
 800146e:	d000      	beq.n	8001472 <__aeabi_dmul+0x15e>
 8001470:	e11a      	b.n	80016a8 <__aeabi_dmul+0x394>
 8001472:	2202      	movs	r2, #2
 8001474:	2002      	movs	r0, #2
 8001476:	4317      	orrs	r7, r2
 8001478:	2200      	movs	r2, #0
 800147a:	e78c      	b.n	8001396 <__aeabi_dmul+0x82>
 800147c:	4313      	orrs	r3, r2
 800147e:	d100      	bne.n	8001482 <__aeabi_dmul+0x16e>
 8001480:	e10d      	b.n	800169e <__aeabi_dmul+0x38a>
 8001482:	4643      	mov	r3, r8
 8001484:	2b00      	cmp	r3, #0
 8001486:	d100      	bne.n	800148a <__aeabi_dmul+0x176>
 8001488:	e181      	b.n	800178e <__aeabi_dmul+0x47a>
 800148a:	4640      	mov	r0, r8
 800148c:	f000 fd68 	bl	8001f60 <__clzsi2>
 8001490:	0002      	movs	r2, r0
 8001492:	3a0b      	subs	r2, #11
 8001494:	2a1c      	cmp	r2, #28
 8001496:	dd00      	ble.n	800149a <__aeabi_dmul+0x186>
 8001498:	e172      	b.n	8001780 <__aeabi_dmul+0x46c>
 800149a:	0001      	movs	r1, r0
 800149c:	4643      	mov	r3, r8
 800149e:	3908      	subs	r1, #8
 80014a0:	408b      	lsls	r3, r1
 80014a2:	4698      	mov	r8, r3
 80014a4:	231d      	movs	r3, #29
 80014a6:	1a9a      	subs	r2, r3, r2
 80014a8:	4653      	mov	r3, sl
 80014aa:	40d3      	lsrs	r3, r2
 80014ac:	001a      	movs	r2, r3
 80014ae:	4643      	mov	r3, r8
 80014b0:	4313      	orrs	r3, r2
 80014b2:	4652      	mov	r2, sl
 80014b4:	408a      	lsls	r2, r1
 80014b6:	4649      	mov	r1, r9
 80014b8:	1a08      	subs	r0, r1, r0
 80014ba:	4982      	ldr	r1, [pc, #520]	; (80016c4 <__aeabi_dmul+0x3b0>)
 80014bc:	4689      	mov	r9, r1
 80014be:	4481      	add	r9, r0
 80014c0:	2000      	movs	r0, #0
 80014c2:	e768      	b.n	8001396 <__aeabi_dmul+0x82>
 80014c4:	4b7b      	ldr	r3, [pc, #492]	; (80016b4 <__aeabi_dmul+0x3a0>)
 80014c6:	2700      	movs	r7, #0
 80014c8:	2600      	movs	r6, #0
 80014ca:	e78e      	b.n	80013ea <__aeabi_dmul+0xd6>
 80014cc:	0c14      	lsrs	r4, r2, #16
 80014ce:	0412      	lsls	r2, r2, #16
 80014d0:	0c12      	lsrs	r2, r2, #16
 80014d2:	0011      	movs	r1, r2
 80014d4:	0c37      	lsrs	r7, r6, #16
 80014d6:	0436      	lsls	r6, r6, #16
 80014d8:	0c35      	lsrs	r5, r6, #16
 80014da:	4379      	muls	r1, r7
 80014dc:	0028      	movs	r0, r5
 80014de:	468c      	mov	ip, r1
 80014e0:	002e      	movs	r6, r5
 80014e2:	4360      	muls	r0, r4
 80014e4:	4460      	add	r0, ip
 80014e6:	4683      	mov	fp, r0
 80014e8:	4356      	muls	r6, r2
 80014ea:	0021      	movs	r1, r4
 80014ec:	0c30      	lsrs	r0, r6, #16
 80014ee:	4680      	mov	r8, r0
 80014f0:	4658      	mov	r0, fp
 80014f2:	4379      	muls	r1, r7
 80014f4:	4440      	add	r0, r8
 80014f6:	9102      	str	r1, [sp, #8]
 80014f8:	4584      	cmp	ip, r0
 80014fa:	d906      	bls.n	800150a <__aeabi_dmul+0x1f6>
 80014fc:	4688      	mov	r8, r1
 80014fe:	2180      	movs	r1, #128	; 0x80
 8001500:	0249      	lsls	r1, r1, #9
 8001502:	468c      	mov	ip, r1
 8001504:	44e0      	add	r8, ip
 8001506:	4641      	mov	r1, r8
 8001508:	9102      	str	r1, [sp, #8]
 800150a:	0436      	lsls	r6, r6, #16
 800150c:	0c01      	lsrs	r1, r0, #16
 800150e:	0c36      	lsrs	r6, r6, #16
 8001510:	0400      	lsls	r0, r0, #16
 8001512:	468b      	mov	fp, r1
 8001514:	1981      	adds	r1, r0, r6
 8001516:	0c1e      	lsrs	r6, r3, #16
 8001518:	041b      	lsls	r3, r3, #16
 800151a:	0c1b      	lsrs	r3, r3, #16
 800151c:	9103      	str	r1, [sp, #12]
 800151e:	0019      	movs	r1, r3
 8001520:	4379      	muls	r1, r7
 8001522:	468c      	mov	ip, r1
 8001524:	0028      	movs	r0, r5
 8001526:	4375      	muls	r5, r6
 8001528:	4465      	add	r5, ip
 800152a:	46a8      	mov	r8, r5
 800152c:	4358      	muls	r0, r3
 800152e:	0c05      	lsrs	r5, r0, #16
 8001530:	4445      	add	r5, r8
 8001532:	4377      	muls	r7, r6
 8001534:	42a9      	cmp	r1, r5
 8001536:	d903      	bls.n	8001540 <__aeabi_dmul+0x22c>
 8001538:	2180      	movs	r1, #128	; 0x80
 800153a:	0249      	lsls	r1, r1, #9
 800153c:	468c      	mov	ip, r1
 800153e:	4467      	add	r7, ip
 8001540:	0c29      	lsrs	r1, r5, #16
 8001542:	468c      	mov	ip, r1
 8001544:	0039      	movs	r1, r7
 8001546:	0400      	lsls	r0, r0, #16
 8001548:	0c00      	lsrs	r0, r0, #16
 800154a:	042d      	lsls	r5, r5, #16
 800154c:	182d      	adds	r5, r5, r0
 800154e:	4461      	add	r1, ip
 8001550:	44ab      	add	fp, r5
 8001552:	9105      	str	r1, [sp, #20]
 8001554:	4659      	mov	r1, fp
 8001556:	9104      	str	r1, [sp, #16]
 8001558:	9901      	ldr	r1, [sp, #4]
 800155a:	040f      	lsls	r7, r1, #16
 800155c:	0c3f      	lsrs	r7, r7, #16
 800155e:	0c08      	lsrs	r0, r1, #16
 8001560:	0039      	movs	r1, r7
 8001562:	4351      	muls	r1, r2
 8001564:	4342      	muls	r2, r0
 8001566:	4690      	mov	r8, r2
 8001568:	0002      	movs	r2, r0
 800156a:	468c      	mov	ip, r1
 800156c:	0c09      	lsrs	r1, r1, #16
 800156e:	468b      	mov	fp, r1
 8001570:	4362      	muls	r2, r4
 8001572:	437c      	muls	r4, r7
 8001574:	4444      	add	r4, r8
 8001576:	445c      	add	r4, fp
 8001578:	45a0      	cmp	r8, r4
 800157a:	d903      	bls.n	8001584 <__aeabi_dmul+0x270>
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	0249      	lsls	r1, r1, #9
 8001580:	4688      	mov	r8, r1
 8001582:	4442      	add	r2, r8
 8001584:	0c21      	lsrs	r1, r4, #16
 8001586:	4688      	mov	r8, r1
 8001588:	4661      	mov	r1, ip
 800158a:	0409      	lsls	r1, r1, #16
 800158c:	0c09      	lsrs	r1, r1, #16
 800158e:	468c      	mov	ip, r1
 8001590:	0039      	movs	r1, r7
 8001592:	4359      	muls	r1, r3
 8001594:	4343      	muls	r3, r0
 8001596:	4370      	muls	r0, r6
 8001598:	437e      	muls	r6, r7
 800159a:	0c0f      	lsrs	r7, r1, #16
 800159c:	18f6      	adds	r6, r6, r3
 800159e:	0424      	lsls	r4, r4, #16
 80015a0:	19be      	adds	r6, r7, r6
 80015a2:	4464      	add	r4, ip
 80015a4:	4442      	add	r2, r8
 80015a6:	468c      	mov	ip, r1
 80015a8:	42b3      	cmp	r3, r6
 80015aa:	d903      	bls.n	80015b4 <__aeabi_dmul+0x2a0>
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	025b      	lsls	r3, r3, #9
 80015b0:	4698      	mov	r8, r3
 80015b2:	4440      	add	r0, r8
 80015b4:	9b02      	ldr	r3, [sp, #8]
 80015b6:	4661      	mov	r1, ip
 80015b8:	4698      	mov	r8, r3
 80015ba:	9b04      	ldr	r3, [sp, #16]
 80015bc:	0437      	lsls	r7, r6, #16
 80015be:	4443      	add	r3, r8
 80015c0:	469b      	mov	fp, r3
 80015c2:	45ab      	cmp	fp, r5
 80015c4:	41ad      	sbcs	r5, r5
 80015c6:	426b      	negs	r3, r5
 80015c8:	040d      	lsls	r5, r1, #16
 80015ca:	9905      	ldr	r1, [sp, #20]
 80015cc:	0c2d      	lsrs	r5, r5, #16
 80015ce:	468c      	mov	ip, r1
 80015d0:	197f      	adds	r7, r7, r5
 80015d2:	4467      	add	r7, ip
 80015d4:	18fd      	adds	r5, r7, r3
 80015d6:	46a8      	mov	r8, r5
 80015d8:	465d      	mov	r5, fp
 80015da:	192d      	adds	r5, r5, r4
 80015dc:	42a5      	cmp	r5, r4
 80015de:	41a4      	sbcs	r4, r4
 80015e0:	4693      	mov	fp, r2
 80015e2:	4264      	negs	r4, r4
 80015e4:	46a4      	mov	ip, r4
 80015e6:	44c3      	add	fp, r8
 80015e8:	44dc      	add	ip, fp
 80015ea:	428f      	cmp	r7, r1
 80015ec:	41bf      	sbcs	r7, r7
 80015ee:	4598      	cmp	r8, r3
 80015f0:	419b      	sbcs	r3, r3
 80015f2:	4593      	cmp	fp, r2
 80015f4:	4192      	sbcs	r2, r2
 80015f6:	45a4      	cmp	ip, r4
 80015f8:	41a4      	sbcs	r4, r4
 80015fa:	425b      	negs	r3, r3
 80015fc:	427f      	negs	r7, r7
 80015fe:	431f      	orrs	r7, r3
 8001600:	0c36      	lsrs	r6, r6, #16
 8001602:	4252      	negs	r2, r2
 8001604:	4264      	negs	r4, r4
 8001606:	19bf      	adds	r7, r7, r6
 8001608:	4322      	orrs	r2, r4
 800160a:	18bf      	adds	r7, r7, r2
 800160c:	4662      	mov	r2, ip
 800160e:	1838      	adds	r0, r7, r0
 8001610:	0243      	lsls	r3, r0, #9
 8001612:	0dd2      	lsrs	r2, r2, #23
 8001614:	9903      	ldr	r1, [sp, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	026a      	lsls	r2, r5, #9
 800161a:	430a      	orrs	r2, r1
 800161c:	1e50      	subs	r0, r2, #1
 800161e:	4182      	sbcs	r2, r0
 8001620:	4661      	mov	r1, ip
 8001622:	0ded      	lsrs	r5, r5, #23
 8001624:	432a      	orrs	r2, r5
 8001626:	024e      	lsls	r6, r1, #9
 8001628:	4332      	orrs	r2, r6
 800162a:	01d9      	lsls	r1, r3, #7
 800162c:	d400      	bmi.n	8001630 <__aeabi_dmul+0x31c>
 800162e:	e0b3      	b.n	8001798 <__aeabi_dmul+0x484>
 8001630:	2601      	movs	r6, #1
 8001632:	0850      	lsrs	r0, r2, #1
 8001634:	4032      	ands	r2, r6
 8001636:	4302      	orrs	r2, r0
 8001638:	07de      	lsls	r6, r3, #31
 800163a:	4332      	orrs	r2, r6
 800163c:	085b      	lsrs	r3, r3, #1
 800163e:	4c22      	ldr	r4, [pc, #136]	; (80016c8 <__aeabi_dmul+0x3b4>)
 8001640:	4454      	add	r4, sl
 8001642:	2c00      	cmp	r4, #0
 8001644:	dd62      	ble.n	800170c <__aeabi_dmul+0x3f8>
 8001646:	0751      	lsls	r1, r2, #29
 8001648:	d009      	beq.n	800165e <__aeabi_dmul+0x34a>
 800164a:	200f      	movs	r0, #15
 800164c:	4010      	ands	r0, r2
 800164e:	2804      	cmp	r0, #4
 8001650:	d005      	beq.n	800165e <__aeabi_dmul+0x34a>
 8001652:	1d10      	adds	r0, r2, #4
 8001654:	4290      	cmp	r0, r2
 8001656:	4192      	sbcs	r2, r2
 8001658:	4252      	negs	r2, r2
 800165a:	189b      	adds	r3, r3, r2
 800165c:	0002      	movs	r2, r0
 800165e:	01d9      	lsls	r1, r3, #7
 8001660:	d504      	bpl.n	800166c <__aeabi_dmul+0x358>
 8001662:	2480      	movs	r4, #128	; 0x80
 8001664:	4819      	ldr	r0, [pc, #100]	; (80016cc <__aeabi_dmul+0x3b8>)
 8001666:	00e4      	lsls	r4, r4, #3
 8001668:	4003      	ands	r3, r0
 800166a:	4454      	add	r4, sl
 800166c:	4818      	ldr	r0, [pc, #96]	; (80016d0 <__aeabi_dmul+0x3bc>)
 800166e:	4284      	cmp	r4, r0
 8001670:	dd00      	ble.n	8001674 <__aeabi_dmul+0x360>
 8001672:	e727      	b.n	80014c4 <__aeabi_dmul+0x1b0>
 8001674:	075e      	lsls	r6, r3, #29
 8001676:	025b      	lsls	r3, r3, #9
 8001678:	08d2      	lsrs	r2, r2, #3
 800167a:	0b1f      	lsrs	r7, r3, #12
 800167c:	0563      	lsls	r3, r4, #21
 800167e:	4316      	orrs	r6, r2
 8001680:	0d5b      	lsrs	r3, r3, #21
 8001682:	e6b2      	b.n	80013ea <__aeabi_dmul+0xd6>
 8001684:	2300      	movs	r3, #0
 8001686:	4699      	mov	r9, r3
 8001688:	3301      	adds	r3, #1
 800168a:	2704      	movs	r7, #4
 800168c:	2600      	movs	r6, #0
 800168e:	469b      	mov	fp, r3
 8001690:	e664      	b.n	800135c <__aeabi_dmul+0x48>
 8001692:	2303      	movs	r3, #3
 8001694:	9701      	str	r7, [sp, #4]
 8001696:	4681      	mov	r9, r0
 8001698:	270c      	movs	r7, #12
 800169a:	469b      	mov	fp, r3
 800169c:	e65e      	b.n	800135c <__aeabi_dmul+0x48>
 800169e:	2201      	movs	r2, #1
 80016a0:	2001      	movs	r0, #1
 80016a2:	4317      	orrs	r7, r2
 80016a4:	2200      	movs	r2, #0
 80016a6:	e676      	b.n	8001396 <__aeabi_dmul+0x82>
 80016a8:	2303      	movs	r3, #3
 80016aa:	2003      	movs	r0, #3
 80016ac:	431f      	orrs	r7, r3
 80016ae:	4643      	mov	r3, r8
 80016b0:	e671      	b.n	8001396 <__aeabi_dmul+0x82>
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	000007ff 	.word	0x000007ff
 80016b8:	fffffc01 	.word	0xfffffc01
 80016bc:	080082d4 	.word	0x080082d4
 80016c0:	800fffff 	.word	0x800fffff
 80016c4:	fffffc0d 	.word	0xfffffc0d
 80016c8:	000003ff 	.word	0x000003ff
 80016cc:	feffffff 	.word	0xfeffffff
 80016d0:	000007fe 	.word	0x000007fe
 80016d4:	2300      	movs	r3, #0
 80016d6:	2780      	movs	r7, #128	; 0x80
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	033f      	lsls	r7, r7, #12
 80016dc:	2600      	movs	r6, #0
 80016de:	4b43      	ldr	r3, [pc, #268]	; (80017ec <__aeabi_dmul+0x4d8>)
 80016e0:	e683      	b.n	80013ea <__aeabi_dmul+0xd6>
 80016e2:	9b01      	ldr	r3, [sp, #4]
 80016e4:	0032      	movs	r2, r6
 80016e6:	46a4      	mov	ip, r4
 80016e8:	4658      	mov	r0, fp
 80016ea:	e670      	b.n	80013ce <__aeabi_dmul+0xba>
 80016ec:	46ac      	mov	ip, r5
 80016ee:	e66e      	b.n	80013ce <__aeabi_dmul+0xba>
 80016f0:	2780      	movs	r7, #128	; 0x80
 80016f2:	9901      	ldr	r1, [sp, #4]
 80016f4:	033f      	lsls	r7, r7, #12
 80016f6:	4239      	tst	r1, r7
 80016f8:	d02d      	beq.n	8001756 <__aeabi_dmul+0x442>
 80016fa:	423b      	tst	r3, r7
 80016fc:	d12b      	bne.n	8001756 <__aeabi_dmul+0x442>
 80016fe:	431f      	orrs	r7, r3
 8001700:	033f      	lsls	r7, r7, #12
 8001702:	0b3f      	lsrs	r7, r7, #12
 8001704:	9500      	str	r5, [sp, #0]
 8001706:	0016      	movs	r6, r2
 8001708:	4b38      	ldr	r3, [pc, #224]	; (80017ec <__aeabi_dmul+0x4d8>)
 800170a:	e66e      	b.n	80013ea <__aeabi_dmul+0xd6>
 800170c:	2501      	movs	r5, #1
 800170e:	1b2d      	subs	r5, r5, r4
 8001710:	2d38      	cmp	r5, #56	; 0x38
 8001712:	dd00      	ble.n	8001716 <__aeabi_dmul+0x402>
 8001714:	e666      	b.n	80013e4 <__aeabi_dmul+0xd0>
 8001716:	2d1f      	cmp	r5, #31
 8001718:	dc40      	bgt.n	800179c <__aeabi_dmul+0x488>
 800171a:	4835      	ldr	r0, [pc, #212]	; (80017f0 <__aeabi_dmul+0x4dc>)
 800171c:	001c      	movs	r4, r3
 800171e:	4450      	add	r0, sl
 8001720:	0016      	movs	r6, r2
 8001722:	4082      	lsls	r2, r0
 8001724:	4084      	lsls	r4, r0
 8001726:	40ee      	lsrs	r6, r5
 8001728:	1e50      	subs	r0, r2, #1
 800172a:	4182      	sbcs	r2, r0
 800172c:	4334      	orrs	r4, r6
 800172e:	4314      	orrs	r4, r2
 8001730:	40eb      	lsrs	r3, r5
 8001732:	0762      	lsls	r2, r4, #29
 8001734:	d009      	beq.n	800174a <__aeabi_dmul+0x436>
 8001736:	220f      	movs	r2, #15
 8001738:	4022      	ands	r2, r4
 800173a:	2a04      	cmp	r2, #4
 800173c:	d005      	beq.n	800174a <__aeabi_dmul+0x436>
 800173e:	0022      	movs	r2, r4
 8001740:	1d14      	adds	r4, r2, #4
 8001742:	4294      	cmp	r4, r2
 8001744:	4180      	sbcs	r0, r0
 8001746:	4240      	negs	r0, r0
 8001748:	181b      	adds	r3, r3, r0
 800174a:	021a      	lsls	r2, r3, #8
 800174c:	d53e      	bpl.n	80017cc <__aeabi_dmul+0x4b8>
 800174e:	2301      	movs	r3, #1
 8001750:	2700      	movs	r7, #0
 8001752:	2600      	movs	r6, #0
 8001754:	e649      	b.n	80013ea <__aeabi_dmul+0xd6>
 8001756:	2780      	movs	r7, #128	; 0x80
 8001758:	9b01      	ldr	r3, [sp, #4]
 800175a:	033f      	lsls	r7, r7, #12
 800175c:	431f      	orrs	r7, r3
 800175e:	033f      	lsls	r7, r7, #12
 8001760:	0b3f      	lsrs	r7, r7, #12
 8001762:	9400      	str	r4, [sp, #0]
 8001764:	4b21      	ldr	r3, [pc, #132]	; (80017ec <__aeabi_dmul+0x4d8>)
 8001766:	e640      	b.n	80013ea <__aeabi_dmul+0xd6>
 8001768:	0003      	movs	r3, r0
 800176a:	465a      	mov	r2, fp
 800176c:	3b28      	subs	r3, #40	; 0x28
 800176e:	409a      	lsls	r2, r3
 8001770:	2600      	movs	r6, #0
 8001772:	9201      	str	r2, [sp, #4]
 8001774:	e66d      	b.n	8001452 <__aeabi_dmul+0x13e>
 8001776:	4658      	mov	r0, fp
 8001778:	f000 fbf2 	bl	8001f60 <__clzsi2>
 800177c:	3020      	adds	r0, #32
 800177e:	e657      	b.n	8001430 <__aeabi_dmul+0x11c>
 8001780:	0003      	movs	r3, r0
 8001782:	4652      	mov	r2, sl
 8001784:	3b28      	subs	r3, #40	; 0x28
 8001786:	409a      	lsls	r2, r3
 8001788:	0013      	movs	r3, r2
 800178a:	2200      	movs	r2, #0
 800178c:	e693      	b.n	80014b6 <__aeabi_dmul+0x1a2>
 800178e:	4650      	mov	r0, sl
 8001790:	f000 fbe6 	bl	8001f60 <__clzsi2>
 8001794:	3020      	adds	r0, #32
 8001796:	e67b      	b.n	8001490 <__aeabi_dmul+0x17c>
 8001798:	46ca      	mov	sl, r9
 800179a:	e750      	b.n	800163e <__aeabi_dmul+0x32a>
 800179c:	201f      	movs	r0, #31
 800179e:	001e      	movs	r6, r3
 80017a0:	4240      	negs	r0, r0
 80017a2:	1b04      	subs	r4, r0, r4
 80017a4:	40e6      	lsrs	r6, r4
 80017a6:	2d20      	cmp	r5, #32
 80017a8:	d003      	beq.n	80017b2 <__aeabi_dmul+0x49e>
 80017aa:	4c12      	ldr	r4, [pc, #72]	; (80017f4 <__aeabi_dmul+0x4e0>)
 80017ac:	4454      	add	r4, sl
 80017ae:	40a3      	lsls	r3, r4
 80017b0:	431a      	orrs	r2, r3
 80017b2:	1e50      	subs	r0, r2, #1
 80017b4:	4182      	sbcs	r2, r0
 80017b6:	4332      	orrs	r2, r6
 80017b8:	2607      	movs	r6, #7
 80017ba:	2700      	movs	r7, #0
 80017bc:	4016      	ands	r6, r2
 80017be:	d009      	beq.n	80017d4 <__aeabi_dmul+0x4c0>
 80017c0:	200f      	movs	r0, #15
 80017c2:	2300      	movs	r3, #0
 80017c4:	4010      	ands	r0, r2
 80017c6:	0014      	movs	r4, r2
 80017c8:	2804      	cmp	r0, #4
 80017ca:	d1b9      	bne.n	8001740 <__aeabi_dmul+0x42c>
 80017cc:	0022      	movs	r2, r4
 80017ce:	075e      	lsls	r6, r3, #29
 80017d0:	025b      	lsls	r3, r3, #9
 80017d2:	0b1f      	lsrs	r7, r3, #12
 80017d4:	08d2      	lsrs	r2, r2, #3
 80017d6:	4316      	orrs	r6, r2
 80017d8:	2300      	movs	r3, #0
 80017da:	e606      	b.n	80013ea <__aeabi_dmul+0xd6>
 80017dc:	2780      	movs	r7, #128	; 0x80
 80017de:	033f      	lsls	r7, r7, #12
 80017e0:	431f      	orrs	r7, r3
 80017e2:	033f      	lsls	r7, r7, #12
 80017e4:	0b3f      	lsrs	r7, r7, #12
 80017e6:	0016      	movs	r6, r2
 80017e8:	4b00      	ldr	r3, [pc, #0]	; (80017ec <__aeabi_dmul+0x4d8>)
 80017ea:	e5fe      	b.n	80013ea <__aeabi_dmul+0xd6>
 80017ec:	000007ff 	.word	0x000007ff
 80017f0:	0000041e 	.word	0x0000041e
 80017f4:	0000043e 	.word	0x0000043e

080017f8 <__aeabi_dsub>:
 80017f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017fa:	4657      	mov	r7, sl
 80017fc:	464e      	mov	r6, r9
 80017fe:	4645      	mov	r5, r8
 8001800:	46de      	mov	lr, fp
 8001802:	000c      	movs	r4, r1
 8001804:	0309      	lsls	r1, r1, #12
 8001806:	b5e0      	push	{r5, r6, r7, lr}
 8001808:	0a49      	lsrs	r1, r1, #9
 800180a:	0f46      	lsrs	r6, r0, #29
 800180c:	005f      	lsls	r7, r3, #1
 800180e:	4331      	orrs	r1, r6
 8001810:	031e      	lsls	r6, r3, #12
 8001812:	0fdb      	lsrs	r3, r3, #31
 8001814:	0a76      	lsrs	r6, r6, #9
 8001816:	469b      	mov	fp, r3
 8001818:	0f53      	lsrs	r3, r2, #29
 800181a:	4333      	orrs	r3, r6
 800181c:	4ec8      	ldr	r6, [pc, #800]	; (8001b40 <__aeabi_dsub+0x348>)
 800181e:	0065      	lsls	r5, r4, #1
 8001820:	00c0      	lsls	r0, r0, #3
 8001822:	0fe4      	lsrs	r4, r4, #31
 8001824:	00d2      	lsls	r2, r2, #3
 8001826:	0d6d      	lsrs	r5, r5, #21
 8001828:	46a2      	mov	sl, r4
 800182a:	4681      	mov	r9, r0
 800182c:	0d7f      	lsrs	r7, r7, #21
 800182e:	469c      	mov	ip, r3
 8001830:	4690      	mov	r8, r2
 8001832:	42b7      	cmp	r7, r6
 8001834:	d100      	bne.n	8001838 <__aeabi_dsub+0x40>
 8001836:	e0b9      	b.n	80019ac <__aeabi_dsub+0x1b4>
 8001838:	465b      	mov	r3, fp
 800183a:	2601      	movs	r6, #1
 800183c:	4073      	eors	r3, r6
 800183e:	469b      	mov	fp, r3
 8001840:	1bee      	subs	r6, r5, r7
 8001842:	45a3      	cmp	fp, r4
 8001844:	d100      	bne.n	8001848 <__aeabi_dsub+0x50>
 8001846:	e083      	b.n	8001950 <__aeabi_dsub+0x158>
 8001848:	2e00      	cmp	r6, #0
 800184a:	dd63      	ble.n	8001914 <__aeabi_dsub+0x11c>
 800184c:	2f00      	cmp	r7, #0
 800184e:	d000      	beq.n	8001852 <__aeabi_dsub+0x5a>
 8001850:	e0b1      	b.n	80019b6 <__aeabi_dsub+0x1be>
 8001852:	4663      	mov	r3, ip
 8001854:	4313      	orrs	r3, r2
 8001856:	d100      	bne.n	800185a <__aeabi_dsub+0x62>
 8001858:	e123      	b.n	8001aa2 <__aeabi_dsub+0x2aa>
 800185a:	1e73      	subs	r3, r6, #1
 800185c:	2b00      	cmp	r3, #0
 800185e:	d000      	beq.n	8001862 <__aeabi_dsub+0x6a>
 8001860:	e1ba      	b.n	8001bd8 <__aeabi_dsub+0x3e0>
 8001862:	1a86      	subs	r6, r0, r2
 8001864:	4663      	mov	r3, ip
 8001866:	42b0      	cmp	r0, r6
 8001868:	4180      	sbcs	r0, r0
 800186a:	2501      	movs	r5, #1
 800186c:	1ac9      	subs	r1, r1, r3
 800186e:	4240      	negs	r0, r0
 8001870:	1a09      	subs	r1, r1, r0
 8001872:	020b      	lsls	r3, r1, #8
 8001874:	d400      	bmi.n	8001878 <__aeabi_dsub+0x80>
 8001876:	e147      	b.n	8001b08 <__aeabi_dsub+0x310>
 8001878:	0249      	lsls	r1, r1, #9
 800187a:	0a4b      	lsrs	r3, r1, #9
 800187c:	4698      	mov	r8, r3
 800187e:	4643      	mov	r3, r8
 8001880:	2b00      	cmp	r3, #0
 8001882:	d100      	bne.n	8001886 <__aeabi_dsub+0x8e>
 8001884:	e189      	b.n	8001b9a <__aeabi_dsub+0x3a2>
 8001886:	4640      	mov	r0, r8
 8001888:	f000 fb6a 	bl	8001f60 <__clzsi2>
 800188c:	0003      	movs	r3, r0
 800188e:	3b08      	subs	r3, #8
 8001890:	2b1f      	cmp	r3, #31
 8001892:	dd00      	ble.n	8001896 <__aeabi_dsub+0x9e>
 8001894:	e17c      	b.n	8001b90 <__aeabi_dsub+0x398>
 8001896:	2220      	movs	r2, #32
 8001898:	0030      	movs	r0, r6
 800189a:	1ad2      	subs	r2, r2, r3
 800189c:	4641      	mov	r1, r8
 800189e:	40d0      	lsrs	r0, r2
 80018a0:	4099      	lsls	r1, r3
 80018a2:	0002      	movs	r2, r0
 80018a4:	409e      	lsls	r6, r3
 80018a6:	430a      	orrs	r2, r1
 80018a8:	429d      	cmp	r5, r3
 80018aa:	dd00      	ble.n	80018ae <__aeabi_dsub+0xb6>
 80018ac:	e16a      	b.n	8001b84 <__aeabi_dsub+0x38c>
 80018ae:	1b5d      	subs	r5, r3, r5
 80018b0:	1c6b      	adds	r3, r5, #1
 80018b2:	2b1f      	cmp	r3, #31
 80018b4:	dd00      	ble.n	80018b8 <__aeabi_dsub+0xc0>
 80018b6:	e194      	b.n	8001be2 <__aeabi_dsub+0x3ea>
 80018b8:	2120      	movs	r1, #32
 80018ba:	0010      	movs	r0, r2
 80018bc:	0035      	movs	r5, r6
 80018be:	1ac9      	subs	r1, r1, r3
 80018c0:	408e      	lsls	r6, r1
 80018c2:	40da      	lsrs	r2, r3
 80018c4:	4088      	lsls	r0, r1
 80018c6:	40dd      	lsrs	r5, r3
 80018c8:	1e71      	subs	r1, r6, #1
 80018ca:	418e      	sbcs	r6, r1
 80018cc:	0011      	movs	r1, r2
 80018ce:	2207      	movs	r2, #7
 80018d0:	4328      	orrs	r0, r5
 80018d2:	2500      	movs	r5, #0
 80018d4:	4306      	orrs	r6, r0
 80018d6:	4032      	ands	r2, r6
 80018d8:	2a00      	cmp	r2, #0
 80018da:	d009      	beq.n	80018f0 <__aeabi_dsub+0xf8>
 80018dc:	230f      	movs	r3, #15
 80018de:	4033      	ands	r3, r6
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d005      	beq.n	80018f0 <__aeabi_dsub+0xf8>
 80018e4:	1d33      	adds	r3, r6, #4
 80018e6:	42b3      	cmp	r3, r6
 80018e8:	41b6      	sbcs	r6, r6
 80018ea:	4276      	negs	r6, r6
 80018ec:	1989      	adds	r1, r1, r6
 80018ee:	001e      	movs	r6, r3
 80018f0:	020b      	lsls	r3, r1, #8
 80018f2:	d400      	bmi.n	80018f6 <__aeabi_dsub+0xfe>
 80018f4:	e23d      	b.n	8001d72 <__aeabi_dsub+0x57a>
 80018f6:	1c6a      	adds	r2, r5, #1
 80018f8:	4b91      	ldr	r3, [pc, #580]	; (8001b40 <__aeabi_dsub+0x348>)
 80018fa:	0555      	lsls	r5, r2, #21
 80018fc:	0d6d      	lsrs	r5, r5, #21
 80018fe:	429a      	cmp	r2, r3
 8001900:	d100      	bne.n	8001904 <__aeabi_dsub+0x10c>
 8001902:	e119      	b.n	8001b38 <__aeabi_dsub+0x340>
 8001904:	4a8f      	ldr	r2, [pc, #572]	; (8001b44 <__aeabi_dsub+0x34c>)
 8001906:	08f6      	lsrs	r6, r6, #3
 8001908:	400a      	ands	r2, r1
 800190a:	0757      	lsls	r7, r2, #29
 800190c:	0252      	lsls	r2, r2, #9
 800190e:	4337      	orrs	r7, r6
 8001910:	0b12      	lsrs	r2, r2, #12
 8001912:	e09b      	b.n	8001a4c <__aeabi_dsub+0x254>
 8001914:	2e00      	cmp	r6, #0
 8001916:	d000      	beq.n	800191a <__aeabi_dsub+0x122>
 8001918:	e0c5      	b.n	8001aa6 <__aeabi_dsub+0x2ae>
 800191a:	1c6e      	adds	r6, r5, #1
 800191c:	0576      	lsls	r6, r6, #21
 800191e:	0d76      	lsrs	r6, r6, #21
 8001920:	2e01      	cmp	r6, #1
 8001922:	dc00      	bgt.n	8001926 <__aeabi_dsub+0x12e>
 8001924:	e148      	b.n	8001bb8 <__aeabi_dsub+0x3c0>
 8001926:	4667      	mov	r7, ip
 8001928:	1a86      	subs	r6, r0, r2
 800192a:	1bcb      	subs	r3, r1, r7
 800192c:	42b0      	cmp	r0, r6
 800192e:	41bf      	sbcs	r7, r7
 8001930:	427f      	negs	r7, r7
 8001932:	46b8      	mov	r8, r7
 8001934:	001f      	movs	r7, r3
 8001936:	4643      	mov	r3, r8
 8001938:	1aff      	subs	r7, r7, r3
 800193a:	003b      	movs	r3, r7
 800193c:	46b8      	mov	r8, r7
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	d500      	bpl.n	8001944 <__aeabi_dsub+0x14c>
 8001942:	e15f      	b.n	8001c04 <__aeabi_dsub+0x40c>
 8001944:	4337      	orrs	r7, r6
 8001946:	d19a      	bne.n	800187e <__aeabi_dsub+0x86>
 8001948:	2200      	movs	r2, #0
 800194a:	2400      	movs	r4, #0
 800194c:	2500      	movs	r5, #0
 800194e:	e079      	b.n	8001a44 <__aeabi_dsub+0x24c>
 8001950:	2e00      	cmp	r6, #0
 8001952:	dc00      	bgt.n	8001956 <__aeabi_dsub+0x15e>
 8001954:	e0fa      	b.n	8001b4c <__aeabi_dsub+0x354>
 8001956:	2f00      	cmp	r7, #0
 8001958:	d100      	bne.n	800195c <__aeabi_dsub+0x164>
 800195a:	e08d      	b.n	8001a78 <__aeabi_dsub+0x280>
 800195c:	4b78      	ldr	r3, [pc, #480]	; (8001b40 <__aeabi_dsub+0x348>)
 800195e:	429d      	cmp	r5, r3
 8001960:	d067      	beq.n	8001a32 <__aeabi_dsub+0x23a>
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	4667      	mov	r7, ip
 8001966:	041b      	lsls	r3, r3, #16
 8001968:	431f      	orrs	r7, r3
 800196a:	46bc      	mov	ip, r7
 800196c:	2e38      	cmp	r6, #56	; 0x38
 800196e:	dc00      	bgt.n	8001972 <__aeabi_dsub+0x17a>
 8001970:	e152      	b.n	8001c18 <__aeabi_dsub+0x420>
 8001972:	4663      	mov	r3, ip
 8001974:	4313      	orrs	r3, r2
 8001976:	1e5a      	subs	r2, r3, #1
 8001978:	4193      	sbcs	r3, r2
 800197a:	181e      	adds	r6, r3, r0
 800197c:	4286      	cmp	r6, r0
 800197e:	4180      	sbcs	r0, r0
 8001980:	4240      	negs	r0, r0
 8001982:	1809      	adds	r1, r1, r0
 8001984:	020b      	lsls	r3, r1, #8
 8001986:	d400      	bmi.n	800198a <__aeabi_dsub+0x192>
 8001988:	e0be      	b.n	8001b08 <__aeabi_dsub+0x310>
 800198a:	4b6d      	ldr	r3, [pc, #436]	; (8001b40 <__aeabi_dsub+0x348>)
 800198c:	3501      	adds	r5, #1
 800198e:	429d      	cmp	r5, r3
 8001990:	d100      	bne.n	8001994 <__aeabi_dsub+0x19c>
 8001992:	e0d2      	b.n	8001b3a <__aeabi_dsub+0x342>
 8001994:	4a6b      	ldr	r2, [pc, #428]	; (8001b44 <__aeabi_dsub+0x34c>)
 8001996:	0873      	lsrs	r3, r6, #1
 8001998:	400a      	ands	r2, r1
 800199a:	2101      	movs	r1, #1
 800199c:	400e      	ands	r6, r1
 800199e:	431e      	orrs	r6, r3
 80019a0:	0851      	lsrs	r1, r2, #1
 80019a2:	07d3      	lsls	r3, r2, #31
 80019a4:	2207      	movs	r2, #7
 80019a6:	431e      	orrs	r6, r3
 80019a8:	4032      	ands	r2, r6
 80019aa:	e795      	b.n	80018d8 <__aeabi_dsub+0xe0>
 80019ac:	001e      	movs	r6, r3
 80019ae:	4316      	orrs	r6, r2
 80019b0:	d000      	beq.n	80019b4 <__aeabi_dsub+0x1bc>
 80019b2:	e745      	b.n	8001840 <__aeabi_dsub+0x48>
 80019b4:	e740      	b.n	8001838 <__aeabi_dsub+0x40>
 80019b6:	4b62      	ldr	r3, [pc, #392]	; (8001b40 <__aeabi_dsub+0x348>)
 80019b8:	429d      	cmp	r5, r3
 80019ba:	d03a      	beq.n	8001a32 <__aeabi_dsub+0x23a>
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	4667      	mov	r7, ip
 80019c0:	041b      	lsls	r3, r3, #16
 80019c2:	431f      	orrs	r7, r3
 80019c4:	46bc      	mov	ip, r7
 80019c6:	2e38      	cmp	r6, #56	; 0x38
 80019c8:	dd00      	ble.n	80019cc <__aeabi_dsub+0x1d4>
 80019ca:	e0eb      	b.n	8001ba4 <__aeabi_dsub+0x3ac>
 80019cc:	2e1f      	cmp	r6, #31
 80019ce:	dc00      	bgt.n	80019d2 <__aeabi_dsub+0x1da>
 80019d0:	e13a      	b.n	8001c48 <__aeabi_dsub+0x450>
 80019d2:	0033      	movs	r3, r6
 80019d4:	4667      	mov	r7, ip
 80019d6:	3b20      	subs	r3, #32
 80019d8:	40df      	lsrs	r7, r3
 80019da:	003b      	movs	r3, r7
 80019dc:	2e20      	cmp	r6, #32
 80019de:	d005      	beq.n	80019ec <__aeabi_dsub+0x1f4>
 80019e0:	2740      	movs	r7, #64	; 0x40
 80019e2:	1bbf      	subs	r7, r7, r6
 80019e4:	4666      	mov	r6, ip
 80019e6:	40be      	lsls	r6, r7
 80019e8:	4332      	orrs	r2, r6
 80019ea:	4690      	mov	r8, r2
 80019ec:	4646      	mov	r6, r8
 80019ee:	1e72      	subs	r2, r6, #1
 80019f0:	4196      	sbcs	r6, r2
 80019f2:	4333      	orrs	r3, r6
 80019f4:	e0da      	b.n	8001bac <__aeabi_dsub+0x3b4>
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d100      	bne.n	80019fc <__aeabi_dsub+0x204>
 80019fa:	e214      	b.n	8001e26 <__aeabi_dsub+0x62e>
 80019fc:	4663      	mov	r3, ip
 80019fe:	4313      	orrs	r3, r2
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dsub+0x20c>
 8001a02:	e168      	b.n	8001cd6 <__aeabi_dsub+0x4de>
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	074e      	lsls	r6, r1, #29
 8001a08:	08c0      	lsrs	r0, r0, #3
 8001a0a:	08c9      	lsrs	r1, r1, #3
 8001a0c:	031b      	lsls	r3, r3, #12
 8001a0e:	4306      	orrs	r6, r0
 8001a10:	4219      	tst	r1, r3
 8001a12:	d008      	beq.n	8001a26 <__aeabi_dsub+0x22e>
 8001a14:	4660      	mov	r0, ip
 8001a16:	08c0      	lsrs	r0, r0, #3
 8001a18:	4218      	tst	r0, r3
 8001a1a:	d104      	bne.n	8001a26 <__aeabi_dsub+0x22e>
 8001a1c:	4663      	mov	r3, ip
 8001a1e:	0001      	movs	r1, r0
 8001a20:	08d2      	lsrs	r2, r2, #3
 8001a22:	075e      	lsls	r6, r3, #29
 8001a24:	4316      	orrs	r6, r2
 8001a26:	00f3      	lsls	r3, r6, #3
 8001a28:	4699      	mov	r9, r3
 8001a2a:	00c9      	lsls	r1, r1, #3
 8001a2c:	0f72      	lsrs	r2, r6, #29
 8001a2e:	4d44      	ldr	r5, [pc, #272]	; (8001b40 <__aeabi_dsub+0x348>)
 8001a30:	4311      	orrs	r1, r2
 8001a32:	464b      	mov	r3, r9
 8001a34:	08de      	lsrs	r6, r3, #3
 8001a36:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <__aeabi_dsub+0x348>)
 8001a38:	074f      	lsls	r7, r1, #29
 8001a3a:	4337      	orrs	r7, r6
 8001a3c:	08ca      	lsrs	r2, r1, #3
 8001a3e:	429d      	cmp	r5, r3
 8001a40:	d100      	bne.n	8001a44 <__aeabi_dsub+0x24c>
 8001a42:	e06e      	b.n	8001b22 <__aeabi_dsub+0x32a>
 8001a44:	0312      	lsls	r2, r2, #12
 8001a46:	056d      	lsls	r5, r5, #21
 8001a48:	0b12      	lsrs	r2, r2, #12
 8001a4a:	0d6d      	lsrs	r5, r5, #21
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	0312      	lsls	r2, r2, #12
 8001a50:	0b13      	lsrs	r3, r2, #12
 8001a52:	0d0a      	lsrs	r2, r1, #20
 8001a54:	0512      	lsls	r2, r2, #20
 8001a56:	431a      	orrs	r2, r3
 8001a58:	4b3b      	ldr	r3, [pc, #236]	; (8001b48 <__aeabi_dsub+0x350>)
 8001a5a:	052d      	lsls	r5, r5, #20
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	432b      	orrs	r3, r5
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	07e4      	lsls	r4, r4, #31
 8001a64:	085b      	lsrs	r3, r3, #1
 8001a66:	4323      	orrs	r3, r4
 8001a68:	0038      	movs	r0, r7
 8001a6a:	0019      	movs	r1, r3
 8001a6c:	bc3c      	pop	{r2, r3, r4, r5}
 8001a6e:	4690      	mov	r8, r2
 8001a70:	4699      	mov	r9, r3
 8001a72:	46a2      	mov	sl, r4
 8001a74:	46ab      	mov	fp, r5
 8001a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a78:	4663      	mov	r3, ip
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	d011      	beq.n	8001aa2 <__aeabi_dsub+0x2aa>
 8001a7e:	1e73      	subs	r3, r6, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d000      	beq.n	8001a86 <__aeabi_dsub+0x28e>
 8001a84:	e107      	b.n	8001c96 <__aeabi_dsub+0x49e>
 8001a86:	1886      	adds	r6, r0, r2
 8001a88:	4286      	cmp	r6, r0
 8001a8a:	4180      	sbcs	r0, r0
 8001a8c:	4461      	add	r1, ip
 8001a8e:	4240      	negs	r0, r0
 8001a90:	1809      	adds	r1, r1, r0
 8001a92:	2501      	movs	r5, #1
 8001a94:	020b      	lsls	r3, r1, #8
 8001a96:	d537      	bpl.n	8001b08 <__aeabi_dsub+0x310>
 8001a98:	2502      	movs	r5, #2
 8001a9a:	e77b      	b.n	8001994 <__aeabi_dsub+0x19c>
 8001a9c:	003e      	movs	r6, r7
 8001a9e:	4661      	mov	r1, ip
 8001aa0:	4691      	mov	r9, r2
 8001aa2:	0035      	movs	r5, r6
 8001aa4:	e7c5      	b.n	8001a32 <__aeabi_dsub+0x23a>
 8001aa6:	465c      	mov	r4, fp
 8001aa8:	2d00      	cmp	r5, #0
 8001aaa:	d000      	beq.n	8001aae <__aeabi_dsub+0x2b6>
 8001aac:	e0e1      	b.n	8001c72 <__aeabi_dsub+0x47a>
 8001aae:	000b      	movs	r3, r1
 8001ab0:	4303      	orrs	r3, r0
 8001ab2:	d0f3      	beq.n	8001a9c <__aeabi_dsub+0x2a4>
 8001ab4:	1c73      	adds	r3, r6, #1
 8001ab6:	d100      	bne.n	8001aba <__aeabi_dsub+0x2c2>
 8001ab8:	e1ac      	b.n	8001e14 <__aeabi_dsub+0x61c>
 8001aba:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <__aeabi_dsub+0x348>)
 8001abc:	429f      	cmp	r7, r3
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x2ca>
 8001ac0:	e13a      	b.n	8001d38 <__aeabi_dsub+0x540>
 8001ac2:	43f3      	mvns	r3, r6
 8001ac4:	2b38      	cmp	r3, #56	; 0x38
 8001ac6:	dd00      	ble.n	8001aca <__aeabi_dsub+0x2d2>
 8001ac8:	e16f      	b.n	8001daa <__aeabi_dsub+0x5b2>
 8001aca:	2b1f      	cmp	r3, #31
 8001acc:	dd00      	ble.n	8001ad0 <__aeabi_dsub+0x2d8>
 8001ace:	e18c      	b.n	8001dea <__aeabi_dsub+0x5f2>
 8001ad0:	2520      	movs	r5, #32
 8001ad2:	000e      	movs	r6, r1
 8001ad4:	1aed      	subs	r5, r5, r3
 8001ad6:	40ae      	lsls	r6, r5
 8001ad8:	46b0      	mov	r8, r6
 8001ada:	0006      	movs	r6, r0
 8001adc:	46aa      	mov	sl, r5
 8001ade:	40de      	lsrs	r6, r3
 8001ae0:	4645      	mov	r5, r8
 8001ae2:	4335      	orrs	r5, r6
 8001ae4:	002e      	movs	r6, r5
 8001ae6:	4655      	mov	r5, sl
 8001ae8:	40d9      	lsrs	r1, r3
 8001aea:	40a8      	lsls	r0, r5
 8001aec:	4663      	mov	r3, ip
 8001aee:	1e45      	subs	r5, r0, #1
 8001af0:	41a8      	sbcs	r0, r5
 8001af2:	1a5b      	subs	r3, r3, r1
 8001af4:	469c      	mov	ip, r3
 8001af6:	4330      	orrs	r0, r6
 8001af8:	1a16      	subs	r6, r2, r0
 8001afa:	42b2      	cmp	r2, r6
 8001afc:	4192      	sbcs	r2, r2
 8001afe:	4663      	mov	r3, ip
 8001b00:	4252      	negs	r2, r2
 8001b02:	1a99      	subs	r1, r3, r2
 8001b04:	003d      	movs	r5, r7
 8001b06:	e6b4      	b.n	8001872 <__aeabi_dsub+0x7a>
 8001b08:	2207      	movs	r2, #7
 8001b0a:	4032      	ands	r2, r6
 8001b0c:	2a00      	cmp	r2, #0
 8001b0e:	d000      	beq.n	8001b12 <__aeabi_dsub+0x31a>
 8001b10:	e6e4      	b.n	80018dc <__aeabi_dsub+0xe4>
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <__aeabi_dsub+0x348>)
 8001b14:	08f6      	lsrs	r6, r6, #3
 8001b16:	074f      	lsls	r7, r1, #29
 8001b18:	4337      	orrs	r7, r6
 8001b1a:	08ca      	lsrs	r2, r1, #3
 8001b1c:	429d      	cmp	r5, r3
 8001b1e:	d000      	beq.n	8001b22 <__aeabi_dsub+0x32a>
 8001b20:	e790      	b.n	8001a44 <__aeabi_dsub+0x24c>
 8001b22:	003b      	movs	r3, r7
 8001b24:	4313      	orrs	r3, r2
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dsub+0x332>
 8001b28:	e1a6      	b.n	8001e78 <__aeabi_dsub+0x680>
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	031b      	lsls	r3, r3, #12
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	0312      	lsls	r2, r2, #12
 8001b32:	0b12      	lsrs	r2, r2, #12
 8001b34:	4d02      	ldr	r5, [pc, #8]	; (8001b40 <__aeabi_dsub+0x348>)
 8001b36:	e789      	b.n	8001a4c <__aeabi_dsub+0x254>
 8001b38:	0015      	movs	r5, r2
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2700      	movs	r7, #0
 8001b3e:	e785      	b.n	8001a4c <__aeabi_dsub+0x254>
 8001b40:	000007ff 	.word	0x000007ff
 8001b44:	ff7fffff 	.word	0xff7fffff
 8001b48:	800fffff 	.word	0x800fffff
 8001b4c:	2e00      	cmp	r6, #0
 8001b4e:	d000      	beq.n	8001b52 <__aeabi_dsub+0x35a>
 8001b50:	e0c7      	b.n	8001ce2 <__aeabi_dsub+0x4ea>
 8001b52:	1c6b      	adds	r3, r5, #1
 8001b54:	055e      	lsls	r6, r3, #21
 8001b56:	0d76      	lsrs	r6, r6, #21
 8001b58:	2e01      	cmp	r6, #1
 8001b5a:	dc00      	bgt.n	8001b5e <__aeabi_dsub+0x366>
 8001b5c:	e0f0      	b.n	8001d40 <__aeabi_dsub+0x548>
 8001b5e:	4dc8      	ldr	r5, [pc, #800]	; (8001e80 <__aeabi_dsub+0x688>)
 8001b60:	42ab      	cmp	r3, r5
 8001b62:	d100      	bne.n	8001b66 <__aeabi_dsub+0x36e>
 8001b64:	e0b9      	b.n	8001cda <__aeabi_dsub+0x4e2>
 8001b66:	1885      	adds	r5, r0, r2
 8001b68:	000a      	movs	r2, r1
 8001b6a:	4285      	cmp	r5, r0
 8001b6c:	4189      	sbcs	r1, r1
 8001b6e:	4462      	add	r2, ip
 8001b70:	4249      	negs	r1, r1
 8001b72:	1851      	adds	r1, r2, r1
 8001b74:	2207      	movs	r2, #7
 8001b76:	07ce      	lsls	r6, r1, #31
 8001b78:	086d      	lsrs	r5, r5, #1
 8001b7a:	432e      	orrs	r6, r5
 8001b7c:	0849      	lsrs	r1, r1, #1
 8001b7e:	4032      	ands	r2, r6
 8001b80:	001d      	movs	r5, r3
 8001b82:	e6a9      	b.n	80018d8 <__aeabi_dsub+0xe0>
 8001b84:	49bf      	ldr	r1, [pc, #764]	; (8001e84 <__aeabi_dsub+0x68c>)
 8001b86:	1aed      	subs	r5, r5, r3
 8001b88:	4011      	ands	r1, r2
 8001b8a:	2207      	movs	r2, #7
 8001b8c:	4032      	ands	r2, r6
 8001b8e:	e6a3      	b.n	80018d8 <__aeabi_dsub+0xe0>
 8001b90:	0032      	movs	r2, r6
 8001b92:	3828      	subs	r0, #40	; 0x28
 8001b94:	4082      	lsls	r2, r0
 8001b96:	2600      	movs	r6, #0
 8001b98:	e686      	b.n	80018a8 <__aeabi_dsub+0xb0>
 8001b9a:	0030      	movs	r0, r6
 8001b9c:	f000 f9e0 	bl	8001f60 <__clzsi2>
 8001ba0:	3020      	adds	r0, #32
 8001ba2:	e673      	b.n	800188c <__aeabi_dsub+0x94>
 8001ba4:	4663      	mov	r3, ip
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	1e5a      	subs	r2, r3, #1
 8001baa:	4193      	sbcs	r3, r2
 8001bac:	1ac6      	subs	r6, r0, r3
 8001bae:	42b0      	cmp	r0, r6
 8001bb0:	4180      	sbcs	r0, r0
 8001bb2:	4240      	negs	r0, r0
 8001bb4:	1a09      	subs	r1, r1, r0
 8001bb6:	e65c      	b.n	8001872 <__aeabi_dsub+0x7a>
 8001bb8:	000e      	movs	r6, r1
 8001bba:	4667      	mov	r7, ip
 8001bbc:	4306      	orrs	r6, r0
 8001bbe:	4317      	orrs	r7, r2
 8001bc0:	2d00      	cmp	r5, #0
 8001bc2:	d15e      	bne.n	8001c82 <__aeabi_dsub+0x48a>
 8001bc4:	2e00      	cmp	r6, #0
 8001bc6:	d000      	beq.n	8001bca <__aeabi_dsub+0x3d2>
 8001bc8:	e0f3      	b.n	8001db2 <__aeabi_dsub+0x5ba>
 8001bca:	2f00      	cmp	r7, #0
 8001bcc:	d100      	bne.n	8001bd0 <__aeabi_dsub+0x3d8>
 8001bce:	e11e      	b.n	8001e0e <__aeabi_dsub+0x616>
 8001bd0:	465c      	mov	r4, fp
 8001bd2:	4661      	mov	r1, ip
 8001bd4:	4691      	mov	r9, r2
 8001bd6:	e72c      	b.n	8001a32 <__aeabi_dsub+0x23a>
 8001bd8:	4fa9      	ldr	r7, [pc, #676]	; (8001e80 <__aeabi_dsub+0x688>)
 8001bda:	42be      	cmp	r6, r7
 8001bdc:	d07b      	beq.n	8001cd6 <__aeabi_dsub+0x4de>
 8001bde:	001e      	movs	r6, r3
 8001be0:	e6f1      	b.n	80019c6 <__aeabi_dsub+0x1ce>
 8001be2:	0010      	movs	r0, r2
 8001be4:	3d1f      	subs	r5, #31
 8001be6:	40e8      	lsrs	r0, r5
 8001be8:	2b20      	cmp	r3, #32
 8001bea:	d003      	beq.n	8001bf4 <__aeabi_dsub+0x3fc>
 8001bec:	2140      	movs	r1, #64	; 0x40
 8001bee:	1acb      	subs	r3, r1, r3
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	4316      	orrs	r6, r2
 8001bf4:	1e73      	subs	r3, r6, #1
 8001bf6:	419e      	sbcs	r6, r3
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	4306      	orrs	r6, r0
 8001bfc:	4032      	ands	r2, r6
 8001bfe:	2100      	movs	r1, #0
 8001c00:	2500      	movs	r5, #0
 8001c02:	e783      	b.n	8001b0c <__aeabi_dsub+0x314>
 8001c04:	1a16      	subs	r6, r2, r0
 8001c06:	4663      	mov	r3, ip
 8001c08:	42b2      	cmp	r2, r6
 8001c0a:	4180      	sbcs	r0, r0
 8001c0c:	1a59      	subs	r1, r3, r1
 8001c0e:	4240      	negs	r0, r0
 8001c10:	1a0b      	subs	r3, r1, r0
 8001c12:	4698      	mov	r8, r3
 8001c14:	465c      	mov	r4, fp
 8001c16:	e632      	b.n	800187e <__aeabi_dsub+0x86>
 8001c18:	2e1f      	cmp	r6, #31
 8001c1a:	dd00      	ble.n	8001c1e <__aeabi_dsub+0x426>
 8001c1c:	e0ab      	b.n	8001d76 <__aeabi_dsub+0x57e>
 8001c1e:	2720      	movs	r7, #32
 8001c20:	1bbb      	subs	r3, r7, r6
 8001c22:	469a      	mov	sl, r3
 8001c24:	4663      	mov	r3, ip
 8001c26:	4657      	mov	r7, sl
 8001c28:	40bb      	lsls	r3, r7
 8001c2a:	4699      	mov	r9, r3
 8001c2c:	0013      	movs	r3, r2
 8001c2e:	464f      	mov	r7, r9
 8001c30:	40f3      	lsrs	r3, r6
 8001c32:	431f      	orrs	r7, r3
 8001c34:	003b      	movs	r3, r7
 8001c36:	4657      	mov	r7, sl
 8001c38:	40ba      	lsls	r2, r7
 8001c3a:	1e57      	subs	r7, r2, #1
 8001c3c:	41ba      	sbcs	r2, r7
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	4662      	mov	r2, ip
 8001c42:	40f2      	lsrs	r2, r6
 8001c44:	1889      	adds	r1, r1, r2
 8001c46:	e698      	b.n	800197a <__aeabi_dsub+0x182>
 8001c48:	2720      	movs	r7, #32
 8001c4a:	1bbb      	subs	r3, r7, r6
 8001c4c:	469a      	mov	sl, r3
 8001c4e:	4663      	mov	r3, ip
 8001c50:	4657      	mov	r7, sl
 8001c52:	40bb      	lsls	r3, r7
 8001c54:	4699      	mov	r9, r3
 8001c56:	0013      	movs	r3, r2
 8001c58:	464f      	mov	r7, r9
 8001c5a:	40f3      	lsrs	r3, r6
 8001c5c:	431f      	orrs	r7, r3
 8001c5e:	003b      	movs	r3, r7
 8001c60:	4657      	mov	r7, sl
 8001c62:	40ba      	lsls	r2, r7
 8001c64:	1e57      	subs	r7, r2, #1
 8001c66:	41ba      	sbcs	r2, r7
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	4662      	mov	r2, ip
 8001c6c:	40f2      	lsrs	r2, r6
 8001c6e:	1a89      	subs	r1, r1, r2
 8001c70:	e79c      	b.n	8001bac <__aeabi_dsub+0x3b4>
 8001c72:	4b83      	ldr	r3, [pc, #524]	; (8001e80 <__aeabi_dsub+0x688>)
 8001c74:	429f      	cmp	r7, r3
 8001c76:	d05f      	beq.n	8001d38 <__aeabi_dsub+0x540>
 8001c78:	2580      	movs	r5, #128	; 0x80
 8001c7a:	042d      	lsls	r5, r5, #16
 8001c7c:	4273      	negs	r3, r6
 8001c7e:	4329      	orrs	r1, r5
 8001c80:	e720      	b.n	8001ac4 <__aeabi_dsub+0x2cc>
 8001c82:	2e00      	cmp	r6, #0
 8001c84:	d10c      	bne.n	8001ca0 <__aeabi_dsub+0x4a8>
 8001c86:	2f00      	cmp	r7, #0
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dsub+0x494>
 8001c8a:	e0d0      	b.n	8001e2e <__aeabi_dsub+0x636>
 8001c8c:	465c      	mov	r4, fp
 8001c8e:	4661      	mov	r1, ip
 8001c90:	4691      	mov	r9, r2
 8001c92:	4d7b      	ldr	r5, [pc, #492]	; (8001e80 <__aeabi_dsub+0x688>)
 8001c94:	e6cd      	b.n	8001a32 <__aeabi_dsub+0x23a>
 8001c96:	4f7a      	ldr	r7, [pc, #488]	; (8001e80 <__aeabi_dsub+0x688>)
 8001c98:	42be      	cmp	r6, r7
 8001c9a:	d01c      	beq.n	8001cd6 <__aeabi_dsub+0x4de>
 8001c9c:	001e      	movs	r6, r3
 8001c9e:	e665      	b.n	800196c <__aeabi_dsub+0x174>
 8001ca0:	2f00      	cmp	r7, #0
 8001ca2:	d018      	beq.n	8001cd6 <__aeabi_dsub+0x4de>
 8001ca4:	08c0      	lsrs	r0, r0, #3
 8001ca6:	074e      	lsls	r6, r1, #29
 8001ca8:	4306      	orrs	r6, r0
 8001caa:	2080      	movs	r0, #128	; 0x80
 8001cac:	08c9      	lsrs	r1, r1, #3
 8001cae:	0300      	lsls	r0, r0, #12
 8001cb0:	4201      	tst	r1, r0
 8001cb2:	d008      	beq.n	8001cc6 <__aeabi_dsub+0x4ce>
 8001cb4:	4663      	mov	r3, ip
 8001cb6:	08dc      	lsrs	r4, r3, #3
 8001cb8:	4204      	tst	r4, r0
 8001cba:	d104      	bne.n	8001cc6 <__aeabi_dsub+0x4ce>
 8001cbc:	0021      	movs	r1, r4
 8001cbe:	46da      	mov	sl, fp
 8001cc0:	08d2      	lsrs	r2, r2, #3
 8001cc2:	075e      	lsls	r6, r3, #29
 8001cc4:	4316      	orrs	r6, r2
 8001cc6:	00f3      	lsls	r3, r6, #3
 8001cc8:	4699      	mov	r9, r3
 8001cca:	2401      	movs	r4, #1
 8001ccc:	4653      	mov	r3, sl
 8001cce:	00c9      	lsls	r1, r1, #3
 8001cd0:	0f72      	lsrs	r2, r6, #29
 8001cd2:	4311      	orrs	r1, r2
 8001cd4:	401c      	ands	r4, r3
 8001cd6:	4d6a      	ldr	r5, [pc, #424]	; (8001e80 <__aeabi_dsub+0x688>)
 8001cd8:	e6ab      	b.n	8001a32 <__aeabi_dsub+0x23a>
 8001cda:	001d      	movs	r5, r3
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2700      	movs	r7, #0
 8001ce0:	e6b4      	b.n	8001a4c <__aeabi_dsub+0x254>
 8001ce2:	2d00      	cmp	r5, #0
 8001ce4:	d159      	bne.n	8001d9a <__aeabi_dsub+0x5a2>
 8001ce6:	000b      	movs	r3, r1
 8001ce8:	4303      	orrs	r3, r0
 8001cea:	d100      	bne.n	8001cee <__aeabi_dsub+0x4f6>
 8001cec:	e6d6      	b.n	8001a9c <__aeabi_dsub+0x2a4>
 8001cee:	1c73      	adds	r3, r6, #1
 8001cf0:	d100      	bne.n	8001cf4 <__aeabi_dsub+0x4fc>
 8001cf2:	e0b2      	b.n	8001e5a <__aeabi_dsub+0x662>
 8001cf4:	4b62      	ldr	r3, [pc, #392]	; (8001e80 <__aeabi_dsub+0x688>)
 8001cf6:	429f      	cmp	r7, r3
 8001cf8:	d01e      	beq.n	8001d38 <__aeabi_dsub+0x540>
 8001cfa:	43f3      	mvns	r3, r6
 8001cfc:	2b38      	cmp	r3, #56	; 0x38
 8001cfe:	dc6f      	bgt.n	8001de0 <__aeabi_dsub+0x5e8>
 8001d00:	2b1f      	cmp	r3, #31
 8001d02:	dd00      	ble.n	8001d06 <__aeabi_dsub+0x50e>
 8001d04:	e097      	b.n	8001e36 <__aeabi_dsub+0x63e>
 8001d06:	2520      	movs	r5, #32
 8001d08:	000e      	movs	r6, r1
 8001d0a:	1aed      	subs	r5, r5, r3
 8001d0c:	40ae      	lsls	r6, r5
 8001d0e:	46b0      	mov	r8, r6
 8001d10:	0006      	movs	r6, r0
 8001d12:	46aa      	mov	sl, r5
 8001d14:	40de      	lsrs	r6, r3
 8001d16:	4645      	mov	r5, r8
 8001d18:	4335      	orrs	r5, r6
 8001d1a:	002e      	movs	r6, r5
 8001d1c:	4655      	mov	r5, sl
 8001d1e:	40a8      	lsls	r0, r5
 8001d20:	40d9      	lsrs	r1, r3
 8001d22:	1e45      	subs	r5, r0, #1
 8001d24:	41a8      	sbcs	r0, r5
 8001d26:	448c      	add	ip, r1
 8001d28:	4306      	orrs	r6, r0
 8001d2a:	18b6      	adds	r6, r6, r2
 8001d2c:	4296      	cmp	r6, r2
 8001d2e:	4192      	sbcs	r2, r2
 8001d30:	4251      	negs	r1, r2
 8001d32:	4461      	add	r1, ip
 8001d34:	003d      	movs	r5, r7
 8001d36:	e625      	b.n	8001984 <__aeabi_dsub+0x18c>
 8001d38:	003d      	movs	r5, r7
 8001d3a:	4661      	mov	r1, ip
 8001d3c:	4691      	mov	r9, r2
 8001d3e:	e678      	b.n	8001a32 <__aeabi_dsub+0x23a>
 8001d40:	000b      	movs	r3, r1
 8001d42:	4303      	orrs	r3, r0
 8001d44:	2d00      	cmp	r5, #0
 8001d46:	d000      	beq.n	8001d4a <__aeabi_dsub+0x552>
 8001d48:	e655      	b.n	80019f6 <__aeabi_dsub+0x1fe>
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f5      	beq.n	8001d3a <__aeabi_dsub+0x542>
 8001d4e:	4663      	mov	r3, ip
 8001d50:	4313      	orrs	r3, r2
 8001d52:	d100      	bne.n	8001d56 <__aeabi_dsub+0x55e>
 8001d54:	e66d      	b.n	8001a32 <__aeabi_dsub+0x23a>
 8001d56:	1886      	adds	r6, r0, r2
 8001d58:	4286      	cmp	r6, r0
 8001d5a:	4180      	sbcs	r0, r0
 8001d5c:	4461      	add	r1, ip
 8001d5e:	4240      	negs	r0, r0
 8001d60:	1809      	adds	r1, r1, r0
 8001d62:	2200      	movs	r2, #0
 8001d64:	020b      	lsls	r3, r1, #8
 8001d66:	d400      	bmi.n	8001d6a <__aeabi_dsub+0x572>
 8001d68:	e6d0      	b.n	8001b0c <__aeabi_dsub+0x314>
 8001d6a:	4b46      	ldr	r3, [pc, #280]	; (8001e84 <__aeabi_dsub+0x68c>)
 8001d6c:	3501      	adds	r5, #1
 8001d6e:	4019      	ands	r1, r3
 8001d70:	e5b2      	b.n	80018d8 <__aeabi_dsub+0xe0>
 8001d72:	46b1      	mov	r9, r6
 8001d74:	e65d      	b.n	8001a32 <__aeabi_dsub+0x23a>
 8001d76:	0033      	movs	r3, r6
 8001d78:	4667      	mov	r7, ip
 8001d7a:	3b20      	subs	r3, #32
 8001d7c:	40df      	lsrs	r7, r3
 8001d7e:	003b      	movs	r3, r7
 8001d80:	2e20      	cmp	r6, #32
 8001d82:	d005      	beq.n	8001d90 <__aeabi_dsub+0x598>
 8001d84:	2740      	movs	r7, #64	; 0x40
 8001d86:	1bbf      	subs	r7, r7, r6
 8001d88:	4666      	mov	r6, ip
 8001d8a:	40be      	lsls	r6, r7
 8001d8c:	4332      	orrs	r2, r6
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4646      	mov	r6, r8
 8001d92:	1e72      	subs	r2, r6, #1
 8001d94:	4196      	sbcs	r6, r2
 8001d96:	4333      	orrs	r3, r6
 8001d98:	e5ef      	b.n	800197a <__aeabi_dsub+0x182>
 8001d9a:	4b39      	ldr	r3, [pc, #228]	; (8001e80 <__aeabi_dsub+0x688>)
 8001d9c:	429f      	cmp	r7, r3
 8001d9e:	d0cb      	beq.n	8001d38 <__aeabi_dsub+0x540>
 8001da0:	2580      	movs	r5, #128	; 0x80
 8001da2:	042d      	lsls	r5, r5, #16
 8001da4:	4273      	negs	r3, r6
 8001da6:	4329      	orrs	r1, r5
 8001da8:	e7a8      	b.n	8001cfc <__aeabi_dsub+0x504>
 8001daa:	4308      	orrs	r0, r1
 8001dac:	1e41      	subs	r1, r0, #1
 8001dae:	4188      	sbcs	r0, r1
 8001db0:	e6a2      	b.n	8001af8 <__aeabi_dsub+0x300>
 8001db2:	2f00      	cmp	r7, #0
 8001db4:	d100      	bne.n	8001db8 <__aeabi_dsub+0x5c0>
 8001db6:	e63c      	b.n	8001a32 <__aeabi_dsub+0x23a>
 8001db8:	4663      	mov	r3, ip
 8001dba:	1a86      	subs	r6, r0, r2
 8001dbc:	1acf      	subs	r7, r1, r3
 8001dbe:	42b0      	cmp	r0, r6
 8001dc0:	419b      	sbcs	r3, r3
 8001dc2:	425b      	negs	r3, r3
 8001dc4:	1afb      	subs	r3, r7, r3
 8001dc6:	4698      	mov	r8, r3
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	d54e      	bpl.n	8001e6a <__aeabi_dsub+0x672>
 8001dcc:	1a16      	subs	r6, r2, r0
 8001dce:	4663      	mov	r3, ip
 8001dd0:	42b2      	cmp	r2, r6
 8001dd2:	4192      	sbcs	r2, r2
 8001dd4:	1a59      	subs	r1, r3, r1
 8001dd6:	4252      	negs	r2, r2
 8001dd8:	1a89      	subs	r1, r1, r2
 8001dda:	465c      	mov	r4, fp
 8001ddc:	2200      	movs	r2, #0
 8001dde:	e57b      	b.n	80018d8 <__aeabi_dsub+0xe0>
 8001de0:	4301      	orrs	r1, r0
 8001de2:	000e      	movs	r6, r1
 8001de4:	1e71      	subs	r1, r6, #1
 8001de6:	418e      	sbcs	r6, r1
 8001de8:	e79f      	b.n	8001d2a <__aeabi_dsub+0x532>
 8001dea:	001d      	movs	r5, r3
 8001dec:	000e      	movs	r6, r1
 8001dee:	3d20      	subs	r5, #32
 8001df0:	40ee      	lsrs	r6, r5
 8001df2:	46b0      	mov	r8, r6
 8001df4:	2b20      	cmp	r3, #32
 8001df6:	d004      	beq.n	8001e02 <__aeabi_dsub+0x60a>
 8001df8:	2540      	movs	r5, #64	; 0x40
 8001dfa:	1aeb      	subs	r3, r5, r3
 8001dfc:	4099      	lsls	r1, r3
 8001dfe:	4308      	orrs	r0, r1
 8001e00:	4681      	mov	r9, r0
 8001e02:	4648      	mov	r0, r9
 8001e04:	4643      	mov	r3, r8
 8001e06:	1e41      	subs	r1, r0, #1
 8001e08:	4188      	sbcs	r0, r1
 8001e0a:	4318      	orrs	r0, r3
 8001e0c:	e674      	b.n	8001af8 <__aeabi_dsub+0x300>
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2400      	movs	r4, #0
 8001e12:	e617      	b.n	8001a44 <__aeabi_dsub+0x24c>
 8001e14:	1a16      	subs	r6, r2, r0
 8001e16:	4663      	mov	r3, ip
 8001e18:	42b2      	cmp	r2, r6
 8001e1a:	4192      	sbcs	r2, r2
 8001e1c:	1a59      	subs	r1, r3, r1
 8001e1e:	4252      	negs	r2, r2
 8001e20:	1a89      	subs	r1, r1, r2
 8001e22:	003d      	movs	r5, r7
 8001e24:	e525      	b.n	8001872 <__aeabi_dsub+0x7a>
 8001e26:	4661      	mov	r1, ip
 8001e28:	4691      	mov	r9, r2
 8001e2a:	4d15      	ldr	r5, [pc, #84]	; (8001e80 <__aeabi_dsub+0x688>)
 8001e2c:	e601      	b.n	8001a32 <__aeabi_dsub+0x23a>
 8001e2e:	2280      	movs	r2, #128	; 0x80
 8001e30:	2400      	movs	r4, #0
 8001e32:	0312      	lsls	r2, r2, #12
 8001e34:	e679      	b.n	8001b2a <__aeabi_dsub+0x332>
 8001e36:	001d      	movs	r5, r3
 8001e38:	000e      	movs	r6, r1
 8001e3a:	3d20      	subs	r5, #32
 8001e3c:	40ee      	lsrs	r6, r5
 8001e3e:	46b0      	mov	r8, r6
 8001e40:	2b20      	cmp	r3, #32
 8001e42:	d004      	beq.n	8001e4e <__aeabi_dsub+0x656>
 8001e44:	2540      	movs	r5, #64	; 0x40
 8001e46:	1aeb      	subs	r3, r5, r3
 8001e48:	4099      	lsls	r1, r3
 8001e4a:	4308      	orrs	r0, r1
 8001e4c:	4681      	mov	r9, r0
 8001e4e:	464e      	mov	r6, r9
 8001e50:	4643      	mov	r3, r8
 8001e52:	1e71      	subs	r1, r6, #1
 8001e54:	418e      	sbcs	r6, r1
 8001e56:	431e      	orrs	r6, r3
 8001e58:	e767      	b.n	8001d2a <__aeabi_dsub+0x532>
 8001e5a:	1886      	adds	r6, r0, r2
 8001e5c:	4296      	cmp	r6, r2
 8001e5e:	419b      	sbcs	r3, r3
 8001e60:	4461      	add	r1, ip
 8001e62:	425b      	negs	r3, r3
 8001e64:	18c9      	adds	r1, r1, r3
 8001e66:	003d      	movs	r5, r7
 8001e68:	e58c      	b.n	8001984 <__aeabi_dsub+0x18c>
 8001e6a:	4647      	mov	r7, r8
 8001e6c:	4337      	orrs	r7, r6
 8001e6e:	d0ce      	beq.n	8001e0e <__aeabi_dsub+0x616>
 8001e70:	2207      	movs	r2, #7
 8001e72:	4641      	mov	r1, r8
 8001e74:	4032      	ands	r2, r6
 8001e76:	e649      	b.n	8001b0c <__aeabi_dsub+0x314>
 8001e78:	2700      	movs	r7, #0
 8001e7a:	003a      	movs	r2, r7
 8001e7c:	e5e6      	b.n	8001a4c <__aeabi_dsub+0x254>
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	000007ff 	.word	0x000007ff
 8001e84:	ff7fffff 	.word	0xff7fffff

08001e88 <__aeabi_i2d>:
 8001e88:	b570      	push	{r4, r5, r6, lr}
 8001e8a:	2800      	cmp	r0, #0
 8001e8c:	d02d      	beq.n	8001eea <__aeabi_i2d+0x62>
 8001e8e:	17c3      	asrs	r3, r0, #31
 8001e90:	18c5      	adds	r5, r0, r3
 8001e92:	405d      	eors	r5, r3
 8001e94:	0fc4      	lsrs	r4, r0, #31
 8001e96:	0028      	movs	r0, r5
 8001e98:	f000 f862 	bl	8001f60 <__clzsi2>
 8001e9c:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <__aeabi_i2d+0x6c>)
 8001e9e:	1a1b      	subs	r3, r3, r0
 8001ea0:	055b      	lsls	r3, r3, #21
 8001ea2:	0d5b      	lsrs	r3, r3, #21
 8001ea4:	280a      	cmp	r0, #10
 8001ea6:	dd15      	ble.n	8001ed4 <__aeabi_i2d+0x4c>
 8001ea8:	380b      	subs	r0, #11
 8001eaa:	4085      	lsls	r5, r0
 8001eac:	2200      	movs	r2, #0
 8001eae:	032d      	lsls	r5, r5, #12
 8001eb0:	0b2d      	lsrs	r5, r5, #12
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	0010      	movs	r0, r2
 8001eb6:	032d      	lsls	r5, r5, #12
 8001eb8:	0d0a      	lsrs	r2, r1, #20
 8001eba:	0b2d      	lsrs	r5, r5, #12
 8001ebc:	0512      	lsls	r2, r2, #20
 8001ebe:	432a      	orrs	r2, r5
 8001ec0:	4d0d      	ldr	r5, [pc, #52]	; (8001ef8 <__aeabi_i2d+0x70>)
 8001ec2:	051b      	lsls	r3, r3, #20
 8001ec4:	402a      	ands	r2, r5
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	07e4      	lsls	r4, r4, #31
 8001ecc:	085b      	lsrs	r3, r3, #1
 8001ece:	4323      	orrs	r3, r4
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	bd70      	pop	{r4, r5, r6, pc}
 8001ed4:	0002      	movs	r2, r0
 8001ed6:	0029      	movs	r1, r5
 8001ed8:	3215      	adds	r2, #21
 8001eda:	4091      	lsls	r1, r2
 8001edc:	000a      	movs	r2, r1
 8001ede:	210b      	movs	r1, #11
 8001ee0:	1a08      	subs	r0, r1, r0
 8001ee2:	40c5      	lsrs	r5, r0
 8001ee4:	032d      	lsls	r5, r5, #12
 8001ee6:	0b2d      	lsrs	r5, r5, #12
 8001ee8:	e7e3      	b.n	8001eb2 <__aeabi_i2d+0x2a>
 8001eea:	2400      	movs	r4, #0
 8001eec:	2300      	movs	r3, #0
 8001eee:	2500      	movs	r5, #0
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	e7de      	b.n	8001eb2 <__aeabi_i2d+0x2a>
 8001ef4:	0000041e 	.word	0x0000041e
 8001ef8:	800fffff 	.word	0x800fffff

08001efc <__aeabi_ui2d>:
 8001efc:	b510      	push	{r4, lr}
 8001efe:	1e04      	subs	r4, r0, #0
 8001f00:	d025      	beq.n	8001f4e <__aeabi_ui2d+0x52>
 8001f02:	f000 f82d 	bl	8001f60 <__clzsi2>
 8001f06:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <__aeabi_ui2d+0x5c>)
 8001f08:	1a1b      	subs	r3, r3, r0
 8001f0a:	055b      	lsls	r3, r3, #21
 8001f0c:	0d5b      	lsrs	r3, r3, #21
 8001f0e:	280a      	cmp	r0, #10
 8001f10:	dd12      	ble.n	8001f38 <__aeabi_ui2d+0x3c>
 8001f12:	380b      	subs	r0, #11
 8001f14:	4084      	lsls	r4, r0
 8001f16:	2200      	movs	r2, #0
 8001f18:	0324      	lsls	r4, r4, #12
 8001f1a:	0b24      	lsrs	r4, r4, #12
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	0010      	movs	r0, r2
 8001f20:	0324      	lsls	r4, r4, #12
 8001f22:	0d0a      	lsrs	r2, r1, #20
 8001f24:	0b24      	lsrs	r4, r4, #12
 8001f26:	0512      	lsls	r2, r2, #20
 8001f28:	4322      	orrs	r2, r4
 8001f2a:	4c0c      	ldr	r4, [pc, #48]	; (8001f5c <__aeabi_ui2d+0x60>)
 8001f2c:	051b      	lsls	r3, r3, #20
 8001f2e:	4022      	ands	r2, r4
 8001f30:	4313      	orrs	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	0859      	lsrs	r1, r3, #1
 8001f36:	bd10      	pop	{r4, pc}
 8001f38:	0002      	movs	r2, r0
 8001f3a:	0021      	movs	r1, r4
 8001f3c:	3215      	adds	r2, #21
 8001f3e:	4091      	lsls	r1, r2
 8001f40:	000a      	movs	r2, r1
 8001f42:	210b      	movs	r1, #11
 8001f44:	1a08      	subs	r0, r1, r0
 8001f46:	40c4      	lsrs	r4, r0
 8001f48:	0324      	lsls	r4, r4, #12
 8001f4a:	0b24      	lsrs	r4, r4, #12
 8001f4c:	e7e6      	b.n	8001f1c <__aeabi_ui2d+0x20>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	2400      	movs	r4, #0
 8001f52:	2200      	movs	r2, #0
 8001f54:	e7e2      	b.n	8001f1c <__aeabi_ui2d+0x20>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	0000041e 	.word	0x0000041e
 8001f5c:	800fffff 	.word	0x800fffff

08001f60 <__clzsi2>:
 8001f60:	211c      	movs	r1, #28
 8001f62:	2301      	movs	r3, #1
 8001f64:	041b      	lsls	r3, r3, #16
 8001f66:	4298      	cmp	r0, r3
 8001f68:	d301      	bcc.n	8001f6e <__clzsi2+0xe>
 8001f6a:	0c00      	lsrs	r0, r0, #16
 8001f6c:	3910      	subs	r1, #16
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	4298      	cmp	r0, r3
 8001f72:	d301      	bcc.n	8001f78 <__clzsi2+0x18>
 8001f74:	0a00      	lsrs	r0, r0, #8
 8001f76:	3908      	subs	r1, #8
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	4298      	cmp	r0, r3
 8001f7c:	d301      	bcc.n	8001f82 <__clzsi2+0x22>
 8001f7e:	0900      	lsrs	r0, r0, #4
 8001f80:	3904      	subs	r1, #4
 8001f82:	a202      	add	r2, pc, #8	; (adr r2, 8001f8c <__clzsi2+0x2c>)
 8001f84:	5c10      	ldrb	r0, [r2, r0]
 8001f86:	1840      	adds	r0, r0, r1
 8001f88:	4770      	bx	lr
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	02020304 	.word	0x02020304
 8001f90:	01010101 	.word	0x01010101
	...

08001f9c <__clzdi2>:
 8001f9c:	b510      	push	{r4, lr}
 8001f9e:	2900      	cmp	r1, #0
 8001fa0:	d103      	bne.n	8001faa <__clzdi2+0xe>
 8001fa2:	f7ff ffdd 	bl	8001f60 <__clzsi2>
 8001fa6:	3020      	adds	r0, #32
 8001fa8:	e002      	b.n	8001fb0 <__clzdi2+0x14>
 8001faa:	1c08      	adds	r0, r1, #0
 8001fac:	f7ff ffd8 	bl	8001f60 <__clzsi2>
 8001fb0:	bd10      	pop	{r4, pc}
 8001fb2:	46c0      	nop			; (mov r8, r8)

08001fb4 <__aeabi_d2uiz>:
 8001fb4:	b570      	push	{r4, r5, r6, lr}
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <__aeabi_d2uiz+0x38>)
 8001fba:	0004      	movs	r4, r0
 8001fbc:	000d      	movs	r5, r1
 8001fbe:	f7fe f963 	bl	8000288 <__aeabi_dcmpge>
 8001fc2:	2800      	cmp	r0, #0
 8001fc4:	d104      	bne.n	8001fd0 <__aeabi_d2uiz+0x1c>
 8001fc6:	0020      	movs	r0, r4
 8001fc8:	0029      	movs	r1, r5
 8001fca:	f000 f811 	bl	8001ff0 <__aeabi_d2iz>
 8001fce:	bd70      	pop	{r4, r5, r6, pc}
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <__aeabi_d2uiz+0x38>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	0020      	movs	r0, r4
 8001fd6:	0029      	movs	r1, r5
 8001fd8:	f7ff fc0e 	bl	80017f8 <__aeabi_dsub>
 8001fdc:	f000 f808 	bl	8001ff0 <__aeabi_d2iz>
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	061b      	lsls	r3, r3, #24
 8001fe4:	469c      	mov	ip, r3
 8001fe6:	4460      	add	r0, ip
 8001fe8:	e7f1      	b.n	8001fce <__aeabi_d2uiz+0x1a>
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	41e00000 	.word	0x41e00000

08001ff0 <__aeabi_d2iz>:
 8001ff0:	b530      	push	{r4, r5, lr}
 8001ff2:	4d14      	ldr	r5, [pc, #80]	; (8002044 <__aeabi_d2iz+0x54>)
 8001ff4:	030a      	lsls	r2, r1, #12
 8001ff6:	004b      	lsls	r3, r1, #1
 8001ff8:	0b12      	lsrs	r2, r2, #12
 8001ffa:	0d5b      	lsrs	r3, r3, #21
 8001ffc:	0fc9      	lsrs	r1, r1, #31
 8001ffe:	2400      	movs	r4, #0
 8002000:	42ab      	cmp	r3, r5
 8002002:	dd11      	ble.n	8002028 <__aeabi_d2iz+0x38>
 8002004:	4c10      	ldr	r4, [pc, #64]	; (8002048 <__aeabi_d2iz+0x58>)
 8002006:	42a3      	cmp	r3, r4
 8002008:	dc10      	bgt.n	800202c <__aeabi_d2iz+0x3c>
 800200a:	2480      	movs	r4, #128	; 0x80
 800200c:	0364      	lsls	r4, r4, #13
 800200e:	4322      	orrs	r2, r4
 8002010:	4c0e      	ldr	r4, [pc, #56]	; (800204c <__aeabi_d2iz+0x5c>)
 8002012:	1ae4      	subs	r4, r4, r3
 8002014:	2c1f      	cmp	r4, #31
 8002016:	dd0c      	ble.n	8002032 <__aeabi_d2iz+0x42>
 8002018:	480d      	ldr	r0, [pc, #52]	; (8002050 <__aeabi_d2iz+0x60>)
 800201a:	1ac3      	subs	r3, r0, r3
 800201c:	40da      	lsrs	r2, r3
 800201e:	0013      	movs	r3, r2
 8002020:	425c      	negs	r4, r3
 8002022:	2900      	cmp	r1, #0
 8002024:	d100      	bne.n	8002028 <__aeabi_d2iz+0x38>
 8002026:	001c      	movs	r4, r3
 8002028:	0020      	movs	r0, r4
 800202a:	bd30      	pop	{r4, r5, pc}
 800202c:	4b09      	ldr	r3, [pc, #36]	; (8002054 <__aeabi_d2iz+0x64>)
 800202e:	18cc      	adds	r4, r1, r3
 8002030:	e7fa      	b.n	8002028 <__aeabi_d2iz+0x38>
 8002032:	4d09      	ldr	r5, [pc, #36]	; (8002058 <__aeabi_d2iz+0x68>)
 8002034:	40e0      	lsrs	r0, r4
 8002036:	46ac      	mov	ip, r5
 8002038:	4463      	add	r3, ip
 800203a:	409a      	lsls	r2, r3
 800203c:	0013      	movs	r3, r2
 800203e:	4303      	orrs	r3, r0
 8002040:	e7ee      	b.n	8002020 <__aeabi_d2iz+0x30>
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	000003fe 	.word	0x000003fe
 8002048:	0000041d 	.word	0x0000041d
 800204c:	00000433 	.word	0x00000433
 8002050:	00000413 	.word	0x00000413
 8002054:	7fffffff 	.word	0x7fffffff
 8002058:	fffffbed 	.word	0xfffffbed

0800205c <PDM_Init>:
    // TODO: Get and use CAN lib
}



void PDM_Init(void) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
    PDM_Device_t*   device;

    pdm_devices[0] = test_device_1;
 8002062:	4a26      	ldr	r2, [pc, #152]	; (80020fc <PDM_Init+0xa0>)
 8002064:	4b26      	ldr	r3, [pc, #152]	; (8002100 <PDM_Init+0xa4>)
 8002066:	0010      	movs	r0, r2
 8002068:	0019      	movs	r1, r3
 800206a:	2328      	movs	r3, #40	; 0x28
 800206c:	001a      	movs	r2, r3
 800206e:	f006 f8c1 	bl	80081f4 <memcpy>
    pdm_devices[1] = test_device_2;
 8002072:	4b22      	ldr	r3, [pc, #136]	; (80020fc <PDM_Init+0xa0>)
 8002074:	4a23      	ldr	r2, [pc, #140]	; (8002104 <PDM_Init+0xa8>)
 8002076:	3328      	adds	r3, #40	; 0x28
 8002078:	0011      	movs	r1, r2
 800207a:	2228      	movs	r2, #40	; 0x28
 800207c:	0018      	movs	r0, r3
 800207e:	f006 f8b9 	bl	80081f4 <memcpy>
    pdm_devices[2] = test_device_3;
 8002082:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <PDM_Init+0xa0>)
 8002084:	4a20      	ldr	r2, [pc, #128]	; (8002108 <PDM_Init+0xac>)
 8002086:	3350      	adds	r3, #80	; 0x50
 8002088:	0011      	movs	r1, r2
 800208a:	2228      	movs	r2, #40	; 0x28
 800208c:	0018      	movs	r0, r3
 800208e:	f006 f8b1 	bl	80081f4 <memcpy>

    // Unsure about this auto calibration
    HAL_ADCEx_Calibration_Start(&hadc);		// start cal before starting adc
 8002092:	4b1e      	ldr	r3, [pc, #120]	; (800210c <PDM_Init+0xb0>)
 8002094:	0018      	movs	r0, r3
 8002096:	f001 fcad 	bl	80039f4 <HAL_ADCEx_Calibration_Start>

    // start timers so interrupt gives accurate time
    htim17.Instance->CNT = 0;
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <PDM_Init+0xb4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2200      	movs	r2, #0
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24
    htim16.Instance->CNT = 0;
 80020a2:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <PDM_Init+0xb8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2200      	movs	r2, #0
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_TIM_Base_Start(&htim16);
 80020aa:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <PDM_Init+0xb8>)
 80020ac:	0018      	movs	r0, r3
 80020ae:	f003 f8bf 	bl	8005230 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim17);
 80020b2:	4b17      	ldr	r3, [pc, #92]	; (8002110 <PDM_Init+0xb4>)
 80020b4:	0018      	movs	r0, r3
 80020b6:	f003 f8bb 	bl	8005230 <HAL_TIM_Base_Start>

    HAL_ADC_Start_DMA(&hadc, (uint32_t*) current_buffer, CURRENT_BUFFER_SIZE); // start first round of conversions
 80020ba:	4917      	ldr	r1, [pc, #92]	; (8002118 <PDM_Init+0xbc>)
 80020bc:	4b13      	ldr	r3, [pc, #76]	; (800210c <PDM_Init+0xb0>)
 80020be:	2209      	movs	r2, #9
 80020c0:	0018      	movs	r0, r3
 80020c2:	f001 f8d9 	bl	8003278 <HAL_ADC_Start_DMA>

    // Enable Channels
    for (device = pdm_devices; device < pdm_devices + NUM_ADC_CHANNELS; device++) {
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <PDM_Init+0xa0>)
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	e00e      	b.n	80020ea <PDM_Init+0x8e>
        if (device->state == NORMAL) {
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2220      	movs	r2, #32
 80020d0:	5c9b      	ldrb	r3, [r3, r2]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <PDM_Init+0x88>
            HAL_GPIO_WritePin(GPIO_CONTROL_PORT, device->gpio_control_pin, GPIO_PIN_SET);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	8a5b      	ldrh	r3, [r3, #18]
 80020da:	4810      	ldr	r0, [pc, #64]	; (800211c <PDM_Init+0xc0>)
 80020dc:	2201      	movs	r2, #1
 80020de:	0019      	movs	r1, r3
 80020e0:	f002 fa1a 	bl	8004518 <HAL_GPIO_WritePin>
    for (device = pdm_devices; device < pdm_devices + NUM_ADC_CHANNELS; device++) {
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3328      	adds	r3, #40	; 0x28
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <PDM_Init+0xc4>)
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d3ec      	bcc.n	80020cc <PDM_Init+0x70>
        }

    }

}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	46bd      	mov	sp, r7
 80020f6:	b002      	add	sp, #8
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	200000c8 	.word	0x200000c8
 8002100:	20000000 	.word	0x20000000
 8002104:	20000028 	.word	0x20000028
 8002108:	20000050 	.word	0x20000050
 800210c:	20001b8c 	.word	0x20001b8c
 8002110:	20001a54 	.word	0x20001a54
 8002114:	20001bcc 	.word	0x20001bcc
 8002118:	200000a8 	.word	0x200000a8
 800211c:	48000400 	.word	0x48000400
 8002120:	20000140 	.word	0x20000140

08002124 <Schedule_ADC>:



void Schedule_ADC(void) {
 8002124:	b5b0      	push	{r4, r5, r7, lr}
 8002126:	b08e      	sub	sp, #56	; 0x38
 8002128:	af00      	add	r7, sp, #0
    double          load_current;                           // in milliamps
    double          voltage;                                // in Volts
    PDM_Device_t*   device;

    while (1) {
        if (conv_cplt_flag) {
 800212a:	4b7e      	ldr	r3, [pc, #504]	; (8002324 <Schedule_ADC+0x200>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0fb      	beq.n	800212a <Schedule_ADC+0x6>
            conv_cplt_flag = 0; // reset flag before DMA start so sw wont clear flag after interrupt
 8002132:	4b7c      	ldr	r3, [pc, #496]	; (8002324 <Schedule_ADC+0x200>)
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]

            // save averaged (filtered) current data so DMA doesnt overwrite it
            for (i = 0, adc_val = averaged_buffer; i < NUM_ADC_CHANNELS; adc_val++, i++) {
 8002138:	232f      	movs	r3, #47	; 0x2f
 800213a:	2208      	movs	r2, #8
 800213c:	4694      	mov	ip, r2
 800213e:	44bc      	add	ip, r7
 8002140:	4463      	add	r3, ip
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	4b78      	ldr	r3, [pc, #480]	; (8002328 <Schedule_ADC+0x204>)
 8002148:	633b      	str	r3, [r7, #48]	; 0x30
 800214a:	e013      	b.n	8002174 <Schedule_ADC+0x50>
                temp_current_buffer[i] = *adc_val;
 800214c:	202f      	movs	r0, #47	; 0x2f
 800214e:	2408      	movs	r4, #8
 8002150:	193b      	adds	r3, r7, r4
 8002152:	181b      	adds	r3, r3, r0
 8002154:	781a      	ldrb	r2, [r3, #0]
 8002156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002158:	8819      	ldrh	r1, [r3, #0]
 800215a:	193b      	adds	r3, r7, r4
 800215c:	0052      	lsls	r2, r2, #1
 800215e:	52d1      	strh	r1, [r2, r3]
            for (i = 0, adc_val = averaged_buffer; i < NUM_ADC_CHANNELS; adc_val++, i++) {
 8002160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002162:	3302      	adds	r3, #2
 8002164:	633b      	str	r3, [r7, #48]	; 0x30
 8002166:	193b      	adds	r3, r7, r4
 8002168:	181b      	adds	r3, r3, r0
 800216a:	781a      	ldrb	r2, [r3, #0]
 800216c:	193b      	adds	r3, r7, r4
 800216e:	181b      	adds	r3, r3, r0
 8002170:	3201      	adds	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	232f      	movs	r3, #47	; 0x2f
 8002176:	2208      	movs	r2, #8
 8002178:	4694      	mov	ip, r2
 800217a:	44bc      	add	ip, r7
 800217c:	4463      	add	r3, ip
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d9e3      	bls.n	800214c <Schedule_ADC+0x28>
            }
            osDelay(10);
 8002184:	200a      	movs	r0, #10
 8002186:	f003 fef7 	bl	8005f78 <osDelay>
            // timestamp now so DMA doesnt restart timer on interrupt
            timer_val = htim16.Instance->CNT + (CURRENT_BUFFER_SIZE * ADC_US_PER_SAMPLE); // adjust for ADC conversion time
 800218a:	4b68      	ldr	r3, [pc, #416]	; (800232c <Schedule_ADC+0x208>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	3309      	adds	r3, #9
 8002192:	0018      	movs	r0, r3
 8002194:	f7ff feb2 	bl	8001efc <__aeabi_ui2d>
 8002198:	0003      	movs	r3, r0
 800219a:	000c      	movs	r4, r1
 800219c:	623b      	str	r3, [r7, #32]
 800219e:	627c      	str	r4, [r7, #36]	; 0x24


            HAL_ADC_Start_DMA(&hadc, (uint32_t*) current_buffer, CURRENT_BUFFER_SIZE);
 80021a0:	4963      	ldr	r1, [pc, #396]	; (8002330 <Schedule_ADC+0x20c>)
 80021a2:	4b64      	ldr	r3, [pc, #400]	; (8002334 <Schedule_ADC+0x210>)
 80021a4:	2209      	movs	r2, #9
 80021a6:	0018      	movs	r0, r3
 80021a8:	f001 f866 	bl	8003278 <HAL_ADC_Start_DMA>

            // do math while ADC goes brrrrrr

            for (adc_val = temp_current_buffer, device = pdm_devices;
 80021ac:	2308      	movs	r3, #8
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	633b      	str	r3, [r7, #48]	; 0x30
 80021b2:	4b61      	ldr	r3, [pc, #388]	; (8002338 <Schedule_ADC+0x214>)
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021b6:	e080      	b.n	80022ba <Schedule_ADC+0x196>
                                                device < pdm_devices + NUM_ADC_CHANNELS; adc_val++, device++) {
                // Skip calculation of integral for special devices
                if (!(device->device_name == TEMP_SENSOR || device->device_name == SPECIAL_DEVICE)) {
 80021b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ba:	2221      	movs	r2, #33	; 0x21
 80021bc:	5c9b      	ldrb	r3, [r3, r2]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d100      	bne.n	80021c4 <Schedule_ADC+0xa0>
 80021c2:	e074      	b.n	80022ae <Schedule_ADC+0x18a>
 80021c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c6:	2221      	movs	r2, #33	; 0x21
 80021c8:	5c9b      	ldrb	r3, [r3, r2]
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d06f      	beq.n	80022ae <Schedule_ADC+0x18a>
                    voltage = (ADC_REF_VOLTAGE * (*adc_val)) / MAX_12b_ADC_VAL;
 80021ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	0018      	movs	r0, r3
 80021d4:	f7ff fe58 	bl	8001e88 <__aeabi_i2d>
 80021d8:	4a58      	ldr	r2, [pc, #352]	; (800233c <Schedule_ADC+0x218>)
 80021da:	4b59      	ldr	r3, [pc, #356]	; (8002340 <Schedule_ADC+0x21c>)
 80021dc:	f7ff f89a 	bl	8001314 <__aeabi_dmul>
 80021e0:	0003      	movs	r3, r0
 80021e2:	000c      	movs	r4, r1
 80021e4:	0018      	movs	r0, r3
 80021e6:	0021      	movs	r1, r4
 80021e8:	2200      	movs	r2, #0
 80021ea:	4b56      	ldr	r3, [pc, #344]	; (8002344 <Schedule_ADC+0x220>)
 80021ec:	f7fe fc88 	bl	8000b00 <__aeabi_ddiv>
 80021f0:	0003      	movs	r3, r0
 80021f2:	000c      	movs	r4, r1
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	61fc      	str	r4, [r7, #28]
                    load_current = ((voltage * device->device_fet_IL_IS_ratio) / device->channel_resistor_val) * MA_IN_A;
 80021f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fa:	8b1b      	ldrh	r3, [r3, #24]
 80021fc:	0018      	movs	r0, r3
 80021fe:	f7ff fe43 	bl	8001e88 <__aeabi_i2d>
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f7ff f885 	bl	8001314 <__aeabi_dmul>
 800220a:	0003      	movs	r3, r0
 800220c:	000c      	movs	r4, r1
 800220e:	0025      	movs	r5, r4
 8002210:	001c      	movs	r4, r3
 8002212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	0018      	movs	r0, r3
 8002218:	f7ff fe70 	bl	8001efc <__aeabi_ui2d>
 800221c:	0002      	movs	r2, r0
 800221e:	000b      	movs	r3, r1
 8002220:	0020      	movs	r0, r4
 8002222:	0029      	movs	r1, r5
 8002224:	f7fe fc6c 	bl	8000b00 <__aeabi_ddiv>
 8002228:	0003      	movs	r3, r0
 800222a:	000c      	movs	r4, r1
 800222c:	0018      	movs	r0, r3
 800222e:	0021      	movs	r1, r4
 8002230:	2200      	movs	r2, #0
 8002232:	4b45      	ldr	r3, [pc, #276]	; (8002348 <Schedule_ADC+0x224>)
 8002234:	f7ff f86e 	bl	8001314 <__aeabi_dmul>
 8002238:	0003      	movs	r3, r0
 800223a:	000c      	movs	r4, r1
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	617c      	str	r4, [r7, #20]
                    device->channel_integral += (load_current - device->channel_setpoint) *  (timer_val / US_IN_S);
 8002240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002242:	689c      	ldr	r4, [r3, #8]
 8002244:	68dd      	ldr	r5, [r3, #12]
 8002246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002248:	8a9b      	ldrh	r3, [r3, #20]
 800224a:	0018      	movs	r0, r3
 800224c:	f7ff fe1c 	bl	8001e88 <__aeabi_i2d>
 8002250:	0002      	movs	r2, r0
 8002252:	000b      	movs	r3, r1
 8002254:	6938      	ldr	r0, [r7, #16]
 8002256:	6979      	ldr	r1, [r7, #20]
 8002258:	f7ff face 	bl	80017f8 <__aeabi_dsub>
 800225c:	0002      	movs	r2, r0
 800225e:	000b      	movs	r3, r1
 8002260:	603a      	str	r2, [r7, #0]
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	4b39      	ldr	r3, [pc, #228]	; (800234c <Schedule_ADC+0x228>)
 8002268:	6a38      	ldr	r0, [r7, #32]
 800226a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800226c:	f7fe fc48 	bl	8000b00 <__aeabi_ddiv>
 8002270:	0002      	movs	r2, r0
 8002272:	000b      	movs	r3, r1
 8002274:	6838      	ldr	r0, [r7, #0]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	f7ff f84c 	bl	8001314 <__aeabi_dmul>
 800227c:	0002      	movs	r2, r0
 800227e:	000b      	movs	r3, r1
 8002280:	0020      	movs	r0, r4
 8002282:	0029      	movs	r1, r5
 8002284:	f7fe f920 	bl	80004c8 <__aeabi_dadd>
 8002288:	0003      	movs	r3, r0
 800228a:	000c      	movs	r4, r1
 800228c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800228e:	6093      	str	r3, [r2, #8]
 8002290:	60d4      	str	r4, [r2, #12]

                    if (device->channel_integral < 0) {
 8002292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002294:	6898      	ldr	r0, [r3, #8]
 8002296:	68d9      	ldr	r1, [r3, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	2300      	movs	r3, #0
 800229c:	f7fd ffd6 	bl	800024c <__aeabi_dcmplt>
 80022a0:	1e03      	subs	r3, r0, #0
 80022a2:	d004      	beq.n	80022ae <Schedule_ADC+0x18a>
                        device->channel_integral = 0;
 80022a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a6:	2300      	movs	r3, #0
 80022a8:	2400      	movs	r4, #0
 80022aa:	6093      	str	r3, [r2, #8]
 80022ac:	60d4      	str	r4, [r2, #12]
                                                device < pdm_devices + NUM_ADC_CHANNELS; adc_val++, device++) {
 80022ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b0:	3302      	adds	r3, #2
 80022b2:	633b      	str	r3, [r7, #48]	; 0x30
 80022b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b6:	3328      	adds	r3, #40	; 0x28
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ba:	4b25      	ldr	r3, [pc, #148]	; (8002350 <Schedule_ADC+0x22c>)
            for (adc_val = temp_current_buffer, device = pdm_devices;
 80022bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022be:	429a      	cmp	r2, r3
 80022c0:	d200      	bcs.n	80022c4 <Schedule_ADC+0x1a0>
 80022c2:	e779      	b.n	80021b8 <Schedule_ADC+0x94>
                    }
                }
            }
            num_interrupts++;
 80022c4:	4b23      	ldr	r3, [pc, #140]	; (8002354 <Schedule_ADC+0x230>)
 80022c6:	685c      	ldr	r4, [r3, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2101      	movs	r1, #1
 80022cc:	2200      	movs	r2, #0
 80022ce:	185b      	adds	r3, r3, r1
 80022d0:	4154      	adcs	r4, r2
 80022d2:	4a20      	ldr	r2, [pc, #128]	; (8002354 <Schedule_ADC+0x230>)
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	6054      	str	r4, [r2, #4]
            total_time += timer_val;
 80022d8:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <Schedule_ADC+0x234>)
 80022da:	685c      	ldr	r4, [r3, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	0018      	movs	r0, r3
 80022e0:	0021      	movs	r1, r4
 80022e2:	f7fe f819 	bl	8000318 <__aeabi_ul2d>
 80022e6:	6a3a      	ldr	r2, [r7, #32]
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	f7fe f8ed 	bl	80004c8 <__aeabi_dadd>
 80022ee:	0003      	movs	r3, r0
 80022f0:	000c      	movs	r4, r1
 80022f2:	0018      	movs	r0, r3
 80022f4:	0021      	movs	r1, r4
 80022f6:	f7fd fff1 	bl	80002dc <__aeabi_d2ulz>
 80022fa:	0003      	movs	r3, r0
 80022fc:	000c      	movs	r4, r1
 80022fe:	4a16      	ldr	r2, [pc, #88]	; (8002358 <Schedule_ADC+0x234>)
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	6054      	str	r4, [r2, #4]
            average_time_val = total_time / num_interrupts;
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <Schedule_ADC+0x234>)
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	6859      	ldr	r1, [r3, #4]
 800230a:	4b12      	ldr	r3, [pc, #72]	; (8002354 <Schedule_ADC+0x230>)
 800230c:	685c      	ldr	r4, [r3, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	001a      	movs	r2, r3
 8002312:	0023      	movs	r3, r4
 8002314:	f7fd ffc2 	bl	800029c <__aeabi_uldivmod>
 8002318:	0003      	movs	r3, r0
 800231a:	000c      	movs	r4, r1
 800231c:	b29a      	uxth	r2, r3
 800231e:	4b0f      	ldr	r3, [pc, #60]	; (800235c <Schedule_ADC+0x238>)
 8002320:	801a      	strh	r2, [r3, #0]
        if (conv_cplt_flag) {
 8002322:	e702      	b.n	800212a <Schedule_ADC+0x6>
 8002324:	200000a4 	.word	0x200000a4
 8002328:	200000bc 	.word	0x200000bc
 800232c:	20001bcc 	.word	0x20001bcc
 8002330:	200000a8 	.word	0x200000a8
 8002334:	20001b8c 	.word	0x20001b8c
 8002338:	200000c8 	.word	0x200000c8
 800233c:	66666666 	.word	0x66666666
 8002340:	400a6666 	.word	0x400a6666
 8002344:	40b00000 	.word	0x40b00000
 8002348:	408f4000 	.word	0x408f4000
 800234c:	412e8480 	.word	0x412e8480
 8002350:	20000140 	.word	0x20000140
 8002354:	20000148 	.word	0x20000148
 8002358:	20000140 	.word	0x20000140
 800235c:	20000150 	.word	0x20000150

08002360 <Current_Control_Loop>:
    }
}



void Current_Control_Loop(void) {
 8002360:	b5b0      	push	{r4, r5, r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
    U16           time_ref;
    U16           curr_time;
    U16           time_diff;
    PDM_Device_t* device;

    device = pdm_devices;
 8002366:	4b4a      	ldr	r3, [pc, #296]	; (8002490 <Current_Control_Loop+0x130>)
 8002368:	60bb      	str	r3, [r7, #8]
    // Infinite loop cycles through NUM_ADC_CHANNELS state machines, one for each channel
    while (1) {
        // special device handling code
        if (device->device_name == TEMP_SENSOR) {
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2221      	movs	r2, #33	; 0x21
 800236e:	5c9b      	ldrb	r3, [r3, r2]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d100      	bne.n	8002376 <Current_Control_Loop+0x16>
 8002374:	e080      	b.n	8002478 <Current_Control_Loop+0x118>
            ;
        }
        else if (device->device_name == SPECIAL_DEVICE)  {
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2221      	movs	r2, #33	; 0x21
 800237a:	5c9b      	ldrb	r3, [r3, r2]
 800237c:	2b04      	cmp	r3, #4
 800237e:	d100      	bne.n	8002382 <Current_Control_Loop+0x22>
 8002380:	e07a      	b.n	8002478 <Current_Control_Loop+0x118>
            ;
        }
        // Regular overcurrent handling
        else {
            switch (device->state) {
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2220      	movs	r2, #32
 8002386:	5c9b      	ldrb	r3, [r3, r2]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d005      	beq.n	8002398 <Current_Control_Loop+0x38>
 800238c:	2b02      	cmp	r3, #2
 800238e:	d100      	bne.n	8002392 <Current_Control_Loop+0x32>
 8002390:	e06f      	b.n	8002472 <Current_Control_Loop+0x112>
 8002392:	2b00      	cmp	r3, #0
 8002394:	d038      	beq.n	8002408 <Current_Control_Loop+0xa8>
 8002396:	e069      	b.n	800246c <Current_Control_Loop+0x10c>
                case PERMANENT_OFF:
                    break;

                case RESTART_OFF:
                    curr_time = htim17.Instance->CNT;
 8002398:	4b3e      	ldr	r3, [pc, #248]	; (8002494 <Current_Control_Loop+0x134>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800239e:	1dbb      	adds	r3, r7, #6
 80023a0:	801a      	strh	r2, [r3, #0]
                    time_ref = device->restart_timeout_ref; // assign to local so not looking up multiple times
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	8a12      	ldrh	r2, [r2, #16]
 80023a8:	801a      	strh	r2, [r3, #0]
                    if (curr_time < time_ref) {
 80023aa:	1dba      	adds	r2, r7, #6
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	8812      	ldrh	r2, [r2, #0]
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d208      	bcs.n	80023c8 <Current_Control_Loop+0x68>
                        time_diff = (MAX_16b_TIMER_VALUE - time_ref) + curr_time;
 80023b6:	230e      	movs	r3, #14
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	1db9      	adds	r1, r7, #6
 80023bc:	1d3a      	adds	r2, r7, #4
 80023be:	8809      	ldrh	r1, [r1, #0]
 80023c0:	8812      	ldrh	r2, [r2, #0]
 80023c2:	1a8a      	subs	r2, r1, r2
 80023c4:	801a      	strh	r2, [r3, #0]
 80023c6:	e007      	b.n	80023d8 <Current_Control_Loop+0x78>
                    } else {
                        time_diff = curr_time - time_ref;
 80023c8:	230e      	movs	r3, #14
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	1db9      	adds	r1, r7, #6
 80023ce:	1d3a      	adds	r2, r7, #4
 80023d0:	8809      	ldrh	r1, [r1, #0]
 80023d2:	8812      	ldrh	r2, [r2, #0]
 80023d4:	1a8a      	subs	r2, r1, r2
 80023d6:	801a      	strh	r2, [r3, #0]
                    }

                    if (time_diff >= device->channel_restart_timeout) {
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	885b      	ldrh	r3, [r3, #2]
 80023dc:	220e      	movs	r2, #14
 80023de:	18ba      	adds	r2, r7, r2
 80023e0:	8812      	ldrh	r2, [r2, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d347      	bcc.n	8002476 <Current_Control_Loop+0x116>
                        // turn the channel back on
                        HAL_GPIO_WritePin(GPIO_CONTROL_PORT, device->gpio_control_pin, GPIO_PIN_SET);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	8a5b      	ldrh	r3, [r3, #18]
 80023ea:	482b      	ldr	r0, [pc, #172]	; (8002498 <Current_Control_Loop+0x138>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	0019      	movs	r1, r3
 80023f0:	f002 f892 	bl	8004518 <HAL_GPIO_WritePin>
                        device->channel_integral = 0;
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	2300      	movs	r3, #0
 80023f8:	2400      	movs	r4, #0
 80023fa:	6093      	str	r3, [r2, #8]
 80023fc:	60d4      	str	r4, [r2, #12]
                        device->state = NORMAL;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2220      	movs	r2, #32
 8002402:	2100      	movs	r1, #0
 8002404:	5499      	strb	r1, [r3, r2]
                    }
                    break;
 8002406:	e036      	b.n	8002476 <Current_Control_Loop+0x116>

                case NORMAL:
                        if (device->channel_integral >= device->max_channel_integral ) {
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	689c      	ldr	r4, [r3, #8]
 800240c:	68dd      	ldr	r5, [r3, #12]
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	8adb      	ldrh	r3, [r3, #22]
 8002412:	0018      	movs	r0, r3
 8002414:	f7ff fd38 	bl	8001e88 <__aeabi_i2d>
 8002418:	0002      	movs	r2, r0
 800241a:	000b      	movs	r3, r1
 800241c:	0020      	movs	r0, r4
 800241e:	0029      	movs	r1, r5
 8002420:	f7fd ff32 	bl	8000288 <__aeabi_dcmpge>
 8002424:	1e03      	subs	r3, r0, #0
 8002426:	d100      	bne.n	800242a <Current_Control_Loop+0xca>
                                device->state = RESTART_OFF;
                            } else {
                                device->state = PERMANENT_OFF;
                            }
                        }
                        break;
 8002428:	e026      	b.n	8002478 <Current_Control_Loop+0x118>
                            HAL_GPIO_WritePin(GPIO_CONTROL_PORT, device->gpio_control_pin, GPIO_PIN_RESET);
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	8a5b      	ldrh	r3, [r3, #18]
 800242e:	481a      	ldr	r0, [pc, #104]	; (8002498 <Current_Control_Loop+0x138>)
 8002430:	2200      	movs	r2, #0
 8002432:	0019      	movs	r1, r3
 8002434:	f002 f870 	bl	8004518 <HAL_GPIO_WritePin>
                            if (device->num_restart_attempts > 0) {
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d010      	beq.n	8002462 <Current_Control_Loop+0x102>
                                device->num_restart_attempts--;
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	3b01      	subs	r3, #1
 8002446:	b2da      	uxtb	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	701a      	strb	r2, [r3, #0]
                                device->restart_timeout_ref = htim17.Instance->CNT;
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <Current_Control_Loop+0x134>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	b29a      	uxth	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	821a      	strh	r2, [r3, #16]
                                device->state = RESTART_OFF;
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2220      	movs	r2, #32
 800245c:	2101      	movs	r1, #1
 800245e:	5499      	strb	r1, [r3, r2]
                        break;
 8002460:	e00a      	b.n	8002478 <Current_Control_Loop+0x118>
                                device->state = PERMANENT_OFF;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2220      	movs	r2, #32
 8002466:	2102      	movs	r1, #2
 8002468:	5499      	strb	r1, [r3, r2]
                        break;
 800246a:	e005      	b.n	8002478 <Current_Control_Loop+0x118>

                default:
                    // Should never get here
                    Error_Handler();
 800246c:	f000 fb38 	bl	8002ae0 <Error_Handler>
                    break;
 8002470:	e002      	b.n	8002478 <Current_Control_Loop+0x118>
                    break;
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	e000      	b.n	8002478 <Current_Control_Loop+0x118>
                    break;
 8002476:	46c0      	nop			; (mov r8, r8)
            }
        }

        //Log_CAN_Messages();

        device++;
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	3328      	adds	r3, #40	; 0x28
 800247c:	60bb      	str	r3, [r7, #8]
        if (device >= pdm_devices + NUM_ADC_CHANNELS) {
 800247e:	4b07      	ldr	r3, [pc, #28]	; (800249c <Current_Control_Loop+0x13c>)
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	429a      	cmp	r2, r3
 8002484:	d200      	bcs.n	8002488 <Current_Control_Loop+0x128>
 8002486:	e770      	b.n	800236a <Current_Control_Loop+0xa>
            device = pdm_devices;
 8002488:	4b01      	ldr	r3, [pc, #4]	; (8002490 <Current_Control_Loop+0x130>)
 800248a:	60bb      	str	r3, [r7, #8]
        if (device->device_name == TEMP_SENSOR) {
 800248c:	e76d      	b.n	800236a <Current_Control_Loop+0xa>
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	200000c8 	.word	0x200000c8
 8002494:	20001a54 	.word	0x20001a54
 8002498:	48000400 	.word	0x48000400
 800249c:	20000140 	.word	0x20000140

080024a0 <HAL_ADC_ConvCpltCallback>:
        // Unreachable
}


//********** Callbacks/ISRs **********/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *adc_handle) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
    // Need to find out if the OS interrupt has higher priority than this ISR, dont think so though
    // If this interrupt priorty is higher dont worry. if not, then some wacky stuff might happen
    // vTaskSuspendAll();

    // reset timer
    htim16.Instance->CNT = 0;
 80024a8:	4b2f      	ldr	r3, [pc, #188]	; (8002568 <HAL_ADC_ConvCpltCallback+0xc8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2200      	movs	r2, #0
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24

    // Stop DMA to stop interrupts
    HAL_ADC_Stop_DMA(&hadc);
 80024b0:	4b2e      	ldr	r3, [pc, #184]	; (800256c <HAL_ADC_ConvCpltCallback+0xcc>)
 80024b2:	0018      	movs	r0, r3
 80024b4:	f000 ff62 	bl	800337c <HAL_ADC_Stop_DMA>

    // 0 the average buffer
    for (current_ptr = averaged_buffer; current_ptr < averaged_buffer + NUM_ADC_CHANNELS; current_ptr++) {
 80024b8:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <HAL_ADC_ConvCpltCallback+0xd0>)
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	e005      	b.n	80024ca <HAL_ADC_ConvCpltCallback+0x2a>
        *current_ptr = 0;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2200      	movs	r2, #0
 80024c2:	801a      	strh	r2, [r3, #0]
    for (current_ptr = averaged_buffer; current_ptr < averaged_buffer + NUM_ADC_CHANNELS; current_ptr++) {
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	3302      	adds	r3, #2
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <HAL_ADC_ConvCpltCallback+0xd4>)
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d3f5      	bcc.n	80024be <HAL_ADC_ConvCpltCallback+0x1e>
    }

    // sum all samples into correct spot
    for (i = 0, current_ptr = current_buffer; current_ptr < current_buffer + CURRENT_BUFFER_SIZE; current_ptr++) {
 80024d2:	230f      	movs	r3, #15
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
 80024da:	4b27      	ldr	r3, [pc, #156]	; (8002578 <HAL_ADC_ConvCpltCallback+0xd8>)
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	e024      	b.n	800252a <HAL_ADC_ConvCpltCallback+0x8a>
        averaged_buffer[i] += *current_ptr;
 80024e0:	200f      	movs	r0, #15
 80024e2:	183b      	adds	r3, r7, r0
 80024e4:	781a      	ldrb	r2, [r3, #0]
 80024e6:	4b22      	ldr	r3, [pc, #136]	; (8002570 <HAL_ADC_ConvCpltCallback+0xd0>)
 80024e8:	0052      	lsls	r2, r2, #1
 80024ea:	5ad1      	ldrh	r1, [r2, r3]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	183a      	adds	r2, r7, r0
 80024f2:	7812      	ldrb	r2, [r2, #0]
 80024f4:	18cb      	adds	r3, r1, r3
 80024f6:	b299      	uxth	r1, r3
 80024f8:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <HAL_ADC_ConvCpltCallback+0xd0>)
 80024fa:	0052      	lsls	r2, r2, #1
 80024fc:	52d1      	strh	r1, [r2, r3]
        i++;
 80024fe:	183b      	adds	r3, r7, r0
 8002500:	781a      	ldrb	r2, [r3, #0]
 8002502:	183b      	adds	r3, r7, r0
 8002504:	3201      	adds	r2, #1
 8002506:	701a      	strb	r2, [r3, #0]
        if (i % (NUM_SAMPLES_PER_CHANNEL) == 0) {
 8002508:	183b      	adds	r3, r7, r0
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2103      	movs	r1, #3
 800250e:	0018      	movs	r0, r3
 8002510:	f7fd fe80 	bl	8000214 <__aeabi_uidivmod>
 8002514:	000b      	movs	r3, r1
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d103      	bne.n	8002524 <HAL_ADC_ConvCpltCallback+0x84>
            i = 0;
 800251c:	230f      	movs	r3, #15
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
    for (i = 0, current_ptr = current_buffer; current_ptr < current_buffer + CURRENT_BUFFER_SIZE; current_ptr++) {
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	3302      	adds	r3, #2
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	4b14      	ldr	r3, [pc, #80]	; (800257c <HAL_ADC_ConvCpltCallback+0xdc>)
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	429a      	cmp	r2, r3
 8002530:	d3d6      	bcc.n	80024e0 <HAL_ADC_ConvCpltCallback+0x40>
        }
    }

    // reuse current_ptr to spin through and divide the summations
    for (current_ptr = averaged_buffer; current_ptr < averaged_buffer + NUM_ADC_CHANNELS; current_ptr++) {
 8002532:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <HAL_ADC_ConvCpltCallback+0xd0>)
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	e00c      	b.n	8002552 <HAL_ADC_ConvCpltCallback+0xb2>
        *current_ptr /= NUM_SAMPLES_PER_CHANNEL;
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	2103      	movs	r1, #3
 800253e:	0018      	movs	r0, r3
 8002540:	f7fd fde2 	bl	8000108 <__udivsi3>
 8002544:	0003      	movs	r3, r0
 8002546:	b29a      	uxth	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	801a      	strh	r2, [r3, #0]
    for (current_ptr = averaged_buffer; current_ptr < averaged_buffer + NUM_ADC_CHANNELS; current_ptr++) {
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	3302      	adds	r3, #2
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <HAL_ADC_ConvCpltCallback+0xd4>)
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	429a      	cmp	r2, r3
 8002558:	d3ee      	bcc.n	8002538 <HAL_ADC_ConvCpltCallback+0x98>
    }

    // average buffer?
    conv_cplt_flag = 1;
 800255a:	4b09      	ldr	r3, [pc, #36]	; (8002580 <HAL_ADC_ConvCpltCallback+0xe0>)
 800255c:	2201      	movs	r2, #1
 800255e:	701a      	strb	r2, [r3, #0]

    //xTaskResumeAll(); only call if vTaskSuspendAll() is called
}
 8002560:	46c0      	nop			; (mov r8, r8)
 8002562:	46bd      	mov	sp, r7
 8002564:	b004      	add	sp, #16
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20001bcc 	.word	0x20001bcc
 800256c:	20001b8c 	.word	0x20001b8c
 8002570:	200000bc 	.word	0x200000bc
 8002574:	200000c2 	.word	0x200000c2
 8002578:	200000a8 	.word	0x200000a8
 800257c:	200000ba 	.word	0x200000ba
 8002580:	200000a4 	.word	0x200000a4

08002584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002588:	f000 fce4 	bl	8002f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800258c:	f000 f844 	bl	8002618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002590:	f000 f9e8 	bl	8002964 <MX_GPIO_Init>
  MX_DMA_Init();
 8002594:	f000 f9c8 	bl	8002928 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002598:	f000 f996 	bl	80028c8 <MX_USART2_UART_Init>
  MX_ADC_Init();
 800259c:	f000 f896 	bl	80026cc <MX_ADC_Init>
  MX_CAN_Init();
 80025a0:	f000 f90a 	bl	80027b8 <MX_CAN_Init>
  MX_TIM16_Init();
 80025a4:	f000 f93e 	bl	8002824 <MX_TIM16_Init>
  MX_TIM17_Init();
 80025a8:	f000 f964 	bl	8002874 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */



  // **** ALL CONFIG CALLS HERE***************************************
  PDM_Init();
 80025ac:	f7ff fd56 	bl	800205c <PDM_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80025b0:	f003 fbe0 	bl	8005d74 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Channel_control */
  Channel_controlHandle = osThreadNew(ADC_Channel_Control, NULL, &Channel_control_attributes);
 80025b4:	4a0f      	ldr	r2, [pc, #60]	; (80025f4 <main+0x70>)
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <main+0x74>)
 80025b8:	2100      	movs	r1, #0
 80025ba:	0018      	movs	r0, r3
 80025bc:	f003 fc34 	bl	8005e28 <osThreadNew>
 80025c0:	0002      	movs	r2, r0
 80025c2:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <main+0x78>)
 80025c4:	601a      	str	r2, [r3, #0]

  /* creation of CAN_TX_task */
  CAN_TX_taskHandle = osThreadNew(CAN_TX, NULL, &CAN_TX_task_attributes);
 80025c6:	4a0e      	ldr	r2, [pc, #56]	; (8002600 <main+0x7c>)
 80025c8:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <main+0x80>)
 80025ca:	2100      	movs	r1, #0
 80025cc:	0018      	movs	r0, r3
 80025ce:	f003 fc2b 	bl	8005e28 <osThreadNew>
 80025d2:	0002      	movs	r2, r0
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <main+0x84>)
 80025d6:	601a      	str	r2, [r3, #0]

  /* creation of ADC_scheduler */
  ADC_schedulerHandle = osThreadNew(ADC_Schedule_loop, NULL, &ADC_scheduler_attributes);
 80025d8:	4a0c      	ldr	r2, [pc, #48]	; (800260c <main+0x88>)
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <main+0x8c>)
 80025dc:	2100      	movs	r1, #0
 80025de:	0018      	movs	r0, r3
 80025e0:	f003 fc22 	bl	8005e28 <osThreadNew>
 80025e4:	0002      	movs	r2, r0
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <main+0x90>)
 80025e8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80025ea:	f003 fbef 	bl	8005dcc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Error_Handler();
 80025ee:	f000 fa77 	bl	8002ae0 <Error_Handler>
 80025f2:	e7fc      	b.n	80025ee <main+0x6a>
 80025f4:	08008314 	.word	0x08008314
 80025f8:	08002a89 	.word	0x08002a89
 80025fc:	20001abc 	.word	0x20001abc
 8002600:	08008338 	.word	0x08008338
 8002604:	08002a9b 	.word	0x08002a9b
 8002608:	20001ac0 	.word	0x20001ac0
 800260c:	0800835c 	.word	0x0800835c
 8002610:	08002aab 	.word	0x08002aab
 8002614:	20001ac4 	.word	0x20001ac4

08002618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b099      	sub	sp, #100	; 0x64
 800261c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800261e:	242c      	movs	r4, #44	; 0x2c
 8002620:	193b      	adds	r3, r7, r4
 8002622:	0018      	movs	r0, r3
 8002624:	2334      	movs	r3, #52	; 0x34
 8002626:	001a      	movs	r2, r3
 8002628:	2100      	movs	r1, #0
 800262a:	f005 fdec 	bl	8008206 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800262e:	231c      	movs	r3, #28
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	0018      	movs	r0, r3
 8002634:	2310      	movs	r3, #16
 8002636:	001a      	movs	r2, r3
 8002638:	2100      	movs	r1, #0
 800263a:	f005 fde4 	bl	8008206 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800263e:	003b      	movs	r3, r7
 8002640:	0018      	movs	r0, r3
 8002642:	231c      	movs	r3, #28
 8002644:	001a      	movs	r2, r3
 8002646:	2100      	movs	r1, #0
 8002648:	f005 fddd 	bl	8008206 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 800264c:	0021      	movs	r1, r4
 800264e:	187b      	adds	r3, r7, r1
 8002650:	2230      	movs	r2, #48	; 0x30
 8002652:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002654:	187b      	adds	r3, r7, r1
 8002656:	2201      	movs	r2, #1
 8002658:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800265a:	187b      	adds	r3, r7, r1
 800265c:	2201      	movs	r2, #1
 800265e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002660:	187b      	adds	r3, r7, r1
 8002662:	2210      	movs	r2, #16
 8002664:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002666:	187b      	adds	r3, r7, r1
 8002668:	2200      	movs	r2, #0
 800266a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800266c:	187b      	adds	r3, r7, r1
 800266e:	0018      	movs	r0, r3
 8002670:	f001 ff8a 	bl	8004588 <HAL_RCC_OscConfig>
 8002674:	1e03      	subs	r3, r0, #0
 8002676:	d001      	beq.n	800267c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002678:	f000 fa32 	bl	8002ae0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800267c:	211c      	movs	r1, #28
 800267e:	187b      	adds	r3, r7, r1
 8002680:	2207      	movs	r2, #7
 8002682:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8002684:	187b      	adds	r3, r7, r1
 8002686:	2203      	movs	r2, #3
 8002688:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800268a:	187b      	adds	r3, r7, r1
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002690:	187b      	adds	r3, r7, r1
 8002692:	2200      	movs	r2, #0
 8002694:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002696:	187b      	adds	r3, r7, r1
 8002698:	2101      	movs	r1, #1
 800269a:	0018      	movs	r0, r3
 800269c:	f002 fafa 	bl	8004c94 <HAL_RCC_ClockConfig>
 80026a0:	1e03      	subs	r3, r0, #0
 80026a2:	d001      	beq.n	80026a8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80026a4:	f000 fa1c 	bl	8002ae0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80026a8:	003b      	movs	r3, r7
 80026aa:	2202      	movs	r2, #2
 80026ac:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80026ae:	003b      	movs	r3, r7
 80026b0:	2200      	movs	r2, #0
 80026b2:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026b4:	003b      	movs	r3, r7
 80026b6:	0018      	movs	r0, r3
 80026b8:	f002 fc8e 	bl	8004fd8 <HAL_RCCEx_PeriphCLKConfig>
 80026bc:	1e03      	subs	r3, r0, #0
 80026be:	d001      	beq.n	80026c4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80026c0:	f000 fa0e 	bl	8002ae0 <Error_Handler>
  }
}
 80026c4:	46c0      	nop			; (mov r8, r8)
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b019      	add	sp, #100	; 0x64
 80026ca:	bd90      	pop	{r4, r7, pc}

080026cc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	0018      	movs	r0, r3
 80026d6:	230c      	movs	r3, #12
 80026d8:	001a      	movs	r2, r3
 80026da:	2100      	movs	r1, #0
 80026dc:	f005 fd93 	bl	8008206 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80026e0:	4b33      	ldr	r3, [pc, #204]	; (80027b0 <MX_ADC_Init+0xe4>)
 80026e2:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <MX_ADC_Init+0xe8>)
 80026e4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80026e6:	4b32      	ldr	r3, [pc, #200]	; (80027b0 <MX_ADC_Init+0xe4>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80026ec:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <MX_ADC_Init+0xe4>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026f2:	4b2f      	ldr	r3, [pc, #188]	; (80027b0 <MX_ADC_Init+0xe4>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80026f8:	4b2d      	ldr	r3, [pc, #180]	; (80027b0 <MX_ADC_Init+0xe4>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80026fe:	4b2c      	ldr	r3, [pc, #176]	; (80027b0 <MX_ADC_Init+0xe4>)
 8002700:	2208      	movs	r2, #8
 8002702:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002704:	4b2a      	ldr	r3, [pc, #168]	; (80027b0 <MX_ADC_Init+0xe4>)
 8002706:	2200      	movs	r2, #0
 8002708:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800270a:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <MX_ADC_Init+0xe4>)
 800270c:	2200      	movs	r2, #0
 800270e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002710:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <MX_ADC_Init+0xe4>)
 8002712:	2201      	movs	r2, #1
 8002714:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002716:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <MX_ADC_Init+0xe4>)
 8002718:	2200      	movs	r2, #0
 800271a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800271c:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <MX_ADC_Init+0xe4>)
 800271e:	22c2      	movs	r2, #194	; 0xc2
 8002720:	32ff      	adds	r2, #255	; 0xff
 8002722:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002724:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <MX_ADC_Init+0xe4>)
 8002726:	2200      	movs	r2, #0
 8002728:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800272a:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <MX_ADC_Init+0xe4>)
 800272c:	2224      	movs	r2, #36	; 0x24
 800272e:	2101      	movs	r1, #1
 8002730:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002732:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <MX_ADC_Init+0xe4>)
 8002734:	2200      	movs	r2, #0
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002738:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <MX_ADC_Init+0xe4>)
 800273a:	0018      	movs	r0, r3
 800273c:	f000 fc5c 	bl	8002ff8 <HAL_ADC_Init>
 8002740:	1e03      	subs	r3, r0, #0
 8002742:	d001      	beq.n	8002748 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002744:	f000 f9cc 	bl	8002ae0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	2280      	movs	r2, #128	; 0x80
 8002752:	0152      	lsls	r2, r2, #5
 8002754:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	2280      	movs	r2, #128	; 0x80
 800275a:	0552      	lsls	r2, r2, #21
 800275c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800275e:	1d3a      	adds	r2, r7, #4
 8002760:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <MX_ADC_Init+0xe4>)
 8002762:	0011      	movs	r1, r2
 8002764:	0018      	movs	r0, r3
 8002766:	f000 fe87 	bl	8003478 <HAL_ADC_ConfigChannel>
 800276a:	1e03      	subs	r3, r0, #0
 800276c:	d001      	beq.n	8002772 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800276e:	f000 f9b7 	bl	8002ae0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	2201      	movs	r2, #1
 8002776:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002778:	1d3a      	adds	r2, r7, #4
 800277a:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <MX_ADC_Init+0xe4>)
 800277c:	0011      	movs	r1, r2
 800277e:	0018      	movs	r0, r3
 8002780:	f000 fe7a 	bl	8003478 <HAL_ADC_ConfigChannel>
 8002784:	1e03      	subs	r3, r0, #0
 8002786:	d001      	beq.n	800278c <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8002788:	f000 f9aa 	bl	8002ae0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	2204      	movs	r2, #4
 8002790:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002792:	1d3a      	adds	r2, r7, #4
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <MX_ADC_Init+0xe4>)
 8002796:	0011      	movs	r1, r2
 8002798:	0018      	movs	r0, r3
 800279a:	f000 fe6d 	bl	8003478 <HAL_ADC_ConfigChannel>
 800279e:	1e03      	subs	r3, r0, #0
 80027a0:	d001      	beq.n	80027a6 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80027a2:	f000 f99d 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b004      	add	sp, #16
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	20001b8c 	.word	0x20001b8c
 80027b4:	40012400 	.word	0x40012400

080027b8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80027bc:	4b17      	ldr	r3, [pc, #92]	; (800281c <MX_CAN_Init+0x64>)
 80027be:	4a18      	ldr	r2, [pc, #96]	; (8002820 <MX_CAN_Init+0x68>)
 80027c0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 80027c2:	4b16      	ldr	r3, [pc, #88]	; (800281c <MX_CAN_Init+0x64>)
 80027c4:	2206      	movs	r2, #6
 80027c6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80027c8:	4b14      	ldr	r3, [pc, #80]	; (800281c <MX_CAN_Init+0x64>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80027ce:	4b13      	ldr	r3, [pc, #76]	; (800281c <MX_CAN_Init+0x64>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80027d4:	4b11      	ldr	r3, [pc, #68]	; (800281c <MX_CAN_Init+0x64>)
 80027d6:	22a0      	movs	r2, #160	; 0xa0
 80027d8:	02d2      	lsls	r2, r2, #11
 80027da:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80027dc:	4b0f      	ldr	r3, [pc, #60]	; (800281c <MX_CAN_Init+0x64>)
 80027de:	2200      	movs	r2, #0
 80027e0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <MX_CAN_Init+0x64>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <MX_CAN_Init+0x64>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80027ee:	4b0b      	ldr	r3, [pc, #44]	; (800281c <MX_CAN_Init+0x64>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80027f4:	4b09      	ldr	r3, [pc, #36]	; (800281c <MX_CAN_Init+0x64>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <MX_CAN_Init+0x64>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <MX_CAN_Init+0x64>)
 8002802:	2200      	movs	r2, #0
 8002804:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002806:	4b05      	ldr	r3, [pc, #20]	; (800281c <MX_CAN_Init+0x64>)
 8002808:	0018      	movs	r0, r3
 800280a:	f001 f991 	bl	8003b30 <HAL_CAN_Init>
 800280e:	1e03      	subs	r3, r0, #0
 8002810:	d001      	beq.n	8002816 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8002812:	f000 f965 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20001a94 	.word	0x20001a94
 8002820:	40006400 	.word	0x40006400

08002824 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <MX_TIM16_Init+0x44>)
 800282a:	4a10      	ldr	r2, [pc, #64]	; (800286c <MX_TIM16_Init+0x48>)
 800282c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48;
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <MX_TIM16_Init+0x44>)
 8002830:	2230      	movs	r2, #48	; 0x30
 8002832:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <MX_TIM16_Init+0x44>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <MX_TIM16_Init+0x44>)
 800283c:	4a0c      	ldr	r2, [pc, #48]	; (8002870 <MX_TIM16_Init+0x4c>)
 800283e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <MX_TIM16_Init+0x44>)
 8002842:	2200      	movs	r2, #0
 8002844:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <MX_TIM16_Init+0x44>)
 8002848:	2200      	movs	r2, #0
 800284a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <MX_TIM16_Init+0x44>)
 800284e:	2200      	movs	r2, #0
 8002850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <MX_TIM16_Init+0x44>)
 8002854:	0018      	movs	r0, r3
 8002856:	f002 fcbf 	bl	80051d8 <HAL_TIM_Base_Init>
 800285a:	1e03      	subs	r3, r0, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800285e:	f000 f93f 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20001bcc 	.word	0x20001bcc
 800286c:	40014400 	.word	0x40014400
 8002870:	0000ffff 	.word	0x0000ffff

08002874 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002878:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <MX_TIM17_Init+0x44>)
 800287a:	4a10      	ldr	r2, [pc, #64]	; (80028bc <MX_TIM17_Init+0x48>)
 800287c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48000;
 800287e:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <MX_TIM17_Init+0x44>)
 8002880:	4a0f      	ldr	r2, [pc, #60]	; (80028c0 <MX_TIM17_Init+0x4c>)
 8002882:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <MX_TIM17_Init+0x44>)
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800288a:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <MX_TIM17_Init+0x44>)
 800288c:	4a0d      	ldr	r2, [pc, #52]	; (80028c4 <MX_TIM17_Init+0x50>)
 800288e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002890:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <MX_TIM17_Init+0x44>)
 8002892:	2200      	movs	r2, #0
 8002894:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002896:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <MX_TIM17_Init+0x44>)
 8002898:	2200      	movs	r2, #0
 800289a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <MX_TIM17_Init+0x44>)
 800289e:	2200      	movs	r2, #0
 80028a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <MX_TIM17_Init+0x44>)
 80028a4:	0018      	movs	r0, r3
 80028a6:	f002 fc97 	bl	80051d8 <HAL_TIM_Base_Init>
 80028aa:	1e03      	subs	r3, r0, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80028ae:	f000 f917 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20001a54 	.word	0x20001a54
 80028bc:	40014800 	.word	0x40014800
 80028c0:	0000bb80 	.word	0x0000bb80
 80028c4:	0000ffff 	.word	0x0000ffff

080028c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028cc:	4b14      	ldr	r3, [pc, #80]	; (8002920 <MX_USART2_UART_Init+0x58>)
 80028ce:	4a15      	ldr	r2, [pc, #84]	; (8002924 <MX_USART2_UART_Init+0x5c>)
 80028d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80028d2:	4b13      	ldr	r3, [pc, #76]	; (8002920 <MX_USART2_UART_Init+0x58>)
 80028d4:	2296      	movs	r2, #150	; 0x96
 80028d6:	0212      	lsls	r2, r2, #8
 80028d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <MX_USART2_UART_Init+0x58>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <MX_USART2_UART_Init+0x58>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <MX_USART2_UART_Init+0x58>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <MX_USART2_UART_Init+0x58>)
 80028ee:	220c      	movs	r2, #12
 80028f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <MX_USART2_UART_Init+0x58>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <MX_USART2_UART_Init+0x58>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <MX_USART2_UART_Init+0x58>)
 8002900:	2200      	movs	r2, #0
 8002902:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <MX_USART2_UART_Init+0x58>)
 8002906:	2200      	movs	r2, #0
 8002908:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <MX_USART2_UART_Init+0x58>)
 800290c:	0018      	movs	r0, r3
 800290e:	f002 fe99 	bl	8005644 <HAL_UART_Init>
 8002912:	1e03      	subs	r3, r0, #0
 8002914:	d001      	beq.n	800291a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002916:	f000 f8e3 	bl	8002ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20001ac8 	.word	0x20001ac8
 8002924:	40004400 	.word	0x40004400

08002928 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <MX_DMA_Init+0x38>)
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <MX_DMA_Init+0x38>)
 8002934:	2101      	movs	r1, #1
 8002936:	430a      	orrs	r2, r1
 8002938:	615a      	str	r2, [r3, #20]
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <MX_DMA_Init+0x38>)
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	2201      	movs	r2, #1
 8002940:	4013      	ands	r3, r2
 8002942:	607b      	str	r3, [r7, #4]
 8002944:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8002946:	2200      	movs	r2, #0
 8002948:	2103      	movs	r1, #3
 800294a:	2009      	movs	r0, #9
 800294c:	f001 fa76 	bl	8003e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002950:	2009      	movs	r0, #9
 8002952:	f001 fa88 	bl	8003e66 <HAL_NVIC_EnableIRQ>

}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	46bd      	mov	sp, r7
 800295a:	b002      	add	sp, #8
 800295c:	bd80      	pop	{r7, pc}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	40021000 	.word	0x40021000

08002964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002964:	b590      	push	{r4, r7, lr}
 8002966:	b08b      	sub	sp, #44	; 0x2c
 8002968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296a:	2414      	movs	r4, #20
 800296c:	193b      	adds	r3, r7, r4
 800296e:	0018      	movs	r0, r3
 8002970:	2314      	movs	r3, #20
 8002972:	001a      	movs	r2, r3
 8002974:	2100      	movs	r1, #0
 8002976:	f005 fc46 	bl	8008206 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800297a:	4b3f      	ldr	r3, [pc, #252]	; (8002a78 <MX_GPIO_Init+0x114>)
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	4b3e      	ldr	r3, [pc, #248]	; (8002a78 <MX_GPIO_Init+0x114>)
 8002980:	2180      	movs	r1, #128	; 0x80
 8002982:	0309      	lsls	r1, r1, #12
 8002984:	430a      	orrs	r2, r1
 8002986:	615a      	str	r2, [r3, #20]
 8002988:	4b3b      	ldr	r3, [pc, #236]	; (8002a78 <MX_GPIO_Init+0x114>)
 800298a:	695a      	ldr	r2, [r3, #20]
 800298c:	2380      	movs	r3, #128	; 0x80
 800298e:	031b      	lsls	r3, r3, #12
 8002990:	4013      	ands	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002996:	4b38      	ldr	r3, [pc, #224]	; (8002a78 <MX_GPIO_Init+0x114>)
 8002998:	695a      	ldr	r2, [r3, #20]
 800299a:	4b37      	ldr	r3, [pc, #220]	; (8002a78 <MX_GPIO_Init+0x114>)
 800299c:	2180      	movs	r1, #128	; 0x80
 800299e:	03c9      	lsls	r1, r1, #15
 80029a0:	430a      	orrs	r2, r1
 80029a2:	615a      	str	r2, [r3, #20]
 80029a4:	4b34      	ldr	r3, [pc, #208]	; (8002a78 <MX_GPIO_Init+0x114>)
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	2380      	movs	r3, #128	; 0x80
 80029aa:	03db      	lsls	r3, r3, #15
 80029ac:	4013      	ands	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <MX_GPIO_Init+0x114>)
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	4b30      	ldr	r3, [pc, #192]	; (8002a78 <MX_GPIO_Init+0x114>)
 80029b8:	2180      	movs	r1, #128	; 0x80
 80029ba:	0289      	lsls	r1, r1, #10
 80029bc:	430a      	orrs	r2, r1
 80029be:	615a      	str	r2, [r3, #20]
 80029c0:	4b2d      	ldr	r3, [pc, #180]	; (8002a78 <MX_GPIO_Init+0x114>)
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	029b      	lsls	r3, r3, #10
 80029c8:	4013      	ands	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ce:	4b2a      	ldr	r3, [pc, #168]	; (8002a78 <MX_GPIO_Init+0x114>)
 80029d0:	695a      	ldr	r2, [r3, #20]
 80029d2:	4b29      	ldr	r3, [pc, #164]	; (8002a78 <MX_GPIO_Init+0x114>)
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	02c9      	lsls	r1, r1, #11
 80029d8:	430a      	orrs	r2, r1
 80029da:	615a      	str	r2, [r3, #20]
 80029dc:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <MX_GPIO_Init+0x114>)
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	02db      	lsls	r3, r3, #11
 80029e4:	4013      	ands	r3, r2
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80029ea:	2390      	movs	r3, #144	; 0x90
 80029ec:	05db      	lsls	r3, r3, #23
 80029ee:	2200      	movs	r2, #0
 80029f0:	2120      	movs	r1, #32
 80029f2:	0018      	movs	r0, r3
 80029f4:	f001 fd90 	bl	8004518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80029f8:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <MX_GPIO_Init+0x118>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	2138      	movs	r1, #56	; 0x38
 80029fe:	0018      	movs	r0, r3
 8002a00:	f001 fd8a 	bl	8004518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a04:	193b      	adds	r3, r7, r4
 8002a06:	2280      	movs	r2, #128	; 0x80
 8002a08:	0192      	lsls	r2, r2, #6
 8002a0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	4a1c      	ldr	r2, [pc, #112]	; (8002a80 <MX_GPIO_Init+0x11c>)
 8002a10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a18:	193b      	adds	r3, r7, r4
 8002a1a:	4a1a      	ldr	r2, [pc, #104]	; (8002a84 <MX_GPIO_Init+0x120>)
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	0010      	movs	r0, r2
 8002a20:	f001 fc02 	bl	8004228 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002a24:	193b      	adds	r3, r7, r4
 8002a26:	2220      	movs	r2, #32
 8002a28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a2a:	193b      	adds	r3, r7, r4
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	193b      	adds	r3, r7, r4
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a36:	193b      	adds	r3, r7, r4
 8002a38:	2200      	movs	r2, #0
 8002a3a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002a3c:	193a      	adds	r2, r7, r4
 8002a3e:	2390      	movs	r3, #144	; 0x90
 8002a40:	05db      	lsls	r3, r3, #23
 8002a42:	0011      	movs	r1, r2
 8002a44:	0018      	movs	r0, r3
 8002a46:	f001 fbef 	bl	8004228 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002a4a:	0021      	movs	r1, r4
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	2238      	movs	r2, #56	; 0x38
 8002a50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	2201      	movs	r2, #1
 8002a56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	2200      	movs	r2, #0
 8002a62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	4a05      	ldr	r2, [pc, #20]	; (8002a7c <MX_GPIO_Init+0x118>)
 8002a68:	0019      	movs	r1, r3
 8002a6a:	0010      	movs	r0, r2
 8002a6c:	f001 fbdc 	bl	8004228 <HAL_GPIO_Init>

}
 8002a70:	46c0      	nop			; (mov r8, r8)
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b00b      	add	sp, #44	; 0x2c
 8002a76:	bd90      	pop	{r4, r7, pc}
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	48000400 	.word	0x48000400
 8002a80:	10210000 	.word	0x10210000
 8002a84:	48000800 	.word	0x48000800

08002a88 <ADC_Channel_Control>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_ADC_Channel_Control */
void ADC_Channel_Control(void *argument)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	Current_Control_Loop();
 8002a90:	f7ff fc66 	bl	8002360 <Current_Control_Loop>
    Error_Handler();
 8002a94:	f000 f824 	bl	8002ae0 <Error_Handler>
	Current_Control_Loop();
 8002a98:	e7fa      	b.n	8002a90 <ADC_Channel_Control+0x8>

08002a9a <CAN_TX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_TX */
void CAN_TX(void *argument)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_TX */
  /* Infinite loop */
  for(;;)
  {
    //GO4 CAN TX TASK
    vTaskDelay(10);
 8002aa2:	200a      	movs	r0, #10
 8002aa4:	f004 f90a 	bl	8006cbc <vTaskDelay>
  {
 8002aa8:	e7fb      	b.n	8002aa2 <CAN_TX+0x8>

08002aaa <ADC_Schedule_loop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADC_Schedule_loop */
void ADC_Schedule_loop(void *argument)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_Schedule_loop */
  /* Infinite loop */
  for(;;)
  {
    Schedule_ADC();
 8002ab2:	f7ff fb37 	bl	8002124 <Schedule_ADC>
    Error_Handler();
 8002ab6:	f000 f813 	bl	8002ae0 <Error_Handler>
    Schedule_ADC();
 8002aba:	e7fa      	b.n	8002ab2 <ADC_Schedule_loop+0x8>

08002abc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a04      	ldr	r2, [pc, #16]	; (8002adc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d101      	bne.n	8002ad2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ace:	f000 fa55 	bl	8002f7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b002      	add	sp, #8
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	40002000 	.word	0x40002000

08002ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	HAL_ADC_Stop_DMA(&hadc);
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <Error_Handler+0x34>)
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f000 fc48 	bl	800337c <HAL_ADC_Stop_DMA>
	// Infinitely flash nucelo LD2 in event of an error
	while (1) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002aec:	2390      	movs	r3, #144	; 0x90
 8002aee:	05db      	lsls	r3, r3, #23
 8002af0:	2120      	movs	r1, #32
 8002af2:	0018      	movs	r0, r3
 8002af4:	f001 fd2d 	bl	8004552 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8002af8:	20c8      	movs	r0, #200	; 0xc8
 8002afa:	f000 fa5b 	bl	8002fb4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002afe:	2390      	movs	r3, #144	; 0x90
 8002b00:	05db      	lsls	r3, r3, #23
 8002b02:	2120      	movs	r1, #32
 8002b04:	0018      	movs	r0, r3
 8002b06:	f001 fd24 	bl	8004552 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8002b0a:	20c8      	movs	r0, #200	; 0xc8
 8002b0c:	f000 fa52 	bl	8002fb4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002b10:	e7ec      	b.n	8002aec <Error_Handler+0xc>
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	20001b8c 	.word	0x20001b8c

08002b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1e:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <HAL_MspInit+0x50>)
 8002b20:	699a      	ldr	r2, [r3, #24]
 8002b22:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <HAL_MspInit+0x50>)
 8002b24:	2101      	movs	r1, #1
 8002b26:	430a      	orrs	r2, r1
 8002b28:	619a      	str	r2, [r3, #24]
 8002b2a:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <HAL_MspInit+0x50>)
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	4013      	ands	r3, r2
 8002b32:	607b      	str	r3, [r7, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b36:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <HAL_MspInit+0x50>)
 8002b38:	69da      	ldr	r2, [r3, #28]
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_MspInit+0x50>)
 8002b3c:	2180      	movs	r1, #128	; 0x80
 8002b3e:	0549      	lsls	r1, r1, #21
 8002b40:	430a      	orrs	r2, r1
 8002b42:	61da      	str	r2, [r3, #28]
 8002b44:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <HAL_MspInit+0x50>)
 8002b46:	69da      	ldr	r2, [r3, #28]
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	055b      	lsls	r3, r3, #21
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002b52:	2302      	movs	r3, #2
 8002b54:	425b      	negs	r3, r3
 8002b56:	2200      	movs	r2, #0
 8002b58:	2103      	movs	r1, #3
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f001 f96e 	bl	8003e3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b60:	46c0      	nop			; (mov r8, r8)
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b002      	add	sp, #8
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40021000 	.word	0x40021000

08002b6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	; 0x28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	2314      	movs	r3, #20
 8002b76:	18fb      	adds	r3, r7, r3
 8002b78:	0018      	movs	r0, r3
 8002b7a:	2314      	movs	r3, #20
 8002b7c:	001a      	movs	r2, r3
 8002b7e:	2100      	movs	r1, #0
 8002b80:	f005 fb41 	bl	8008206 <memset>
  if(hadc->Instance==ADC1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a2e      	ldr	r2, [pc, #184]	; (8002c44 <HAL_ADC_MspInit+0xd8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d155      	bne.n	8002c3a <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b8e:	4b2e      	ldr	r3, [pc, #184]	; (8002c48 <HAL_ADC_MspInit+0xdc>)
 8002b90:	699a      	ldr	r2, [r3, #24]
 8002b92:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <HAL_ADC_MspInit+0xdc>)
 8002b94:	2180      	movs	r1, #128	; 0x80
 8002b96:	0089      	lsls	r1, r1, #2
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	619a      	str	r2, [r3, #24]
 8002b9c:	4b2a      	ldr	r3, [pc, #168]	; (8002c48 <HAL_ADC_MspInit+0xdc>)
 8002b9e:	699a      	ldr	r2, [r3, #24]
 8002ba0:	2380      	movs	r3, #128	; 0x80
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002baa:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <HAL_ADC_MspInit+0xdc>)
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <HAL_ADC_MspInit+0xdc>)
 8002bb0:	2180      	movs	r1, #128	; 0x80
 8002bb2:	0289      	lsls	r1, r1, #10
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	615a      	str	r2, [r3, #20]
 8002bb8:	4b23      	ldr	r3, [pc, #140]	; (8002c48 <HAL_ADC_MspInit+0xdc>)
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	2380      	movs	r3, #128	; 0x80
 8002bbe:	029b      	lsls	r3, r3, #10
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002bc6:	2114      	movs	r1, #20
 8002bc8:	187b      	adds	r3, r7, r1
 8002bca:	2213      	movs	r2, #19
 8002bcc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bce:	187b      	adds	r3, r7, r1
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	187b      	adds	r3, r7, r1
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bda:	187a      	adds	r2, r7, r1
 8002bdc:	2390      	movs	r3, #144	; 0x90
 8002bde:	05db      	lsls	r3, r3, #23
 8002be0:	0011      	movs	r1, r2
 8002be2:	0018      	movs	r0, r3
 8002be4:	f001 fb20 	bl	8004228 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002be8:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <HAL_ADC_MspInit+0xe0>)
 8002bea:	4a19      	ldr	r2, [pc, #100]	; (8002c50 <HAL_ADC_MspInit+0xe4>)
 8002bec:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bee:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <HAL_ADC_MspInit+0xe0>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bf4:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <HAL_ADC_MspInit+0xe0>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002bfa:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <HAL_ADC_MspInit+0xe0>)
 8002bfc:	2280      	movs	r2, #128	; 0x80
 8002bfe:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c00:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <HAL_ADC_MspInit+0xe0>)
 8002c02:	2280      	movs	r2, #128	; 0x80
 8002c04:	0052      	lsls	r2, r2, #1
 8002c06:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c08:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <HAL_ADC_MspInit+0xe0>)
 8002c0a:	2280      	movs	r2, #128	; 0x80
 8002c0c:	00d2      	lsls	r2, r2, #3
 8002c0e:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002c10:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <HAL_ADC_MspInit+0xe0>)
 8002c12:	2220      	movs	r2, #32
 8002c14:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c16:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <HAL_ADC_MspInit+0xe0>)
 8002c18:	22c0      	movs	r2, #192	; 0xc0
 8002c1a:	0192      	lsls	r2, r2, #6
 8002c1c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_ADC_MspInit+0xe0>)
 8002c20:	0018      	movs	r0, r3
 8002c22:	f001 f931 	bl	8003e88 <HAL_DMA_Init>
 8002c26:	1e03      	subs	r3, r0, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8002c2a:	f7ff ff59 	bl	8002ae0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a06      	ldr	r2, [pc, #24]	; (8002c4c <HAL_ADC_MspInit+0xe0>)
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_ADC_MspInit+0xe0>)
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	b00a      	add	sp, #40	; 0x28
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	40012400 	.word	0x40012400
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	20001b48 	.word	0x20001b48
 8002c50:	40020008 	.word	0x40020008

08002c54 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	; 0x28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5c:	2314      	movs	r3, #20
 8002c5e:	18fb      	adds	r3, r7, r3
 8002c60:	0018      	movs	r0, r3
 8002c62:	2314      	movs	r3, #20
 8002c64:	001a      	movs	r2, r3
 8002c66:	2100      	movs	r1, #0
 8002c68:	f005 facd 	bl	8008206 <memset>
  if(hcan->Instance==CAN)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a1d      	ldr	r2, [pc, #116]	; (8002ce8 <HAL_CAN_MspInit+0x94>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d133      	bne.n	8002cde <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002c76:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <HAL_CAN_MspInit+0x98>)
 8002c78:	69da      	ldr	r2, [r3, #28]
 8002c7a:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <HAL_CAN_MspInit+0x98>)
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	0489      	lsls	r1, r1, #18
 8002c80:	430a      	orrs	r2, r1
 8002c82:	61da      	str	r2, [r3, #28]
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_CAN_MspInit+0x98>)
 8002c86:	69da      	ldr	r2, [r3, #28]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	049b      	lsls	r3, r3, #18
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c92:	4b16      	ldr	r3, [pc, #88]	; (8002cec <HAL_CAN_MspInit+0x98>)
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	4b15      	ldr	r3, [pc, #84]	; (8002cec <HAL_CAN_MspInit+0x98>)
 8002c98:	2180      	movs	r1, #128	; 0x80
 8002c9a:	0289      	lsls	r1, r1, #10
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	615a      	str	r2, [r3, #20]
 8002ca0:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_CAN_MspInit+0x98>)
 8002ca2:	695a      	ldr	r2, [r3, #20]
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	029b      	lsls	r3, r3, #10
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002cae:	2114      	movs	r1, #20
 8002cb0:	187b      	adds	r3, r7, r1
 8002cb2:	22c0      	movs	r2, #192	; 0xc0
 8002cb4:	0152      	lsls	r2, r2, #5
 8002cb6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb8:	187b      	adds	r3, r7, r1
 8002cba:	2202      	movs	r2, #2
 8002cbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbe:	187b      	adds	r3, r7, r1
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cc4:	187b      	adds	r3, r7, r1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8002cca:	187b      	adds	r3, r7, r1
 8002ccc:	2204      	movs	r2, #4
 8002cce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd0:	187a      	adds	r2, r7, r1
 8002cd2:	2390      	movs	r3, #144	; 0x90
 8002cd4:	05db      	lsls	r3, r3, #23
 8002cd6:	0011      	movs	r1, r2
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f001 faa5 	bl	8004228 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b00a      	add	sp, #40	; 0x28
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	40006400 	.word	0x40006400
 8002cec:	40021000 	.word	0x40021000

08002cf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a14      	ldr	r2, [pc, #80]	; (8002d50 <HAL_TIM_Base_MspInit+0x60>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d10e      	bne.n	8002d20 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002d02:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <HAL_TIM_Base_MspInit+0x64>)
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <HAL_TIM_Base_MspInit+0x64>)
 8002d08:	2180      	movs	r1, #128	; 0x80
 8002d0a:	0289      	lsls	r1, r1, #10
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	619a      	str	r2, [r3, #24]
 8002d10:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <HAL_TIM_Base_MspInit+0x64>)
 8002d12:	699a      	ldr	r2, [r3, #24]
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	029b      	lsls	r3, r3, #10
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002d1e:	e012      	b.n	8002d46 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM17)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a0c      	ldr	r2, [pc, #48]	; (8002d58 <HAL_TIM_Base_MspInit+0x68>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d10d      	bne.n	8002d46 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <HAL_TIM_Base_MspInit+0x64>)
 8002d2c:	699a      	ldr	r2, [r3, #24]
 8002d2e:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_TIM_Base_MspInit+0x64>)
 8002d30:	2180      	movs	r1, #128	; 0x80
 8002d32:	02c9      	lsls	r1, r1, #11
 8002d34:	430a      	orrs	r2, r1
 8002d36:	619a      	str	r2, [r3, #24]
 8002d38:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_TIM_Base_MspInit+0x64>)
 8002d3a:	699a      	ldr	r2, [r3, #24]
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	02db      	lsls	r3, r3, #11
 8002d40:	4013      	ands	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	68bb      	ldr	r3, [r7, #8]
}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	b004      	add	sp, #16
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	40014400 	.word	0x40014400
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40014800 	.word	0x40014800

08002d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	; 0x28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d64:	2314      	movs	r3, #20
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	0018      	movs	r0, r3
 8002d6a:	2314      	movs	r3, #20
 8002d6c:	001a      	movs	r2, r3
 8002d6e:	2100      	movs	r1, #0
 8002d70:	f005 fa49 	bl	8008206 <memset>
  if(huart->Instance==USART2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <HAL_UART_MspInit+0x90>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d132      	bne.n	8002de4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d7e:	4b1c      	ldr	r3, [pc, #112]	; (8002df0 <HAL_UART_MspInit+0x94>)
 8002d80:	69da      	ldr	r2, [r3, #28]
 8002d82:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <HAL_UART_MspInit+0x94>)
 8002d84:	2180      	movs	r1, #128	; 0x80
 8002d86:	0289      	lsls	r1, r1, #10
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	61da      	str	r2, [r3, #28]
 8002d8c:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <HAL_UART_MspInit+0x94>)
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	029b      	lsls	r3, r3, #10
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9a:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <HAL_UART_MspInit+0x94>)
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <HAL_UART_MspInit+0x94>)
 8002da0:	2180      	movs	r1, #128	; 0x80
 8002da2:	0289      	lsls	r1, r1, #10
 8002da4:	430a      	orrs	r2, r1
 8002da6:	615a      	str	r2, [r3, #20]
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <HAL_UART_MspInit+0x94>)
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	2380      	movs	r3, #128	; 0x80
 8002dae:	029b      	lsls	r3, r3, #10
 8002db0:	4013      	ands	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002db6:	2114      	movs	r1, #20
 8002db8:	187b      	adds	r3, r7, r1
 8002dba:	220c      	movs	r2, #12
 8002dbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	187b      	adds	r3, r7, r1
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc4:	187b      	adds	r3, r7, r1
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dca:	187b      	adds	r3, r7, r1
 8002dcc:	2200      	movs	r2, #0
 8002dce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002dd0:	187b      	adds	r3, r7, r1
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd6:	187a      	adds	r2, r7, r1
 8002dd8:	2390      	movs	r3, #144	; 0x90
 8002dda:	05db      	lsls	r3, r3, #23
 8002ddc:	0011      	movs	r1, r2
 8002dde:	0018      	movs	r0, r3
 8002de0:	f001 fa22 	bl	8004228 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b00a      	add	sp, #40	; 0x28
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40004400 	.word	0x40004400
 8002df0:	40021000 	.word	0x40021000

08002df4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08a      	sub	sp, #40	; 0x28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM14_IRQn, TickPriority ,0); 
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	0019      	movs	r1, r3
 8002e0a:	2013      	movs	r0, #19
 8002e0c:	f001 f816 	bl	8003e3c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM14_IRQn); 
 8002e10:	2013      	movs	r0, #19
 8002e12:	f001 f828 	bl	8003e66 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002e16:	4b21      	ldr	r3, [pc, #132]	; (8002e9c <HAL_InitTick+0xa8>)
 8002e18:	69da      	ldr	r2, [r3, #28]
 8002e1a:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <HAL_InitTick+0xa8>)
 8002e1c:	2180      	movs	r1, #128	; 0x80
 8002e1e:	0049      	lsls	r1, r1, #1
 8002e20:	430a      	orrs	r2, r1
 8002e22:	61da      	str	r2, [r3, #28]
 8002e24:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_InitTick+0xa8>)
 8002e26:	69da      	ldr	r2, [r3, #28]
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e32:	230c      	movs	r3, #12
 8002e34:	18fa      	adds	r2, r7, r3
 8002e36:	2310      	movs	r3, #16
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	0011      	movs	r1, r2
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f002 f8a1 	bl	8004f84 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e42:	f002 f889 	bl	8004f58 <HAL_RCC_GetPCLK1Freq>
 8002e46:	0003      	movs	r3, r0
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	4914      	ldr	r1, [pc, #80]	; (8002ea0 <HAL_InitTick+0xac>)
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f7fd f95a 	bl	8000108 <__udivsi3>
 8002e54:	0003      	movs	r3, r0
 8002e56:	3b01      	subs	r3, #1
 8002e58:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002e5a:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_InitTick+0xb0>)
 8002e5c:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <HAL_InitTick+0xb4>)
 8002e5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8002e60:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <HAL_InitTick+0xb0>)
 8002e62:	4a12      	ldr	r2, [pc, #72]	; (8002eac <HAL_InitTick+0xb8>)
 8002e64:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8002e66:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <HAL_InitTick+0xb0>)
 8002e68:	6a3a      	ldr	r2, [r7, #32]
 8002e6a:	605a      	str	r2, [r3, #4]
  htim14.Init.ClockDivision = 0;
 8002e6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ea4 <HAL_InitTick+0xb0>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e72:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <HAL_InitTick+0xb0>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <HAL_InitTick+0xb0>)
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f002 f9ac 	bl	80051d8 <HAL_TIM_Base_Init>
 8002e80:	1e03      	subs	r3, r0, #0
 8002e82:	d105      	bne.n	8002e90 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8002e84:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <HAL_InitTick+0xb0>)
 8002e86:	0018      	movs	r0, r3
 8002e88:	f002 f9f4 	bl	8005274 <HAL_TIM_Base_Start_IT>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	e000      	b.n	8002e92 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
}
 8002e92:	0018      	movs	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b00a      	add	sp, #40	; 0x28
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	000f4240 	.word	0x000f4240
 8002ea4:	20001c0c 	.word	0x20001c0c
 8002ea8:	40002000 	.word	0x40002000
 8002eac:	000003e7 	.word	0x000003e7

08002eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 8002ebe:	f7ff fe0f 	bl	8002ae0 <Error_Handler>
 8002ec2:	e7fc      	b.n	8002ebe <HardFault_Handler+0x4>

08002ec4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002ec8:	4b03      	ldr	r3, [pc, #12]	; (8002ed8 <DMA1_Channel1_IRQHandler+0x14>)
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f001 f8c2 	bl	8004054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	20001b48 	.word	0x20001b48

08002edc <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002ee0:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <TIM14_IRQHandler+0x14>)
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f002 f9e8 	bl	80052b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	20001c0c 	.word	0x20001c0c

08002ef4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f00:	480d      	ldr	r0, [pc, #52]	; (8002f38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f04:	480d      	ldr	r0, [pc, #52]	; (8002f3c <LoopForever+0x6>)
  ldr r1, =_edata
 8002f06:	490e      	ldr	r1, [pc, #56]	; (8002f40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f08:	4a0e      	ldr	r2, [pc, #56]	; (8002f44 <LoopForever+0xe>)
  movs r3, #0
 8002f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f0c:	e002      	b.n	8002f14 <LoopCopyDataInit>

08002f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f12:	3304      	adds	r3, #4

08002f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f18:	d3f9      	bcc.n	8002f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f1a:	4a0b      	ldr	r2, [pc, #44]	; (8002f48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f1c:	4c0b      	ldr	r4, [pc, #44]	; (8002f4c <LoopForever+0x16>)
  movs r3, #0
 8002f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f20:	e001      	b.n	8002f26 <LoopFillZerobss>

08002f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f24:	3204      	adds	r2, #4

08002f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f28:	d3fb      	bcc.n	8002f22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002f2a:	f7ff ffe3 	bl	8002ef4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002f2e:	f005 f93d 	bl	80081ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f32:	f7ff fb27 	bl	8002584 <main>

08002f36 <LoopForever>:

LoopForever:
    b LoopForever
 8002f36:	e7fe      	b.n	8002f36 <LoopForever>
  ldr   r0, =_estack
 8002f38:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f40:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002f44:	080083d0 	.word	0x080083d0
  ldr r2, =_sbss
 8002f48:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002f4c:	20001c90 	.word	0x20001c90

08002f50 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f50:	e7fe      	b.n	8002f50 <ADC1_COMP_IRQHandler>
	...

08002f54 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f58:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <HAL_Init+0x24>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_Init+0x24>)
 8002f5e:	2110      	movs	r1, #16
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002f64:	2000      	movs	r0, #0
 8002f66:	f7ff ff45 	bl	8002df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f6a:	f7ff fdd5 	bl	8002b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	0018      	movs	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	40022000 	.word	0x40022000

08002f7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <HAL_IncTick+0x1c>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	001a      	movs	r2, r3
 8002f86:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <HAL_IncTick+0x20>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	18d2      	adds	r2, r2, r3
 8002f8c:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <HAL_IncTick+0x20>)
 8002f8e:	601a      	str	r2, [r3, #0]
}
 8002f90:	46c0      	nop			; (mov r8, r8)
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	2000007c 	.word	0x2000007c
 8002f9c:	20001c4c 	.word	0x20001c4c

08002fa0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa4:	4b02      	ldr	r3, [pc, #8]	; (8002fb0 <HAL_GetTick+0x10>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	20001c4c 	.word	0x20001c4c

08002fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fbc:	f7ff fff0 	bl	8002fa0 <HAL_GetTick>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	d005      	beq.n	8002fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fce:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <HAL_Delay+0x40>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	001a      	movs	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	189b      	adds	r3, r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	f7ff ffe0 	bl	8002fa0 <HAL_GetTick>
 8002fe0:	0002      	movs	r2, r0
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d8f7      	bhi.n	8002fdc <HAL_Delay+0x28>
  {
  }
}
 8002fec:	46c0      	nop			; (mov r8, r8)
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b004      	add	sp, #16
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	2000007c 	.word	0x2000007c

08002ff8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003000:	230f      	movs	r3, #15
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	2200      	movs	r2, #0
 8003006:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e125      	b.n	8003262 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10a      	bne.n	8003034 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2234      	movs	r2, #52	; 0x34
 8003028:	2100      	movs	r1, #0
 800302a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	0018      	movs	r0, r3
 8003030:	f7ff fd9c 	bl	8002b6c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	2210      	movs	r2, #16
 800303a:	4013      	ands	r3, r2
 800303c:	d000      	beq.n	8003040 <HAL_ADC_Init+0x48>
 800303e:	e103      	b.n	8003248 <HAL_ADC_Init+0x250>
 8003040:	230f      	movs	r3, #15
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d000      	beq.n	800304c <HAL_ADC_Init+0x54>
 800304a:	e0fd      	b.n	8003248 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2204      	movs	r2, #4
 8003054:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003056:	d000      	beq.n	800305a <HAL_ADC_Init+0x62>
 8003058:	e0f6      	b.n	8003248 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305e:	4a83      	ldr	r2, [pc, #524]	; (800326c <HAL_ADC_Init+0x274>)
 8003060:	4013      	ands	r3, r2
 8003062:	2202      	movs	r2, #2
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2203      	movs	r2, #3
 8003072:	4013      	ands	r3, r2
 8003074:	2b01      	cmp	r3, #1
 8003076:	d112      	bne.n	800309e <HAL_ADC_Init+0xa6>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2201      	movs	r2, #1
 8003080:	4013      	ands	r3, r2
 8003082:	2b01      	cmp	r3, #1
 8003084:	d009      	beq.n	800309a <HAL_ADC_Init+0xa2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	021b      	lsls	r3, r3, #8
 8003090:	401a      	ands	r2, r3
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	429a      	cmp	r2, r3
 8003098:	d101      	bne.n	800309e <HAL_ADC_Init+0xa6>
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <HAL_ADC_Init+0xa8>
 800309e:	2300      	movs	r3, #0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d116      	bne.n	80030d2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2218      	movs	r2, #24
 80030ac:	4393      	bics	r3, r2
 80030ae:	0019      	movs	r1, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	0899      	lsrs	r1, r3, #2
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4964      	ldr	r1, [pc, #400]	; (8003270 <HAL_ADC_Init+0x278>)
 80030de:	400a      	ands	r2, r1
 80030e0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	7e1b      	ldrb	r3, [r3, #24]
 80030e6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	7e5b      	ldrb	r3, [r3, #25]
 80030ec:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030ee:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7e9b      	ldrb	r3, [r3, #26]
 80030f4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80030f6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d002      	beq.n	8003106 <HAL_ADC_Init+0x10e>
 8003100:	2380      	movs	r3, #128	; 0x80
 8003102:	015b      	lsls	r3, r3, #5
 8003104:	e000      	b.n	8003108 <HAL_ADC_Init+0x110>
 8003106:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003108:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800310e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2b02      	cmp	r3, #2
 8003116:	d101      	bne.n	800311c <HAL_ADC_Init+0x124>
 8003118:	2304      	movs	r3, #4
 800311a:	e000      	b.n	800311e <HAL_ADC_Init+0x126>
 800311c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800311e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2124      	movs	r1, #36	; 0x24
 8003124:	5c5b      	ldrb	r3, [r3, r1]
 8003126:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003128:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	4313      	orrs	r3, r2
 800312e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	7edb      	ldrb	r3, [r3, #27]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d115      	bne.n	8003164 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	7e9b      	ldrb	r3, [r3, #26]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d105      	bne.n	800314c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2280      	movs	r2, #128	; 0x80
 8003144:	0252      	lsls	r2, r2, #9
 8003146:	4313      	orrs	r3, r2
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	e00b      	b.n	8003164 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003150:	2220      	movs	r2, #32
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315c:	2201      	movs	r2, #1
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69da      	ldr	r2, [r3, #28]
 8003168:	23c2      	movs	r3, #194	; 0xc2
 800316a:	33ff      	adds	r3, #255	; 0xff
 800316c:	429a      	cmp	r2, r3
 800316e:	d007      	beq.n	8003180 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003178:	4313      	orrs	r3, r2
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	4313      	orrs	r3, r2
 800317e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68d9      	ldr	r1, [r3, #12]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	430a      	orrs	r2, r1
 800318e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	055b      	lsls	r3, r3, #21
 8003198:	429a      	cmp	r2, r3
 800319a:	d01b      	beq.n	80031d4 <HAL_ADC_Init+0x1dc>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d017      	beq.n	80031d4 <HAL_ADC_Init+0x1dc>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d013      	beq.n	80031d4 <HAL_ADC_Init+0x1dc>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d00f      	beq.n	80031d4 <HAL_ADC_Init+0x1dc>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d00b      	beq.n	80031d4 <HAL_ADC_Init+0x1dc>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	2b05      	cmp	r3, #5
 80031c2:	d007      	beq.n	80031d4 <HAL_ADC_Init+0x1dc>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	2b06      	cmp	r3, #6
 80031ca:	d003      	beq.n	80031d4 <HAL_ADC_Init+0x1dc>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	2b07      	cmp	r3, #7
 80031d2:	d112      	bne.n	80031fa <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2107      	movs	r1, #7
 80031e0:	438a      	bics	r2, r1
 80031e2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6959      	ldr	r1, [r3, #20]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	2207      	movs	r2, #7
 80031f0:	401a      	ands	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4a1c      	ldr	r2, [pc, #112]	; (8003274 <HAL_ADC_Init+0x27c>)
 8003202:	4013      	ands	r3, r2
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	429a      	cmp	r2, r3
 8003208:	d10b      	bne.n	8003222 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003214:	2203      	movs	r2, #3
 8003216:	4393      	bics	r3, r2
 8003218:	2201      	movs	r2, #1
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003220:	e01c      	b.n	800325c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	2212      	movs	r2, #18
 8003228:	4393      	bics	r3, r2
 800322a:	2210      	movs	r2, #16
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	2201      	movs	r2, #1
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800323e:	230f      	movs	r3, #15
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	2201      	movs	r2, #1
 8003244:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003246:	e009      	b.n	800325c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	2210      	movs	r2, #16
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003254:	230f      	movs	r3, #15
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	2201      	movs	r2, #1
 800325a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800325c:	230f      	movs	r3, #15
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	781b      	ldrb	r3, [r3, #0]
}
 8003262:	0018      	movs	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	b004      	add	sp, #16
 8003268:	bd80      	pop	{r7, pc}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	fffffefd 	.word	0xfffffefd
 8003270:	fffe0219 	.word	0xfffe0219
 8003274:	833fffe7 	.word	0x833fffe7

08003278 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003284:	2317      	movs	r3, #23
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2204      	movs	r2, #4
 8003294:	4013      	ands	r3, r2
 8003296:	d15e      	bne.n	8003356 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2234      	movs	r2, #52	; 0x34
 800329c:	5c9b      	ldrb	r3, [r3, r2]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_ADC_Start_DMA+0x2e>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e05e      	b.n	8003364 <HAL_ADC_Start_DMA+0xec>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2234      	movs	r2, #52	; 0x34
 80032aa:	2101      	movs	r1, #1
 80032ac:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	7e5b      	ldrb	r3, [r3, #25]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d007      	beq.n	80032c6 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80032b6:	2317      	movs	r3, #23
 80032b8:	18fc      	adds	r4, r7, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	0018      	movs	r0, r3
 80032be:	f000 f9e9 	bl	8003694 <ADC_Enable>
 80032c2:	0003      	movs	r3, r0
 80032c4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80032c6:	2317      	movs	r3, #23
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d146      	bne.n	800335e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	4a25      	ldr	r2, [pc, #148]	; (800336c <HAL_ADC_Start_DMA+0xf4>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	2280      	movs	r2, #128	; 0x80
 80032da:	0052      	lsls	r2, r2, #1
 80032dc:	431a      	orrs	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2234      	movs	r2, #52	; 0x34
 80032ec:	2100      	movs	r1, #0
 80032ee:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	4a1e      	ldr	r2, [pc, #120]	; (8003370 <HAL_ADC_Start_DMA+0xf8>)
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <HAL_ADC_Start_DMA+0xfc>)
 80032fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	4a1c      	ldr	r2, [pc, #112]	; (8003378 <HAL_ADC_Start_DMA+0x100>)
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	221c      	movs	r2, #28
 800330e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2110      	movs	r1, #16
 800331c:	430a      	orrs	r2, r1
 800331e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2101      	movs	r1, #1
 800332c:	430a      	orrs	r2, r1
 800332e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3340      	adds	r3, #64	; 0x40
 800333a:	0019      	movs	r1, r3
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f000 fdea 	bl	8003f18 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2104      	movs	r1, #4
 8003350:	430a      	orrs	r2, r1
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	e003      	b.n	800335e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003356:	2317      	movs	r3, #23
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	2202      	movs	r2, #2
 800335c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800335e:	2317      	movs	r3, #23
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	781b      	ldrb	r3, [r3, #0]
}
 8003364:	0018      	movs	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	b007      	add	sp, #28
 800336a:	bd90      	pop	{r4, r7, pc}
 800336c:	fffff0fe 	.word	0xfffff0fe
 8003370:	080038ed 	.word	0x080038ed
 8003374:	080039a1 	.word	0x080039a1
 8003378:	080039bf 	.word	0x080039bf

0800337c <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 800337c:	b5b0      	push	{r4, r5, r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003384:	230f      	movs	r3, #15
 8003386:	18fb      	adds	r3, r7, r3
 8003388:	2200      	movs	r2, #0
 800338a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2234      	movs	r2, #52	; 0x34
 8003390:	5c9b      	ldrb	r3, [r3, r2]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_ADC_Stop_DMA+0x1e>
 8003396:	2302      	movs	r3, #2
 8003398:	e058      	b.n	800344c <HAL_ADC_Stop_DMA+0xd0>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2234      	movs	r2, #52	; 0x34
 800339e:	2101      	movs	r1, #1
 80033a0:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80033a2:	250f      	movs	r5, #15
 80033a4:	197c      	adds	r4, r7, r5
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	0018      	movs	r0, r3
 80033aa:	f000 fa59 	bl	8003860 <ADC_ConversionStop>
 80033ae:	0003      	movs	r3, r0
 80033b0:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80033b2:	197b      	adds	r3, r7, r5
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d141      	bne.n	800343e <HAL_ADC_Stop_DMA+0xc2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2101      	movs	r1, #1
 80033c6:	438a      	bics	r2, r1
 80033c8:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	250f      	movs	r5, #15
 80033d0:	197c      	adds	r4, r7, r5
 80033d2:	0018      	movs	r0, r3
 80033d4:	f000 fe06 	bl	8003fe4 <HAL_DMA_Abort>
 80033d8:	0003      	movs	r3, r0
 80033da:	7023      	strb	r3, [r4, #0]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 80033dc:	197b      	adds	r3, r7, r5
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_ADC_Stop_DMA+0x74>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	2240      	movs	r2, #64	; 0x40
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2110      	movs	r1, #16
 80033fc:	438a      	bics	r2, r1
 80033fe:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8003400:	230f      	movs	r3, #15
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d108      	bne.n	800341c <HAL_ADC_Stop_DMA+0xa0>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800340a:	230f      	movs	r3, #15
 800340c:	18fc      	adds	r4, r7, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	0018      	movs	r0, r3
 8003412:	f000 f9bb 	bl	800378c <ADC_Disable>
 8003416:	0003      	movs	r3, r0
 8003418:	7023      	strb	r3, [r4, #0]
 800341a:	e003      	b.n	8003424 <HAL_ADC_Stop_DMA+0xa8>
    }
    else
    {
      ADC_Disable(hadc);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	0018      	movs	r0, r3
 8003420:	f000 f9b4 	bl	800378c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003424:	230f      	movs	r3, #15
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d107      	bne.n	800343e <HAL_ADC_Stop_DMA+0xc2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	4a08      	ldr	r2, [pc, #32]	; (8003454 <HAL_ADC_Stop_DMA+0xd8>)
 8003434:	4013      	ands	r3, r2
 8003436:	2201      	movs	r2, #1
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2234      	movs	r2, #52	; 0x34
 8003442:	2100      	movs	r1, #0
 8003444:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003446:	230f      	movs	r3, #15
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	781b      	ldrb	r3, [r3, #0]
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	b004      	add	sp, #16
 8003452:	bdb0      	pop	{r4, r5, r7, pc}
 8003454:	fffffefe 	.word	0xfffffefe

08003458 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003460:	46c0      	nop			; (mov r8, r8)
 8003462:	46bd      	mov	sp, r7
 8003464:	b002      	add	sp, #8
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	b002      	add	sp, #8
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003482:	230f      	movs	r3, #15
 8003484:	18fb      	adds	r3, r7, r3
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	055b      	lsls	r3, r3, #21
 8003496:	429a      	cmp	r2, r3
 8003498:	d011      	beq.n	80034be <HAL_ADC_ConfigChannel+0x46>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d00d      	beq.n	80034be <HAL_ADC_ConfigChannel+0x46>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d009      	beq.n	80034be <HAL_ADC_ConfigChannel+0x46>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d005      	beq.n	80034be <HAL_ADC_ConfigChannel+0x46>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d001      	beq.n	80034be <HAL_ADC_ConfigChannel+0x46>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2234      	movs	r2, #52	; 0x34
 80034c2:	5c9b      	ldrb	r3, [r3, r2]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x54>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e0d0      	b.n	800366e <HAL_ADC_ConfigChannel+0x1f6>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2234      	movs	r2, #52	; 0x34
 80034d0:	2101      	movs	r1, #1
 80034d2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2204      	movs	r2, #4
 80034dc:	4013      	ands	r3, r2
 80034de:	d000      	beq.n	80034e2 <HAL_ADC_ConfigChannel+0x6a>
 80034e0:	e0b4      	b.n	800364c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	4a64      	ldr	r2, [pc, #400]	; (8003678 <HAL_ADC_ConfigChannel+0x200>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d100      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x76>
 80034ec:	e082      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2201      	movs	r2, #1
 80034fa:	409a      	lsls	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	055b      	lsls	r3, r3, #21
 800350c:	429a      	cmp	r2, r3
 800350e:	d037      	beq.n	8003580 <HAL_ADC_ConfigChannel+0x108>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	2b01      	cmp	r3, #1
 8003516:	d033      	beq.n	8003580 <HAL_ADC_ConfigChannel+0x108>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351c:	2b02      	cmp	r3, #2
 800351e:	d02f      	beq.n	8003580 <HAL_ADC_ConfigChannel+0x108>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	2b03      	cmp	r3, #3
 8003526:	d02b      	beq.n	8003580 <HAL_ADC_ConfigChannel+0x108>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	2b04      	cmp	r3, #4
 800352e:	d027      	beq.n	8003580 <HAL_ADC_ConfigChannel+0x108>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	2b05      	cmp	r3, #5
 8003536:	d023      	beq.n	8003580 <HAL_ADC_ConfigChannel+0x108>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353c:	2b06      	cmp	r3, #6
 800353e:	d01f      	beq.n	8003580 <HAL_ADC_ConfigChannel+0x108>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	2b07      	cmp	r3, #7
 8003546:	d01b      	beq.n	8003580 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	2107      	movs	r1, #7
 8003554:	400b      	ands	r3, r1
 8003556:	429a      	cmp	r2, r3
 8003558:	d012      	beq.n	8003580 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695a      	ldr	r2, [r3, #20]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2107      	movs	r1, #7
 8003566:	438a      	bics	r2, r1
 8003568:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6959      	ldr	r1, [r3, #20]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2207      	movs	r2, #7
 8003576:	401a      	ands	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b10      	cmp	r3, #16
 8003586:	d007      	beq.n	8003598 <HAL_ADC_ConfigChannel+0x120>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b11      	cmp	r3, #17
 800358e:	d003      	beq.n	8003598 <HAL_ADC_ConfigChannel+0x120>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b12      	cmp	r3, #18
 8003596:	d163      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003598:	4b38      	ldr	r3, [pc, #224]	; (800367c <HAL_ADC_ConfigChannel+0x204>)
 800359a:	6819      	ldr	r1, [r3, #0]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b10      	cmp	r3, #16
 80035a2:	d009      	beq.n	80035b8 <HAL_ADC_ConfigChannel+0x140>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b11      	cmp	r3, #17
 80035aa:	d102      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x13a>
 80035ac:	2380      	movs	r3, #128	; 0x80
 80035ae:	03db      	lsls	r3, r3, #15
 80035b0:	e004      	b.n	80035bc <HAL_ADC_ConfigChannel+0x144>
 80035b2:	2380      	movs	r3, #128	; 0x80
 80035b4:	045b      	lsls	r3, r3, #17
 80035b6:	e001      	b.n	80035bc <HAL_ADC_ConfigChannel+0x144>
 80035b8:	2380      	movs	r3, #128	; 0x80
 80035ba:	041b      	lsls	r3, r3, #16
 80035bc:	4a2f      	ldr	r2, [pc, #188]	; (800367c <HAL_ADC_ConfigChannel+0x204>)
 80035be:	430b      	orrs	r3, r1
 80035c0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b10      	cmp	r3, #16
 80035c8:	d14a      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035ca:	4b2d      	ldr	r3, [pc, #180]	; (8003680 <HAL_ADC_ConfigChannel+0x208>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	492d      	ldr	r1, [pc, #180]	; (8003684 <HAL_ADC_ConfigChannel+0x20c>)
 80035d0:	0018      	movs	r0, r3
 80035d2:	f7fc fd99 	bl	8000108 <__udivsi3>
 80035d6:	0003      	movs	r3, r0
 80035d8:	001a      	movs	r2, r3
 80035da:	0013      	movs	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	189b      	adds	r3, r3, r2
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035e4:	e002      	b.n	80035ec <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f9      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x16e>
 80035f2:	e035      	b.n	8003660 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2101      	movs	r1, #1
 8003600:	4099      	lsls	r1, r3
 8003602:	000b      	movs	r3, r1
 8003604:	43d9      	mvns	r1, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	400a      	ands	r2, r1
 800360c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b10      	cmp	r3, #16
 8003614:	d007      	beq.n	8003626 <HAL_ADC_ConfigChannel+0x1ae>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b11      	cmp	r3, #17
 800361c:	d003      	beq.n	8003626 <HAL_ADC_ConfigChannel+0x1ae>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b12      	cmp	r3, #18
 8003624:	d11c      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003626:	4b15      	ldr	r3, [pc, #84]	; (800367c <HAL_ADC_ConfigChannel+0x204>)
 8003628:	6819      	ldr	r1, [r3, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b10      	cmp	r3, #16
 8003630:	d007      	beq.n	8003642 <HAL_ADC_ConfigChannel+0x1ca>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b11      	cmp	r3, #17
 8003638:	d101      	bne.n	800363e <HAL_ADC_ConfigChannel+0x1c6>
 800363a:	4b13      	ldr	r3, [pc, #76]	; (8003688 <HAL_ADC_ConfigChannel+0x210>)
 800363c:	e002      	b.n	8003644 <HAL_ADC_ConfigChannel+0x1cc>
 800363e:	4b13      	ldr	r3, [pc, #76]	; (800368c <HAL_ADC_ConfigChannel+0x214>)
 8003640:	e000      	b.n	8003644 <HAL_ADC_ConfigChannel+0x1cc>
 8003642:	4b13      	ldr	r3, [pc, #76]	; (8003690 <HAL_ADC_ConfigChannel+0x218>)
 8003644:	4a0d      	ldr	r2, [pc, #52]	; (800367c <HAL_ADC_ConfigChannel+0x204>)
 8003646:	400b      	ands	r3, r1
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	e009      	b.n	8003660 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003650:	2220      	movs	r2, #32
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003658:	230f      	movs	r3, #15
 800365a:	18fb      	adds	r3, r7, r3
 800365c:	2201      	movs	r2, #1
 800365e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2234      	movs	r2, #52	; 0x34
 8003664:	2100      	movs	r1, #0
 8003666:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003668:	230f      	movs	r3, #15
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	781b      	ldrb	r3, [r3, #0]
}
 800366e:	0018      	movs	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	b004      	add	sp, #16
 8003674:	bd80      	pop	{r7, pc}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	00001001 	.word	0x00001001
 800367c:	40012708 	.word	0x40012708
 8003680:	20000078 	.word	0x20000078
 8003684:	000f4240 	.word	0x000f4240
 8003688:	ffbfffff 	.word	0xffbfffff
 800368c:	feffffff 	.word	0xfeffffff
 8003690:	ff7fffff 	.word	0xff7fffff

08003694 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2203      	movs	r2, #3
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d112      	bne.n	80036d8 <ADC_Enable+0x44>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2201      	movs	r2, #1
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d009      	beq.n	80036d4 <ADC_Enable+0x40>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	401a      	ands	r2, r3
 80036cc:	2380      	movs	r3, #128	; 0x80
 80036ce:	021b      	lsls	r3, r3, #8
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d101      	bne.n	80036d8 <ADC_Enable+0x44>
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <ADC_Enable+0x46>
 80036d8:	2300      	movs	r3, #0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d14b      	bne.n	8003776 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4a26      	ldr	r2, [pc, #152]	; (8003780 <ADC_Enable+0xec>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	d00d      	beq.n	8003706 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	2210      	movs	r2, #16
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fa:	2201      	movs	r2, #1
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e038      	b.n	8003778 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2101      	movs	r1, #1
 8003712:	430a      	orrs	r2, r1
 8003714:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003716:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <ADC_Enable+0xf0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	491b      	ldr	r1, [pc, #108]	; (8003788 <ADC_Enable+0xf4>)
 800371c:	0018      	movs	r0, r3
 800371e:	f7fc fcf3 	bl	8000108 <__udivsi3>
 8003722:	0003      	movs	r3, r0
 8003724:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003726:	e002      	b.n	800372e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	3b01      	subs	r3, #1
 800372c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f9      	bne.n	8003728 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003734:	f7ff fc34 	bl	8002fa0 <HAL_GetTick>
 8003738:	0003      	movs	r3, r0
 800373a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800373c:	e014      	b.n	8003768 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800373e:	f7ff fc2f 	bl	8002fa0 <HAL_GetTick>
 8003742:	0002      	movs	r2, r0
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d90d      	bls.n	8003768 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003750:	2210      	movs	r2, #16
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375c:	2201      	movs	r2, #1
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e007      	b.n	8003778 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2201      	movs	r2, #1
 8003770:	4013      	ands	r3, r2
 8003772:	2b01      	cmp	r3, #1
 8003774:	d1e3      	bne.n	800373e <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	0018      	movs	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	b004      	add	sp, #16
 800377e:	bd80      	pop	{r7, pc}
 8003780:	80000017 	.word	0x80000017
 8003784:	20000078 	.word	0x20000078
 8003788:	000f4240 	.word	0x000f4240

0800378c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2203      	movs	r2, #3
 80037a0:	4013      	ands	r3, r2
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d112      	bne.n	80037cc <ADC_Disable+0x40>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2201      	movs	r2, #1
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d009      	beq.n	80037c8 <ADC_Disable+0x3c>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	2380      	movs	r3, #128	; 0x80
 80037bc:	021b      	lsls	r3, r3, #8
 80037be:	401a      	ands	r2, r3
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	021b      	lsls	r3, r3, #8
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d101      	bne.n	80037cc <ADC_Disable+0x40>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <ADC_Disable+0x42>
 80037cc:	2300      	movs	r3, #0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d041      	beq.n	8003856 <ADC_Disable+0xca>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2205      	movs	r2, #5
 80037da:	4013      	ands	r3, r2
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d110      	bne.n	8003802 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2102      	movs	r1, #2
 80037ec:	430a      	orrs	r2, r1
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2203      	movs	r2, #3
 80037f6:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037f8:	f7ff fbd2 	bl	8002fa0 <HAL_GetTick>
 80037fc:	0003      	movs	r3, r0
 80037fe:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003800:	e022      	b.n	8003848 <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	2210      	movs	r2, #16
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003812:	2201      	movs	r2, #1
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e01c      	b.n	8003858 <ADC_Disable+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800381e:	f7ff fbbf 	bl	8002fa0 <HAL_GetTick>
 8003822:	0002      	movs	r2, r0
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d90d      	bls.n	8003848 <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	2210      	movs	r2, #16
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	2201      	movs	r2, #1
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e007      	b.n	8003858 <ADC_Disable+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	2201      	movs	r2, #1
 8003850:	4013      	ands	r3, r2
 8003852:	2b01      	cmp	r3, #1
 8003854:	d0e3      	beq.n	800381e <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	0018      	movs	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	b004      	add	sp, #16
 800385e:	bd80      	pop	{r7, pc}

08003860 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2204      	movs	r2, #4
 8003874:	4013      	ands	r3, r2
 8003876:	d034      	beq.n	80038e2 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	2204      	movs	r2, #4
 8003880:	4013      	ands	r3, r2
 8003882:	2b04      	cmp	r3, #4
 8003884:	d10d      	bne.n	80038a2 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2202      	movs	r2, #2
 800388e:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003890:	d107      	bne.n	80038a2 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2110      	movs	r1, #16
 800389e:	430a      	orrs	r2, r1
 80038a0:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038a2:	f7ff fb7d 	bl	8002fa0 <HAL_GetTick>
 80038a6:	0003      	movs	r3, r0
 80038a8:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80038aa:	e014      	b.n	80038d6 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80038ac:	f7ff fb78 	bl	8002fa0 <HAL_GetTick>
 80038b0:	0002      	movs	r2, r0
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d90d      	bls.n	80038d6 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	2210      	movs	r2, #16
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	2201      	movs	r2, #1
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e006      	b.n	80038e4 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	2204      	movs	r2, #4
 80038de:	4013      	ands	r3, r2
 80038e0:	d1e4      	bne.n	80038ac <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	0018      	movs	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b004      	add	sp, #16
 80038ea:	bd80      	pop	{r7, pc}

080038ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	2250      	movs	r2, #80	; 0x50
 8003900:	4013      	ands	r3, r2
 8003902:	d140      	bne.n	8003986 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	2280      	movs	r2, #128	; 0x80
 800390a:	0092      	lsls	r2, r2, #2
 800390c:	431a      	orrs	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	23c0      	movs	r3, #192	; 0xc0
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	4013      	ands	r3, r2
 800391e:	d12d      	bne.n	800397c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003924:	2b00      	cmp	r3, #0
 8003926:	d129      	bne.n	800397c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2208      	movs	r2, #8
 8003930:	4013      	ands	r3, r2
 8003932:	2b08      	cmp	r3, #8
 8003934:	d122      	bne.n	800397c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2204      	movs	r2, #4
 800393e:	4013      	ands	r3, r2
 8003940:	d110      	bne.n	8003964 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	210c      	movs	r1, #12
 800394e:	438a      	bics	r2, r1
 8003950:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	4a11      	ldr	r2, [pc, #68]	; (800399c <ADC_DMAConvCplt+0xb0>)
 8003958:	4013      	ands	r3, r2
 800395a:	2201      	movs	r2, #1
 800395c:	431a      	orrs	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	639a      	str	r2, [r3, #56]	; 0x38
 8003962:	e00b      	b.n	800397c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003968:	2220      	movs	r2, #32
 800396a:	431a      	orrs	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003974:	2201      	movs	r2, #1
 8003976:	431a      	orrs	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	0018      	movs	r0, r3
 8003980:	f7fe fd8e 	bl	80024a0 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003984:	e005      	b.n	8003992 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	0010      	movs	r0, r2
 8003990:	4798      	blx	r3
}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	46bd      	mov	sp, r7
 8003996:	b004      	add	sp, #16
 8003998:	bd80      	pop	{r7, pc}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	fffffefe 	.word	0xfffffefe

080039a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	0018      	movs	r0, r3
 80039b2:	f7ff fd51 	bl	8003458 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b004      	add	sp, #16
 80039bc:	bd80      	pop	{r7, pc}

080039be <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b084      	sub	sp, #16
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	2240      	movs	r2, #64	; 0x40
 80039d2:	431a      	orrs	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039dc:	2204      	movs	r2, #4
 80039de:	431a      	orrs	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	0018      	movs	r0, r3
 80039e8:	f7ff fd3e 	bl	8003468 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039ec:	46c0      	nop			; (mov r8, r8)
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b004      	add	sp, #16
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039fc:	2317      	movs	r3, #23
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	2200      	movs	r2, #0
 8003a02:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2234      	movs	r2, #52	; 0x34
 8003a10:	5c9b      	ldrb	r3, [r3, r2]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_ADCEx_Calibration_Start+0x26>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e084      	b.n	8003b24 <HAL_ADCEx_Calibration_Start+0x130>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2234      	movs	r2, #52	; 0x34
 8003a1e:	2101      	movs	r1, #1
 8003a20:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2203      	movs	r2, #3
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d112      	bne.n	8003a56 <HAL_ADCEx_Calibration_Start+0x62>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2201      	movs	r2, #1
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d009      	beq.n	8003a52 <HAL_ADCEx_Calibration_Start+0x5e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	2380      	movs	r3, #128	; 0x80
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	401a      	ands	r2, r3
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d101      	bne.n	8003a56 <HAL_ADCEx_Calibration_Start+0x62>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <HAL_ADCEx_Calibration_Start+0x64>
 8003a56:	2300      	movs	r3, #0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d152      	bne.n	8003b02 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	4a32      	ldr	r2, [pc, #200]	; (8003b2c <HAL_ADCEx_Calibration_Start+0x138>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	2202      	movs	r2, #2
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	2203      	movs	r2, #3
 8003a74:	4013      	ands	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2103      	movs	r1, #3
 8003a84:	438a      	bics	r2, r1
 8003a86:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2180      	movs	r1, #128	; 0x80
 8003a94:	0609      	lsls	r1, r1, #24
 8003a96:	430a      	orrs	r2, r1
 8003a98:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003a9a:	f7ff fa81 	bl	8002fa0 <HAL_GetTick>
 8003a9e:	0003      	movs	r3, r0
 8003aa0:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003aa2:	e014      	b.n	8003ace <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003aa4:	f7ff fa7c 	bl	8002fa0 <HAL_GetTick>
 8003aa8:	0002      	movs	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d90d      	bls.n	8003ace <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	2212      	movs	r2, #18
 8003ab8:	4393      	bics	r3, r2
 8003aba:	2210      	movs	r2, #16
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2234      	movs	r2, #52	; 0x34
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e02a      	b.n	8003b24 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	0fdb      	lsrs	r3, r3, #31
 8003ad6:	07da      	lsls	r2, r3, #31
 8003ad8:	2380      	movs	r3, #128	; 0x80
 8003ada:	061b      	lsls	r3, r3, #24
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d0e1      	beq.n	8003aa4 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68d9      	ldr	r1, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af4:	2203      	movs	r2, #3
 8003af6:	4393      	bics	r3, r2
 8003af8:	2201      	movs	r2, #1
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	639a      	str	r2, [r3, #56]	; 0x38
 8003b00:	e009      	b.n	8003b16 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b06:	2220      	movs	r2, #32
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003b0e:	2317      	movs	r3, #23
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	2201      	movs	r2, #1
 8003b14:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2234      	movs	r2, #52	; 0x34
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003b1e:	2317      	movs	r3, #23
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	781b      	ldrb	r3, [r3, #0]
}
 8003b24:	0018      	movs	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b006      	add	sp, #24
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	fffffefd 	.word	0xfffffefd

08003b30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e0f0      	b.n	8003d24 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	5c9b      	ldrb	r3, [r3, r2]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d103      	bne.n	8003b56 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7ff f87f 	bl	8002c54 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2102      	movs	r1, #2
 8003b62:	438a      	bics	r2, r1
 8003b64:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b66:	f7ff fa1b 	bl	8002fa0 <HAL_GetTick>
 8003b6a:	0003      	movs	r3, r0
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b6e:	e013      	b.n	8003b98 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b70:	f7ff fa16 	bl	8002fa0 <HAL_GetTick>
 8003b74:	0002      	movs	r2, r0
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b0a      	cmp	r3, #10
 8003b7c:	d90c      	bls.n	8003b98 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	2280      	movs	r2, #128	; 0x80
 8003b84:	0292      	lsls	r2, r2, #10
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	2105      	movs	r1, #5
 8003b92:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0c5      	b.n	8003d24 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d1e5      	bne.n	8003b70 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2101      	movs	r1, #1
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bb4:	f7ff f9f4 	bl	8002fa0 <HAL_GetTick>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003bbc:	e013      	b.n	8003be6 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003bbe:	f7ff f9ef 	bl	8002fa0 <HAL_GetTick>
 8003bc2:	0002      	movs	r2, r0
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b0a      	cmp	r3, #10
 8003bca:	d90c      	bls.n	8003be6 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	2280      	movs	r2, #128	; 0x80
 8003bd2:	0292      	lsls	r2, r2, #10
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	2105      	movs	r1, #5
 8003be0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e09e      	b.n	8003d24 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d0e5      	beq.n	8003bbe <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	7e1b      	ldrb	r3, [r3, #24]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d108      	bne.n	8003c0c <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2180      	movs	r1, #128	; 0x80
 8003c06:	430a      	orrs	r2, r1
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	e007      	b.n	8003c1c <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2180      	movs	r1, #128	; 0x80
 8003c18:	438a      	bics	r2, r1
 8003c1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	7e5b      	ldrb	r3, [r3, #25]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d108      	bne.n	8003c36 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2140      	movs	r1, #64	; 0x40
 8003c30:	430a      	orrs	r2, r1
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	e007      	b.n	8003c46 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2140      	movs	r1, #64	; 0x40
 8003c42:	438a      	bics	r2, r1
 8003c44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	7e9b      	ldrb	r3, [r3, #26]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d108      	bne.n	8003c60 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2120      	movs	r1, #32
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	e007      	b.n	8003c70 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2120      	movs	r1, #32
 8003c6c:	438a      	bics	r2, r1
 8003c6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	7edb      	ldrb	r3, [r3, #27]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d108      	bne.n	8003c8a <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2110      	movs	r1, #16
 8003c84:	438a      	bics	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	e007      	b.n	8003c9a <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2110      	movs	r1, #16
 8003c96:	430a      	orrs	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	7f1b      	ldrb	r3, [r3, #28]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d108      	bne.n	8003cb4 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2108      	movs	r1, #8
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e007      	b.n	8003cc4 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2108      	movs	r1, #8
 8003cc0:	438a      	bics	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	7f5b      	ldrb	r3, [r3, #29]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d108      	bne.n	8003cde <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2104      	movs	r1, #4
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	e007      	b.n	8003cee <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2104      	movs	r1, #4
 8003cea:	438a      	bics	r2, r1
 8003cec:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	0011      	movs	r1, r2
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	1e5a      	subs	r2, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	2101      	movs	r1, #1
 8003d20:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	0018      	movs	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b004      	add	sp, #16
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	0002      	movs	r2, r0
 8003d34:	1dfb      	adds	r3, r7, #7
 8003d36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d38:	1dfb      	adds	r3, r7, #7
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8003d3e:	d809      	bhi.n	8003d54 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d40:	1dfb      	adds	r3, r7, #7
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	001a      	movs	r2, r3
 8003d46:	231f      	movs	r3, #31
 8003d48:	401a      	ands	r2, r3
 8003d4a:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <__NVIC_EnableIRQ+0x30>)
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	4091      	lsls	r1, r2
 8003d50:	000a      	movs	r2, r1
 8003d52:	601a      	str	r2, [r3, #0]
  }
}
 8003d54:	46c0      	nop			; (mov r8, r8)
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b002      	add	sp, #8
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	e000e100 	.word	0xe000e100

08003d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d60:	b590      	push	{r4, r7, lr}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	0002      	movs	r2, r0
 8003d68:	6039      	str	r1, [r7, #0]
 8003d6a:	1dfb      	adds	r3, r7, #7
 8003d6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d6e:	1dfb      	adds	r3, r7, #7
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b7f      	cmp	r3, #127	; 0x7f
 8003d74:	d828      	bhi.n	8003dc8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d76:	4a2f      	ldr	r2, [pc, #188]	; (8003e34 <__NVIC_SetPriority+0xd4>)
 8003d78:	1dfb      	adds	r3, r7, #7
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	b25b      	sxtb	r3, r3
 8003d7e:	089b      	lsrs	r3, r3, #2
 8003d80:	33c0      	adds	r3, #192	; 0xc0
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	589b      	ldr	r3, [r3, r2]
 8003d86:	1dfa      	adds	r2, r7, #7
 8003d88:	7812      	ldrb	r2, [r2, #0]
 8003d8a:	0011      	movs	r1, r2
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	400a      	ands	r2, r1
 8003d90:	00d2      	lsls	r2, r2, #3
 8003d92:	21ff      	movs	r1, #255	; 0xff
 8003d94:	4091      	lsls	r1, r2
 8003d96:	000a      	movs	r2, r1
 8003d98:	43d2      	mvns	r2, r2
 8003d9a:	401a      	ands	r2, r3
 8003d9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	019b      	lsls	r3, r3, #6
 8003da2:	22ff      	movs	r2, #255	; 0xff
 8003da4:	401a      	ands	r2, r3
 8003da6:	1dfb      	adds	r3, r7, #7
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	0018      	movs	r0, r3
 8003dac:	2303      	movs	r3, #3
 8003dae:	4003      	ands	r3, r0
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003db4:	481f      	ldr	r0, [pc, #124]	; (8003e34 <__NVIC_SetPriority+0xd4>)
 8003db6:	1dfb      	adds	r3, r7, #7
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	b25b      	sxtb	r3, r3
 8003dbc:	089b      	lsrs	r3, r3, #2
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	33c0      	adds	r3, #192	; 0xc0
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003dc6:	e031      	b.n	8003e2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003dc8:	4a1b      	ldr	r2, [pc, #108]	; (8003e38 <__NVIC_SetPriority+0xd8>)
 8003dca:	1dfb      	adds	r3, r7, #7
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	0019      	movs	r1, r3
 8003dd0:	230f      	movs	r3, #15
 8003dd2:	400b      	ands	r3, r1
 8003dd4:	3b08      	subs	r3, #8
 8003dd6:	089b      	lsrs	r3, r3, #2
 8003dd8:	3306      	adds	r3, #6
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	18d3      	adds	r3, r2, r3
 8003dde:	3304      	adds	r3, #4
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	1dfa      	adds	r2, r7, #7
 8003de4:	7812      	ldrb	r2, [r2, #0]
 8003de6:	0011      	movs	r1, r2
 8003de8:	2203      	movs	r2, #3
 8003dea:	400a      	ands	r2, r1
 8003dec:	00d2      	lsls	r2, r2, #3
 8003dee:	21ff      	movs	r1, #255	; 0xff
 8003df0:	4091      	lsls	r1, r2
 8003df2:	000a      	movs	r2, r1
 8003df4:	43d2      	mvns	r2, r2
 8003df6:	401a      	ands	r2, r3
 8003df8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	019b      	lsls	r3, r3, #6
 8003dfe:	22ff      	movs	r2, #255	; 0xff
 8003e00:	401a      	ands	r2, r3
 8003e02:	1dfb      	adds	r3, r7, #7
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	0018      	movs	r0, r3
 8003e08:	2303      	movs	r3, #3
 8003e0a:	4003      	ands	r3, r0
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e10:	4809      	ldr	r0, [pc, #36]	; (8003e38 <__NVIC_SetPriority+0xd8>)
 8003e12:	1dfb      	adds	r3, r7, #7
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	001c      	movs	r4, r3
 8003e18:	230f      	movs	r3, #15
 8003e1a:	4023      	ands	r3, r4
 8003e1c:	3b08      	subs	r3, #8
 8003e1e:	089b      	lsrs	r3, r3, #2
 8003e20:	430a      	orrs	r2, r1
 8003e22:	3306      	adds	r3, #6
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	18c3      	adds	r3, r0, r3
 8003e28:	3304      	adds	r3, #4
 8003e2a:	601a      	str	r2, [r3, #0]
}
 8003e2c:	46c0      	nop			; (mov r8, r8)
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	b003      	add	sp, #12
 8003e32:	bd90      	pop	{r4, r7, pc}
 8003e34:	e000e100 	.word	0xe000e100
 8003e38:	e000ed00 	.word	0xe000ed00

08003e3c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	607a      	str	r2, [r7, #4]
 8003e46:	210f      	movs	r1, #15
 8003e48:	187b      	adds	r3, r7, r1
 8003e4a:	1c02      	adds	r2, r0, #0
 8003e4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	187b      	adds	r3, r7, r1
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	b25b      	sxtb	r3, r3
 8003e56:	0011      	movs	r1, r2
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f7ff ff81 	bl	8003d60 <__NVIC_SetPriority>
}
 8003e5e:	46c0      	nop			; (mov r8, r8)
 8003e60:	46bd      	mov	sp, r7
 8003e62:	b004      	add	sp, #16
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	0002      	movs	r2, r0
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e72:	1dfb      	adds	r3, r7, #7
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	b25b      	sxtb	r3, r3
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f7ff ff57 	bl	8003d2c <__NVIC_EnableIRQ>
}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b002      	add	sp, #8
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e036      	b.n	8003f0c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2221      	movs	r2, #33	; 0x21
 8003ea2:	2102      	movs	r1, #2
 8003ea4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4a18      	ldr	r2, [pc, #96]	; (8003f14 <HAL_DMA_Init+0x8c>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ed6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f000 f97e 	bl	80041f0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2221      	movs	r2, #33	; 0x21
 8003efe:	2101      	movs	r1, #1
 8003f00:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2220      	movs	r2, #32
 8003f06:	2100      	movs	r1, #0
 8003f08:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}  
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b004      	add	sp, #16
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	ffffc00f 	.word	0xffffc00f

08003f18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003f26:	2317      	movs	r3, #23
 8003f28:	18fb      	adds	r3, r7, r3
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	5c9b      	ldrb	r3, [r3, r2]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <HAL_DMA_Start_IT+0x24>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e04f      	b.n	8003fdc <HAL_DMA_Start_IT+0xc4>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	2101      	movs	r1, #1
 8003f42:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2221      	movs	r2, #33	; 0x21
 8003f48:	5c9b      	ldrb	r3, [r3, r2]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d13a      	bne.n	8003fc6 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2221      	movs	r2, #33	; 0x21
 8003f54:	2102      	movs	r1, #2
 8003f56:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2101      	movs	r1, #1
 8003f6a:	438a      	bics	r2, r1
 8003f6c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 f90f 	bl	8004198 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d008      	beq.n	8003f94 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	210e      	movs	r1, #14
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	e00f      	b.n	8003fb4 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	210a      	movs	r1, #10
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2104      	movs	r1, #4
 8003fb0:	438a      	bics	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	e007      	b.n	8003fd6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	2100      	movs	r1, #0
 8003fcc:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003fce:	2317      	movs	r3, #23
 8003fd0:	18fb      	adds	r3, r7, r3
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8003fd6:	2317      	movs	r3, #23
 8003fd8:	18fb      	adds	r3, r7, r3
 8003fda:	781b      	ldrb	r3, [r3, #0]
} 
 8003fdc:	0018      	movs	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b006      	add	sp, #24
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2221      	movs	r2, #33	; 0x21
 8003ff0:	5c9b      	ldrb	r3, [r3, r2]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d008      	beq.n	800400a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2204      	movs	r2, #4
 8003ffc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2220      	movs	r2, #32
 8004002:	2100      	movs	r1, #0
 8004004:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e020      	b.n	800404c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	210e      	movs	r1, #14
 8004016:	438a      	bics	r2, r1
 8004018:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2101      	movs	r1, #1
 8004026:	438a      	bics	r2, r1
 8004028:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004032:	2101      	movs	r1, #1
 8004034:	4091      	lsls	r1, r2
 8004036:	000a      	movs	r2, r1
 8004038:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2221      	movs	r2, #33	; 0x21
 800403e:	2101      	movs	r1, #1
 8004040:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	2100      	movs	r1, #0
 8004048:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	0018      	movs	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	b002      	add	sp, #8
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	2204      	movs	r2, #4
 8004072:	409a      	lsls	r2, r3
 8004074:	0013      	movs	r3, r2
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4013      	ands	r3, r2
 800407a:	d024      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x72>
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2204      	movs	r2, #4
 8004080:	4013      	ands	r3, r2
 8004082:	d020      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2220      	movs	r2, #32
 800408c:	4013      	ands	r3, r2
 800408e:	d107      	bne.n	80040a0 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2104      	movs	r1, #4
 800409c:	438a      	bics	r2, r1
 800409e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a8:	2104      	movs	r1, #4
 80040aa:	4091      	lsls	r1, r2
 80040ac:	000a      	movs	r2, r1
 80040ae:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d100      	bne.n	80040ba <HAL_DMA_IRQHandler+0x66>
 80040b8:	e06a      	b.n	8004190 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	0010      	movs	r0, r2
 80040c2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80040c4:	e064      	b.n	8004190 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	2202      	movs	r2, #2
 80040cc:	409a      	lsls	r2, r3
 80040ce:	0013      	movs	r3, r2
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4013      	ands	r3, r2
 80040d4:	d02b      	beq.n	800412e <HAL_DMA_IRQHandler+0xda>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2202      	movs	r2, #2
 80040da:	4013      	ands	r3, r2
 80040dc:	d027      	beq.n	800412e <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2220      	movs	r2, #32
 80040e6:	4013      	ands	r3, r2
 80040e8:	d10b      	bne.n	8004102 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	210a      	movs	r1, #10
 80040f6:	438a      	bics	r2, r1
 80040f8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2221      	movs	r2, #33	; 0x21
 80040fe:	2101      	movs	r1, #1
 8004100:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410a:	2102      	movs	r1, #2
 800410c:	4091      	lsls	r1, r2
 800410e:	000a      	movs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	2100      	movs	r1, #0
 8004118:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411e:	2b00      	cmp	r3, #0
 8004120:	d036      	beq.n	8004190 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	0010      	movs	r0, r2
 800412a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800412c:	e030      	b.n	8004190 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	2208      	movs	r2, #8
 8004134:	409a      	lsls	r2, r3
 8004136:	0013      	movs	r3, r2
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4013      	ands	r3, r2
 800413c:	d028      	beq.n	8004190 <HAL_DMA_IRQHandler+0x13c>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2208      	movs	r2, #8
 8004142:	4013      	ands	r3, r2
 8004144:	d024      	beq.n	8004190 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	210e      	movs	r1, #14
 8004152:	438a      	bics	r2, r1
 8004154:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415e:	2101      	movs	r1, #1
 8004160:	4091      	lsls	r1, r2
 8004162:	000a      	movs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2221      	movs	r2, #33	; 0x21
 8004170:	2101      	movs	r1, #1
 8004172:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	2100      	movs	r1, #0
 800417a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	0010      	movs	r0, r2
 800418c:	4798      	blx	r3
    }
   }
}  
 800418e:	e7ff      	b.n	8004190 <HAL_DMA_IRQHandler+0x13c>
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	46bd      	mov	sp, r7
 8004194:	b004      	add	sp, #16
 8004196:	bd80      	pop	{r7, pc}

08004198 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ae:	2101      	movs	r1, #1
 80041b0:	4091      	lsls	r1, r2
 80041b2:	000a      	movs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b10      	cmp	r3, #16
 80041c4:	d108      	bne.n	80041d8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041d6:	e007      	b.n	80041e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	60da      	str	r2, [r3, #12]
}
 80041e8:	46c0      	nop			; (mov r8, r8)
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b004      	add	sp, #16
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a08      	ldr	r2, [pc, #32]	; (8004220 <DMA_CalcBaseAndBitshift+0x30>)
 80041fe:	4694      	mov	ip, r2
 8004200:	4463      	add	r3, ip
 8004202:	2114      	movs	r1, #20
 8004204:	0018      	movs	r0, r3
 8004206:	f7fb ff7f 	bl	8000108 <__udivsi3>
 800420a:	0003      	movs	r3, r0
 800420c:	009a      	lsls	r2, r3, #2
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a03      	ldr	r2, [pc, #12]	; (8004224 <DMA_CalcBaseAndBitshift+0x34>)
 8004216:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004218:	46c0      	nop			; (mov r8, r8)
 800421a:	46bd      	mov	sp, r7
 800421c:	b002      	add	sp, #8
 800421e:	bd80      	pop	{r7, pc}
 8004220:	bffdfff8 	.word	0xbffdfff8
 8004224:	40020000 	.word	0x40020000

08004228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004236:	e155      	b.n	80044e4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2101      	movs	r1, #1
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4091      	lsls	r1, r2
 8004242:	000a      	movs	r2, r1
 8004244:	4013      	ands	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d100      	bne.n	8004250 <HAL_GPIO_Init+0x28>
 800424e:	e146      	b.n	80044de <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d003      	beq.n	8004260 <HAL_GPIO_Init+0x38>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b12      	cmp	r3, #18
 800425e:	d123      	bne.n	80042a8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	08da      	lsrs	r2, r3, #3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3208      	adds	r2, #8
 8004268:	0092      	lsls	r2, r2, #2
 800426a:	58d3      	ldr	r3, [r2, r3]
 800426c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2207      	movs	r2, #7
 8004272:	4013      	ands	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	220f      	movs	r2, #15
 8004278:	409a      	lsls	r2, r3
 800427a:	0013      	movs	r3, r2
 800427c:	43da      	mvns	r2, r3
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	4013      	ands	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2107      	movs	r1, #7
 800428c:	400b      	ands	r3, r1
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	409a      	lsls	r2, r3
 8004292:	0013      	movs	r3, r2
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	4313      	orrs	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	08da      	lsrs	r2, r3, #3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3208      	adds	r2, #8
 80042a2:	0092      	lsls	r2, r2, #2
 80042a4:	6939      	ldr	r1, [r7, #16]
 80042a6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	2203      	movs	r2, #3
 80042b4:	409a      	lsls	r2, r3
 80042b6:	0013      	movs	r3, r2
 80042b8:	43da      	mvns	r2, r3
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	4013      	ands	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2203      	movs	r2, #3
 80042c6:	401a      	ands	r2, r3
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	409a      	lsls	r2, r3
 80042ce:	0013      	movs	r3, r2
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d00b      	beq.n	80042fc <HAL_GPIO_Init+0xd4>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d007      	beq.n	80042fc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042f0:	2b11      	cmp	r3, #17
 80042f2:	d003      	beq.n	80042fc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b12      	cmp	r3, #18
 80042fa:	d130      	bne.n	800435e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	2203      	movs	r2, #3
 8004308:	409a      	lsls	r2, r3
 800430a:	0013      	movs	r3, r2
 800430c:	43da      	mvns	r2, r3
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	4013      	ands	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	409a      	lsls	r2, r3
 800431e:	0013      	movs	r3, r2
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004332:	2201      	movs	r2, #1
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	409a      	lsls	r2, r3
 8004338:	0013      	movs	r3, r2
 800433a:	43da      	mvns	r2, r3
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	4013      	ands	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	091b      	lsrs	r3, r3, #4
 8004348:	2201      	movs	r2, #1
 800434a:	401a      	ands	r2, r3
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	409a      	lsls	r2, r3
 8004350:	0013      	movs	r3, r2
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	2203      	movs	r2, #3
 800436a:	409a      	lsls	r2, r3
 800436c:	0013      	movs	r3, r2
 800436e:	43da      	mvns	r2, r3
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	4013      	ands	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	409a      	lsls	r2, r3
 8004380:	0013      	movs	r3, r2
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	2380      	movs	r3, #128	; 0x80
 8004394:	055b      	lsls	r3, r3, #21
 8004396:	4013      	ands	r3, r2
 8004398:	d100      	bne.n	800439c <HAL_GPIO_Init+0x174>
 800439a:	e0a0      	b.n	80044de <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800439c:	4b57      	ldr	r3, [pc, #348]	; (80044fc <HAL_GPIO_Init+0x2d4>)
 800439e:	699a      	ldr	r2, [r3, #24]
 80043a0:	4b56      	ldr	r3, [pc, #344]	; (80044fc <HAL_GPIO_Init+0x2d4>)
 80043a2:	2101      	movs	r1, #1
 80043a4:	430a      	orrs	r2, r1
 80043a6:	619a      	str	r2, [r3, #24]
 80043a8:	4b54      	ldr	r3, [pc, #336]	; (80044fc <HAL_GPIO_Init+0x2d4>)
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	2201      	movs	r2, #1
 80043ae:	4013      	ands	r3, r2
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80043b4:	4a52      	ldr	r2, [pc, #328]	; (8004500 <HAL_GPIO_Init+0x2d8>)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	089b      	lsrs	r3, r3, #2
 80043ba:	3302      	adds	r3, #2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	589b      	ldr	r3, [r3, r2]
 80043c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2203      	movs	r2, #3
 80043c6:	4013      	ands	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	220f      	movs	r2, #15
 80043cc:	409a      	lsls	r2, r3
 80043ce:	0013      	movs	r3, r2
 80043d0:	43da      	mvns	r2, r3
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4013      	ands	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	2390      	movs	r3, #144	; 0x90
 80043dc:	05db      	lsls	r3, r3, #23
 80043de:	429a      	cmp	r2, r3
 80043e0:	d019      	beq.n	8004416 <HAL_GPIO_Init+0x1ee>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a47      	ldr	r2, [pc, #284]	; (8004504 <HAL_GPIO_Init+0x2dc>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d013      	beq.n	8004412 <HAL_GPIO_Init+0x1ea>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a46      	ldr	r2, [pc, #280]	; (8004508 <HAL_GPIO_Init+0x2e0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00d      	beq.n	800440e <HAL_GPIO_Init+0x1e6>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a45      	ldr	r2, [pc, #276]	; (800450c <HAL_GPIO_Init+0x2e4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d007      	beq.n	800440a <HAL_GPIO_Init+0x1e2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a44      	ldr	r2, [pc, #272]	; (8004510 <HAL_GPIO_Init+0x2e8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d101      	bne.n	8004406 <HAL_GPIO_Init+0x1de>
 8004402:	2304      	movs	r3, #4
 8004404:	e008      	b.n	8004418 <HAL_GPIO_Init+0x1f0>
 8004406:	2305      	movs	r3, #5
 8004408:	e006      	b.n	8004418 <HAL_GPIO_Init+0x1f0>
 800440a:	2303      	movs	r3, #3
 800440c:	e004      	b.n	8004418 <HAL_GPIO_Init+0x1f0>
 800440e:	2302      	movs	r3, #2
 8004410:	e002      	b.n	8004418 <HAL_GPIO_Init+0x1f0>
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <HAL_GPIO_Init+0x1f0>
 8004416:	2300      	movs	r3, #0
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	2103      	movs	r1, #3
 800441c:	400a      	ands	r2, r1
 800441e:	0092      	lsls	r2, r2, #2
 8004420:	4093      	lsls	r3, r2
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004428:	4935      	ldr	r1, [pc, #212]	; (8004500 <HAL_GPIO_Init+0x2d8>)
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	089b      	lsrs	r3, r3, #2
 800442e:	3302      	adds	r3, #2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004436:	4b37      	ldr	r3, [pc, #220]	; (8004514 <HAL_GPIO_Init+0x2ec>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	43da      	mvns	r2, r3
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	4013      	ands	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	2380      	movs	r3, #128	; 0x80
 800444c:	025b      	lsls	r3, r3, #9
 800444e:	4013      	ands	r3, r2
 8004450:	d003      	beq.n	800445a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800445a:	4b2e      	ldr	r3, [pc, #184]	; (8004514 <HAL_GPIO_Init+0x2ec>)
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004460:	4b2c      	ldr	r3, [pc, #176]	; (8004514 <HAL_GPIO_Init+0x2ec>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	43da      	mvns	r2, r3
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4013      	ands	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	2380      	movs	r3, #128	; 0x80
 8004476:	029b      	lsls	r3, r3, #10
 8004478:	4013      	ands	r3, r2
 800447a:	d003      	beq.n	8004484 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004484:	4b23      	ldr	r3, [pc, #140]	; (8004514 <HAL_GPIO_Init+0x2ec>)
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800448a:	4b22      	ldr	r3, [pc, #136]	; (8004514 <HAL_GPIO_Init+0x2ec>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	43da      	mvns	r2, r3
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4013      	ands	r3, r2
 8004498:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	2380      	movs	r3, #128	; 0x80
 80044a0:	035b      	lsls	r3, r3, #13
 80044a2:	4013      	ands	r3, r2
 80044a4:	d003      	beq.n	80044ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80044ae:	4b19      	ldr	r3, [pc, #100]	; (8004514 <HAL_GPIO_Init+0x2ec>)
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80044b4:	4b17      	ldr	r3, [pc, #92]	; (8004514 <HAL_GPIO_Init+0x2ec>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	43da      	mvns	r2, r3
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	4013      	ands	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	2380      	movs	r3, #128	; 0x80
 80044ca:	039b      	lsls	r3, r3, #14
 80044cc:	4013      	ands	r3, r2
 80044ce:	d003      	beq.n	80044d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80044d8:	4b0e      	ldr	r3, [pc, #56]	; (8004514 <HAL_GPIO_Init+0x2ec>)
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	3301      	adds	r3, #1
 80044e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	40da      	lsrs	r2, r3
 80044ec:	1e13      	subs	r3, r2, #0
 80044ee:	d000      	beq.n	80044f2 <HAL_GPIO_Init+0x2ca>
 80044f0:	e6a2      	b.n	8004238 <HAL_GPIO_Init+0x10>
  } 
}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b006      	add	sp, #24
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	40021000 	.word	0x40021000
 8004500:	40010000 	.word	0x40010000
 8004504:	48000400 	.word	0x48000400
 8004508:	48000800 	.word	0x48000800
 800450c:	48000c00 	.word	0x48000c00
 8004510:	48001000 	.word	0x48001000
 8004514:	40010400 	.word	0x40010400

08004518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	0008      	movs	r0, r1
 8004522:	0011      	movs	r1, r2
 8004524:	1cbb      	adds	r3, r7, #2
 8004526:	1c02      	adds	r2, r0, #0
 8004528:	801a      	strh	r2, [r3, #0]
 800452a:	1c7b      	adds	r3, r7, #1
 800452c:	1c0a      	adds	r2, r1, #0
 800452e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004530:	1c7b      	adds	r3, r7, #1
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d004      	beq.n	8004542 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004538:	1cbb      	adds	r3, r7, #2
 800453a:	881a      	ldrh	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004540:	e003      	b.n	800454a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004542:	1cbb      	adds	r3, r7, #2
 8004544:	881a      	ldrh	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	629a      	str	r2, [r3, #40]	; 0x28
}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	46bd      	mov	sp, r7
 800454e:	b002      	add	sp, #8
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b082      	sub	sp, #8
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	000a      	movs	r2, r1
 800455c:	1cbb      	adds	r3, r7, #2
 800455e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	1cba      	adds	r2, r7, #2
 8004566:	8812      	ldrh	r2, [r2, #0]
 8004568:	4013      	ands	r3, r2
 800456a:	d005      	beq.n	8004578 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800456c:	1cbb      	adds	r3, r7, #2
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	041a      	lsls	r2, r3, #16
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8004576:	e003      	b.n	8004580 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004578:	1cbb      	adds	r3, r7, #2
 800457a:	881a      	ldrh	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	619a      	str	r2, [r3, #24]
}
 8004580:	46c0      	nop			; (mov r8, r8)
 8004582:	46bd      	mov	sp, r7
 8004584:	b002      	add	sp, #8
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d102      	bne.n	800459c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	f000 fb76 	bl	8004c88 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2201      	movs	r2, #1
 80045a2:	4013      	ands	r3, r2
 80045a4:	d100      	bne.n	80045a8 <HAL_RCC_OscConfig+0x20>
 80045a6:	e08e      	b.n	80046c6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80045a8:	4bc5      	ldr	r3, [pc, #788]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	220c      	movs	r2, #12
 80045ae:	4013      	ands	r3, r2
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d00e      	beq.n	80045d2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045b4:	4bc2      	ldr	r3, [pc, #776]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	220c      	movs	r2, #12
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d117      	bne.n	80045f0 <HAL_RCC_OscConfig+0x68>
 80045c0:	4bbf      	ldr	r3, [pc, #764]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	23c0      	movs	r3, #192	; 0xc0
 80045c6:	025b      	lsls	r3, r3, #9
 80045c8:	401a      	ands	r2, r3
 80045ca:	2380      	movs	r3, #128	; 0x80
 80045cc:	025b      	lsls	r3, r3, #9
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d10e      	bne.n	80045f0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d2:	4bbb      	ldr	r3, [pc, #748]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	2380      	movs	r3, #128	; 0x80
 80045d8:	029b      	lsls	r3, r3, #10
 80045da:	4013      	ands	r3, r2
 80045dc:	d100      	bne.n	80045e0 <HAL_RCC_OscConfig+0x58>
 80045de:	e071      	b.n	80046c4 <HAL_RCC_OscConfig+0x13c>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d000      	beq.n	80045ea <HAL_RCC_OscConfig+0x62>
 80045e8:	e06c      	b.n	80046c4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f000 fb4c 	bl	8004c88 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d107      	bne.n	8004608 <HAL_RCC_OscConfig+0x80>
 80045f8:	4bb1      	ldr	r3, [pc, #708]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	4bb0      	ldr	r3, [pc, #704]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 80045fe:	2180      	movs	r1, #128	; 0x80
 8004600:	0249      	lsls	r1, r1, #9
 8004602:	430a      	orrs	r2, r1
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	e02f      	b.n	8004668 <HAL_RCC_OscConfig+0xe0>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10c      	bne.n	800462a <HAL_RCC_OscConfig+0xa2>
 8004610:	4bab      	ldr	r3, [pc, #684]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	4baa      	ldr	r3, [pc, #680]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 8004616:	49ab      	ldr	r1, [pc, #684]	; (80048c4 <HAL_RCC_OscConfig+0x33c>)
 8004618:	400a      	ands	r2, r1
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	4ba8      	ldr	r3, [pc, #672]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	4ba7      	ldr	r3, [pc, #668]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 8004622:	49a9      	ldr	r1, [pc, #676]	; (80048c8 <HAL_RCC_OscConfig+0x340>)
 8004624:	400a      	ands	r2, r1
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	e01e      	b.n	8004668 <HAL_RCC_OscConfig+0xe0>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b05      	cmp	r3, #5
 8004630:	d10e      	bne.n	8004650 <HAL_RCC_OscConfig+0xc8>
 8004632:	4ba3      	ldr	r3, [pc, #652]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4ba2      	ldr	r3, [pc, #648]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 8004638:	2180      	movs	r1, #128	; 0x80
 800463a:	02c9      	lsls	r1, r1, #11
 800463c:	430a      	orrs	r2, r1
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	4b9f      	ldr	r3, [pc, #636]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	4b9e      	ldr	r3, [pc, #632]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 8004646:	2180      	movs	r1, #128	; 0x80
 8004648:	0249      	lsls	r1, r1, #9
 800464a:	430a      	orrs	r2, r1
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	e00b      	b.n	8004668 <HAL_RCC_OscConfig+0xe0>
 8004650:	4b9b      	ldr	r3, [pc, #620]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b9a      	ldr	r3, [pc, #616]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 8004656:	499b      	ldr	r1, [pc, #620]	; (80048c4 <HAL_RCC_OscConfig+0x33c>)
 8004658:	400a      	ands	r2, r1
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	4b98      	ldr	r3, [pc, #608]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b97      	ldr	r3, [pc, #604]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 8004662:	4999      	ldr	r1, [pc, #612]	; (80048c8 <HAL_RCC_OscConfig+0x340>)
 8004664:	400a      	ands	r2, r1
 8004666:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d014      	beq.n	800469a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004670:	f7fe fc96 	bl	8002fa0 <HAL_GetTick>
 8004674:	0003      	movs	r3, r0
 8004676:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800467a:	f7fe fc91 	bl	8002fa0 <HAL_GetTick>
 800467e:	0002      	movs	r2, r0
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b64      	cmp	r3, #100	; 0x64
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e2fd      	b.n	8004c88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468c:	4b8c      	ldr	r3, [pc, #560]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	2380      	movs	r3, #128	; 0x80
 8004692:	029b      	lsls	r3, r3, #10
 8004694:	4013      	ands	r3, r2
 8004696:	d0f0      	beq.n	800467a <HAL_RCC_OscConfig+0xf2>
 8004698:	e015      	b.n	80046c6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469a:	f7fe fc81 	bl	8002fa0 <HAL_GetTick>
 800469e:	0003      	movs	r3, r0
 80046a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046a4:	f7fe fc7c 	bl	8002fa0 <HAL_GetTick>
 80046a8:	0002      	movs	r2, r0
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b64      	cmp	r3, #100	; 0x64
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e2e8      	b.n	8004c88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046b6:	4b82      	ldr	r3, [pc, #520]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	2380      	movs	r3, #128	; 0x80
 80046bc:	029b      	lsls	r3, r3, #10
 80046be:	4013      	ands	r3, r2
 80046c0:	d1f0      	bne.n	80046a4 <HAL_RCC_OscConfig+0x11c>
 80046c2:	e000      	b.n	80046c6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2202      	movs	r2, #2
 80046cc:	4013      	ands	r3, r2
 80046ce:	d100      	bne.n	80046d2 <HAL_RCC_OscConfig+0x14a>
 80046d0:	e06c      	b.n	80047ac <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80046d2:	4b7b      	ldr	r3, [pc, #492]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	220c      	movs	r2, #12
 80046d8:	4013      	ands	r3, r2
 80046da:	d00e      	beq.n	80046fa <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80046dc:	4b78      	ldr	r3, [pc, #480]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	220c      	movs	r2, #12
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d11f      	bne.n	8004728 <HAL_RCC_OscConfig+0x1a0>
 80046e8:	4b75      	ldr	r3, [pc, #468]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	23c0      	movs	r3, #192	; 0xc0
 80046ee:	025b      	lsls	r3, r3, #9
 80046f0:	401a      	ands	r2, r3
 80046f2:	2380      	movs	r3, #128	; 0x80
 80046f4:	021b      	lsls	r3, r3, #8
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d116      	bne.n	8004728 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046fa:	4b71      	ldr	r3, [pc, #452]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2202      	movs	r2, #2
 8004700:	4013      	ands	r3, r2
 8004702:	d005      	beq.n	8004710 <HAL_RCC_OscConfig+0x188>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d001      	beq.n	8004710 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e2bb      	b.n	8004c88 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004710:	4b6b      	ldr	r3, [pc, #428]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	22f8      	movs	r2, #248	; 0xf8
 8004716:	4393      	bics	r3, r2
 8004718:	0019      	movs	r1, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	00da      	lsls	r2, r3, #3
 8004720:	4b67      	ldr	r3, [pc, #412]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 8004722:	430a      	orrs	r2, r1
 8004724:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004726:	e041      	b.n	80047ac <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d024      	beq.n	800477a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004730:	4b63      	ldr	r3, [pc, #396]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	4b62      	ldr	r3, [pc, #392]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 8004736:	2101      	movs	r1, #1
 8004738:	430a      	orrs	r2, r1
 800473a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473c:	f7fe fc30 	bl	8002fa0 <HAL_GetTick>
 8004740:	0003      	movs	r3, r0
 8004742:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004746:	f7fe fc2b 	bl	8002fa0 <HAL_GetTick>
 800474a:	0002      	movs	r2, r0
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e297      	b.n	8004c88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004758:	4b59      	ldr	r3, [pc, #356]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2202      	movs	r2, #2
 800475e:	4013      	ands	r3, r2
 8004760:	d0f1      	beq.n	8004746 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004762:	4b57      	ldr	r3, [pc, #348]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	22f8      	movs	r2, #248	; 0xf8
 8004768:	4393      	bics	r3, r2
 800476a:	0019      	movs	r1, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	00da      	lsls	r2, r3, #3
 8004772:	4b53      	ldr	r3, [pc, #332]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 8004774:	430a      	orrs	r2, r1
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	e018      	b.n	80047ac <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800477a:	4b51      	ldr	r3, [pc, #324]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	4b50      	ldr	r3, [pc, #320]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 8004780:	2101      	movs	r1, #1
 8004782:	438a      	bics	r2, r1
 8004784:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004786:	f7fe fc0b 	bl	8002fa0 <HAL_GetTick>
 800478a:	0003      	movs	r3, r0
 800478c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004790:	f7fe fc06 	bl	8002fa0 <HAL_GetTick>
 8004794:	0002      	movs	r2, r0
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e272      	b.n	8004c88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047a2:	4b47      	ldr	r3, [pc, #284]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2202      	movs	r2, #2
 80047a8:	4013      	ands	r3, r2
 80047aa:	d1f1      	bne.n	8004790 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2208      	movs	r2, #8
 80047b2:	4013      	ands	r3, r2
 80047b4:	d036      	beq.n	8004824 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d019      	beq.n	80047f2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047be:	4b40      	ldr	r3, [pc, #256]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 80047c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047c2:	4b3f      	ldr	r3, [pc, #252]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 80047c4:	2101      	movs	r1, #1
 80047c6:	430a      	orrs	r2, r1
 80047c8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ca:	f7fe fbe9 	bl	8002fa0 <HAL_GetTick>
 80047ce:	0003      	movs	r3, r0
 80047d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047d4:	f7fe fbe4 	bl	8002fa0 <HAL_GetTick>
 80047d8:	0002      	movs	r2, r0
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e250      	b.n	8004c88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047e6:	4b36      	ldr	r3, [pc, #216]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	2202      	movs	r2, #2
 80047ec:	4013      	ands	r3, r2
 80047ee:	d0f1      	beq.n	80047d4 <HAL_RCC_OscConfig+0x24c>
 80047f0:	e018      	b.n	8004824 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047f2:	4b33      	ldr	r3, [pc, #204]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 80047f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047f6:	4b32      	ldr	r3, [pc, #200]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 80047f8:	2101      	movs	r1, #1
 80047fa:	438a      	bics	r2, r1
 80047fc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047fe:	f7fe fbcf 	bl	8002fa0 <HAL_GetTick>
 8004802:	0003      	movs	r3, r0
 8004804:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004808:	f7fe fbca 	bl	8002fa0 <HAL_GetTick>
 800480c:	0002      	movs	r2, r0
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e236      	b.n	8004c88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800481a:	4b29      	ldr	r3, [pc, #164]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	2202      	movs	r2, #2
 8004820:	4013      	ands	r3, r2
 8004822:	d1f1      	bne.n	8004808 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2204      	movs	r2, #4
 800482a:	4013      	ands	r3, r2
 800482c:	d100      	bne.n	8004830 <HAL_RCC_OscConfig+0x2a8>
 800482e:	e0b5      	b.n	800499c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004830:	231f      	movs	r3, #31
 8004832:	18fb      	adds	r3, r7, r3
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004838:	4b21      	ldr	r3, [pc, #132]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 800483a:	69da      	ldr	r2, [r3, #28]
 800483c:	2380      	movs	r3, #128	; 0x80
 800483e:	055b      	lsls	r3, r3, #21
 8004840:	4013      	ands	r3, r2
 8004842:	d111      	bne.n	8004868 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004844:	4b1e      	ldr	r3, [pc, #120]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	4b1d      	ldr	r3, [pc, #116]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 800484a:	2180      	movs	r1, #128	; 0x80
 800484c:	0549      	lsls	r1, r1, #21
 800484e:	430a      	orrs	r2, r1
 8004850:	61da      	str	r2, [r3, #28]
 8004852:	4b1b      	ldr	r3, [pc, #108]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 8004854:	69da      	ldr	r2, [r3, #28]
 8004856:	2380      	movs	r3, #128	; 0x80
 8004858:	055b      	lsls	r3, r3, #21
 800485a:	4013      	ands	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004860:	231f      	movs	r3, #31
 8004862:	18fb      	adds	r3, r7, r3
 8004864:	2201      	movs	r2, #1
 8004866:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004868:	4b18      	ldr	r3, [pc, #96]	; (80048cc <HAL_RCC_OscConfig+0x344>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	2380      	movs	r3, #128	; 0x80
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	4013      	ands	r3, r2
 8004872:	d11a      	bne.n	80048aa <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004874:	4b15      	ldr	r3, [pc, #84]	; (80048cc <HAL_RCC_OscConfig+0x344>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	4b14      	ldr	r3, [pc, #80]	; (80048cc <HAL_RCC_OscConfig+0x344>)
 800487a:	2180      	movs	r1, #128	; 0x80
 800487c:	0049      	lsls	r1, r1, #1
 800487e:	430a      	orrs	r2, r1
 8004880:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004882:	f7fe fb8d 	bl	8002fa0 <HAL_GetTick>
 8004886:	0003      	movs	r3, r0
 8004888:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800488c:	f7fe fb88 	bl	8002fa0 <HAL_GetTick>
 8004890:	0002      	movs	r2, r0
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b64      	cmp	r3, #100	; 0x64
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e1f4      	b.n	8004c88 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489e:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <HAL_RCC_OscConfig+0x344>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	2380      	movs	r3, #128	; 0x80
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	4013      	ands	r3, r2
 80048a8:	d0f0      	beq.n	800488c <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d10e      	bne.n	80048d0 <HAL_RCC_OscConfig+0x348>
 80048b2:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 80048b4:	6a1a      	ldr	r2, [r3, #32]
 80048b6:	4b02      	ldr	r3, [pc, #8]	; (80048c0 <HAL_RCC_OscConfig+0x338>)
 80048b8:	2101      	movs	r1, #1
 80048ba:	430a      	orrs	r2, r1
 80048bc:	621a      	str	r2, [r3, #32]
 80048be:	e035      	b.n	800492c <HAL_RCC_OscConfig+0x3a4>
 80048c0:	40021000 	.word	0x40021000
 80048c4:	fffeffff 	.word	0xfffeffff
 80048c8:	fffbffff 	.word	0xfffbffff
 80048cc:	40007000 	.word	0x40007000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10c      	bne.n	80048f2 <HAL_RCC_OscConfig+0x36a>
 80048d8:	4bca      	ldr	r3, [pc, #808]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 80048da:	6a1a      	ldr	r2, [r3, #32]
 80048dc:	4bc9      	ldr	r3, [pc, #804]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 80048de:	2101      	movs	r1, #1
 80048e0:	438a      	bics	r2, r1
 80048e2:	621a      	str	r2, [r3, #32]
 80048e4:	4bc7      	ldr	r3, [pc, #796]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 80048e6:	6a1a      	ldr	r2, [r3, #32]
 80048e8:	4bc6      	ldr	r3, [pc, #792]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 80048ea:	2104      	movs	r1, #4
 80048ec:	438a      	bics	r2, r1
 80048ee:	621a      	str	r2, [r3, #32]
 80048f0:	e01c      	b.n	800492c <HAL_RCC_OscConfig+0x3a4>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	2b05      	cmp	r3, #5
 80048f8:	d10c      	bne.n	8004914 <HAL_RCC_OscConfig+0x38c>
 80048fa:	4bc2      	ldr	r3, [pc, #776]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 80048fc:	6a1a      	ldr	r2, [r3, #32]
 80048fe:	4bc1      	ldr	r3, [pc, #772]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004900:	2104      	movs	r1, #4
 8004902:	430a      	orrs	r2, r1
 8004904:	621a      	str	r2, [r3, #32]
 8004906:	4bbf      	ldr	r3, [pc, #764]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004908:	6a1a      	ldr	r2, [r3, #32]
 800490a:	4bbe      	ldr	r3, [pc, #760]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 800490c:	2101      	movs	r1, #1
 800490e:	430a      	orrs	r2, r1
 8004910:	621a      	str	r2, [r3, #32]
 8004912:	e00b      	b.n	800492c <HAL_RCC_OscConfig+0x3a4>
 8004914:	4bbb      	ldr	r3, [pc, #748]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004916:	6a1a      	ldr	r2, [r3, #32]
 8004918:	4bba      	ldr	r3, [pc, #744]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 800491a:	2101      	movs	r1, #1
 800491c:	438a      	bics	r2, r1
 800491e:	621a      	str	r2, [r3, #32]
 8004920:	4bb8      	ldr	r3, [pc, #736]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004922:	6a1a      	ldr	r2, [r3, #32]
 8004924:	4bb7      	ldr	r3, [pc, #732]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004926:	2104      	movs	r1, #4
 8004928:	438a      	bics	r2, r1
 800492a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d014      	beq.n	800495e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004934:	f7fe fb34 	bl	8002fa0 <HAL_GetTick>
 8004938:	0003      	movs	r3, r0
 800493a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800493c:	e009      	b.n	8004952 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800493e:	f7fe fb2f 	bl	8002fa0 <HAL_GetTick>
 8004942:	0002      	movs	r2, r0
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	4aaf      	ldr	r2, [pc, #700]	; (8004c08 <HAL_RCC_OscConfig+0x680>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e19a      	b.n	8004c88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004952:	4bac      	ldr	r3, [pc, #688]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	2202      	movs	r2, #2
 8004958:	4013      	ands	r3, r2
 800495a:	d0f0      	beq.n	800493e <HAL_RCC_OscConfig+0x3b6>
 800495c:	e013      	b.n	8004986 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800495e:	f7fe fb1f 	bl	8002fa0 <HAL_GetTick>
 8004962:	0003      	movs	r3, r0
 8004964:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004966:	e009      	b.n	800497c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004968:	f7fe fb1a 	bl	8002fa0 <HAL_GetTick>
 800496c:	0002      	movs	r2, r0
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	4aa5      	ldr	r2, [pc, #660]	; (8004c08 <HAL_RCC_OscConfig+0x680>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e185      	b.n	8004c88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800497c:	4ba1      	ldr	r3, [pc, #644]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	2202      	movs	r2, #2
 8004982:	4013      	ands	r3, r2
 8004984:	d1f0      	bne.n	8004968 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004986:	231f      	movs	r3, #31
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d105      	bne.n	800499c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004990:	4b9c      	ldr	r3, [pc, #624]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004992:	69da      	ldr	r2, [r3, #28]
 8004994:	4b9b      	ldr	r3, [pc, #620]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004996:	499d      	ldr	r1, [pc, #628]	; (8004c0c <HAL_RCC_OscConfig+0x684>)
 8004998:	400a      	ands	r2, r1
 800499a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2210      	movs	r2, #16
 80049a2:	4013      	ands	r3, r2
 80049a4:	d063      	beq.n	8004a6e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d12a      	bne.n	8004a04 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80049ae:	4b95      	ldr	r3, [pc, #596]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 80049b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049b2:	4b94      	ldr	r3, [pc, #592]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 80049b4:	2104      	movs	r1, #4
 80049b6:	430a      	orrs	r2, r1
 80049b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80049ba:	4b92      	ldr	r3, [pc, #584]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 80049bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049be:	4b91      	ldr	r3, [pc, #580]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 80049c0:	2101      	movs	r1, #1
 80049c2:	430a      	orrs	r2, r1
 80049c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c6:	f7fe faeb 	bl	8002fa0 <HAL_GetTick>
 80049ca:	0003      	movs	r3, r0
 80049cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80049d0:	f7fe fae6 	bl	8002fa0 <HAL_GetTick>
 80049d4:	0002      	movs	r2, r0
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e152      	b.n	8004c88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80049e2:	4b88      	ldr	r3, [pc, #544]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 80049e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e6:	2202      	movs	r2, #2
 80049e8:	4013      	ands	r3, r2
 80049ea:	d0f1      	beq.n	80049d0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80049ec:	4b85      	ldr	r3, [pc, #532]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 80049ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f0:	22f8      	movs	r2, #248	; 0xf8
 80049f2:	4393      	bics	r3, r2
 80049f4:	0019      	movs	r1, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	00da      	lsls	r2, r3, #3
 80049fc:	4b81      	ldr	r3, [pc, #516]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 80049fe:	430a      	orrs	r2, r1
 8004a00:	635a      	str	r2, [r3, #52]	; 0x34
 8004a02:	e034      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	3305      	adds	r3, #5
 8004a0a:	d111      	bne.n	8004a30 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004a0c:	4b7d      	ldr	r3, [pc, #500]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a10:	4b7c      	ldr	r3, [pc, #496]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004a12:	2104      	movs	r1, #4
 8004a14:	438a      	bics	r2, r1
 8004a16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004a18:	4b7a      	ldr	r3, [pc, #488]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1c:	22f8      	movs	r2, #248	; 0xf8
 8004a1e:	4393      	bics	r3, r2
 8004a20:	0019      	movs	r1, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	00da      	lsls	r2, r3, #3
 8004a28:	4b76      	ldr	r3, [pc, #472]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8004a2e:	e01e      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004a30:	4b74      	ldr	r3, [pc, #464]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a34:	4b73      	ldr	r3, [pc, #460]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004a36:	2104      	movs	r1, #4
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004a3c:	4b71      	ldr	r3, [pc, #452]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a40:	4b70      	ldr	r3, [pc, #448]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004a42:	2101      	movs	r1, #1
 8004a44:	438a      	bics	r2, r1
 8004a46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a48:	f7fe faaa 	bl	8002fa0 <HAL_GetTick>
 8004a4c:	0003      	movs	r3, r0
 8004a4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004a52:	f7fe faa5 	bl	8002fa0 <HAL_GetTick>
 8004a56:	0002      	movs	r2, r0
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e111      	b.n	8004c88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004a64:	4b67      	ldr	r3, [pc, #412]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a68:	2202      	movs	r2, #2
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	d1f1      	bne.n	8004a52 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2220      	movs	r2, #32
 8004a74:	4013      	ands	r3, r2
 8004a76:	d05c      	beq.n	8004b32 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004a78:	4b62      	ldr	r3, [pc, #392]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	220c      	movs	r2, #12
 8004a7e:	4013      	ands	r3, r2
 8004a80:	2b0c      	cmp	r3, #12
 8004a82:	d00e      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004a84:	4b5f      	ldr	r3, [pc, #380]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	220c      	movs	r2, #12
 8004a8a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d114      	bne.n	8004aba <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004a90:	4b5c      	ldr	r3, [pc, #368]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	23c0      	movs	r3, #192	; 0xc0
 8004a96:	025b      	lsls	r3, r3, #9
 8004a98:	401a      	ands	r2, r3
 8004a9a:	23c0      	movs	r3, #192	; 0xc0
 8004a9c:	025b      	lsls	r3, r3, #9
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d10b      	bne.n	8004aba <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004aa2:	4b58      	ldr	r3, [pc, #352]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aa6:	2380      	movs	r3, #128	; 0x80
 8004aa8:	025b      	lsls	r3, r3, #9
 8004aaa:	4013      	ands	r3, r2
 8004aac:	d040      	beq.n	8004b30 <HAL_RCC_OscConfig+0x5a8>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d03c      	beq.n	8004b30 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e0e6      	b.n	8004c88 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d01b      	beq.n	8004afa <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004ac2:	4b50      	ldr	r3, [pc, #320]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ac6:	4b4f      	ldr	r3, [pc, #316]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004ac8:	2180      	movs	r1, #128	; 0x80
 8004aca:	0249      	lsls	r1, r1, #9
 8004acc:	430a      	orrs	r2, r1
 8004ace:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad0:	f7fe fa66 	bl	8002fa0 <HAL_GetTick>
 8004ad4:	0003      	movs	r3, r0
 8004ad6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ada:	f7fe fa61 	bl	8002fa0 <HAL_GetTick>
 8004ade:	0002      	movs	r2, r0
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e0cd      	b.n	8004c88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004aec:	4b45      	ldr	r3, [pc, #276]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004af0:	2380      	movs	r3, #128	; 0x80
 8004af2:	025b      	lsls	r3, r3, #9
 8004af4:	4013      	ands	r3, r2
 8004af6:	d0f0      	beq.n	8004ada <HAL_RCC_OscConfig+0x552>
 8004af8:	e01b      	b.n	8004b32 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004afa:	4b42      	ldr	r3, [pc, #264]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004afe:	4b41      	ldr	r3, [pc, #260]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004b00:	4943      	ldr	r1, [pc, #268]	; (8004c10 <HAL_RCC_OscConfig+0x688>)
 8004b02:	400a      	ands	r2, r1
 8004b04:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b06:	f7fe fa4b 	bl	8002fa0 <HAL_GetTick>
 8004b0a:	0003      	movs	r3, r0
 8004b0c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b10:	f7fe fa46 	bl	8002fa0 <HAL_GetTick>
 8004b14:	0002      	movs	r2, r0
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e0b2      	b.n	8004c88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004b22:	4b38      	ldr	r3, [pc, #224]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b26:	2380      	movs	r3, #128	; 0x80
 8004b28:	025b      	lsls	r3, r3, #9
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x588>
 8004b2e:	e000      	b.n	8004b32 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004b30:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d100      	bne.n	8004b3c <HAL_RCC_OscConfig+0x5b4>
 8004b3a:	e0a4      	b.n	8004c86 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b3c:	4b31      	ldr	r3, [pc, #196]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	220c      	movs	r2, #12
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d100      	bne.n	8004b4a <HAL_RCC_OscConfig+0x5c2>
 8004b48:	e078      	b.n	8004c3c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d14c      	bne.n	8004bec <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b52:	4b2c      	ldr	r3, [pc, #176]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4b2b      	ldr	r3, [pc, #172]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004b58:	492e      	ldr	r1, [pc, #184]	; (8004c14 <HAL_RCC_OscConfig+0x68c>)
 8004b5a:	400a      	ands	r2, r1
 8004b5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5e:	f7fe fa1f 	bl	8002fa0 <HAL_GetTick>
 8004b62:	0003      	movs	r3, r0
 8004b64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b68:	f7fe fa1a 	bl	8002fa0 <HAL_GetTick>
 8004b6c:	0002      	movs	r2, r0
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e086      	b.n	8004c88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b7a:	4b22      	ldr	r3, [pc, #136]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	2380      	movs	r3, #128	; 0x80
 8004b80:	049b      	lsls	r3, r3, #18
 8004b82:	4013      	ands	r3, r2
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b86:	4b1f      	ldr	r3, [pc, #124]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8a:	220f      	movs	r2, #15
 8004b8c:	4393      	bics	r3, r2
 8004b8e:	0019      	movs	r1, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b94:	4b1b      	ldr	r3, [pc, #108]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004b96:	430a      	orrs	r2, r1
 8004b98:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b9a:	4b1a      	ldr	r3, [pc, #104]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	4a1e      	ldr	r2, [pc, #120]	; (8004c18 <HAL_RCC_OscConfig+0x690>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	0019      	movs	r1, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	431a      	orrs	r2, r3
 8004bae:	4b15      	ldr	r3, [pc, #84]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bb4:	4b13      	ldr	r3, [pc, #76]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004bba:	2180      	movs	r1, #128	; 0x80
 8004bbc:	0449      	lsls	r1, r1, #17
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc2:	f7fe f9ed 	bl	8002fa0 <HAL_GetTick>
 8004bc6:	0003      	movs	r3, r0
 8004bc8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bcc:	f7fe f9e8 	bl	8002fa0 <HAL_GetTick>
 8004bd0:	0002      	movs	r2, r0
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e054      	b.n	8004c88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bde:	4b09      	ldr	r3, [pc, #36]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	2380      	movs	r3, #128	; 0x80
 8004be4:	049b      	lsls	r3, r3, #18
 8004be6:	4013      	ands	r3, r2
 8004be8:	d0f0      	beq.n	8004bcc <HAL_RCC_OscConfig+0x644>
 8004bea:	e04c      	b.n	8004c86 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bec:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	4b04      	ldr	r3, [pc, #16]	; (8004c04 <HAL_RCC_OscConfig+0x67c>)
 8004bf2:	4908      	ldr	r1, [pc, #32]	; (8004c14 <HAL_RCC_OscConfig+0x68c>)
 8004bf4:	400a      	ands	r2, r1
 8004bf6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf8:	f7fe f9d2 	bl	8002fa0 <HAL_GetTick>
 8004bfc:	0003      	movs	r3, r0
 8004bfe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c00:	e015      	b.n	8004c2e <HAL_RCC_OscConfig+0x6a6>
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	40021000 	.word	0x40021000
 8004c08:	00001388 	.word	0x00001388
 8004c0c:	efffffff 	.word	0xefffffff
 8004c10:	fffeffff 	.word	0xfffeffff
 8004c14:	feffffff 	.word	0xfeffffff
 8004c18:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c1c:	f7fe f9c0 	bl	8002fa0 <HAL_GetTick>
 8004c20:	0002      	movs	r2, r0
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e02c      	b.n	8004c88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c2e:	4b18      	ldr	r3, [pc, #96]	; (8004c90 <HAL_RCC_OscConfig+0x708>)
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	2380      	movs	r3, #128	; 0x80
 8004c34:	049b      	lsls	r3, r3, #18
 8004c36:	4013      	ands	r3, r2
 8004c38:	d1f0      	bne.n	8004c1c <HAL_RCC_OscConfig+0x694>
 8004c3a:	e024      	b.n	8004c86 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e01f      	b.n	8004c88 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004c48:	4b11      	ldr	r3, [pc, #68]	; (8004c90 <HAL_RCC_OscConfig+0x708>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004c4e:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <HAL_RCC_OscConfig+0x708>)
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	23c0      	movs	r3, #192	; 0xc0
 8004c58:	025b      	lsls	r3, r3, #9
 8004c5a:	401a      	ands	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d10e      	bne.n	8004c82 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	220f      	movs	r2, #15
 8004c68:	401a      	ands	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d107      	bne.n	8004c82 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	23f0      	movs	r3, #240	; 0xf0
 8004c76:	039b      	lsls	r3, r3, #14
 8004c78:	401a      	ands	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d001      	beq.n	8004c86 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	0018      	movs	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	b008      	add	sp, #32
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40021000 	.word	0x40021000

08004c94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e0bf      	b.n	8004e28 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ca8:	4b61      	ldr	r3, [pc, #388]	; (8004e30 <HAL_RCC_ClockConfig+0x19c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2201      	movs	r2, #1
 8004cae:	4013      	ands	r3, r2
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d911      	bls.n	8004cda <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb6:	4b5e      	ldr	r3, [pc, #376]	; (8004e30 <HAL_RCC_ClockConfig+0x19c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	4393      	bics	r3, r2
 8004cbe:	0019      	movs	r1, r3
 8004cc0:	4b5b      	ldr	r3, [pc, #364]	; (8004e30 <HAL_RCC_ClockConfig+0x19c>)
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc8:	4b59      	ldr	r3, [pc, #356]	; (8004e30 <HAL_RCC_ClockConfig+0x19c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	4013      	ands	r3, r2
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d001      	beq.n	8004cda <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e0a6      	b.n	8004e28 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	d015      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2204      	movs	r2, #4
 8004cea:	4013      	ands	r3, r2
 8004cec:	d006      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004cee:	4b51      	ldr	r3, [pc, #324]	; (8004e34 <HAL_RCC_ClockConfig+0x1a0>)
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	4b50      	ldr	r3, [pc, #320]	; (8004e34 <HAL_RCC_ClockConfig+0x1a0>)
 8004cf4:	21e0      	movs	r1, #224	; 0xe0
 8004cf6:	00c9      	lsls	r1, r1, #3
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cfc:	4b4d      	ldr	r3, [pc, #308]	; (8004e34 <HAL_RCC_ClockConfig+0x1a0>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	22f0      	movs	r2, #240	; 0xf0
 8004d02:	4393      	bics	r3, r2
 8004d04:	0019      	movs	r1, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	4b4a      	ldr	r3, [pc, #296]	; (8004e34 <HAL_RCC_ClockConfig+0x1a0>)
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2201      	movs	r2, #1
 8004d16:	4013      	ands	r3, r2
 8004d18:	d04c      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d107      	bne.n	8004d32 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d22:	4b44      	ldr	r3, [pc, #272]	; (8004e34 <HAL_RCC_ClockConfig+0x1a0>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	2380      	movs	r3, #128	; 0x80
 8004d28:	029b      	lsls	r3, r3, #10
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	d120      	bne.n	8004d70 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e07a      	b.n	8004e28 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d107      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d3a:	4b3e      	ldr	r3, [pc, #248]	; (8004e34 <HAL_RCC_ClockConfig+0x1a0>)
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	2380      	movs	r3, #128	; 0x80
 8004d40:	049b      	lsls	r3, r3, #18
 8004d42:	4013      	ands	r3, r2
 8004d44:	d114      	bne.n	8004d70 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e06e      	b.n	8004e28 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d107      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004d52:	4b38      	ldr	r3, [pc, #224]	; (8004e34 <HAL_RCC_ClockConfig+0x1a0>)
 8004d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d56:	2380      	movs	r3, #128	; 0x80
 8004d58:	025b      	lsls	r3, r3, #9
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	d108      	bne.n	8004d70 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e062      	b.n	8004e28 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d62:	4b34      	ldr	r3, [pc, #208]	; (8004e34 <HAL_RCC_ClockConfig+0x1a0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2202      	movs	r2, #2
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d101      	bne.n	8004d70 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e05b      	b.n	8004e28 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d70:	4b30      	ldr	r3, [pc, #192]	; (8004e34 <HAL_RCC_ClockConfig+0x1a0>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2203      	movs	r2, #3
 8004d76:	4393      	bics	r3, r2
 8004d78:	0019      	movs	r1, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	4b2d      	ldr	r3, [pc, #180]	; (8004e34 <HAL_RCC_ClockConfig+0x1a0>)
 8004d80:	430a      	orrs	r2, r1
 8004d82:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d84:	f7fe f90c 	bl	8002fa0 <HAL_GetTick>
 8004d88:	0003      	movs	r3, r0
 8004d8a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d8c:	e009      	b.n	8004da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d8e:	f7fe f907 	bl	8002fa0 <HAL_GetTick>
 8004d92:	0002      	movs	r2, r0
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	4a27      	ldr	r2, [pc, #156]	; (8004e38 <HAL_RCC_ClockConfig+0x1a4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e042      	b.n	8004e28 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da2:	4b24      	ldr	r3, [pc, #144]	; (8004e34 <HAL_RCC_ClockConfig+0x1a0>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	220c      	movs	r2, #12
 8004da8:	401a      	ands	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d1ec      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004db4:	4b1e      	ldr	r3, [pc, #120]	; (8004e30 <HAL_RCC_ClockConfig+0x19c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2201      	movs	r2, #1
 8004dba:	4013      	ands	r3, r2
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d211      	bcs.n	8004de6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc2:	4b1b      	ldr	r3, [pc, #108]	; (8004e30 <HAL_RCC_ClockConfig+0x19c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	4393      	bics	r3, r2
 8004dca:	0019      	movs	r1, r3
 8004dcc:	4b18      	ldr	r3, [pc, #96]	; (8004e30 <HAL_RCC_ClockConfig+0x19c>)
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd4:	4b16      	ldr	r3, [pc, #88]	; (8004e30 <HAL_RCC_ClockConfig+0x19c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	4013      	ands	r3, r2
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d001      	beq.n	8004de6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e020      	b.n	8004e28 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2204      	movs	r2, #4
 8004dec:	4013      	ands	r3, r2
 8004dee:	d009      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004df0:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <HAL_RCC_ClockConfig+0x1a0>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	4a11      	ldr	r2, [pc, #68]	; (8004e3c <HAL_RCC_ClockConfig+0x1a8>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	0019      	movs	r1, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <HAL_RCC_ClockConfig+0x1a0>)
 8004e00:	430a      	orrs	r2, r1
 8004e02:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e04:	f000 f820 	bl	8004e48 <HAL_RCC_GetSysClockFreq>
 8004e08:	0001      	movs	r1, r0
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <HAL_RCC_ClockConfig+0x1a0>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	091b      	lsrs	r3, r3, #4
 8004e10:	220f      	movs	r2, #15
 8004e12:	4013      	ands	r3, r2
 8004e14:	4a0a      	ldr	r2, [pc, #40]	; (8004e40 <HAL_RCC_ClockConfig+0x1ac>)
 8004e16:	5cd3      	ldrb	r3, [r2, r3]
 8004e18:	000a      	movs	r2, r1
 8004e1a:	40da      	lsrs	r2, r3
 8004e1c:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <HAL_RCC_ClockConfig+0x1b0>)
 8004e1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004e20:	2000      	movs	r0, #0
 8004e22:	f7fd ffe7 	bl	8002df4 <HAL_InitTick>
  
  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	0018      	movs	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b004      	add	sp, #16
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40022000 	.word	0x40022000
 8004e34:	40021000 	.word	0x40021000
 8004e38:	00001388 	.word	0x00001388
 8004e3c:	fffff8ff 	.word	0xfffff8ff
 8004e40:	08008380 	.word	0x08008380
 8004e44:	20000078 	.word	0x20000078

08004e48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e48:	b590      	push	{r4, r7, lr}
 8004e4a:	b08f      	sub	sp, #60	; 0x3c
 8004e4c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004e4e:	2314      	movs	r3, #20
 8004e50:	18fb      	adds	r3, r7, r3
 8004e52:	4a37      	ldr	r2, [pc, #220]	; (8004f30 <HAL_RCC_GetSysClockFreq+0xe8>)
 8004e54:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004e56:	c313      	stmia	r3!, {r0, r1, r4}
 8004e58:	6812      	ldr	r2, [r2, #0]
 8004e5a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004e5c:	1d3b      	adds	r3, r7, #4
 8004e5e:	4a35      	ldr	r2, [pc, #212]	; (8004f34 <HAL_RCC_GetSysClockFreq+0xec>)
 8004e60:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004e62:	c313      	stmia	r3!, {r0, r1, r4}
 8004e64:	6812      	ldr	r2, [r2, #0]
 8004e66:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e70:	2300      	movs	r3, #0
 8004e72:	637b      	str	r3, [r7, #52]	; 0x34
 8004e74:	2300      	movs	r3, #0
 8004e76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004e7c:	4b2e      	ldr	r3, [pc, #184]	; (8004f38 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e84:	220c      	movs	r2, #12
 8004e86:	4013      	ands	r3, r2
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d006      	beq.n	8004e9a <HAL_RCC_GetSysClockFreq+0x52>
 8004e8c:	2b0c      	cmp	r3, #12
 8004e8e:	d043      	beq.n	8004f18 <HAL_RCC_GetSysClockFreq+0xd0>
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d144      	bne.n	8004f1e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e94:	4b29      	ldr	r3, [pc, #164]	; (8004f3c <HAL_RCC_GetSysClockFreq+0xf4>)
 8004e96:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004e98:	e044      	b.n	8004f24 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9c:	0c9b      	lsrs	r3, r3, #18
 8004e9e:	220f      	movs	r2, #15
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	2214      	movs	r2, #20
 8004ea4:	18ba      	adds	r2, r7, r2
 8004ea6:	5cd3      	ldrb	r3, [r2, r3]
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004eaa:	4b23      	ldr	r3, [pc, #140]	; (8004f38 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	220f      	movs	r2, #15
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	1d3a      	adds	r2, r7, #4
 8004eb4:	5cd3      	ldrb	r3, [r2, r3]
 8004eb6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eba:	23c0      	movs	r3, #192	; 0xc0
 8004ebc:	025b      	lsls	r3, r3, #9
 8004ebe:	401a      	ands	r2, r3
 8004ec0:	2380      	movs	r3, #128	; 0x80
 8004ec2:	025b      	lsls	r3, r3, #9
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d109      	bne.n	8004edc <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eca:	481c      	ldr	r0, [pc, #112]	; (8004f3c <HAL_RCC_GetSysClockFreq+0xf4>)
 8004ecc:	f7fb f91c 	bl	8000108 <__udivsi3>
 8004ed0:	0003      	movs	r3, r0
 8004ed2:	001a      	movs	r2, r3
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	4353      	muls	r3, r2
 8004ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eda:	e01a      	b.n	8004f12 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ede:	23c0      	movs	r3, #192	; 0xc0
 8004ee0:	025b      	lsls	r3, r3, #9
 8004ee2:	401a      	ands	r2, r3
 8004ee4:	23c0      	movs	r3, #192	; 0xc0
 8004ee6:	025b      	lsls	r3, r3, #9
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d109      	bne.n	8004f00 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004eec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eee:	4814      	ldr	r0, [pc, #80]	; (8004f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ef0:	f7fb f90a 	bl	8000108 <__udivsi3>
 8004ef4:	0003      	movs	r3, r0
 8004ef6:	001a      	movs	r2, r3
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	4353      	muls	r3, r2
 8004efc:	637b      	str	r3, [r7, #52]	; 0x34
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f02:	480e      	ldr	r0, [pc, #56]	; (8004f3c <HAL_RCC_GetSysClockFreq+0xf4>)
 8004f04:	f7fb f900 	bl	8000108 <__udivsi3>
 8004f08:	0003      	movs	r3, r0
 8004f0a:	001a      	movs	r2, r3
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	4353      	muls	r3, r2
 8004f10:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f14:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f16:	e005      	b.n	8004f24 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004f18:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f1a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f1c:	e002      	b.n	8004f24 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f1e:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <HAL_RCC_GetSysClockFreq+0xf4>)
 8004f20:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f22:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004f26:	0018      	movs	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b00f      	add	sp, #60	; 0x3c
 8004f2c:	bd90      	pop	{r4, r7, pc}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	0800825c 	.word	0x0800825c
 8004f34:	0800826c 	.word	0x0800826c
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	007a1200 	.word	0x007a1200
 8004f40:	02dc6c00 	.word	0x02dc6c00

08004f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f48:	4b02      	ldr	r3, [pc, #8]	; (8004f54 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
}
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	46c0      	nop			; (mov r8, r8)
 8004f54:	20000078 	.word	0x20000078

08004f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004f5c:	f7ff fff2 	bl	8004f44 <HAL_RCC_GetHCLKFreq>
 8004f60:	0001      	movs	r1, r0
 8004f62:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	0a1b      	lsrs	r3, r3, #8
 8004f68:	2207      	movs	r2, #7
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	4a04      	ldr	r2, [pc, #16]	; (8004f80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f6e:	5cd3      	ldrb	r3, [r2, r3]
 8004f70:	40d9      	lsrs	r1, r3
 8004f72:	000b      	movs	r3, r1
}    
 8004f74:	0018      	movs	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	08008390 	.word	0x08008390

08004f84 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2207      	movs	r2, #7
 8004f92:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f94:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <HAL_RCC_GetClockConfig+0x4c>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2203      	movs	r2, #3
 8004f9a:	401a      	ands	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <HAL_RCC_GetClockConfig+0x4c>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	22f0      	movs	r2, #240	; 0xf0
 8004fa6:	401a      	ands	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8004fac:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <HAL_RCC_GetClockConfig+0x4c>)
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	23e0      	movs	r3, #224	; 0xe0
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	401a      	ands	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8004fba:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <HAL_RCC_GetClockConfig+0x50>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	401a      	ands	r2, r3
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	601a      	str	r2, [r3, #0]
}
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	b002      	add	sp, #8
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	40022000 	.word	0x40022000

08004fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	2380      	movs	r3, #128	; 0x80
 8004fee:	025b      	lsls	r3, r3, #9
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	d100      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004ff4:	e08f      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004ff6:	2317      	movs	r3, #23
 8004ff8:	18fb      	adds	r3, r7, r3
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ffe:	4b6f      	ldr	r3, [pc, #444]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005000:	69da      	ldr	r2, [r3, #28]
 8005002:	2380      	movs	r3, #128	; 0x80
 8005004:	055b      	lsls	r3, r3, #21
 8005006:	4013      	ands	r3, r2
 8005008:	d111      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800500a:	4b6c      	ldr	r3, [pc, #432]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800500c:	69da      	ldr	r2, [r3, #28]
 800500e:	4b6b      	ldr	r3, [pc, #428]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005010:	2180      	movs	r1, #128	; 0x80
 8005012:	0549      	lsls	r1, r1, #21
 8005014:	430a      	orrs	r2, r1
 8005016:	61da      	str	r2, [r3, #28]
 8005018:	4b68      	ldr	r3, [pc, #416]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800501a:	69da      	ldr	r2, [r3, #28]
 800501c:	2380      	movs	r3, #128	; 0x80
 800501e:	055b      	lsls	r3, r3, #21
 8005020:	4013      	ands	r3, r2
 8005022:	60bb      	str	r3, [r7, #8]
 8005024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005026:	2317      	movs	r3, #23
 8005028:	18fb      	adds	r3, r7, r3
 800502a:	2201      	movs	r2, #1
 800502c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800502e:	4b64      	ldr	r3, [pc, #400]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	2380      	movs	r3, #128	; 0x80
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	4013      	ands	r3, r2
 8005038:	d11a      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800503a:	4b61      	ldr	r3, [pc, #388]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4b60      	ldr	r3, [pc, #384]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005040:	2180      	movs	r1, #128	; 0x80
 8005042:	0049      	lsls	r1, r1, #1
 8005044:	430a      	orrs	r2, r1
 8005046:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005048:	f7fd ffaa 	bl	8002fa0 <HAL_GetTick>
 800504c:	0003      	movs	r3, r0
 800504e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005050:	e008      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005052:	f7fd ffa5 	bl	8002fa0 <HAL_GetTick>
 8005056:	0002      	movs	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b64      	cmp	r3, #100	; 0x64
 800505e:	d901      	bls.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e0a6      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005064:	4b56      	ldr	r3, [pc, #344]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	2380      	movs	r3, #128	; 0x80
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	4013      	ands	r3, r2
 800506e:	d0f0      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005070:	4b52      	ldr	r3, [pc, #328]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005072:	6a1a      	ldr	r2, [r3, #32]
 8005074:	23c0      	movs	r3, #192	; 0xc0
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4013      	ands	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d034      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x114>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	23c0      	movs	r3, #192	; 0xc0
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4013      	ands	r3, r2
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	429a      	cmp	r2, r3
 8005090:	d02c      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005092:	4b4a      	ldr	r3, [pc, #296]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	4a4b      	ldr	r2, [pc, #300]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005098:	4013      	ands	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800509c:	4b47      	ldr	r3, [pc, #284]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800509e:	6a1a      	ldr	r2, [r3, #32]
 80050a0:	4b46      	ldr	r3, [pc, #280]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80050a2:	2180      	movs	r1, #128	; 0x80
 80050a4:	0249      	lsls	r1, r1, #9
 80050a6:	430a      	orrs	r2, r1
 80050a8:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050aa:	4b44      	ldr	r3, [pc, #272]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80050ac:	6a1a      	ldr	r2, [r3, #32]
 80050ae:	4b43      	ldr	r3, [pc, #268]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80050b0:	4945      	ldr	r1, [pc, #276]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80050b2:	400a      	ands	r2, r1
 80050b4:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80050b6:	4b41      	ldr	r3, [pc, #260]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2201      	movs	r2, #1
 80050c0:	4013      	ands	r3, r2
 80050c2:	d013      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c4:	f7fd ff6c 	bl	8002fa0 <HAL_GetTick>
 80050c8:	0003      	movs	r3, r0
 80050ca:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050cc:	e009      	b.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ce:	f7fd ff67 	bl	8002fa0 <HAL_GetTick>
 80050d2:	0002      	movs	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	4a3c      	ldr	r2, [pc, #240]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e067      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e2:	4b36      	ldr	r3, [pc, #216]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	2202      	movs	r2, #2
 80050e8:	4013      	ands	r3, r2
 80050ea:	d0f0      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050ec:	4b33      	ldr	r3, [pc, #204]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	4a34      	ldr	r2, [pc, #208]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	0019      	movs	r1, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	4b30      	ldr	r3, [pc, #192]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80050fc:	430a      	orrs	r2, r1
 80050fe:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005100:	2317      	movs	r3, #23
 8005102:	18fb      	adds	r3, r7, r3
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d105      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800510a:	4b2c      	ldr	r3, [pc, #176]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800510c:	69da      	ldr	r2, [r3, #28]
 800510e:	4b2b      	ldr	r3, [pc, #172]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005110:	492f      	ldr	r1, [pc, #188]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005112:	400a      	ands	r2, r1
 8005114:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2201      	movs	r2, #1
 800511c:	4013      	ands	r3, r2
 800511e:	d009      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005120:	4b26      	ldr	r3, [pc, #152]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005124:	2203      	movs	r2, #3
 8005126:	4393      	bics	r3, r2
 8005128:	0019      	movs	r1, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	4b23      	ldr	r3, [pc, #140]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005130:	430a      	orrs	r2, r1
 8005132:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2202      	movs	r2, #2
 800513a:	4013      	ands	r3, r2
 800513c:	d009      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800513e:	4b1f      	ldr	r3, [pc, #124]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	4a24      	ldr	r2, [pc, #144]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005144:	4013      	ands	r3, r2
 8005146:	0019      	movs	r1, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	4b1b      	ldr	r3, [pc, #108]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800514e:	430a      	orrs	r2, r1
 8005150:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2220      	movs	r2, #32
 8005158:	4013      	ands	r3, r2
 800515a:	d009      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800515c:	4b17      	ldr	r3, [pc, #92]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800515e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005160:	2210      	movs	r2, #16
 8005162:	4393      	bics	r3, r2
 8005164:	0019      	movs	r1, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	4b14      	ldr	r3, [pc, #80]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800516c:	430a      	orrs	r2, r1
 800516e:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	2380      	movs	r3, #128	; 0x80
 8005176:	029b      	lsls	r3, r3, #10
 8005178:	4013      	ands	r3, r2
 800517a:	d009      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800517c:	4b0f      	ldr	r3, [pc, #60]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800517e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005180:	2280      	movs	r2, #128	; 0x80
 8005182:	4393      	bics	r3, r2
 8005184:	0019      	movs	r1, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699a      	ldr	r2, [r3, #24]
 800518a:	4b0c      	ldr	r3, [pc, #48]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800518c:	430a      	orrs	r2, r1
 800518e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	2380      	movs	r3, #128	; 0x80
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	4013      	ands	r3, r2
 800519a:	d009      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800519c:	4b07      	ldr	r3, [pc, #28]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800519e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a0:	2240      	movs	r2, #64	; 0x40
 80051a2:	4393      	bics	r3, r2
 80051a4:	0019      	movs	r1, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695a      	ldr	r2, [r3, #20]
 80051aa:	4b04      	ldr	r3, [pc, #16]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80051ac:	430a      	orrs	r2, r1
 80051ae:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	0018      	movs	r0, r3
 80051b4:	46bd      	mov	sp, r7
 80051b6:	b006      	add	sp, #24
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	40021000 	.word	0x40021000
 80051c0:	40007000 	.word	0x40007000
 80051c4:	fffffcff 	.word	0xfffffcff
 80051c8:	fffeffff 	.word	0xfffeffff
 80051cc:	00001388 	.word	0x00001388
 80051d0:	efffffff 	.word	0xefffffff
 80051d4:	fffcffff 	.word	0xfffcffff

080051d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e01e      	b.n	8005228 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	223d      	movs	r2, #61	; 0x3d
 80051ee:	5c9b      	ldrb	r3, [r3, r2]
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d107      	bne.n	8005206 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	223c      	movs	r2, #60	; 0x3c
 80051fa:	2100      	movs	r1, #0
 80051fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	0018      	movs	r0, r3
 8005202:	f7fd fd75 	bl	8002cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	223d      	movs	r2, #61	; 0x3d
 800520a:	2102      	movs	r1, #2
 800520c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3304      	adds	r3, #4
 8005216:	0019      	movs	r1, r3
 8005218:	0010      	movs	r0, r2
 800521a:	f000 f983 	bl	8005524 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	223d      	movs	r2, #61	; 0x3d
 8005222:	2101      	movs	r1, #1
 8005224:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	0018      	movs	r0, r3
 800522a:	46bd      	mov	sp, r7
 800522c:	b002      	add	sp, #8
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	223d      	movs	r2, #61	; 0x3d
 800523c:	2102      	movs	r1, #2
 800523e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	2207      	movs	r2, #7
 8005248:	4013      	ands	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2b06      	cmp	r3, #6
 8005250:	d007      	beq.n	8005262 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2101      	movs	r1, #1
 800525e:	430a      	orrs	r2, r1
 8005260:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	223d      	movs	r2, #61	; 0x3d
 8005266:	2101      	movs	r1, #1
 8005268:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	0018      	movs	r0, r3
 800526e:	46bd      	mov	sp, r7
 8005270:	b004      	add	sp, #16
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2101      	movs	r1, #1
 8005288:	430a      	orrs	r2, r1
 800528a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2207      	movs	r2, #7
 8005294:	4013      	ands	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b06      	cmp	r3, #6
 800529c:	d007      	beq.n	80052ae <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2101      	movs	r1, #1
 80052aa:	430a      	orrs	r2, r1
 80052ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	0018      	movs	r0, r3
 80052b2:	46bd      	mov	sp, r7
 80052b4:	b004      	add	sp, #16
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2202      	movs	r2, #2
 80052c8:	4013      	ands	r3, r2
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d124      	bne.n	8005318 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	2202      	movs	r2, #2
 80052d6:	4013      	ands	r3, r2
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d11d      	bne.n	8005318 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2203      	movs	r2, #3
 80052e2:	4252      	negs	r2, r2
 80052e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	2203      	movs	r2, #3
 80052f4:	4013      	ands	r3, r2
 80052f6:	d004      	beq.n	8005302 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	0018      	movs	r0, r3
 80052fc:	f000 f8fa 	bl	80054f4 <HAL_TIM_IC_CaptureCallback>
 8005300:	e007      	b.n	8005312 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	0018      	movs	r0, r3
 8005306:	f000 f8ed 	bl	80054e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	0018      	movs	r0, r3
 800530e:	f000 f8f9 	bl	8005504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	2204      	movs	r2, #4
 8005320:	4013      	ands	r3, r2
 8005322:	2b04      	cmp	r3, #4
 8005324:	d125      	bne.n	8005372 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	2204      	movs	r2, #4
 800532e:	4013      	ands	r3, r2
 8005330:	2b04      	cmp	r3, #4
 8005332:	d11e      	bne.n	8005372 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2205      	movs	r2, #5
 800533a:	4252      	negs	r2, r2
 800533c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2202      	movs	r2, #2
 8005342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699a      	ldr	r2, [r3, #24]
 800534a:	23c0      	movs	r3, #192	; 0xc0
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4013      	ands	r3, r2
 8005350:	d004      	beq.n	800535c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	0018      	movs	r0, r3
 8005356:	f000 f8cd 	bl	80054f4 <HAL_TIM_IC_CaptureCallback>
 800535a:	e007      	b.n	800536c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	0018      	movs	r0, r3
 8005360:	f000 f8c0 	bl	80054e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	0018      	movs	r0, r3
 8005368:	f000 f8cc 	bl	8005504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	2208      	movs	r2, #8
 800537a:	4013      	ands	r3, r2
 800537c:	2b08      	cmp	r3, #8
 800537e:	d124      	bne.n	80053ca <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	2208      	movs	r2, #8
 8005388:	4013      	ands	r3, r2
 800538a:	2b08      	cmp	r3, #8
 800538c:	d11d      	bne.n	80053ca <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2209      	movs	r2, #9
 8005394:	4252      	negs	r2, r2
 8005396:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2204      	movs	r2, #4
 800539c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	2203      	movs	r2, #3
 80053a6:	4013      	ands	r3, r2
 80053a8:	d004      	beq.n	80053b4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	0018      	movs	r0, r3
 80053ae:	f000 f8a1 	bl	80054f4 <HAL_TIM_IC_CaptureCallback>
 80053b2:	e007      	b.n	80053c4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	0018      	movs	r0, r3
 80053b8:	f000 f894 	bl	80054e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	0018      	movs	r0, r3
 80053c0:	f000 f8a0 	bl	8005504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	2210      	movs	r2, #16
 80053d2:	4013      	ands	r3, r2
 80053d4:	2b10      	cmp	r3, #16
 80053d6:	d125      	bne.n	8005424 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	2210      	movs	r2, #16
 80053e0:	4013      	ands	r3, r2
 80053e2:	2b10      	cmp	r3, #16
 80053e4:	d11e      	bne.n	8005424 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2211      	movs	r2, #17
 80053ec:	4252      	negs	r2, r2
 80053ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2208      	movs	r2, #8
 80053f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69da      	ldr	r2, [r3, #28]
 80053fc:	23c0      	movs	r3, #192	; 0xc0
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4013      	ands	r3, r2
 8005402:	d004      	beq.n	800540e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	0018      	movs	r0, r3
 8005408:	f000 f874 	bl	80054f4 <HAL_TIM_IC_CaptureCallback>
 800540c:	e007      	b.n	800541e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	0018      	movs	r0, r3
 8005412:	f000 f867 	bl	80054e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	0018      	movs	r0, r3
 800541a:	f000 f873 	bl	8005504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2201      	movs	r2, #1
 800542c:	4013      	ands	r3, r2
 800542e:	2b01      	cmp	r3, #1
 8005430:	d10f      	bne.n	8005452 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	4013      	ands	r3, r2
 800543c:	2b01      	cmp	r3, #1
 800543e:	d108      	bne.n	8005452 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2202      	movs	r2, #2
 8005446:	4252      	negs	r2, r2
 8005448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	0018      	movs	r0, r3
 800544e:	f7fd fb35 	bl	8002abc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	2280      	movs	r2, #128	; 0x80
 800545a:	4013      	ands	r3, r2
 800545c:	2b80      	cmp	r3, #128	; 0x80
 800545e:	d10f      	bne.n	8005480 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	2280      	movs	r2, #128	; 0x80
 8005468:	4013      	ands	r3, r2
 800546a:	2b80      	cmp	r3, #128	; 0x80
 800546c:	d108      	bne.n	8005480 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2281      	movs	r2, #129	; 0x81
 8005474:	4252      	negs	r2, r2
 8005476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	0018      	movs	r0, r3
 800547c:	f000 f8da 	bl	8005634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2240      	movs	r2, #64	; 0x40
 8005488:	4013      	ands	r3, r2
 800548a:	2b40      	cmp	r3, #64	; 0x40
 800548c:	d10f      	bne.n	80054ae <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	2240      	movs	r2, #64	; 0x40
 8005496:	4013      	ands	r3, r2
 8005498:	2b40      	cmp	r3, #64	; 0x40
 800549a:	d108      	bne.n	80054ae <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2241      	movs	r2, #65	; 0x41
 80054a2:	4252      	negs	r2, r2
 80054a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	0018      	movs	r0, r3
 80054aa:	f000 f833 	bl	8005514 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	2220      	movs	r2, #32
 80054b6:	4013      	ands	r3, r2
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d10f      	bne.n	80054dc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	2220      	movs	r2, #32
 80054c4:	4013      	ands	r3, r2
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	d108      	bne.n	80054dc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2221      	movs	r2, #33	; 0x21
 80054d0:	4252      	negs	r2, r2
 80054d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	0018      	movs	r0, r3
 80054d8:	f000 f8a4 	bl	8005624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054dc:	46c0      	nop			; (mov r8, r8)
 80054de:	46bd      	mov	sp, r7
 80054e0:	b002      	add	sp, #8
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054ec:	46c0      	nop			; (mov r8, r8)
 80054ee:	46bd      	mov	sp, r7
 80054f0:	b002      	add	sp, #8
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054fc:	46c0      	nop			; (mov r8, r8)
 80054fe:	46bd      	mov	sp, r7
 8005500:	b002      	add	sp, #8
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800550c:	46c0      	nop			; (mov r8, r8)
 800550e:	46bd      	mov	sp, r7
 8005510:	b002      	add	sp, #8
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800551c:	46c0      	nop			; (mov r8, r8)
 800551e:	46bd      	mov	sp, r7
 8005520:	b002      	add	sp, #8
 8005522:	bd80      	pop	{r7, pc}

08005524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a34      	ldr	r2, [pc, #208]	; (8005608 <TIM_Base_SetConfig+0xe4>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d008      	beq.n	800554e <TIM_Base_SetConfig+0x2a>
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	2380      	movs	r3, #128	; 0x80
 8005540:	05db      	lsls	r3, r3, #23
 8005542:	429a      	cmp	r2, r3
 8005544:	d003      	beq.n	800554e <TIM_Base_SetConfig+0x2a>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a30      	ldr	r2, [pc, #192]	; (800560c <TIM_Base_SetConfig+0xe8>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d108      	bne.n	8005560 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2270      	movs	r2, #112	; 0x70
 8005552:	4393      	bics	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4313      	orrs	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a29      	ldr	r2, [pc, #164]	; (8005608 <TIM_Base_SetConfig+0xe4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d018      	beq.n	800559a <TIM_Base_SetConfig+0x76>
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	2380      	movs	r3, #128	; 0x80
 800556c:	05db      	lsls	r3, r3, #23
 800556e:	429a      	cmp	r2, r3
 8005570:	d013      	beq.n	800559a <TIM_Base_SetConfig+0x76>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a25      	ldr	r2, [pc, #148]	; (800560c <TIM_Base_SetConfig+0xe8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00f      	beq.n	800559a <TIM_Base_SetConfig+0x76>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a24      	ldr	r2, [pc, #144]	; (8005610 <TIM_Base_SetConfig+0xec>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00b      	beq.n	800559a <TIM_Base_SetConfig+0x76>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a23      	ldr	r2, [pc, #140]	; (8005614 <TIM_Base_SetConfig+0xf0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d007      	beq.n	800559a <TIM_Base_SetConfig+0x76>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a22      	ldr	r2, [pc, #136]	; (8005618 <TIM_Base_SetConfig+0xf4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d003      	beq.n	800559a <TIM_Base_SetConfig+0x76>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a21      	ldr	r2, [pc, #132]	; (800561c <TIM_Base_SetConfig+0xf8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d108      	bne.n	80055ac <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4a20      	ldr	r2, [pc, #128]	; (8005620 <TIM_Base_SetConfig+0xfc>)
 800559e:	4013      	ands	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2280      	movs	r2, #128	; 0x80
 80055b0:	4393      	bics	r3, r2
 80055b2:	001a      	movs	r2, r3
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a0c      	ldr	r2, [pc, #48]	; (8005608 <TIM_Base_SetConfig+0xe4>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00b      	beq.n	80055f2 <TIM_Base_SetConfig+0xce>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a0d      	ldr	r2, [pc, #52]	; (8005614 <TIM_Base_SetConfig+0xf0>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d007      	beq.n	80055f2 <TIM_Base_SetConfig+0xce>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a0c      	ldr	r2, [pc, #48]	; (8005618 <TIM_Base_SetConfig+0xf4>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d003      	beq.n	80055f2 <TIM_Base_SetConfig+0xce>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a0b      	ldr	r2, [pc, #44]	; (800561c <TIM_Base_SetConfig+0xf8>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d103      	bne.n	80055fa <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	691a      	ldr	r2, [r3, #16]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	615a      	str	r2, [r3, #20]
}
 8005600:	46c0      	nop			; (mov r8, r8)
 8005602:	46bd      	mov	sp, r7
 8005604:	b004      	add	sp, #16
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40012c00 	.word	0x40012c00
 800560c:	40000400 	.word	0x40000400
 8005610:	40002000 	.word	0x40002000
 8005614:	40014000 	.word	0x40014000
 8005618:	40014400 	.word	0x40014400
 800561c:	40014800 	.word	0x40014800
 8005620:	fffffcff 	.word	0xfffffcff

08005624 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800562c:	46c0      	nop			; (mov r8, r8)
 800562e:	46bd      	mov	sp, r7
 8005630:	b002      	add	sp, #8
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800563c:	46c0      	nop			; (mov r8, r8)
 800563e:	46bd      	mov	sp, r7
 8005640:	b002      	add	sp, #8
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e044      	b.n	80056e0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800565a:	2b00      	cmp	r3, #0
 800565c:	d107      	bne.n	800566e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2270      	movs	r2, #112	; 0x70
 8005662:	2100      	movs	r1, #0
 8005664:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	0018      	movs	r0, r3
 800566a:	f7fd fb77 	bl	8002d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2224      	movs	r2, #36	; 0x24
 8005672:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2101      	movs	r1, #1
 8005680:	438a      	bics	r2, r1
 8005682:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	0018      	movs	r0, r3
 8005688:	f000 f830 	bl	80056ec <UART_SetConfig>
 800568c:	0003      	movs	r3, r0
 800568e:	2b01      	cmp	r3, #1
 8005690:	d101      	bne.n	8005696 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e024      	b.n	80056e0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	0018      	movs	r0, r3
 80056a2:	f000 f9ef 	bl	8005a84 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	490d      	ldr	r1, [pc, #52]	; (80056e8 <HAL_UART_Init+0xa4>)
 80056b2:	400a      	ands	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	212a      	movs	r1, #42	; 0x2a
 80056c2:	438a      	bics	r2, r1
 80056c4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2101      	movs	r1, #1
 80056d2:	430a      	orrs	r2, r1
 80056d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	0018      	movs	r0, r3
 80056da:	f000 fa87 	bl	8005bec <UART_CheckIdleState>
 80056de:	0003      	movs	r3, r0
}
 80056e0:	0018      	movs	r0, r3
 80056e2:	46bd      	mov	sp, r7
 80056e4:	b002      	add	sp, #8
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	ffffb7ff 	.word	0xffffb7ff

080056ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80056f8:	2317      	movs	r3, #23
 80056fa:	18fb      	adds	r3, r7, r3
 80056fc:	2200      	movs	r2, #0
 80056fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	4313      	orrs	r3, r2
 8005716:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4ac5      	ldr	r2, [pc, #788]	; (8005a34 <UART_SetConfig+0x348>)
 8005720:	4013      	ands	r3, r2
 8005722:	0019      	movs	r1, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	430a      	orrs	r2, r1
 800572c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	4ac0      	ldr	r2, [pc, #768]	; (8005a38 <UART_SetConfig+0x34c>)
 8005736:	4013      	ands	r3, r2
 8005738:	0019      	movs	r1, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	4ab7      	ldr	r2, [pc, #732]	; (8005a3c <UART_SetConfig+0x350>)
 800575e:	4013      	ands	r3, r2
 8005760:	0019      	movs	r1, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	430a      	orrs	r2, r1
 800576a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4ab3      	ldr	r2, [pc, #716]	; (8005a40 <UART_SetConfig+0x354>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d125      	bne.n	80057c2 <UART_SetConfig+0xd6>
 8005776:	4bb3      	ldr	r3, [pc, #716]	; (8005a44 <UART_SetConfig+0x358>)
 8005778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577a:	2203      	movs	r2, #3
 800577c:	4013      	ands	r3, r2
 800577e:	2b01      	cmp	r3, #1
 8005780:	d00f      	beq.n	80057a2 <UART_SetConfig+0xb6>
 8005782:	d304      	bcc.n	800578e <UART_SetConfig+0xa2>
 8005784:	2b02      	cmp	r3, #2
 8005786:	d011      	beq.n	80057ac <UART_SetConfig+0xc0>
 8005788:	2b03      	cmp	r3, #3
 800578a:	d005      	beq.n	8005798 <UART_SetConfig+0xac>
 800578c:	e013      	b.n	80057b6 <UART_SetConfig+0xca>
 800578e:	231f      	movs	r3, #31
 8005790:	18fb      	adds	r3, r7, r3
 8005792:	2200      	movs	r2, #0
 8005794:	701a      	strb	r2, [r3, #0]
 8005796:	e064      	b.n	8005862 <UART_SetConfig+0x176>
 8005798:	231f      	movs	r3, #31
 800579a:	18fb      	adds	r3, r7, r3
 800579c:	2202      	movs	r2, #2
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	e05f      	b.n	8005862 <UART_SetConfig+0x176>
 80057a2:	231f      	movs	r3, #31
 80057a4:	18fb      	adds	r3, r7, r3
 80057a6:	2204      	movs	r2, #4
 80057a8:	701a      	strb	r2, [r3, #0]
 80057aa:	e05a      	b.n	8005862 <UART_SetConfig+0x176>
 80057ac:	231f      	movs	r3, #31
 80057ae:	18fb      	adds	r3, r7, r3
 80057b0:	2208      	movs	r2, #8
 80057b2:	701a      	strb	r2, [r3, #0]
 80057b4:	e055      	b.n	8005862 <UART_SetConfig+0x176>
 80057b6:	231f      	movs	r3, #31
 80057b8:	18fb      	adds	r3, r7, r3
 80057ba:	2210      	movs	r2, #16
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	46c0      	nop			; (mov r8, r8)
 80057c0:	e04f      	b.n	8005862 <UART_SetConfig+0x176>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4aa0      	ldr	r2, [pc, #640]	; (8005a48 <UART_SetConfig+0x35c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d132      	bne.n	8005832 <UART_SetConfig+0x146>
 80057cc:	4b9d      	ldr	r3, [pc, #628]	; (8005a44 <UART_SetConfig+0x358>)
 80057ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057d0:	23c0      	movs	r3, #192	; 0xc0
 80057d2:	029b      	lsls	r3, r3, #10
 80057d4:	4013      	ands	r3, r2
 80057d6:	2280      	movs	r2, #128	; 0x80
 80057d8:	0252      	lsls	r2, r2, #9
 80057da:	4293      	cmp	r3, r2
 80057dc:	d019      	beq.n	8005812 <UART_SetConfig+0x126>
 80057de:	2280      	movs	r2, #128	; 0x80
 80057e0:	0252      	lsls	r2, r2, #9
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d802      	bhi.n	80057ec <UART_SetConfig+0x100>
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d009      	beq.n	80057fe <UART_SetConfig+0x112>
 80057ea:	e01c      	b.n	8005826 <UART_SetConfig+0x13a>
 80057ec:	2280      	movs	r2, #128	; 0x80
 80057ee:	0292      	lsls	r2, r2, #10
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d013      	beq.n	800581c <UART_SetConfig+0x130>
 80057f4:	22c0      	movs	r2, #192	; 0xc0
 80057f6:	0292      	lsls	r2, r2, #10
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d005      	beq.n	8005808 <UART_SetConfig+0x11c>
 80057fc:	e013      	b.n	8005826 <UART_SetConfig+0x13a>
 80057fe:	231f      	movs	r3, #31
 8005800:	18fb      	adds	r3, r7, r3
 8005802:	2200      	movs	r2, #0
 8005804:	701a      	strb	r2, [r3, #0]
 8005806:	e02c      	b.n	8005862 <UART_SetConfig+0x176>
 8005808:	231f      	movs	r3, #31
 800580a:	18fb      	adds	r3, r7, r3
 800580c:	2202      	movs	r2, #2
 800580e:	701a      	strb	r2, [r3, #0]
 8005810:	e027      	b.n	8005862 <UART_SetConfig+0x176>
 8005812:	231f      	movs	r3, #31
 8005814:	18fb      	adds	r3, r7, r3
 8005816:	2204      	movs	r2, #4
 8005818:	701a      	strb	r2, [r3, #0]
 800581a:	e022      	b.n	8005862 <UART_SetConfig+0x176>
 800581c:	231f      	movs	r3, #31
 800581e:	18fb      	adds	r3, r7, r3
 8005820:	2208      	movs	r2, #8
 8005822:	701a      	strb	r2, [r3, #0]
 8005824:	e01d      	b.n	8005862 <UART_SetConfig+0x176>
 8005826:	231f      	movs	r3, #31
 8005828:	18fb      	adds	r3, r7, r3
 800582a:	2210      	movs	r2, #16
 800582c:	701a      	strb	r2, [r3, #0]
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	e017      	b.n	8005862 <UART_SetConfig+0x176>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a85      	ldr	r2, [pc, #532]	; (8005a4c <UART_SetConfig+0x360>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d104      	bne.n	8005846 <UART_SetConfig+0x15a>
 800583c:	231f      	movs	r3, #31
 800583e:	18fb      	adds	r3, r7, r3
 8005840:	2200      	movs	r2, #0
 8005842:	701a      	strb	r2, [r3, #0]
 8005844:	e00d      	b.n	8005862 <UART_SetConfig+0x176>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a81      	ldr	r2, [pc, #516]	; (8005a50 <UART_SetConfig+0x364>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d104      	bne.n	800585a <UART_SetConfig+0x16e>
 8005850:	231f      	movs	r3, #31
 8005852:	18fb      	adds	r3, r7, r3
 8005854:	2200      	movs	r2, #0
 8005856:	701a      	strb	r2, [r3, #0]
 8005858:	e003      	b.n	8005862 <UART_SetConfig+0x176>
 800585a:	231f      	movs	r3, #31
 800585c:	18fb      	adds	r3, r7, r3
 800585e:	2210      	movs	r2, #16
 8005860:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	69da      	ldr	r2, [r3, #28]
 8005866:	2380      	movs	r3, #128	; 0x80
 8005868:	021b      	lsls	r3, r3, #8
 800586a:	429a      	cmp	r2, r3
 800586c:	d000      	beq.n	8005870 <UART_SetConfig+0x184>
 800586e:	e07d      	b.n	800596c <UART_SetConfig+0x280>
  {
    switch (clocksource)
 8005870:	231f      	movs	r3, #31
 8005872:	18fb      	adds	r3, r7, r3
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b02      	cmp	r3, #2
 8005878:	d01c      	beq.n	80058b4 <UART_SetConfig+0x1c8>
 800587a:	dc02      	bgt.n	8005882 <UART_SetConfig+0x196>
 800587c:	2b00      	cmp	r3, #0
 800587e:	d005      	beq.n	800588c <UART_SetConfig+0x1a0>
 8005880:	e04b      	b.n	800591a <UART_SetConfig+0x22e>
 8005882:	2b04      	cmp	r3, #4
 8005884:	d025      	beq.n	80058d2 <UART_SetConfig+0x1e6>
 8005886:	2b08      	cmp	r3, #8
 8005888:	d037      	beq.n	80058fa <UART_SetConfig+0x20e>
 800588a:	e046      	b.n	800591a <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800588c:	f7ff fb64 	bl	8004f58 <HAL_RCC_GetPCLK1Freq>
 8005890:	0003      	movs	r3, r0
 8005892:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	005a      	lsls	r2, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	085b      	lsrs	r3, r3, #1
 800589e:	18d2      	adds	r2, r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	0019      	movs	r1, r3
 80058a6:	0010      	movs	r0, r2
 80058a8:	f7fa fc2e 	bl	8000108 <__udivsi3>
 80058ac:	0003      	movs	r3, r0
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	61bb      	str	r3, [r7, #24]
        break;
 80058b2:	e037      	b.n	8005924 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	085b      	lsrs	r3, r3, #1
 80058ba:	4a66      	ldr	r2, [pc, #408]	; (8005a54 <UART_SetConfig+0x368>)
 80058bc:	189a      	adds	r2, r3, r2
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	0019      	movs	r1, r3
 80058c4:	0010      	movs	r0, r2
 80058c6:	f7fa fc1f 	bl	8000108 <__udivsi3>
 80058ca:	0003      	movs	r3, r0
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	61bb      	str	r3, [r7, #24]
        break;
 80058d0:	e028      	b.n	8005924 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058d2:	f7ff fab9 	bl	8004e48 <HAL_RCC_GetSysClockFreq>
 80058d6:	0003      	movs	r3, r0
 80058d8:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	005a      	lsls	r2, r3, #1
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	085b      	lsrs	r3, r3, #1
 80058e4:	18d2      	adds	r2, r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	0019      	movs	r1, r3
 80058ec:	0010      	movs	r0, r2
 80058ee:	f7fa fc0b 	bl	8000108 <__udivsi3>
 80058f2:	0003      	movs	r3, r0
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	61bb      	str	r3, [r7, #24]
        break;
 80058f8:	e014      	b.n	8005924 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	085b      	lsrs	r3, r3, #1
 8005900:	2280      	movs	r2, #128	; 0x80
 8005902:	0252      	lsls	r2, r2, #9
 8005904:	189a      	adds	r2, r3, r2
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	0019      	movs	r1, r3
 800590c:	0010      	movs	r0, r2
 800590e:	f7fa fbfb 	bl	8000108 <__udivsi3>
 8005912:	0003      	movs	r3, r0
 8005914:	b29b      	uxth	r3, r3
 8005916:	61bb      	str	r3, [r7, #24]
        break;
 8005918:	e004      	b.n	8005924 <UART_SetConfig+0x238>
      default:
        ret = HAL_ERROR;
 800591a:	2317      	movs	r3, #23
 800591c:	18fb      	adds	r3, r7, r3
 800591e:	2201      	movs	r2, #1
 8005920:	701a      	strb	r2, [r3, #0]
        break;
 8005922:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	2b0f      	cmp	r3, #15
 8005928:	d91b      	bls.n	8005962 <UART_SetConfig+0x276>
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	4a4a      	ldr	r2, [pc, #296]	; (8005a58 <UART_SetConfig+0x36c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d817      	bhi.n	8005962 <UART_SetConfig+0x276>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	b29a      	uxth	r2, r3
 8005936:	200a      	movs	r0, #10
 8005938:	183b      	adds	r3, r7, r0
 800593a:	210f      	movs	r1, #15
 800593c:	438a      	bics	r2, r1
 800593e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	085b      	lsrs	r3, r3, #1
 8005944:	b29b      	uxth	r3, r3
 8005946:	2207      	movs	r2, #7
 8005948:	4013      	ands	r3, r2
 800594a:	b299      	uxth	r1, r3
 800594c:	183b      	adds	r3, r7, r0
 800594e:	183a      	adds	r2, r7, r0
 8005950:	8812      	ldrh	r2, [r2, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	183a      	adds	r2, r7, r0
 800595c:	8812      	ldrh	r2, [r2, #0]
 800595e:	60da      	str	r2, [r3, #12]
 8005960:	e082      	b.n	8005a68 <UART_SetConfig+0x37c>
    }
    else
    {
      ret = HAL_ERROR;
 8005962:	2317      	movs	r3, #23
 8005964:	18fb      	adds	r3, r7, r3
 8005966:	2201      	movs	r2, #1
 8005968:	701a      	strb	r2, [r3, #0]
 800596a:	e07d      	b.n	8005a68 <UART_SetConfig+0x37c>
    }
  }
  else
  {
    switch (clocksource)
 800596c:	231f      	movs	r3, #31
 800596e:	18fb      	adds	r3, r7, r3
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d01b      	beq.n	80059ae <UART_SetConfig+0x2c2>
 8005976:	dc02      	bgt.n	800597e <UART_SetConfig+0x292>
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <UART_SetConfig+0x29c>
 800597c:	e049      	b.n	8005a12 <UART_SetConfig+0x326>
 800597e:	2b04      	cmp	r3, #4
 8005980:	d024      	beq.n	80059cc <UART_SetConfig+0x2e0>
 8005982:	2b08      	cmp	r3, #8
 8005984:	d035      	beq.n	80059f2 <UART_SetConfig+0x306>
 8005986:	e044      	b.n	8005a12 <UART_SetConfig+0x326>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005988:	f7ff fae6 	bl	8004f58 <HAL_RCC_GetPCLK1Freq>
 800598c:	0003      	movs	r3, r0
 800598e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	085a      	lsrs	r2, r3, #1
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	18d2      	adds	r2, r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	0019      	movs	r1, r3
 80059a0:	0010      	movs	r0, r2
 80059a2:	f7fa fbb1 	bl	8000108 <__udivsi3>
 80059a6:	0003      	movs	r3, r0
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	61bb      	str	r3, [r7, #24]
        break;
 80059ac:	e036      	b.n	8005a1c <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	085b      	lsrs	r3, r3, #1
 80059b4:	4a29      	ldr	r2, [pc, #164]	; (8005a5c <UART_SetConfig+0x370>)
 80059b6:	189a      	adds	r2, r3, r2
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	0019      	movs	r1, r3
 80059be:	0010      	movs	r0, r2
 80059c0:	f7fa fba2 	bl	8000108 <__udivsi3>
 80059c4:	0003      	movs	r3, r0
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	61bb      	str	r3, [r7, #24]
        break;
 80059ca:	e027      	b.n	8005a1c <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059cc:	f7ff fa3c 	bl	8004e48 <HAL_RCC_GetSysClockFreq>
 80059d0:	0003      	movs	r3, r0
 80059d2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	085a      	lsrs	r2, r3, #1
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	18d2      	adds	r2, r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	0019      	movs	r1, r3
 80059e4:	0010      	movs	r0, r2
 80059e6:	f7fa fb8f 	bl	8000108 <__udivsi3>
 80059ea:	0003      	movs	r3, r0
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	61bb      	str	r3, [r7, #24]
        break;
 80059f0:	e014      	b.n	8005a1c <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	085b      	lsrs	r3, r3, #1
 80059f8:	2280      	movs	r2, #128	; 0x80
 80059fa:	0212      	lsls	r2, r2, #8
 80059fc:	189a      	adds	r2, r3, r2
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	0019      	movs	r1, r3
 8005a04:	0010      	movs	r0, r2
 8005a06:	f7fa fb7f 	bl	8000108 <__udivsi3>
 8005a0a:	0003      	movs	r3, r0
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	61bb      	str	r3, [r7, #24]
        break;
 8005a10:	e004      	b.n	8005a1c <UART_SetConfig+0x330>
      default:
        ret = HAL_ERROR;
 8005a12:	2317      	movs	r3, #23
 8005a14:	18fb      	adds	r3, r7, r3
 8005a16:	2201      	movs	r2, #1
 8005a18:	701a      	strb	r2, [r3, #0]
        break;
 8005a1a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	2b0f      	cmp	r3, #15
 8005a20:	d91e      	bls.n	8005a60 <UART_SetConfig+0x374>
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	4a0c      	ldr	r2, [pc, #48]	; (8005a58 <UART_SetConfig+0x36c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d81a      	bhi.n	8005a60 <UART_SetConfig+0x374>
    {
      huart->Instance->BRR = usartdiv;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	60da      	str	r2, [r3, #12]
 8005a32:	e019      	b.n	8005a68 <UART_SetConfig+0x37c>
 8005a34:	efff69f3 	.word	0xefff69f3
 8005a38:	ffffcfff 	.word	0xffffcfff
 8005a3c:	fffff4ff 	.word	0xfffff4ff
 8005a40:	40013800 	.word	0x40013800
 8005a44:	40021000 	.word	0x40021000
 8005a48:	40004400 	.word	0x40004400
 8005a4c:	40004800 	.word	0x40004800
 8005a50:	40004c00 	.word	0x40004c00
 8005a54:	00f42400 	.word	0x00f42400
 8005a58:	0000ffff 	.word	0x0000ffff
 8005a5c:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 8005a60:	2317      	movs	r3, #23
 8005a62:	18fb      	adds	r3, r7, r3
 8005a64:	2201      	movs	r2, #1
 8005a66:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005a74:	2317      	movs	r3, #23
 8005a76:	18fb      	adds	r3, r7, r3
 8005a78:	781b      	ldrb	r3, [r3, #0]
}
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	b008      	add	sp, #32
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	46c0      	nop			; (mov r8, r8)

08005a84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	2201      	movs	r2, #1
 8005a92:	4013      	ands	r3, r2
 8005a94:	d00b      	beq.n	8005aae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	4a4a      	ldr	r2, [pc, #296]	; (8005bc8 <UART_AdvFeatureConfig+0x144>)
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	0019      	movs	r1, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	d00b      	beq.n	8005ad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	4a43      	ldr	r2, [pc, #268]	; (8005bcc <UART_AdvFeatureConfig+0x148>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	0019      	movs	r1, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	2204      	movs	r2, #4
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	d00b      	beq.n	8005af2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	4a3b      	ldr	r2, [pc, #236]	; (8005bd0 <UART_AdvFeatureConfig+0x14c>)
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	0019      	movs	r1, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	2208      	movs	r2, #8
 8005af8:	4013      	ands	r3, r2
 8005afa:	d00b      	beq.n	8005b14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	4a34      	ldr	r2, [pc, #208]	; (8005bd4 <UART_AdvFeatureConfig+0x150>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	0019      	movs	r1, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	2210      	movs	r2, #16
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	d00b      	beq.n	8005b36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	4a2c      	ldr	r2, [pc, #176]	; (8005bd8 <UART_AdvFeatureConfig+0x154>)
 8005b26:	4013      	ands	r3, r2
 8005b28:	0019      	movs	r1, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	d00b      	beq.n	8005b58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	4a25      	ldr	r2, [pc, #148]	; (8005bdc <UART_AdvFeatureConfig+0x158>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	0019      	movs	r1, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	2240      	movs	r2, #64	; 0x40
 8005b5e:	4013      	ands	r3, r2
 8005b60:	d01d      	beq.n	8005b9e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	4a1d      	ldr	r2, [pc, #116]	; (8005be0 <UART_AdvFeatureConfig+0x15c>)
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	0019      	movs	r1, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b7e:	2380      	movs	r3, #128	; 0x80
 8005b80:	035b      	lsls	r3, r3, #13
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d10b      	bne.n	8005b9e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	4a15      	ldr	r2, [pc, #84]	; (8005be4 <UART_AdvFeatureConfig+0x160>)
 8005b8e:	4013      	ands	r3, r2
 8005b90:	0019      	movs	r1, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	2280      	movs	r2, #128	; 0x80
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	d00b      	beq.n	8005bc0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	4a0e      	ldr	r2, [pc, #56]	; (8005be8 <UART_AdvFeatureConfig+0x164>)
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	0019      	movs	r1, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	605a      	str	r2, [r3, #4]
  }
}
 8005bc0:	46c0      	nop			; (mov r8, r8)
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	b002      	add	sp, #8
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	fffdffff 	.word	0xfffdffff
 8005bcc:	fffeffff 	.word	0xfffeffff
 8005bd0:	fffbffff 	.word	0xfffbffff
 8005bd4:	ffff7fff 	.word	0xffff7fff
 8005bd8:	ffffefff 	.word	0xffffefff
 8005bdc:	ffffdfff 	.word	0xffffdfff
 8005be0:	ffefffff 	.word	0xffefffff
 8005be4:	ff9fffff 	.word	0xff9fffff
 8005be8:	fff7ffff 	.word	0xfff7ffff

08005bec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005bfa:	f7fd f9d1 	bl	8002fa0 <HAL_GetTick>
 8005bfe:	0003      	movs	r3, r0
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2208      	movs	r2, #8
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d10d      	bne.n	8005c2c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	2380      	movs	r3, #128	; 0x80
 8005c14:	0399      	lsls	r1, r3, #14
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	4b16      	ldr	r3, [pc, #88]	; (8005c74 <UART_CheckIdleState+0x88>)
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	0013      	movs	r3, r2
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f000 f82a 	bl	8005c78 <UART_WaitOnFlagUntilTimeout>
 8005c24:	1e03      	subs	r3, r0, #0
 8005c26:	d001      	beq.n	8005c2c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e01f      	b.n	8005c6c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2204      	movs	r2, #4
 8005c34:	4013      	ands	r3, r2
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d10d      	bne.n	8005c56 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	2380      	movs	r3, #128	; 0x80
 8005c3e:	03d9      	lsls	r1, r3, #15
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	4b0c      	ldr	r3, [pc, #48]	; (8005c74 <UART_CheckIdleState+0x88>)
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	0013      	movs	r3, r2
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f000 f815 	bl	8005c78 <UART_WaitOnFlagUntilTimeout>
 8005c4e:	1e03      	subs	r3, r0, #0
 8005c50:	d001      	beq.n	8005c56 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e00a      	b.n	8005c6c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2270      	movs	r2, #112	; 0x70
 8005c66:	2100      	movs	r1, #0
 8005c68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	b004      	add	sp, #16
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	01ffffff 	.word	0x01ffffff

08005c78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	1dfb      	adds	r3, r7, #7
 8005c86:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c88:	e05d      	b.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	d05a      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c90:	f7fd f986 	bl	8002fa0 <HAL_GetTick>
 8005c94:	0002      	movs	r2, r0
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d302      	bcc.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d11b      	bne.n	8005cde <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	492f      	ldr	r1, [pc, #188]	; (8005d70 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005cb2:	400a      	ands	r2, r1
 8005cb4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	438a      	bics	r2, r1
 8005cc4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2270      	movs	r2, #112	; 0x70
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e043      	b.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2204      	movs	r2, #4
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d02d      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69da      	ldr	r2, [r3, #28]
 8005cf0:	2380      	movs	r3, #128	; 0x80
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	401a      	ands	r2, r3
 8005cf6:	2380      	movs	r3, #128	; 0x80
 8005cf8:	011b      	lsls	r3, r3, #4
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d123      	bne.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2280      	movs	r2, #128	; 0x80
 8005d04:	0112      	lsls	r2, r2, #4
 8005d06:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4917      	ldr	r1, [pc, #92]	; (8005d70 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005d14:	400a      	ands	r2, r1
 8005d16:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689a      	ldr	r2, [r3, #8]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2101      	movs	r1, #1
 8005d24:	438a      	bics	r2, r1
 8005d26:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2220      	movs	r2, #32
 8005d32:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2220      	movs	r2, #32
 8005d38:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2270      	movs	r2, #112	; 0x70
 8005d3e:	2100      	movs	r1, #0
 8005d40:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e00f      	b.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	425a      	negs	r2, r3
 8005d56:	4153      	adcs	r3, r2
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	001a      	movs	r2, r3
 8005d5c:	1dfb      	adds	r3, r7, #7
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d092      	beq.n	8005c8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	0018      	movs	r0, r3
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	b004      	add	sp, #16
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	46c0      	nop			; (mov r8, r8)
 8005d70:	fffffe5f 	.word	0xfffffe5f

08005d74 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d7a:	f3ef 8305 	mrs	r3, IPSR
 8005d7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d109      	bne.n	8005d9a <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d86:	f3ef 8310 	mrs	r3, PRIMASK
 8005d8a:	607b      	str	r3, [r7, #4]
  return(result);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d007      	beq.n	8005da2 <osKernelInitialize+0x2e>
 8005d92:	4b0d      	ldr	r3, [pc, #52]	; (8005dc8 <osKernelInitialize+0x54>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d103      	bne.n	8005da2 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8005d9a:	2306      	movs	r3, #6
 8005d9c:	425b      	negs	r3, r3
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	e00c      	b.n	8005dbc <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005da2:	4b09      	ldr	r3, [pc, #36]	; (8005dc8 <osKernelInitialize+0x54>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d105      	bne.n	8005db6 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005daa:	4b07      	ldr	r3, [pc, #28]	; (8005dc8 <osKernelInitialize+0x54>)
 8005dac:	2201      	movs	r2, #1
 8005dae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	e002      	b.n	8005dbc <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8005db6:	2301      	movs	r3, #1
 8005db8:	425b      	negs	r3, r3
 8005dba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
}
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	b004      	add	sp, #16
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	46c0      	nop			; (mov r8, r8)
 8005dc8:	20000154 	.word	0x20000154

08005dcc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dd2:	f3ef 8305 	mrs	r3, IPSR
 8005dd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d109      	bne.n	8005df2 <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dde:	f3ef 8310 	mrs	r3, PRIMASK
 8005de2:	607b      	str	r3, [r7, #4]
  return(result);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d007      	beq.n	8005dfa <osKernelStart+0x2e>
 8005dea:	4b0e      	ldr	r3, [pc, #56]	; (8005e24 <osKernelStart+0x58>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d103      	bne.n	8005dfa <osKernelStart+0x2e>
    stat = osErrorISR;
 8005df2:	2306      	movs	r3, #6
 8005df4:	425b      	negs	r3, r3
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	e00e      	b.n	8005e18 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005dfa:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <osKernelStart+0x58>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d107      	bne.n	8005e12 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8005e02:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <osKernelStart+0x58>)
 8005e04:	2202      	movs	r2, #2
 8005e06:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005e08:	f000 ff7e 	bl	8006d08 <vTaskStartScheduler>
      stat = osOK;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	e002      	b.n	8005e18 <osKernelStart+0x4c>
    } else {
      stat = osError;
 8005e12:	2301      	movs	r3, #1
 8005e14:	425b      	negs	r3, r3
 8005e16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005e18:	68fb      	ldr	r3, [r7, #12]
}
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	b004      	add	sp, #16
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	46c0      	nop			; (mov r8, r8)
 8005e24:	20000154 	.word	0x20000154

08005e28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e28:	b5b0      	push	{r4, r5, r7, lr}
 8005e2a:	b090      	sub	sp, #64	; 0x40
 8005e2c:	af04      	add	r7, sp, #16
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e34:	2300      	movs	r3, #0
 8005e36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e38:	f3ef 8305 	mrs	r3, IPSR
 8005e3c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005e3e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d000      	beq.n	8005e46 <osThreadNew+0x1e>
 8005e44:	e090      	b.n	8005f68 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e46:	f3ef 8310 	mrs	r3, PRIMASK
 8005e4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d004      	beq.n	8005e5c <osThreadNew+0x34>
 8005e52:	4b48      	ldr	r3, [pc, #288]	; (8005f74 <osThreadNew+0x14c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d100      	bne.n	8005e5c <osThreadNew+0x34>
 8005e5a:	e085      	b.n	8005f68 <osThreadNew+0x140>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d100      	bne.n	8005e64 <osThreadNew+0x3c>
 8005e62:	e081      	b.n	8005f68 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8005e64:	2380      	movs	r3, #128	; 0x80
 8005e66:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005e68:	2318      	movs	r3, #24
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8005e6c:	2117      	movs	r1, #23
 8005e6e:	187b      	adds	r3, r7, r1
 8005e70:	2200      	movs	r2, #0
 8005e72:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8005e74:	187b      	adds	r3, r7, r1
 8005e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	425b      	negs	r3, r3
 8005e7c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d044      	beq.n	8005f0e <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <osThreadNew+0x6a>
        name = attr->name;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d007      	beq.n	8005eb6 <osThreadNew+0x8e>
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	2b38      	cmp	r3, #56	; 0x38
 8005eaa:	d804      	bhi.n	8005eb6 <osThreadNew+0x8e>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	d001      	beq.n	8005eba <osThreadNew+0x92>
        return (NULL);
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e057      	b.n	8005f6a <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	089b      	lsrs	r3, r3, #2
 8005ec8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00e      	beq.n	8005ef0 <osThreadNew+0xc8>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	2b5b      	cmp	r3, #91	; 0x5b
 8005ed8:	d90a      	bls.n	8005ef0 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d006      	beq.n	8005ef0 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <osThreadNew+0xc8>
        mem = 1;
 8005eea:	2301      	movs	r3, #1
 8005eec:	623b      	str	r3, [r7, #32]
 8005eee:	e010      	b.n	8005f12 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10c      	bne.n	8005f12 <osThreadNew+0xea>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d108      	bne.n	8005f12 <osThreadNew+0xea>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d104      	bne.n	8005f12 <osThreadNew+0xea>
          mem = 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	623b      	str	r3, [r7, #32]
 8005f0c:	e001      	b.n	8005f12 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d112      	bne.n	8005f3e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f20:	68bd      	ldr	r5, [r7, #8]
 8005f22:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8005f24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	9302      	str	r3, [sp, #8]
 8005f2a:	9201      	str	r2, [sp, #4]
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	002b      	movs	r3, r5
 8005f32:	0022      	movs	r2, r4
 8005f34:	f000 fd49 	bl	80069ca <xTaskCreateStatic>
 8005f38:	0003      	movs	r3, r0
 8005f3a:	613b      	str	r3, [r7, #16]
 8005f3c:	e014      	b.n	8005f68 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d111      	bne.n	8005f68 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68bc      	ldr	r4, [r7, #8]
 8005f4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	2310      	movs	r3, #16
 8005f50:	18fb      	adds	r3, r7, r3
 8005f52:	9301      	str	r3, [sp, #4]
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	0023      	movs	r3, r4
 8005f5a:	f000 fd79 	bl	8006a50 <xTaskCreate>
 8005f5e:	0003      	movs	r3, r0
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d001      	beq.n	8005f68 <osThreadNew+0x140>
          hTask = NULL;
 8005f64:	2300      	movs	r3, #0
 8005f66:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f68:	693b      	ldr	r3, [r7, #16]
}
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	b00c      	add	sp, #48	; 0x30
 8005f70:	bdb0      	pop	{r4, r5, r7, pc}
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	20000154 	.word	0x20000154

08005f78 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f80:	f3ef 8305 	mrs	r3, IPSR
 8005f84:	613b      	str	r3, [r7, #16]
  return(result);
 8005f86:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d109      	bne.n	8005fa0 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f90:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d007      	beq.n	8005fa8 <osDelay+0x30>
 8005f98:	4b0a      	ldr	r3, [pc, #40]	; (8005fc4 <osDelay+0x4c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d103      	bne.n	8005fa8 <osDelay+0x30>
    stat = osErrorISR;
 8005fa0:	2306      	movs	r3, #6
 8005fa2:	425b      	negs	r3, r3
 8005fa4:	617b      	str	r3, [r7, #20]
 8005fa6:	e008      	b.n	8005fba <osDelay+0x42>
  }
  else {
    stat = osOK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <osDelay+0x42>
      vTaskDelay(ticks);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	0018      	movs	r0, r3
 8005fb6:	f000 fe81 	bl	8006cbc <vTaskDelay>
    }
  }

  return (stat);
 8005fba:	697b      	ldr	r3, [r7, #20]
}
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	b006      	add	sp, #24
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	20000154 	.word	0x20000154

08005fc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4a06      	ldr	r2, [pc, #24]	; (8005ff0 <vApplicationGetIdleTaskMemory+0x28>)
 8005fd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	4a05      	ldr	r2, [pc, #20]	; (8005ff4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005fde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2280      	movs	r2, #128	; 0x80
 8005fe4:	601a      	str	r2, [r3, #0]
}
 8005fe6:	46c0      	nop			; (mov r8, r8)
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	b004      	add	sp, #16
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	46c0      	nop			; (mov r8, r8)
 8005ff0:	20000158 	.word	0x20000158
 8005ff4:	200001b4 	.word	0x200001b4

08005ff8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4a06      	ldr	r2, [pc, #24]	; (8006020 <vApplicationGetTimerTaskMemory+0x28>)
 8006008:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	4a05      	ldr	r2, [pc, #20]	; (8006024 <vApplicationGetTimerTaskMemory+0x2c>)
 800600e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2280      	movs	r2, #128	; 0x80
 8006014:	0052      	lsls	r2, r2, #1
 8006016:	601a      	str	r2, [r3, #0]
}
 8006018:	46c0      	nop			; (mov r8, r8)
 800601a:	46bd      	mov	sp, r7
 800601c:	b004      	add	sp, #16
 800601e:	bd80      	pop	{r7, pc}
 8006020:	200003b4 	.word	0x200003b4
 8006024:	20000410 	.word	0x20000410

08006028 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3308      	adds	r3, #8
 8006034:	001a      	movs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	4252      	negs	r2, r2
 8006040:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	3308      	adds	r3, #8
 8006046:	001a      	movs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3308      	adds	r3, #8
 8006050:	001a      	movs	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800605c:	46c0      	nop			; (mov r8, r8)
 800605e:	46bd      	mov	sp, r7
 8006060:	b002      	add	sp, #8
 8006062:	bd80      	pop	{r7, pc}

08006064 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	46bd      	mov	sp, r7
 8006076:	b002      	add	sp, #8
 8006078:	bd80      	pop	{r7, pc}

0800607a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b084      	sub	sp, #16
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	601a      	str	r2, [r3, #0]
}
 80060b6:	46c0      	nop			; (mov r8, r8)
 80060b8:	46bd      	mov	sp, r7
 80060ba:	b004      	add	sp, #16
 80060bc:	bd80      	pop	{r7, pc}

080060be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b084      	sub	sp, #16
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	3301      	adds	r3, #1
 80060d2:	d103      	bne.n	80060dc <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	e00c      	b.n	80060f6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3308      	adds	r3, #8
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	e002      	b.n	80060ea <vListInsert+0x2c>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d2f6      	bcs.n	80060e4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	601a      	str	r2, [r3, #0]
}
 8006122:	46c0      	nop			; (mov r8, r8)
 8006124:	46bd      	mov	sp, r7
 8006126:	b004      	add	sp, #16
 8006128:	bd80      	pop	{r7, pc}

0800612a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6892      	ldr	r2, [r2, #8]
 8006140:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6852      	ldr	r2, [r2, #4]
 800614a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	429a      	cmp	r2, r3
 8006154:	d103      	bne.n	800615e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	689a      	ldr	r2, [r3, #8]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	1e5a      	subs	r2, r3, #1
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
}
 8006172:	0018      	movs	r0, r3
 8006174:	46bd      	mov	sp, r7
 8006176:	b004      	add	sp, #16
 8006178:	bd80      	pop	{r7, pc}

0800617a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <xQueueGenericReset+0x18>
 800618e:	b672      	cpsid	i
 8006190:	e7fe      	b.n	8006190 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8006192:	f001 fdcd 	bl	8007d30 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	434b      	muls	r3, r1
 80061a4:	18d2      	adds	r2, r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c0:	1e59      	subs	r1, r3, #1
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	434b      	muls	r3, r1
 80061c8:	18d2      	adds	r2, r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2244      	movs	r2, #68	; 0x44
 80061d2:	21ff      	movs	r1, #255	; 0xff
 80061d4:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2245      	movs	r2, #69	; 0x45
 80061da:	21ff      	movs	r1, #255	; 0xff
 80061dc:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10d      	bne.n	8006200 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d013      	beq.n	8006214 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	3310      	adds	r3, #16
 80061f0:	0018      	movs	r0, r3
 80061f2:	f000 ffcd 	bl	8007190 <xTaskRemoveFromEventList>
 80061f6:	1e03      	subs	r3, r0, #0
 80061f8:	d00c      	beq.n	8006214 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80061fa:	f001 fd89 	bl	8007d10 <vPortYield>
 80061fe:	e009      	b.n	8006214 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3310      	adds	r3, #16
 8006204:	0018      	movs	r0, r3
 8006206:	f7ff ff0f 	bl	8006028 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3324      	adds	r3, #36	; 0x24
 800620e:	0018      	movs	r0, r3
 8006210:	f7ff ff0a 	bl	8006028 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006214:	f001 fd9e 	bl	8007d54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006218:	2301      	movs	r3, #1
}
 800621a:	0018      	movs	r0, r3
 800621c:	46bd      	mov	sp, r7
 800621e:	b004      	add	sp, #16
 8006220:	bd80      	pop	{r7, pc}

08006222 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006222:	b590      	push	{r4, r7, lr}
 8006224:	b089      	sub	sp, #36	; 0x24
 8006226:	af02      	add	r7, sp, #8
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	607a      	str	r2, [r7, #4]
 800622e:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <xQueueGenericCreateStatic+0x18>
 8006236:	b672      	cpsid	i
 8006238:	e7fe      	b.n	8006238 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <xQueueGenericCreateStatic+0x22>
 8006240:	b672      	cpsid	i
 8006242:	e7fe      	b.n	8006242 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <xQueueGenericCreateStatic+0x2e>
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <xQueueGenericCreateStatic+0x32>
 8006250:	2301      	movs	r3, #1
 8006252:	e000      	b.n	8006256 <xQueueGenericCreateStatic+0x34>
 8006254:	2300      	movs	r3, #0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <xQueueGenericCreateStatic+0x3c>
 800625a:	b672      	cpsid	i
 800625c:	e7fe      	b.n	800625c <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d102      	bne.n	800626a <xQueueGenericCreateStatic+0x48>
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <xQueueGenericCreateStatic+0x4c>
 800626a:	2301      	movs	r3, #1
 800626c:	e000      	b.n	8006270 <xQueueGenericCreateStatic+0x4e>
 800626e:	2300      	movs	r3, #0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <xQueueGenericCreateStatic+0x56>
 8006274:	b672      	cpsid	i
 8006276:	e7fe      	b.n	8006276 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006278:	2350      	movs	r3, #80	; 0x50
 800627a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	2b50      	cmp	r3, #80	; 0x50
 8006280:	d001      	beq.n	8006286 <xQueueGenericCreateStatic+0x64>
 8006282:	b672      	cpsid	i
 8006284:	e7fe      	b.n	8006284 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00e      	beq.n	80062ae <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	2246      	movs	r2, #70	; 0x46
 8006294:	2101      	movs	r1, #1
 8006296:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006298:	2328      	movs	r3, #40	; 0x28
 800629a:	18fb      	adds	r3, r7, r3
 800629c:	781c      	ldrb	r4, [r3, #0]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	68b9      	ldr	r1, [r7, #8]
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	0023      	movs	r3, r4
 80062aa:	f000 f805 	bl	80062b8 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80062ae:	697b      	ldr	r3, [r7, #20]
	}
 80062b0:	0018      	movs	r0, r3
 80062b2:	46bd      	mov	sp, r7
 80062b4:	b007      	add	sp, #28
 80062b6:	bd90      	pop	{r4, r7, pc}

080062b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	001a      	movs	r2, r3
 80062c6:	1cfb      	adds	r3, r7, #3
 80062c8:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d103      	bne.n	80062d8 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	e002      	b.n	80062de <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	2101      	movs	r1, #1
 80062ee:	0018      	movs	r0, r3
 80062f0:	f7ff ff43 	bl	800617a <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	1cfa      	adds	r2, r7, #3
 80062f8:	214c      	movs	r1, #76	; 0x4c
 80062fa:	7812      	ldrb	r2, [r2, #0]
 80062fc:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062fe:	46c0      	nop			; (mov r8, r8)
 8006300:	46bd      	mov	sp, r7
 8006302:	b004      	add	sp, #16
 8006304:	bd80      	pop	{r7, pc}

08006306 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b08a      	sub	sp, #40	; 0x28
 800630a:	af00      	add	r7, sp, #0
 800630c:	60f8      	str	r0, [r7, #12]
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	607a      	str	r2, [r7, #4]
 8006312:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006314:	2300      	movs	r3, #0
 8006316:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <xQueueGenericSend+0x20>
 8006322:	b672      	cpsid	i
 8006324:	e7fe      	b.n	8006324 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d103      	bne.n	8006334 <xQueueGenericSend+0x2e>
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <xQueueGenericSend+0x32>
 8006334:	2301      	movs	r3, #1
 8006336:	e000      	b.n	800633a <xQueueGenericSend+0x34>
 8006338:	2300      	movs	r3, #0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <xQueueGenericSend+0x3c>
 800633e:	b672      	cpsid	i
 8006340:	e7fe      	b.n	8006340 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b02      	cmp	r3, #2
 8006346:	d103      	bne.n	8006350 <xQueueGenericSend+0x4a>
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <xQueueGenericSend+0x4e>
 8006350:	2301      	movs	r3, #1
 8006352:	e000      	b.n	8006356 <xQueueGenericSend+0x50>
 8006354:	2300      	movs	r3, #0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <xQueueGenericSend+0x58>
 800635a:	b672      	cpsid	i
 800635c:	e7fe      	b.n	800635c <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800635e:	f001 f8af 	bl	80074c0 <xTaskGetSchedulerState>
 8006362:	1e03      	subs	r3, r0, #0
 8006364:	d102      	bne.n	800636c <xQueueGenericSend+0x66>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <xQueueGenericSend+0x6a>
 800636c:	2301      	movs	r3, #1
 800636e:	e000      	b.n	8006372 <xQueueGenericSend+0x6c>
 8006370:	2300      	movs	r3, #0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <xQueueGenericSend+0x74>
 8006376:	b672      	cpsid	i
 8006378:	e7fe      	b.n	8006378 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800637a:	f001 fcd9 	bl	8007d30 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006386:	429a      	cmp	r2, r3
 8006388:	d302      	bcc.n	8006390 <xQueueGenericSend+0x8a>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b02      	cmp	r3, #2
 800638e:	d11e      	bne.n	80063ce <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	68b9      	ldr	r1, [r7, #8]
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	0018      	movs	r0, r3
 8006398:	f000 f99f 	bl	80066da <prvCopyDataToQueue>
 800639c:	0003      	movs	r3, r0
 800639e:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d009      	beq.n	80063bc <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	3324      	adds	r3, #36	; 0x24
 80063ac:	0018      	movs	r0, r3
 80063ae:	f000 feef 	bl	8007190 <xTaskRemoveFromEventList>
 80063b2:	1e03      	subs	r3, r0, #0
 80063b4:	d007      	beq.n	80063c6 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80063b6:	f001 fcab 	bl	8007d10 <vPortYield>
 80063ba:	e004      	b.n	80063c6 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80063c2:	f001 fca5 	bl	8007d10 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80063c6:	f001 fcc5 	bl	8007d54 <vPortExitCritical>
				return pdPASS;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e05b      	b.n	8006486 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d103      	bne.n	80063dc <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80063d4:	f001 fcbe 	bl	8007d54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80063d8:	2300      	movs	r3, #0
 80063da:	e054      	b.n	8006486 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d106      	bne.n	80063f0 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063e2:	2314      	movs	r3, #20
 80063e4:	18fb      	adds	r3, r7, r3
 80063e6:	0018      	movs	r0, r3
 80063e8:	f000 ff2e 	bl	8007248 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063ec:	2301      	movs	r3, #1
 80063ee:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063f0:	f001 fcb0 	bl	8007d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063f4:	f000 fcdc 	bl	8006db0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063f8:	f001 fc9a 	bl	8007d30 <vPortEnterCritical>
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	2244      	movs	r2, #68	; 0x44
 8006400:	5c9b      	ldrb	r3, [r3, r2]
 8006402:	b25b      	sxtb	r3, r3
 8006404:	3301      	adds	r3, #1
 8006406:	d103      	bne.n	8006410 <xQueueGenericSend+0x10a>
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	2244      	movs	r2, #68	; 0x44
 800640c:	2100      	movs	r1, #0
 800640e:	5499      	strb	r1, [r3, r2]
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	2245      	movs	r2, #69	; 0x45
 8006414:	5c9b      	ldrb	r3, [r3, r2]
 8006416:	b25b      	sxtb	r3, r3
 8006418:	3301      	adds	r3, #1
 800641a:	d103      	bne.n	8006424 <xQueueGenericSend+0x11e>
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	2245      	movs	r2, #69	; 0x45
 8006420:	2100      	movs	r1, #0
 8006422:	5499      	strb	r1, [r3, r2]
 8006424:	f001 fc96 	bl	8007d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006428:	1d3a      	adds	r2, r7, #4
 800642a:	2314      	movs	r3, #20
 800642c:	18fb      	adds	r3, r7, r3
 800642e:	0011      	movs	r1, r2
 8006430:	0018      	movs	r0, r3
 8006432:	f000 ff1d 	bl	8007270 <xTaskCheckForTimeOut>
 8006436:	1e03      	subs	r3, r0, #0
 8006438:	d11e      	bne.n	8006478 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	0018      	movs	r0, r3
 800643e:	f000 fa51 	bl	80068e4 <prvIsQueueFull>
 8006442:	1e03      	subs	r3, r0, #0
 8006444:	d011      	beq.n	800646a <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	3310      	adds	r3, #16
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	0011      	movs	r1, r2
 800644e:	0018      	movs	r0, r3
 8006450:	f000 fe5a 	bl	8007108 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006454:	6a3b      	ldr	r3, [r7, #32]
 8006456:	0018      	movs	r0, r3
 8006458:	f000 f9d0 	bl	80067fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800645c:	f000 fcb4 	bl	8006dc8 <xTaskResumeAll>
 8006460:	1e03      	subs	r3, r0, #0
 8006462:	d18a      	bne.n	800637a <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8006464:	f001 fc54 	bl	8007d10 <vPortYield>
 8006468:	e787      	b.n	800637a <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	0018      	movs	r0, r3
 800646e:	f000 f9c5 	bl	80067fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006472:	f000 fca9 	bl	8006dc8 <xTaskResumeAll>
 8006476:	e780      	b.n	800637a <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	0018      	movs	r0, r3
 800647c:	f000 f9be 	bl	80067fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006480:	f000 fca2 	bl	8006dc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006484:	2300      	movs	r3, #0
		}
	}
}
 8006486:	0018      	movs	r0, r3
 8006488:	46bd      	mov	sp, r7
 800648a:	b00a      	add	sp, #40	; 0x28
 800648c:	bd80      	pop	{r7, pc}

0800648e <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800648e:	b590      	push	{r4, r7, lr}
 8006490:	b089      	sub	sp, #36	; 0x24
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	607a      	str	r2, [r7, #4]
 800649a:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <xQueueGenericSendFromISR+0x1c>
 80064a6:	b672      	cpsid	i
 80064a8:	e7fe      	b.n	80064a8 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d103      	bne.n	80064b8 <xQueueGenericSendFromISR+0x2a>
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <xQueueGenericSendFromISR+0x2e>
 80064b8:	2301      	movs	r3, #1
 80064ba:	e000      	b.n	80064be <xQueueGenericSendFromISR+0x30>
 80064bc:	2300      	movs	r3, #0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <xQueueGenericSendFromISR+0x38>
 80064c2:	b672      	cpsid	i
 80064c4:	e7fe      	b.n	80064c4 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d103      	bne.n	80064d4 <xQueueGenericSendFromISR+0x46>
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d101      	bne.n	80064d8 <xQueueGenericSendFromISR+0x4a>
 80064d4:	2301      	movs	r3, #1
 80064d6:	e000      	b.n	80064da <xQueueGenericSendFromISR+0x4c>
 80064d8:	2300      	movs	r3, #0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <xQueueGenericSendFromISR+0x54>
 80064de:	b672      	cpsid	i
 80064e0:	e7fe      	b.n	80064e0 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064e2:	f001 fc4f 	bl	8007d84 <ulSetInterruptMaskFromISR>
 80064e6:	0003      	movs	r3, r0
 80064e8:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d302      	bcc.n	80064fc <xQueueGenericSendFromISR+0x6e>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d12e      	bne.n	800655a <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80064fc:	2413      	movs	r4, #19
 80064fe:	193b      	adds	r3, r7, r4
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	2145      	movs	r1, #69	; 0x45
 8006504:	5c52      	ldrb	r2, [r2, r1]
 8006506:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	0018      	movs	r0, r3
 8006510:	f000 f8e3 	bl	80066da <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006514:	193b      	adds	r3, r7, r4
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	b25b      	sxtb	r3, r3
 800651a:	3301      	adds	r3, #1
 800651c:	d111      	bne.n	8006542 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006522:	2b00      	cmp	r3, #0
 8006524:	d016      	beq.n	8006554 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	3324      	adds	r3, #36	; 0x24
 800652a:	0018      	movs	r0, r3
 800652c:	f000 fe30 	bl	8007190 <xTaskRemoveFromEventList>
 8006530:	1e03      	subs	r3, r0, #0
 8006532:	d00f      	beq.n	8006554 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00c      	beq.n	8006554 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	e008      	b.n	8006554 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006542:	2313      	movs	r3, #19
 8006544:	18fb      	adds	r3, r7, r3
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	3301      	adds	r3, #1
 800654a:	b2db      	uxtb	r3, r3
 800654c:	b259      	sxtb	r1, r3
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	2245      	movs	r2, #69	; 0x45
 8006552:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8006554:	2301      	movs	r3, #1
 8006556:	61fb      	str	r3, [r7, #28]
		{
 8006558:	e001      	b.n	800655e <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800655a:	2300      	movs	r3, #0
 800655c:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	0018      	movs	r0, r3
 8006562:	f001 fc15 	bl	8007d90 <vClearInterruptMaskFromISR>

	return xReturn;
 8006566:	69fb      	ldr	r3, [r7, #28]
}
 8006568:	0018      	movs	r0, r3
 800656a:	46bd      	mov	sp, r7
 800656c:	b009      	add	sp, #36	; 0x24
 800656e:	bd90      	pop	{r4, r7, pc}

08006570 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b08a      	sub	sp, #40	; 0x28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800657c:	2300      	movs	r3, #0
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <xQueueReceive+0x1e>
 800658a:	b672      	cpsid	i
 800658c:	e7fe      	b.n	800658c <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d103      	bne.n	800659c <xQueueReceive+0x2c>
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <xQueueReceive+0x30>
 800659c:	2301      	movs	r3, #1
 800659e:	e000      	b.n	80065a2 <xQueueReceive+0x32>
 80065a0:	2300      	movs	r3, #0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <xQueueReceive+0x3a>
 80065a6:	b672      	cpsid	i
 80065a8:	e7fe      	b.n	80065a8 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065aa:	f000 ff89 	bl	80074c0 <xTaskGetSchedulerState>
 80065ae:	1e03      	subs	r3, r0, #0
 80065b0:	d102      	bne.n	80065b8 <xQueueReceive+0x48>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <xQueueReceive+0x4c>
 80065b8:	2301      	movs	r3, #1
 80065ba:	e000      	b.n	80065be <xQueueReceive+0x4e>
 80065bc:	2300      	movs	r3, #0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <xQueueReceive+0x56>
 80065c2:	b672      	cpsid	i
 80065c4:	e7fe      	b.n	80065c4 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80065c6:	f001 fbb3 	bl	8007d30 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ce:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d01a      	beq.n	800660c <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	0011      	movs	r1, r2
 80065dc:	0018      	movs	r0, r3
 80065de:	f000 f8e7 	bl	80067b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	1e5a      	subs	r2, r3, #1
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d008      	beq.n	8006604 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	3310      	adds	r3, #16
 80065f6:	0018      	movs	r0, r3
 80065f8:	f000 fdca 	bl	8007190 <xTaskRemoveFromEventList>
 80065fc:	1e03      	subs	r3, r0, #0
 80065fe:	d001      	beq.n	8006604 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006600:	f001 fb86 	bl	8007d10 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006604:	f001 fba6 	bl	8007d54 <vPortExitCritical>
				return pdPASS;
 8006608:	2301      	movs	r3, #1
 800660a:	e062      	b.n	80066d2 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d103      	bne.n	800661a <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006612:	f001 fb9f 	bl	8007d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006616:	2300      	movs	r3, #0
 8006618:	e05b      	b.n	80066d2 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	2b00      	cmp	r3, #0
 800661e:	d106      	bne.n	800662e <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006620:	2314      	movs	r3, #20
 8006622:	18fb      	adds	r3, r7, r3
 8006624:	0018      	movs	r0, r3
 8006626:	f000 fe0f 	bl	8007248 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800662a:	2301      	movs	r3, #1
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800662e:	f001 fb91 	bl	8007d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006632:	f000 fbbd 	bl	8006db0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006636:	f001 fb7b 	bl	8007d30 <vPortEnterCritical>
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	2244      	movs	r2, #68	; 0x44
 800663e:	5c9b      	ldrb	r3, [r3, r2]
 8006640:	b25b      	sxtb	r3, r3
 8006642:	3301      	adds	r3, #1
 8006644:	d103      	bne.n	800664e <xQueueReceive+0xde>
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	2244      	movs	r2, #68	; 0x44
 800664a:	2100      	movs	r1, #0
 800664c:	5499      	strb	r1, [r3, r2]
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	2245      	movs	r2, #69	; 0x45
 8006652:	5c9b      	ldrb	r3, [r3, r2]
 8006654:	b25b      	sxtb	r3, r3
 8006656:	3301      	adds	r3, #1
 8006658:	d103      	bne.n	8006662 <xQueueReceive+0xf2>
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	2245      	movs	r2, #69	; 0x45
 800665e:	2100      	movs	r1, #0
 8006660:	5499      	strb	r1, [r3, r2]
 8006662:	f001 fb77 	bl	8007d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006666:	1d3a      	adds	r2, r7, #4
 8006668:	2314      	movs	r3, #20
 800666a:	18fb      	adds	r3, r7, r3
 800666c:	0011      	movs	r1, r2
 800666e:	0018      	movs	r0, r3
 8006670:	f000 fdfe 	bl	8007270 <xTaskCheckForTimeOut>
 8006674:	1e03      	subs	r3, r0, #0
 8006676:	d11e      	bne.n	80066b6 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	0018      	movs	r0, r3
 800667c:	f000 f91c 	bl	80068b8 <prvIsQueueEmpty>
 8006680:	1e03      	subs	r3, r0, #0
 8006682:	d011      	beq.n	80066a8 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	3324      	adds	r3, #36	; 0x24
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	0011      	movs	r1, r2
 800668c:	0018      	movs	r0, r3
 800668e:	f000 fd3b 	bl	8007108 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	0018      	movs	r0, r3
 8006696:	f000 f8b1 	bl	80067fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800669a:	f000 fb95 	bl	8006dc8 <xTaskResumeAll>
 800669e:	1e03      	subs	r3, r0, #0
 80066a0:	d191      	bne.n	80065c6 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 80066a2:	f001 fb35 	bl	8007d10 <vPortYield>
 80066a6:	e78e      	b.n	80065c6 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	0018      	movs	r0, r3
 80066ac:	f000 f8a6 	bl	80067fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066b0:	f000 fb8a 	bl	8006dc8 <xTaskResumeAll>
 80066b4:	e787      	b.n	80065c6 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	0018      	movs	r0, r3
 80066ba:	f000 f89f 	bl	80067fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066be:	f000 fb83 	bl	8006dc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	0018      	movs	r0, r3
 80066c6:	f000 f8f7 	bl	80068b8 <prvIsQueueEmpty>
 80066ca:	1e03      	subs	r3, r0, #0
 80066cc:	d100      	bne.n	80066d0 <xQueueReceive+0x160>
 80066ce:	e77a      	b.n	80065c6 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80066d2:	0018      	movs	r0, r3
 80066d4:	46bd      	mov	sp, r7
 80066d6:	b00a      	add	sp, #40	; 0x28
 80066d8:	bd80      	pop	{r7, pc}

080066da <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b086      	sub	sp, #24
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80066e6:	2300      	movs	r3, #0
 80066e8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ee:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10e      	bne.n	8006716 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d14e      	bne.n	800679e <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	0018      	movs	r0, r3
 8006706:	f000 fef7 	bl	80074f8 <xTaskPriorityDisinherit>
 800670a:	0003      	movs	r3, r0
 800670c:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	605a      	str	r2, [r3, #4]
 8006714:	e043      	b.n	800679e <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d119      	bne.n	8006750 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6898      	ldr	r0, [r3, #8]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	0019      	movs	r1, r3
 8006728:	f001 fd64 	bl	80081f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006734:	18d2      	adds	r2, r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	689a      	ldr	r2, [r3, #8]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	429a      	cmp	r2, r3
 8006744:	d32b      	bcc.n	800679e <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	609a      	str	r2, [r3, #8]
 800674e:	e026      	b.n	800679e <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	68d8      	ldr	r0, [r3, #12]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	0019      	movs	r1, r3
 800675c:	f001 fd4a 	bl	80081f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	425b      	negs	r3, r3
 800676a:	18d2      	adds	r2, r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	68da      	ldr	r2, [r3, #12]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	429a      	cmp	r2, r3
 800677a:	d207      	bcs.n	800678c <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006784:	425b      	negs	r3, r3
 8006786:	18d2      	adds	r2, r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b02      	cmp	r3, #2
 8006790:	d105      	bne.n	800679e <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	3b01      	subs	r3, #1
 800679c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80067a6:	697b      	ldr	r3, [r7, #20]
}
 80067a8:	0018      	movs	r0, r3
 80067aa:	46bd      	mov	sp, r7
 80067ac:	b006      	add	sp, #24
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d018      	beq.n	80067f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	18d2      	adds	r2, r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d303      	bcc.n	80067e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68d9      	ldr	r1, [r3, #12]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	0018      	movs	r0, r3
 80067f0:	f001 fd00 	bl	80081f4 <memcpy>
	}
}
 80067f4:	46c0      	nop			; (mov r8, r8)
 80067f6:	46bd      	mov	sp, r7
 80067f8:	b002      	add	sp, #8
 80067fa:	bd80      	pop	{r7, pc}

080067fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006804:	f001 fa94 	bl	8007d30 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006808:	230f      	movs	r3, #15
 800680a:	18fb      	adds	r3, r7, r3
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	2145      	movs	r1, #69	; 0x45
 8006810:	5c52      	ldrb	r2, [r2, r1]
 8006812:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006814:	e013      	b.n	800683e <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681a:	2b00      	cmp	r3, #0
 800681c:	d016      	beq.n	800684c <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	3324      	adds	r3, #36	; 0x24
 8006822:	0018      	movs	r0, r3
 8006824:	f000 fcb4 	bl	8007190 <xTaskRemoveFromEventList>
 8006828:	1e03      	subs	r3, r0, #0
 800682a:	d001      	beq.n	8006830 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800682c:	f000 fd70 	bl	8007310 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006830:	210f      	movs	r1, #15
 8006832:	187b      	adds	r3, r7, r1
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	3b01      	subs	r3, #1
 8006838:	b2da      	uxtb	r2, r3
 800683a:	187b      	adds	r3, r7, r1
 800683c:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800683e:	230f      	movs	r3, #15
 8006840:	18fb      	adds	r3, r7, r3
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	b25b      	sxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	dce5      	bgt.n	8006816 <prvUnlockQueue+0x1a>
 800684a:	e000      	b.n	800684e <prvUnlockQueue+0x52>
					break;
 800684c:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2245      	movs	r2, #69	; 0x45
 8006852:	21ff      	movs	r1, #255	; 0xff
 8006854:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006856:	f001 fa7d 	bl	8007d54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800685a:	f001 fa69 	bl	8007d30 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800685e:	230e      	movs	r3, #14
 8006860:	18fb      	adds	r3, r7, r3
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	2144      	movs	r1, #68	; 0x44
 8006866:	5c52      	ldrb	r2, [r2, r1]
 8006868:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800686a:	e013      	b.n	8006894 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d016      	beq.n	80068a2 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3310      	adds	r3, #16
 8006878:	0018      	movs	r0, r3
 800687a:	f000 fc89 	bl	8007190 <xTaskRemoveFromEventList>
 800687e:	1e03      	subs	r3, r0, #0
 8006880:	d001      	beq.n	8006886 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8006882:	f000 fd45 	bl	8007310 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006886:	210e      	movs	r1, #14
 8006888:	187b      	adds	r3, r7, r1
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	3b01      	subs	r3, #1
 800688e:	b2da      	uxtb	r2, r3
 8006890:	187b      	adds	r3, r7, r1
 8006892:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006894:	230e      	movs	r3, #14
 8006896:	18fb      	adds	r3, r7, r3
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	b25b      	sxtb	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	dce5      	bgt.n	800686c <prvUnlockQueue+0x70>
 80068a0:	e000      	b.n	80068a4 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80068a2:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2244      	movs	r2, #68	; 0x44
 80068a8:	21ff      	movs	r1, #255	; 0xff
 80068aa:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80068ac:	f001 fa52 	bl	8007d54 <vPortExitCritical>
}
 80068b0:	46c0      	nop			; (mov r8, r8)
 80068b2:	46bd      	mov	sp, r7
 80068b4:	b004      	add	sp, #16
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068c0:	f001 fa36 	bl	8007d30 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d102      	bne.n	80068d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80068cc:	2301      	movs	r3, #1
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	e001      	b.n	80068d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80068d2:	2300      	movs	r3, #0
 80068d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068d6:	f001 fa3d 	bl	8007d54 <vPortExitCritical>

	return xReturn;
 80068da:	68fb      	ldr	r3, [r7, #12]
}
 80068dc:	0018      	movs	r0, r3
 80068de:	46bd      	mov	sp, r7
 80068e0:	b004      	add	sp, #16
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068ec:	f001 fa20 	bl	8007d30 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d102      	bne.n	8006902 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80068fc:	2301      	movs	r3, #1
 80068fe:	60fb      	str	r3, [r7, #12]
 8006900:	e001      	b.n	8006906 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006906:	f001 fa25 	bl	8007d54 <vPortExitCritical>

	return xReturn;
 800690a:	68fb      	ldr	r3, [r7, #12]
}
 800690c:	0018      	movs	r0, r3
 800690e:	46bd      	mov	sp, r7
 8006910:	b004      	add	sp, #16
 8006912:	bd80      	pop	{r7, pc}

08006914 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800691e:	2300      	movs	r3, #0
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	e015      	b.n	8006950 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006924:	4b0e      	ldr	r3, [pc, #56]	; (8006960 <vQueueAddToRegistry+0x4c>)
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	00d2      	lsls	r2, r2, #3
 800692a:	58d3      	ldr	r3, [r2, r3]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10c      	bne.n	800694a <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006930:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <vQueueAddToRegistry+0x4c>)
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	00d2      	lsls	r2, r2, #3
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800693a:	4a09      	ldr	r2, [pc, #36]	; (8006960 <vQueueAddToRegistry+0x4c>)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	18d3      	adds	r3, r2, r3
 8006942:	3304      	adds	r3, #4
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006948:	e005      	b.n	8006956 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3301      	adds	r3, #1
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b07      	cmp	r3, #7
 8006954:	d9e6      	bls.n	8006924 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006956:	46c0      	nop			; (mov r8, r8)
 8006958:	46bd      	mov	sp, r7
 800695a:	b004      	add	sp, #16
 800695c:	bd80      	pop	{r7, pc}
 800695e:	46c0      	nop			; (mov r8, r8)
 8006960:	20001c50 	.word	0x20001c50

08006964 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006974:	f001 f9dc 	bl	8007d30 <vPortEnterCritical>
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	2244      	movs	r2, #68	; 0x44
 800697c:	5c9b      	ldrb	r3, [r3, r2]
 800697e:	b25b      	sxtb	r3, r3
 8006980:	3301      	adds	r3, #1
 8006982:	d103      	bne.n	800698c <vQueueWaitForMessageRestricted+0x28>
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2244      	movs	r2, #68	; 0x44
 8006988:	2100      	movs	r1, #0
 800698a:	5499      	strb	r1, [r3, r2]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	2245      	movs	r2, #69	; 0x45
 8006990:	5c9b      	ldrb	r3, [r3, r2]
 8006992:	b25b      	sxtb	r3, r3
 8006994:	3301      	adds	r3, #1
 8006996:	d103      	bne.n	80069a0 <vQueueWaitForMessageRestricted+0x3c>
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	2245      	movs	r2, #69	; 0x45
 800699c:	2100      	movs	r1, #0
 800699e:	5499      	strb	r1, [r3, r2]
 80069a0:	f001 f9d8 	bl	8007d54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d106      	bne.n	80069ba <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	3324      	adds	r3, #36	; 0x24
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	68b9      	ldr	r1, [r7, #8]
 80069b4:	0018      	movs	r0, r3
 80069b6:	f000 fbc5 	bl	8007144 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	0018      	movs	r0, r3
 80069be:	f7ff ff1d 	bl	80067fc <prvUnlockQueue>
	}
 80069c2:	46c0      	nop			; (mov r8, r8)
 80069c4:	46bd      	mov	sp, r7
 80069c6:	b006      	add	sp, #24
 80069c8:	bd80      	pop	{r7, pc}

080069ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80069ca:	b590      	push	{r4, r7, lr}
 80069cc:	b08d      	sub	sp, #52	; 0x34
 80069ce:	af04      	add	r7, sp, #16
 80069d0:	60f8      	str	r0, [r7, #12]
 80069d2:	60b9      	str	r1, [r7, #8]
 80069d4:	607a      	str	r2, [r7, #4]
 80069d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80069d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <xTaskCreateStatic+0x18>
 80069de:	b672      	cpsid	i
 80069e0:	e7fe      	b.n	80069e0 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80069e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <xTaskCreateStatic+0x22>
 80069e8:	b672      	cpsid	i
 80069ea:	e7fe      	b.n	80069ea <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069ec:	235c      	movs	r3, #92	; 0x5c
 80069ee:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2b5c      	cmp	r3, #92	; 0x5c
 80069f4:	d001      	beq.n	80069fa <xTaskCreateStatic+0x30>
 80069f6:	b672      	cpsid	i
 80069f8:	e7fe      	b.n	80069f8 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d020      	beq.n	8006a42 <xTaskCreateStatic+0x78>
 8006a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d01d      	beq.n	8006a42 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a08:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a0e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	2259      	movs	r2, #89	; 0x59
 8006a14:	2102      	movs	r1, #2
 8006a16:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a18:	683c      	ldr	r4, [r7, #0]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	68b9      	ldr	r1, [r7, #8]
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	2300      	movs	r3, #0
 8006a22:	9303      	str	r3, [sp, #12]
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	9302      	str	r3, [sp, #8]
 8006a28:	2318      	movs	r3, #24
 8006a2a:	18fb      	adds	r3, r7, r3
 8006a2c:	9301      	str	r3, [sp, #4]
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	0023      	movs	r3, r4
 8006a34:	f000 f858 	bl	8006ae8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	f000 f8d6 	bl	8006bec <prvAddNewTaskToReadyList>
 8006a40:	e001      	b.n	8006a46 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8006a42:	2300      	movs	r3, #0
 8006a44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a46:	69bb      	ldr	r3, [r7, #24]
	}
 8006a48:	0018      	movs	r0, r3
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	b009      	add	sp, #36	; 0x24
 8006a4e:	bd90      	pop	{r4, r7, pc}

08006a50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a50:	b590      	push	{r4, r7, lr}
 8006a52:	b08d      	sub	sp, #52	; 0x34
 8006a54:	af04      	add	r7, sp, #16
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	603b      	str	r3, [r7, #0]
 8006a5c:	1dbb      	adds	r3, r7, #6
 8006a5e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a60:	1dbb      	adds	r3, r7, #6
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	0018      	movs	r0, r3
 8006a68:	f001 f9fa 	bl	8007e60 <pvPortMalloc>
 8006a6c:	0003      	movs	r3, r0
 8006a6e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d010      	beq.n	8006a98 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006a76:	205c      	movs	r0, #92	; 0x5c
 8006a78:	f001 f9f2 	bl	8007e60 <pvPortMalloc>
 8006a7c:	0003      	movs	r3, r0
 8006a7e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	631a      	str	r2, [r3, #48]	; 0x30
 8006a8c:	e006      	b.n	8006a9c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	0018      	movs	r0, r3
 8006a92:	f001 fa8b 	bl	8007fac <vPortFree>
 8006a96:	e001      	b.n	8006a9c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d01a      	beq.n	8006ad8 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	2259      	movs	r2, #89	; 0x59
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006aaa:	1dbb      	adds	r3, r7, #6
 8006aac:	881a      	ldrh	r2, [r3, #0]
 8006aae:	683c      	ldr	r4, [r7, #0]
 8006ab0:	68b9      	ldr	r1, [r7, #8]
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	9303      	str	r3, [sp, #12]
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	9302      	str	r3, [sp, #8]
 8006abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006abe:	9301      	str	r3, [sp, #4]
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	0023      	movs	r3, r4
 8006ac6:	f000 f80f 	bl	8006ae8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	0018      	movs	r0, r3
 8006ace:	f000 f88d 	bl	8006bec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	61bb      	str	r3, [r7, #24]
 8006ad6:	e002      	b.n	8006ade <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	425b      	negs	r3, r3
 8006adc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ade:	69bb      	ldr	r3, [r7, #24]
	}
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	b009      	add	sp, #36	; 0x24
 8006ae6:	bd90      	pop	{r4, r7, pc}

08006ae8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
 8006af4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	001a      	movs	r2, r3
 8006b00:	21a5      	movs	r1, #165	; 0xa5
 8006b02:	f001 fb80 	bl	8008206 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4936      	ldr	r1, [pc, #216]	; (8006be8 <prvInitialiseNewTask+0x100>)
 8006b0e:	468c      	mov	ip, r1
 8006b10:	4463      	add	r3, ip
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	18d3      	adds	r3, r2, r3
 8006b16:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	2207      	movs	r2, #7
 8006b1c:	4393      	bics	r3, r2
 8006b1e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	2207      	movs	r2, #7
 8006b24:	4013      	ands	r3, r2
 8006b26:	d001      	beq.n	8006b2c <prvInitialiseNewTask+0x44>
 8006b28:	b672      	cpsid	i
 8006b2a:	e7fe      	b.n	8006b2a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	e013      	b.n	8006b5a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	18d3      	adds	r3, r2, r3
 8006b38:	7818      	ldrb	r0, [r3, #0]
 8006b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b3c:	2134      	movs	r1, #52	; 0x34
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	18d3      	adds	r3, r2, r3
 8006b42:	185b      	adds	r3, r3, r1
 8006b44:	1c02      	adds	r2, r0, #0
 8006b46:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	18d3      	adds	r3, r2, r3
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d006      	beq.n	8006b62 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	3301      	adds	r3, #1
 8006b58:	617b      	str	r3, [r7, #20]
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2b0f      	cmp	r3, #15
 8006b5e:	d9e8      	bls.n	8006b32 <prvInitialiseNewTask+0x4a>
 8006b60:	e000      	b.n	8006b64 <prvInitialiseNewTask+0x7c>
		{
			break;
 8006b62:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b66:	2243      	movs	r2, #67	; 0x43
 8006b68:	2100      	movs	r1, #0
 8006b6a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	2b37      	cmp	r3, #55	; 0x37
 8006b70:	d901      	bls.n	8006b76 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b72:	2337      	movs	r3, #55	; 0x37
 8006b74:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	6a3a      	ldr	r2, [r7, #32]
 8006b7a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	6a3a      	ldr	r2, [r7, #32]
 8006b80:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b84:	2200      	movs	r2, #0
 8006b86:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	0018      	movs	r0, r3
 8006b8e:	f7ff fa69 	bl	8006064 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	3318      	adds	r3, #24
 8006b96:	0018      	movs	r0, r3
 8006b98:	f7ff fa64 	bl	8006064 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ba0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	2238      	movs	r2, #56	; 0x38
 8006ba6:	1ad2      	subs	r2, r2, r3
 8006ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006baa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bb0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bba:	2258      	movs	r2, #88	; 0x58
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	68f9      	ldr	r1, [r7, #12]
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	0018      	movs	r0, r3
 8006bc8:	f001 f81c 	bl	8007c04 <pxPortInitialiseStack>
 8006bcc:	0002      	movs	r2, r0
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d002      	beq.n	8006bde <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bde:	46c0      	nop			; (mov r8, r8)
 8006be0:	46bd      	mov	sp, r7
 8006be2:	b006      	add	sp, #24
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	46c0      	nop			; (mov r8, r8)
 8006be8:	3fffffff 	.word	0x3fffffff

08006bec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bf4:	f001 f89c 	bl	8007d30 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bf8:	4b2a      	ldr	r3, [pc, #168]	; (8006ca4 <prvAddNewTaskToReadyList+0xb8>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	4b29      	ldr	r3, [pc, #164]	; (8006ca4 <prvAddNewTaskToReadyList+0xb8>)
 8006c00:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006c02:	4b29      	ldr	r3, [pc, #164]	; (8006ca8 <prvAddNewTaskToReadyList+0xbc>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d109      	bne.n	8006c1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c0a:	4b27      	ldr	r3, [pc, #156]	; (8006ca8 <prvAddNewTaskToReadyList+0xbc>)
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c10:	4b24      	ldr	r3, [pc, #144]	; (8006ca4 <prvAddNewTaskToReadyList+0xb8>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d110      	bne.n	8006c3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c18:	f000 fb94 	bl	8007344 <prvInitialiseTaskLists>
 8006c1c:	e00d      	b.n	8006c3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c1e:	4b23      	ldr	r3, [pc, #140]	; (8006cac <prvAddNewTaskToReadyList+0xc0>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d109      	bne.n	8006c3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c26:	4b20      	ldr	r3, [pc, #128]	; (8006ca8 <prvAddNewTaskToReadyList+0xbc>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d802      	bhi.n	8006c3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c34:	4b1c      	ldr	r3, [pc, #112]	; (8006ca8 <prvAddNewTaskToReadyList+0xbc>)
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c3a:	4b1d      	ldr	r3, [pc, #116]	; (8006cb0 <prvAddNewTaskToReadyList+0xc4>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	4b1b      	ldr	r3, [pc, #108]	; (8006cb0 <prvAddNewTaskToReadyList+0xc4>)
 8006c42:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c44:	4b1a      	ldr	r3, [pc, #104]	; (8006cb0 <prvAddNewTaskToReadyList+0xc4>)
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c50:	4b18      	ldr	r3, [pc, #96]	; (8006cb4 <prvAddNewTaskToReadyList+0xc8>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d903      	bls.n	8006c60 <prvAddNewTaskToReadyList+0x74>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5c:	4b15      	ldr	r3, [pc, #84]	; (8006cb4 <prvAddNewTaskToReadyList+0xc8>)
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c64:	0013      	movs	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	189b      	adds	r3, r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4a12      	ldr	r2, [pc, #72]	; (8006cb8 <prvAddNewTaskToReadyList+0xcc>)
 8006c6e:	189a      	adds	r2, r3, r2
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3304      	adds	r3, #4
 8006c74:	0019      	movs	r1, r3
 8006c76:	0010      	movs	r0, r2
 8006c78:	f7ff f9ff 	bl	800607a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c7c:	f001 f86a 	bl	8007d54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c80:	4b0a      	ldr	r3, [pc, #40]	; (8006cac <prvAddNewTaskToReadyList+0xc0>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d008      	beq.n	8006c9a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c88:	4b07      	ldr	r3, [pc, #28]	; (8006ca8 <prvAddNewTaskToReadyList+0xbc>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d201      	bcs.n	8006c9a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c96:	f001 f83b 	bl	8007d10 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c9a:	46c0      	nop			; (mov r8, r8)
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	b002      	add	sp, #8
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	46c0      	nop			; (mov r8, r8)
 8006ca4:	20000ce4 	.word	0x20000ce4
 8006ca8:	20000810 	.word	0x20000810
 8006cac:	20000cf0 	.word	0x20000cf0
 8006cb0:	20000d00 	.word	0x20000d00
 8006cb4:	20000cec 	.word	0x20000cec
 8006cb8:	20000814 	.word	0x20000814

08006cbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d010      	beq.n	8006cf0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cce:	4b0d      	ldr	r3, [pc, #52]	; (8006d04 <vTaskDelay+0x48>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <vTaskDelay+0x1e>
 8006cd6:	b672      	cpsid	i
 8006cd8:	e7fe      	b.n	8006cd8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006cda:	f000 f869 	bl	8006db0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	f000 fc64 	bl	80075b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ce8:	f000 f86e 	bl	8006dc8 <xTaskResumeAll>
 8006cec:	0003      	movs	r3, r0
 8006cee:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8006cf6:	f001 f80b 	bl	8007d10 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cfa:	46c0      	nop			; (mov r8, r8)
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	b004      	add	sp, #16
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	46c0      	nop			; (mov r8, r8)
 8006d04:	20000d0c 	.word	0x20000d0c

08006d08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d08:	b590      	push	{r4, r7, lr}
 8006d0a:	b089      	sub	sp, #36	; 0x24
 8006d0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d16:	003a      	movs	r2, r7
 8006d18:	1d39      	adds	r1, r7, #4
 8006d1a:	2308      	movs	r3, #8
 8006d1c:	18fb      	adds	r3, r7, r3
 8006d1e:	0018      	movs	r0, r3
 8006d20:	f7ff f952 	bl	8005fc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d24:	683c      	ldr	r4, [r7, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	491b      	ldr	r1, [pc, #108]	; (8006d98 <vTaskStartScheduler+0x90>)
 8006d2c:	481b      	ldr	r0, [pc, #108]	; (8006d9c <vTaskStartScheduler+0x94>)
 8006d2e:	9202      	str	r2, [sp, #8]
 8006d30:	9301      	str	r3, [sp, #4]
 8006d32:	2300      	movs	r3, #0
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	2300      	movs	r3, #0
 8006d38:	0022      	movs	r2, r4
 8006d3a:	f7ff fe46 	bl	80069ca <xTaskCreateStatic>
 8006d3e:	0002      	movs	r2, r0
 8006d40:	4b17      	ldr	r3, [pc, #92]	; (8006da0 <vTaskStartScheduler+0x98>)
 8006d42:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d44:	4b16      	ldr	r3, [pc, #88]	; (8006da0 <vTaskStartScheduler+0x98>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	e001      	b.n	8006d56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d103      	bne.n	8006d64 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8006d5c:	f000 fc7c 	bl	8007658 <xTimerCreateTimerTask>
 8006d60:	0003      	movs	r3, r0
 8006d62:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d10d      	bne.n	8006d86 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8006d6a:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d6c:	4b0d      	ldr	r3, [pc, #52]	; (8006da4 <vTaskStartScheduler+0x9c>)
 8006d6e:	2201      	movs	r2, #1
 8006d70:	4252      	negs	r2, r2
 8006d72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d74:	4b0c      	ldr	r3, [pc, #48]	; (8006da8 <vTaskStartScheduler+0xa0>)
 8006d76:	2201      	movs	r2, #1
 8006d78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006d7a:	4b0c      	ldr	r3, [pc, #48]	; (8006dac <vTaskStartScheduler+0xa4>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d80:	f000 ffa2 	bl	8007cc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d84:	e004      	b.n	8006d90 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	d101      	bne.n	8006d90 <vTaskStartScheduler+0x88>
 8006d8c:	b672      	cpsid	i
 8006d8e:	e7fe      	b.n	8006d8e <vTaskStartScheduler+0x86>
}
 8006d90:	46c0      	nop			; (mov r8, r8)
 8006d92:	46bd      	mov	sp, r7
 8006d94:	b005      	add	sp, #20
 8006d96:	bd90      	pop	{r4, r7, pc}
 8006d98:	0800827c 	.word	0x0800827c
 8006d9c:	08007325 	.word	0x08007325
 8006da0:	20000d08 	.word	0x20000d08
 8006da4:	20000d04 	.word	0x20000d04
 8006da8:	20000cf0 	.word	0x20000cf0
 8006dac:	20000ce8 	.word	0x20000ce8

08006db0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006db4:	4b03      	ldr	r3, [pc, #12]	; (8006dc4 <vTaskSuspendAll+0x14>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	4b02      	ldr	r3, [pc, #8]	; (8006dc4 <vTaskSuspendAll+0x14>)
 8006dbc:	601a      	str	r2, [r3, #0]
}
 8006dbe:	46c0      	nop			; (mov r8, r8)
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	20000d0c 	.word	0x20000d0c

08006dc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006dd6:	4b3a      	ldr	r3, [pc, #232]	; (8006ec0 <xTaskResumeAll+0xf8>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <xTaskResumeAll+0x1a>
 8006dde:	b672      	cpsid	i
 8006de0:	e7fe      	b.n	8006de0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006de2:	f000 ffa5 	bl	8007d30 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006de6:	4b36      	ldr	r3, [pc, #216]	; (8006ec0 <xTaskResumeAll+0xf8>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	1e5a      	subs	r2, r3, #1
 8006dec:	4b34      	ldr	r3, [pc, #208]	; (8006ec0 <xTaskResumeAll+0xf8>)
 8006dee:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006df0:	4b33      	ldr	r3, [pc, #204]	; (8006ec0 <xTaskResumeAll+0xf8>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d15b      	bne.n	8006eb0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006df8:	4b32      	ldr	r3, [pc, #200]	; (8006ec4 <xTaskResumeAll+0xfc>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d057      	beq.n	8006eb0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e00:	e02f      	b.n	8006e62 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006e02:	4b31      	ldr	r3, [pc, #196]	; (8006ec8 <xTaskResumeAll+0x100>)
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	3318      	adds	r3, #24
 8006e0e:	0018      	movs	r0, r3
 8006e10:	f7ff f98b 	bl	800612a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3304      	adds	r3, #4
 8006e18:	0018      	movs	r0, r3
 8006e1a:	f7ff f986 	bl	800612a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e22:	4b2a      	ldr	r3, [pc, #168]	; (8006ecc <xTaskResumeAll+0x104>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d903      	bls.n	8006e32 <xTaskResumeAll+0x6a>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2e:	4b27      	ldr	r3, [pc, #156]	; (8006ecc <xTaskResumeAll+0x104>)
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e36:	0013      	movs	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	189b      	adds	r3, r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4a24      	ldr	r2, [pc, #144]	; (8006ed0 <xTaskResumeAll+0x108>)
 8006e40:	189a      	adds	r2, r3, r2
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	3304      	adds	r3, #4
 8006e46:	0019      	movs	r1, r3
 8006e48:	0010      	movs	r0, r2
 8006e4a:	f7ff f916 	bl	800607a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e52:	4b20      	ldr	r3, [pc, #128]	; (8006ed4 <xTaskResumeAll+0x10c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d302      	bcc.n	8006e62 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8006e5c:	4b1e      	ldr	r3, [pc, #120]	; (8006ed8 <xTaskResumeAll+0x110>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e62:	4b19      	ldr	r3, [pc, #100]	; (8006ec8 <xTaskResumeAll+0x100>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1cb      	bne.n	8006e02 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e70:	f000 fb02 	bl	8007478 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006e74:	4b19      	ldr	r3, [pc, #100]	; (8006edc <xTaskResumeAll+0x114>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00f      	beq.n	8006ea0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e80:	f000 f83c 	bl	8006efc <xTaskIncrementTick>
 8006e84:	1e03      	subs	r3, r0, #0
 8006e86:	d002      	beq.n	8006e8e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8006e88:	4b13      	ldr	r3, [pc, #76]	; (8006ed8 <xTaskResumeAll+0x110>)
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1f2      	bne.n	8006e80 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8006e9a:	4b10      	ldr	r3, [pc, #64]	; (8006edc <xTaskResumeAll+0x114>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ea0:	4b0d      	ldr	r3, [pc, #52]	; (8006ed8 <xTaskResumeAll+0x110>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006eac:	f000 ff30 	bl	8007d10 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006eb0:	f000 ff50 	bl	8007d54 <vPortExitCritical>

	return xAlreadyYielded;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
}
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	b004      	add	sp, #16
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	46c0      	nop			; (mov r8, r8)
 8006ec0:	20000d0c 	.word	0x20000d0c
 8006ec4:	20000ce4 	.word	0x20000ce4
 8006ec8:	20000ca4 	.word	0x20000ca4
 8006ecc:	20000cec 	.word	0x20000cec
 8006ed0:	20000814 	.word	0x20000814
 8006ed4:	20000810 	.word	0x20000810
 8006ed8:	20000cf8 	.word	0x20000cf8
 8006edc:	20000cf4 	.word	0x20000cf4

08006ee0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ee6:	4b04      	ldr	r3, [pc, #16]	; (8006ef8 <xTaskGetTickCount+0x18>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006eec:	687b      	ldr	r3, [r7, #4]
}
 8006eee:	0018      	movs	r0, r3
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	b002      	add	sp, #8
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	46c0      	nop			; (mov r8, r8)
 8006ef8:	20000ce8 	.word	0x20000ce8

08006efc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f02:	2300      	movs	r3, #0
 8006f04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f06:	4b4c      	ldr	r3, [pc, #304]	; (8007038 <xTaskIncrementTick+0x13c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d000      	beq.n	8006f10 <xTaskIncrementTick+0x14>
 8006f0e:	e083      	b.n	8007018 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f10:	4b4a      	ldr	r3, [pc, #296]	; (800703c <xTaskIncrementTick+0x140>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3301      	adds	r3, #1
 8006f16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f18:	4b48      	ldr	r3, [pc, #288]	; (800703c <xTaskIncrementTick+0x140>)
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d117      	bne.n	8006f54 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f24:	4b46      	ldr	r3, [pc, #280]	; (8007040 <xTaskIncrementTick+0x144>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <xTaskIncrementTick+0x36>
 8006f2e:	b672      	cpsid	i
 8006f30:	e7fe      	b.n	8006f30 <xTaskIncrementTick+0x34>
 8006f32:	4b43      	ldr	r3, [pc, #268]	; (8007040 <xTaskIncrementTick+0x144>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	4b42      	ldr	r3, [pc, #264]	; (8007044 <xTaskIncrementTick+0x148>)
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	4b40      	ldr	r3, [pc, #256]	; (8007040 <xTaskIncrementTick+0x144>)
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	4b40      	ldr	r3, [pc, #256]	; (8007044 <xTaskIncrementTick+0x148>)
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	4b40      	ldr	r3, [pc, #256]	; (8007048 <xTaskIncrementTick+0x14c>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	4b3e      	ldr	r3, [pc, #248]	; (8007048 <xTaskIncrementTick+0x14c>)
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	f000 fa92 	bl	8007478 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f54:	4b3d      	ldr	r3, [pc, #244]	; (800704c <xTaskIncrementTick+0x150>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d34e      	bcc.n	8006ffc <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f5e:	4b38      	ldr	r3, [pc, #224]	; (8007040 <xTaskIncrementTick+0x144>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <xTaskIncrementTick+0x70>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e000      	b.n	8006f6e <xTaskIncrementTick+0x72>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d004      	beq.n	8006f7c <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f72:	4b36      	ldr	r3, [pc, #216]	; (800704c <xTaskIncrementTick+0x150>)
 8006f74:	2201      	movs	r2, #1
 8006f76:	4252      	negs	r2, r2
 8006f78:	601a      	str	r2, [r3, #0]
					break;
 8006f7a:	e03f      	b.n	8006ffc <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006f7c:	4b30      	ldr	r3, [pc, #192]	; (8007040 <xTaskIncrementTick+0x144>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d203      	bcs.n	8006f9c <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f94:	4b2d      	ldr	r3, [pc, #180]	; (800704c <xTaskIncrementTick+0x150>)
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	601a      	str	r2, [r3, #0]
						break;
 8006f9a:	e02f      	b.n	8006ffc <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	f7ff f8c2 	bl	800612a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d004      	beq.n	8006fb8 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	3318      	adds	r3, #24
 8006fb2:	0018      	movs	r0, r3
 8006fb4:	f7ff f8b9 	bl	800612a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fbc:	4b24      	ldr	r3, [pc, #144]	; (8007050 <xTaskIncrementTick+0x154>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d903      	bls.n	8006fcc <xTaskIncrementTick+0xd0>
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc8:	4b21      	ldr	r3, [pc, #132]	; (8007050 <xTaskIncrementTick+0x154>)
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd0:	0013      	movs	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	189b      	adds	r3, r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4a1e      	ldr	r2, [pc, #120]	; (8007054 <xTaskIncrementTick+0x158>)
 8006fda:	189a      	adds	r2, r3, r2
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	3304      	adds	r3, #4
 8006fe0:	0019      	movs	r1, r3
 8006fe2:	0010      	movs	r0, r2
 8006fe4:	f7ff f849 	bl	800607a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fec:	4b1a      	ldr	r3, [pc, #104]	; (8007058 <xTaskIncrementTick+0x15c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d3b3      	bcc.n	8006f5e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ffa:	e7b0      	b.n	8006f5e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ffc:	4b16      	ldr	r3, [pc, #88]	; (8007058 <xTaskIncrementTick+0x15c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007002:	4914      	ldr	r1, [pc, #80]	; (8007054 <xTaskIncrementTick+0x158>)
 8007004:	0013      	movs	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	189b      	adds	r3, r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	585b      	ldr	r3, [r3, r1]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d907      	bls.n	8007022 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007012:	2301      	movs	r3, #1
 8007014:	617b      	str	r3, [r7, #20]
 8007016:	e004      	b.n	8007022 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007018:	4b10      	ldr	r3, [pc, #64]	; (800705c <xTaskIncrementTick+0x160>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	4b0f      	ldr	r3, [pc, #60]	; (800705c <xTaskIncrementTick+0x160>)
 8007020:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007022:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <xTaskIncrementTick+0x164>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800702a:	2301      	movs	r3, #1
 800702c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800702e:	697b      	ldr	r3, [r7, #20]
}
 8007030:	0018      	movs	r0, r3
 8007032:	46bd      	mov	sp, r7
 8007034:	b006      	add	sp, #24
 8007036:	bd80      	pop	{r7, pc}
 8007038:	20000d0c 	.word	0x20000d0c
 800703c:	20000ce8 	.word	0x20000ce8
 8007040:	20000c9c 	.word	0x20000c9c
 8007044:	20000ca0 	.word	0x20000ca0
 8007048:	20000cfc 	.word	0x20000cfc
 800704c:	20000d04 	.word	0x20000d04
 8007050:	20000cec 	.word	0x20000cec
 8007054:	20000814 	.word	0x20000814
 8007058:	20000810 	.word	0x20000810
 800705c:	20000cf4 	.word	0x20000cf4
 8007060:	20000cf8 	.word	0x20000cf8

08007064 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800706a:	4b22      	ldr	r3, [pc, #136]	; (80070f4 <vTaskSwitchContext+0x90>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007072:	4b21      	ldr	r3, [pc, #132]	; (80070f8 <vTaskSwitchContext+0x94>)
 8007074:	2201      	movs	r2, #1
 8007076:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007078:	e037      	b.n	80070ea <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800707a:	4b1f      	ldr	r3, [pc, #124]	; (80070f8 <vTaskSwitchContext+0x94>)
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007080:	4b1e      	ldr	r3, [pc, #120]	; (80070fc <vTaskSwitchContext+0x98>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	607b      	str	r3, [r7, #4]
 8007086:	e007      	b.n	8007098 <vTaskSwitchContext+0x34>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <vTaskSwitchContext+0x2e>
 800708e:	b672      	cpsid	i
 8007090:	e7fe      	b.n	8007090 <vTaskSwitchContext+0x2c>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	3b01      	subs	r3, #1
 8007096:	607b      	str	r3, [r7, #4]
 8007098:	4919      	ldr	r1, [pc, #100]	; (8007100 <vTaskSwitchContext+0x9c>)
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	0013      	movs	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	189b      	adds	r3, r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	585b      	ldr	r3, [r3, r1]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0ee      	beq.n	8007088 <vTaskSwitchContext+0x24>
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	0013      	movs	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	189b      	adds	r3, r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4a12      	ldr	r2, [pc, #72]	; (8007100 <vTaskSwitchContext+0x9c>)
 80070b6:	189b      	adds	r3, r3, r2
 80070b8:	603b      	str	r3, [r7, #0]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	605a      	str	r2, [r3, #4]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	3308      	adds	r3, #8
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d104      	bne.n	80070da <vTaskSwitchContext+0x76>
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	605a      	str	r2, [r3, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	4b08      	ldr	r3, [pc, #32]	; (8007104 <vTaskSwitchContext+0xa0>)
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	4b05      	ldr	r3, [pc, #20]	; (80070fc <vTaskSwitchContext+0x98>)
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	601a      	str	r2, [r3, #0]
}
 80070ea:	46c0      	nop			; (mov r8, r8)
 80070ec:	46bd      	mov	sp, r7
 80070ee:	b002      	add	sp, #8
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	46c0      	nop			; (mov r8, r8)
 80070f4:	20000d0c 	.word	0x20000d0c
 80070f8:	20000cf8 	.word	0x20000cf8
 80070fc:	20000cec 	.word	0x20000cec
 8007100:	20000814 	.word	0x20000814
 8007104:	20000810 	.word	0x20000810

08007108 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <vTaskPlaceOnEventList+0x14>
 8007118:	b672      	cpsid	i
 800711a:	e7fe      	b.n	800711a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800711c:	4b08      	ldr	r3, [pc, #32]	; (8007140 <vTaskPlaceOnEventList+0x38>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3318      	adds	r3, #24
 8007122:	001a      	movs	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	0011      	movs	r1, r2
 8007128:	0018      	movs	r0, r3
 800712a:	f7fe ffc8 	bl	80060be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2101      	movs	r1, #1
 8007132:	0018      	movs	r0, r3
 8007134:	f000 fa3c 	bl	80075b0 <prvAddCurrentTaskToDelayedList>
}
 8007138:	46c0      	nop			; (mov r8, r8)
 800713a:	46bd      	mov	sp, r7
 800713c:	b002      	add	sp, #8
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20000810 	.word	0x20000810

08007144 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d101      	bne.n	800715a <vTaskPlaceOnEventListRestricted+0x16>
 8007156:	b672      	cpsid	i
 8007158:	e7fe      	b.n	8007158 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800715a:	4b0c      	ldr	r3, [pc, #48]	; (800718c <vTaskPlaceOnEventListRestricted+0x48>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3318      	adds	r3, #24
 8007160:	001a      	movs	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	0011      	movs	r1, r2
 8007166:	0018      	movs	r0, r3
 8007168:	f7fe ff87 	bl	800607a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d002      	beq.n	8007178 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8007172:	2301      	movs	r3, #1
 8007174:	425b      	negs	r3, r3
 8007176:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	0011      	movs	r1, r2
 800717e:	0018      	movs	r0, r3
 8007180:	f000 fa16 	bl	80075b0 <prvAddCurrentTaskToDelayedList>
	}
 8007184:	46c0      	nop			; (mov r8, r8)
 8007186:	46bd      	mov	sp, r7
 8007188:	b004      	add	sp, #16
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20000810 	.word	0x20000810

08007190 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <xTaskRemoveFromEventList+0x1a>
 80071a6:	b672      	cpsid	i
 80071a8:	e7fe      	b.n	80071a8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	3318      	adds	r3, #24
 80071ae:	0018      	movs	r0, r3
 80071b0:	f7fe ffbb 	bl	800612a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071b4:	4b1e      	ldr	r3, [pc, #120]	; (8007230 <xTaskRemoveFromEventList+0xa0>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d11d      	bne.n	80071f8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	3304      	adds	r3, #4
 80071c0:	0018      	movs	r0, r3
 80071c2:	f7fe ffb2 	bl	800612a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ca:	4b1a      	ldr	r3, [pc, #104]	; (8007234 <xTaskRemoveFromEventList+0xa4>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d903      	bls.n	80071da <xTaskRemoveFromEventList+0x4a>
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d6:	4b17      	ldr	r3, [pc, #92]	; (8007234 <xTaskRemoveFromEventList+0xa4>)
 80071d8:	601a      	str	r2, [r3, #0]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071de:	0013      	movs	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	189b      	adds	r3, r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4a14      	ldr	r2, [pc, #80]	; (8007238 <xTaskRemoveFromEventList+0xa8>)
 80071e8:	189a      	adds	r2, r3, r2
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	3304      	adds	r3, #4
 80071ee:	0019      	movs	r1, r3
 80071f0:	0010      	movs	r0, r2
 80071f2:	f7fe ff42 	bl	800607a <vListInsertEnd>
 80071f6:	e007      	b.n	8007208 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	3318      	adds	r3, #24
 80071fc:	001a      	movs	r2, r3
 80071fe:	4b0f      	ldr	r3, [pc, #60]	; (800723c <xTaskRemoveFromEventList+0xac>)
 8007200:	0011      	movs	r1, r2
 8007202:	0018      	movs	r0, r3
 8007204:	f7fe ff39 	bl	800607a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800720c:	4b0c      	ldr	r3, [pc, #48]	; (8007240 <xTaskRemoveFromEventList+0xb0>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007212:	429a      	cmp	r2, r3
 8007214:	d905      	bls.n	8007222 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007216:	2301      	movs	r3, #1
 8007218:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800721a:	4b0a      	ldr	r3, [pc, #40]	; (8007244 <xTaskRemoveFromEventList+0xb4>)
 800721c:	2201      	movs	r2, #1
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	e001      	b.n	8007226 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8007222:	2300      	movs	r3, #0
 8007224:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007226:	68fb      	ldr	r3, [r7, #12]
}
 8007228:	0018      	movs	r0, r3
 800722a:	46bd      	mov	sp, r7
 800722c:	b004      	add	sp, #16
 800722e:	bd80      	pop	{r7, pc}
 8007230:	20000d0c 	.word	0x20000d0c
 8007234:	20000cec 	.word	0x20000cec
 8007238:	20000814 	.word	0x20000814
 800723c:	20000ca4 	.word	0x20000ca4
 8007240:	20000810 	.word	0x20000810
 8007244:	20000cf8 	.word	0x20000cf8

08007248 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007250:	4b05      	ldr	r3, [pc, #20]	; (8007268 <vTaskInternalSetTimeOutState+0x20>)
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007258:	4b04      	ldr	r3, [pc, #16]	; (800726c <vTaskInternalSetTimeOutState+0x24>)
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	605a      	str	r2, [r3, #4]
}
 8007260:	46c0      	nop			; (mov r8, r8)
 8007262:	46bd      	mov	sp, r7
 8007264:	b002      	add	sp, #8
 8007266:	bd80      	pop	{r7, pc}
 8007268:	20000cfc 	.word	0x20000cfc
 800726c:	20000ce8 	.word	0x20000ce8

08007270 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <xTaskCheckForTimeOut+0x14>
 8007280:	b672      	cpsid	i
 8007282:	e7fe      	b.n	8007282 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <xTaskCheckForTimeOut+0x1e>
 800728a:	b672      	cpsid	i
 800728c:	e7fe      	b.n	800728c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800728e:	f000 fd4f 	bl	8007d30 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007292:	4b1d      	ldr	r3, [pc, #116]	; (8007308 <xTaskCheckForTimeOut+0x98>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3301      	adds	r3, #1
 80072a8:	d102      	bne.n	80072b0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80072aa:	2300      	movs	r3, #0
 80072ac:	617b      	str	r3, [r7, #20]
 80072ae:	e024      	b.n	80072fa <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	4b15      	ldr	r3, [pc, #84]	; (800730c <xTaskCheckForTimeOut+0x9c>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d007      	beq.n	80072cc <xTaskCheckForTimeOut+0x5c>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d302      	bcc.n	80072cc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072c6:	2301      	movs	r3, #1
 80072c8:	617b      	str	r3, [r7, #20]
 80072ca:	e016      	b.n	80072fa <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d20c      	bcs.n	80072f0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	1ad2      	subs	r2, r2, r3
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	0018      	movs	r0, r3
 80072e6:	f7ff ffaf 	bl	8007248 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072ea:	2300      	movs	r3, #0
 80072ec:	617b      	str	r3, [r7, #20]
 80072ee:	e004      	b.n	80072fa <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2200      	movs	r2, #0
 80072f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072f6:	2301      	movs	r3, #1
 80072f8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80072fa:	f000 fd2b 	bl	8007d54 <vPortExitCritical>

	return xReturn;
 80072fe:	697b      	ldr	r3, [r7, #20]
}
 8007300:	0018      	movs	r0, r3
 8007302:	46bd      	mov	sp, r7
 8007304:	b006      	add	sp, #24
 8007306:	bd80      	pop	{r7, pc}
 8007308:	20000ce8 	.word	0x20000ce8
 800730c:	20000cfc 	.word	0x20000cfc

08007310 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007314:	4b02      	ldr	r3, [pc, #8]	; (8007320 <vTaskMissedYield+0x10>)
 8007316:	2201      	movs	r2, #1
 8007318:	601a      	str	r2, [r3, #0]
}
 800731a:	46c0      	nop			; (mov r8, r8)
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	20000cf8 	.word	0x20000cf8

08007324 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800732c:	f000 f84e 	bl	80073cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007330:	4b03      	ldr	r3, [pc, #12]	; (8007340 <prvIdleTask+0x1c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d9f9      	bls.n	800732c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007338:	f000 fcea 	bl	8007d10 <vPortYield>
		prvCheckTasksWaitingTermination();
 800733c:	e7f6      	b.n	800732c <prvIdleTask+0x8>
 800733e:	46c0      	nop			; (mov r8, r8)
 8007340:	20000814 	.word	0x20000814

08007344 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800734a:	2300      	movs	r3, #0
 800734c:	607b      	str	r3, [r7, #4]
 800734e:	e00c      	b.n	800736a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	0013      	movs	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	189b      	adds	r3, r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4a14      	ldr	r2, [pc, #80]	; (80073ac <prvInitialiseTaskLists+0x68>)
 800735c:	189b      	adds	r3, r3, r2
 800735e:	0018      	movs	r0, r3
 8007360:	f7fe fe62 	bl	8006028 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3301      	adds	r3, #1
 8007368:	607b      	str	r3, [r7, #4]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b37      	cmp	r3, #55	; 0x37
 800736e:	d9ef      	bls.n	8007350 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007370:	4b0f      	ldr	r3, [pc, #60]	; (80073b0 <prvInitialiseTaskLists+0x6c>)
 8007372:	0018      	movs	r0, r3
 8007374:	f7fe fe58 	bl	8006028 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007378:	4b0e      	ldr	r3, [pc, #56]	; (80073b4 <prvInitialiseTaskLists+0x70>)
 800737a:	0018      	movs	r0, r3
 800737c:	f7fe fe54 	bl	8006028 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007380:	4b0d      	ldr	r3, [pc, #52]	; (80073b8 <prvInitialiseTaskLists+0x74>)
 8007382:	0018      	movs	r0, r3
 8007384:	f7fe fe50 	bl	8006028 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007388:	4b0c      	ldr	r3, [pc, #48]	; (80073bc <prvInitialiseTaskLists+0x78>)
 800738a:	0018      	movs	r0, r3
 800738c:	f7fe fe4c 	bl	8006028 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007390:	4b0b      	ldr	r3, [pc, #44]	; (80073c0 <prvInitialiseTaskLists+0x7c>)
 8007392:	0018      	movs	r0, r3
 8007394:	f7fe fe48 	bl	8006028 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007398:	4b0a      	ldr	r3, [pc, #40]	; (80073c4 <prvInitialiseTaskLists+0x80>)
 800739a:	4a05      	ldr	r2, [pc, #20]	; (80073b0 <prvInitialiseTaskLists+0x6c>)
 800739c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800739e:	4b0a      	ldr	r3, [pc, #40]	; (80073c8 <prvInitialiseTaskLists+0x84>)
 80073a0:	4a04      	ldr	r2, [pc, #16]	; (80073b4 <prvInitialiseTaskLists+0x70>)
 80073a2:	601a      	str	r2, [r3, #0]
}
 80073a4:	46c0      	nop			; (mov r8, r8)
 80073a6:	46bd      	mov	sp, r7
 80073a8:	b002      	add	sp, #8
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	20000814 	.word	0x20000814
 80073b0:	20000c74 	.word	0x20000c74
 80073b4:	20000c88 	.word	0x20000c88
 80073b8:	20000ca4 	.word	0x20000ca4
 80073bc:	20000cb8 	.word	0x20000cb8
 80073c0:	20000cd0 	.word	0x20000cd0
 80073c4:	20000c9c 	.word	0x20000c9c
 80073c8:	20000ca0 	.word	0x20000ca0

080073cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073d2:	e01a      	b.n	800740a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80073d4:	f000 fcac 	bl	8007d30 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80073d8:	4b10      	ldr	r3, [pc, #64]	; (800741c <prvCheckTasksWaitingTermination+0x50>)
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3304      	adds	r3, #4
 80073e4:	0018      	movs	r0, r3
 80073e6:	f7fe fea0 	bl	800612a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073ea:	4b0d      	ldr	r3, [pc, #52]	; (8007420 <prvCheckTasksWaitingTermination+0x54>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	1e5a      	subs	r2, r3, #1
 80073f0:	4b0b      	ldr	r3, [pc, #44]	; (8007420 <prvCheckTasksWaitingTermination+0x54>)
 80073f2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073f4:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <prvCheckTasksWaitingTermination+0x58>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	1e5a      	subs	r2, r3, #1
 80073fa:	4b0a      	ldr	r3, [pc, #40]	; (8007424 <prvCheckTasksWaitingTermination+0x58>)
 80073fc:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80073fe:	f000 fca9 	bl	8007d54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	0018      	movs	r0, r3
 8007406:	f000 f80f 	bl	8007428 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800740a:	4b06      	ldr	r3, [pc, #24]	; (8007424 <prvCheckTasksWaitingTermination+0x58>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e0      	bne.n	80073d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007412:	46c0      	nop			; (mov r8, r8)
 8007414:	46bd      	mov	sp, r7
 8007416:	b002      	add	sp, #8
 8007418:	bd80      	pop	{r7, pc}
 800741a:	46c0      	nop			; (mov r8, r8)
 800741c:	20000cb8 	.word	0x20000cb8
 8007420:	20000ce4 	.word	0x20000ce4
 8007424:	20000ccc 	.word	0x20000ccc

08007428 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2259      	movs	r2, #89	; 0x59
 8007434:	5c9b      	ldrb	r3, [r3, r2]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d109      	bne.n	800744e <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743e:	0018      	movs	r0, r3
 8007440:	f000 fdb4 	bl	8007fac <vPortFree>
				vPortFree( pxTCB );
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	0018      	movs	r0, r3
 8007448:	f000 fdb0 	bl	8007fac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800744c:	e010      	b.n	8007470 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2259      	movs	r2, #89	; 0x59
 8007452:	5c9b      	ldrb	r3, [r3, r2]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d104      	bne.n	8007462 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	0018      	movs	r0, r3
 800745c:	f000 fda6 	bl	8007fac <vPortFree>
	}
 8007460:	e006      	b.n	8007470 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2259      	movs	r2, #89	; 0x59
 8007466:	5c9b      	ldrb	r3, [r3, r2]
 8007468:	2b02      	cmp	r3, #2
 800746a:	d001      	beq.n	8007470 <prvDeleteTCB+0x48>
 800746c:	b672      	cpsid	i
 800746e:	e7fe      	b.n	800746e <prvDeleteTCB+0x46>
	}
 8007470:	46c0      	nop			; (mov r8, r8)
 8007472:	46bd      	mov	sp, r7
 8007474:	b002      	add	sp, #8
 8007476:	bd80      	pop	{r7, pc}

08007478 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800747e:	4b0e      	ldr	r3, [pc, #56]	; (80074b8 <prvResetNextTaskUnblockTime+0x40>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <prvResetNextTaskUnblockTime+0x14>
 8007488:	2301      	movs	r3, #1
 800748a:	e000      	b.n	800748e <prvResetNextTaskUnblockTime+0x16>
 800748c:	2300      	movs	r3, #0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d004      	beq.n	800749c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007492:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <prvResetNextTaskUnblockTime+0x44>)
 8007494:	2201      	movs	r2, #1
 8007496:	4252      	negs	r2, r2
 8007498:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800749a:	e008      	b.n	80074ae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800749c:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <prvResetNextTaskUnblockTime+0x40>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	4b04      	ldr	r3, [pc, #16]	; (80074bc <prvResetNextTaskUnblockTime+0x44>)
 80074ac:	601a      	str	r2, [r3, #0]
}
 80074ae:	46c0      	nop			; (mov r8, r8)
 80074b0:	46bd      	mov	sp, r7
 80074b2:	b002      	add	sp, #8
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	46c0      	nop			; (mov r8, r8)
 80074b8:	20000c9c 	.word	0x20000c9c
 80074bc:	20000d04 	.word	0x20000d04

080074c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80074c6:	4b0a      	ldr	r3, [pc, #40]	; (80074f0 <xTaskGetSchedulerState+0x30>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d102      	bne.n	80074d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074ce:	2301      	movs	r3, #1
 80074d0:	607b      	str	r3, [r7, #4]
 80074d2:	e008      	b.n	80074e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074d4:	4b07      	ldr	r3, [pc, #28]	; (80074f4 <xTaskGetSchedulerState+0x34>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d102      	bne.n	80074e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80074dc:	2302      	movs	r3, #2
 80074de:	607b      	str	r3, [r7, #4]
 80074e0:	e001      	b.n	80074e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80074e2:	2300      	movs	r3, #0
 80074e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80074e6:	687b      	ldr	r3, [r7, #4]
	}
 80074e8:	0018      	movs	r0, r3
 80074ea:	46bd      	mov	sp, r7
 80074ec:	b002      	add	sp, #8
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	20000cf0 	.word	0x20000cf0
 80074f4:	20000d0c 	.word	0x20000d0c

080074f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007504:	2300      	movs	r3, #0
 8007506:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d044      	beq.n	8007598 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800750e:	4b25      	ldr	r3, [pc, #148]	; (80075a4 <xTaskPriorityDisinherit+0xac>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	429a      	cmp	r2, r3
 8007516:	d001      	beq.n	800751c <xTaskPriorityDisinherit+0x24>
 8007518:	b672      	cpsid	i
 800751a:	e7fe      	b.n	800751a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <xTaskPriorityDisinherit+0x30>
 8007524:	b672      	cpsid	i
 8007526:	e7fe      	b.n	8007526 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800752c:	1e5a      	subs	r2, r3, #1
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800753a:	429a      	cmp	r2, r3
 800753c:	d02c      	beq.n	8007598 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007542:	2b00      	cmp	r3, #0
 8007544:	d128      	bne.n	8007598 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	3304      	adds	r3, #4
 800754a:	0018      	movs	r0, r3
 800754c:	f7fe fded 	bl	800612a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755c:	2238      	movs	r2, #56	; 0x38
 800755e:	1ad2      	subs	r2, r2, r3
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007568:	4b0f      	ldr	r3, [pc, #60]	; (80075a8 <xTaskPriorityDisinherit+0xb0>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	429a      	cmp	r2, r3
 800756e:	d903      	bls.n	8007578 <xTaskPriorityDisinherit+0x80>
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007574:	4b0c      	ldr	r3, [pc, #48]	; (80075a8 <xTaskPriorityDisinherit+0xb0>)
 8007576:	601a      	str	r2, [r3, #0]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800757c:	0013      	movs	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	189b      	adds	r3, r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4a09      	ldr	r2, [pc, #36]	; (80075ac <xTaskPriorityDisinherit+0xb4>)
 8007586:	189a      	adds	r2, r3, r2
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	3304      	adds	r3, #4
 800758c:	0019      	movs	r1, r3
 800758e:	0010      	movs	r0, r2
 8007590:	f7fe fd73 	bl	800607a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007594:	2301      	movs	r3, #1
 8007596:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007598:	68fb      	ldr	r3, [r7, #12]
	}
 800759a:	0018      	movs	r0, r3
 800759c:	46bd      	mov	sp, r7
 800759e:	b004      	add	sp, #16
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	46c0      	nop			; (mov r8, r8)
 80075a4:	20000810 	.word	0x20000810
 80075a8:	20000cec 	.word	0x20000cec
 80075ac:	20000814 	.word	0x20000814

080075b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075ba:	4b21      	ldr	r3, [pc, #132]	; (8007640 <prvAddCurrentTaskToDelayedList+0x90>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075c0:	4b20      	ldr	r3, [pc, #128]	; (8007644 <prvAddCurrentTaskToDelayedList+0x94>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3304      	adds	r3, #4
 80075c6:	0018      	movs	r0, r3
 80075c8:	f7fe fdaf 	bl	800612a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3301      	adds	r3, #1
 80075d0:	d10b      	bne.n	80075ea <prvAddCurrentTaskToDelayedList+0x3a>
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d008      	beq.n	80075ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075d8:	4b1a      	ldr	r3, [pc, #104]	; (8007644 <prvAddCurrentTaskToDelayedList+0x94>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	1d1a      	adds	r2, r3, #4
 80075de:	4b1a      	ldr	r3, [pc, #104]	; (8007648 <prvAddCurrentTaskToDelayedList+0x98>)
 80075e0:	0011      	movs	r1, r2
 80075e2:	0018      	movs	r0, r3
 80075e4:	f7fe fd49 	bl	800607a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80075e8:	e026      	b.n	8007638 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	18d3      	adds	r3, r2, r3
 80075f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075f2:	4b14      	ldr	r3, [pc, #80]	; (8007644 <prvAddCurrentTaskToDelayedList+0x94>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d209      	bcs.n	8007616 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007602:	4b12      	ldr	r3, [pc, #72]	; (800764c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	4b0f      	ldr	r3, [pc, #60]	; (8007644 <prvAddCurrentTaskToDelayedList+0x94>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3304      	adds	r3, #4
 800760c:	0019      	movs	r1, r3
 800760e:	0010      	movs	r0, r2
 8007610:	f7fe fd55 	bl	80060be <vListInsert>
}
 8007614:	e010      	b.n	8007638 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007616:	4b0e      	ldr	r3, [pc, #56]	; (8007650 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <prvAddCurrentTaskToDelayedList+0x94>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3304      	adds	r3, #4
 8007620:	0019      	movs	r1, r3
 8007622:	0010      	movs	r0, r2
 8007624:	f7fe fd4b 	bl	80060be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007628:	4b0a      	ldr	r3, [pc, #40]	; (8007654 <prvAddCurrentTaskToDelayedList+0xa4>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	429a      	cmp	r2, r3
 8007630:	d202      	bcs.n	8007638 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007632:	4b08      	ldr	r3, [pc, #32]	; (8007654 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	601a      	str	r2, [r3, #0]
}
 8007638:	46c0      	nop			; (mov r8, r8)
 800763a:	46bd      	mov	sp, r7
 800763c:	b004      	add	sp, #16
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20000ce8 	.word	0x20000ce8
 8007644:	20000810 	.word	0x20000810
 8007648:	20000cd0 	.word	0x20000cd0
 800764c:	20000ca0 	.word	0x20000ca0
 8007650:	20000c9c 	.word	0x20000c9c
 8007654:	20000d04 	.word	0x20000d04

08007658 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007658:	b590      	push	{r4, r7, lr}
 800765a:	b089      	sub	sp, #36	; 0x24
 800765c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800765e:	2300      	movs	r3, #0
 8007660:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007662:	f000 fa8b 	bl	8007b7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007666:	4b17      	ldr	r3, [pc, #92]	; (80076c4 <xTimerCreateTimerTask+0x6c>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d020      	beq.n	80076b0 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800766e:	2300      	movs	r3, #0
 8007670:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007672:	2300      	movs	r3, #0
 8007674:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007676:	003a      	movs	r2, r7
 8007678:	1d39      	adds	r1, r7, #4
 800767a:	2308      	movs	r3, #8
 800767c:	18fb      	adds	r3, r7, r3
 800767e:	0018      	movs	r0, r3
 8007680:	f7fe fcba 	bl	8005ff8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007684:	683c      	ldr	r4, [r7, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	490f      	ldr	r1, [pc, #60]	; (80076c8 <xTimerCreateTimerTask+0x70>)
 800768c:	480f      	ldr	r0, [pc, #60]	; (80076cc <xTimerCreateTimerTask+0x74>)
 800768e:	9202      	str	r2, [sp, #8]
 8007690:	9301      	str	r3, [sp, #4]
 8007692:	2302      	movs	r3, #2
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	2300      	movs	r3, #0
 8007698:	0022      	movs	r2, r4
 800769a:	f7ff f996 	bl	80069ca <xTaskCreateStatic>
 800769e:	0002      	movs	r2, r0
 80076a0:	4b0b      	ldr	r3, [pc, #44]	; (80076d0 <xTimerCreateTimerTask+0x78>)
 80076a2:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80076a4:	4b0a      	ldr	r3, [pc, #40]	; (80076d0 <xTimerCreateTimerTask+0x78>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80076ac:	2301      	movs	r3, #1
 80076ae:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <xTimerCreateTimerTask+0x62>
 80076b6:	b672      	cpsid	i
 80076b8:	e7fe      	b.n	80076b8 <xTimerCreateTimerTask+0x60>
	return xReturn;
 80076ba:	68fb      	ldr	r3, [r7, #12]
}
 80076bc:	0018      	movs	r0, r3
 80076be:	46bd      	mov	sp, r7
 80076c0:	b005      	add	sp, #20
 80076c2:	bd90      	pop	{r4, r7, pc}
 80076c4:	20000d40 	.word	0x20000d40
 80076c8:	08008284 	.word	0x08008284
 80076cc:	080077dd 	.word	0x080077dd
 80076d0:	20000d44 	.word	0x20000d44

080076d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b08a      	sub	sp, #40	; 0x28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <xTimerGenericCommand+0x1c>
 80076ec:	b672      	cpsid	i
 80076ee:	e7fe      	b.n	80076ee <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80076f0:	4b1d      	ldr	r3, [pc, #116]	; (8007768 <xTimerGenericCommand+0x94>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d031      	beq.n	800775c <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80076f8:	2114      	movs	r1, #20
 80076fa:	187b      	adds	r3, r7, r1
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007700:	187b      	adds	r3, r7, r1
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007706:	187b      	adds	r3, r7, r1
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2b05      	cmp	r3, #5
 8007710:	dc1a      	bgt.n	8007748 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007712:	f7ff fed5 	bl	80074c0 <xTaskGetSchedulerState>
 8007716:	0003      	movs	r3, r0
 8007718:	2b02      	cmp	r3, #2
 800771a:	d10a      	bne.n	8007732 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800771c:	4b12      	ldr	r3, [pc, #72]	; (8007768 <xTimerGenericCommand+0x94>)
 800771e:	6818      	ldr	r0, [r3, #0]
 8007720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007722:	2314      	movs	r3, #20
 8007724:	18f9      	adds	r1, r7, r3
 8007726:	2300      	movs	r3, #0
 8007728:	f7fe fded 	bl	8006306 <xQueueGenericSend>
 800772c:	0003      	movs	r3, r0
 800772e:	627b      	str	r3, [r7, #36]	; 0x24
 8007730:	e014      	b.n	800775c <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007732:	4b0d      	ldr	r3, [pc, #52]	; (8007768 <xTimerGenericCommand+0x94>)
 8007734:	6818      	ldr	r0, [r3, #0]
 8007736:	2314      	movs	r3, #20
 8007738:	18f9      	adds	r1, r7, r3
 800773a:	2300      	movs	r3, #0
 800773c:	2200      	movs	r2, #0
 800773e:	f7fe fde2 	bl	8006306 <xQueueGenericSend>
 8007742:	0003      	movs	r3, r0
 8007744:	627b      	str	r3, [r7, #36]	; 0x24
 8007746:	e009      	b.n	800775c <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007748:	4b07      	ldr	r3, [pc, #28]	; (8007768 <xTimerGenericCommand+0x94>)
 800774a:	6818      	ldr	r0, [r3, #0]
 800774c:	683a      	ldr	r2, [r7, #0]
 800774e:	2314      	movs	r3, #20
 8007750:	18f9      	adds	r1, r7, r3
 8007752:	2300      	movs	r3, #0
 8007754:	f7fe fe9b 	bl	800648e <xQueueGenericSendFromISR>
 8007758:	0003      	movs	r3, r0
 800775a:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800775c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800775e:	0018      	movs	r0, r3
 8007760:	46bd      	mov	sp, r7
 8007762:	b00a      	add	sp, #40	; 0x28
 8007764:	bd80      	pop	{r7, pc}
 8007766:	46c0      	nop			; (mov r8, r8)
 8007768:	20000d40 	.word	0x20000d40

0800776c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af02      	add	r7, sp, #8
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007776:	4b18      	ldr	r3, [pc, #96]	; (80077d8 <prvProcessExpiredTimer+0x6c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	3304      	adds	r3, #4
 8007784:	0018      	movs	r0, r3
 8007786:	f7fe fcd0 	bl	800612a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d119      	bne.n	80077c6 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	699a      	ldr	r2, [r3, #24]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	18d1      	adds	r1, r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f000 f8b6 	bl	8007910 <prvInsertTimerInActiveList>
 80077a4:	1e03      	subs	r3, r0, #0
 80077a6:	d00e      	beq.n	80077c6 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	2300      	movs	r3, #0
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	2300      	movs	r3, #0
 80077b2:	2100      	movs	r1, #0
 80077b4:	f7ff ff8e 	bl	80076d4 <xTimerGenericCommand>
 80077b8:	0003      	movs	r3, r0
 80077ba:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <prvProcessExpiredTimer+0x5a>
 80077c2:	b672      	cpsid	i
 80077c4:	e7fe      	b.n	80077c4 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	0010      	movs	r0, r2
 80077ce:	4798      	blx	r3
}
 80077d0:	46c0      	nop			; (mov r8, r8)
 80077d2:	46bd      	mov	sp, r7
 80077d4:	b004      	add	sp, #16
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	20000d38 	.word	0x20000d38

080077dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077e4:	2308      	movs	r3, #8
 80077e6:	18fb      	adds	r3, r7, r3
 80077e8:	0018      	movs	r0, r3
 80077ea:	f000 f851 	bl	8007890 <prvGetNextExpireTime>
 80077ee:	0003      	movs	r3, r0
 80077f0:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	0011      	movs	r1, r2
 80077f8:	0018      	movs	r0, r3
 80077fa:	f000 f803 	bl	8007804 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80077fe:	f000 f8c9 	bl	8007994 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007802:	e7ef      	b.n	80077e4 <prvTimerTask+0x8>

08007804 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800780e:	f7ff facf 	bl	8006db0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007812:	2308      	movs	r3, #8
 8007814:	18fb      	adds	r3, r7, r3
 8007816:	0018      	movs	r0, r3
 8007818:	f000 f85a 	bl	80078d0 <prvSampleTimeNow>
 800781c:	0003      	movs	r3, r0
 800781e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d129      	bne.n	800787a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10c      	bne.n	8007846 <prvProcessTimerOrBlockTask+0x42>
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	429a      	cmp	r2, r3
 8007832:	d808      	bhi.n	8007846 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8007834:	f7ff fac8 	bl	8006dc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	0011      	movs	r1, r2
 800783e:	0018      	movs	r0, r3
 8007840:	f7ff ff94 	bl	800776c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007844:	e01b      	b.n	800787e <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d006      	beq.n	800785a <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800784c:	4b0e      	ldr	r3, [pc, #56]	; (8007888 <prvProcessTimerOrBlockTask+0x84>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	425a      	negs	r2, r3
 8007854:	4153      	adcs	r3, r2
 8007856:	b2db      	uxtb	r3, r3
 8007858:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800785a:	4b0c      	ldr	r3, [pc, #48]	; (800788c <prvProcessTimerOrBlockTask+0x88>)
 800785c:	6818      	ldr	r0, [r3, #0]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	0019      	movs	r1, r3
 8007868:	f7ff f87c 	bl	8006964 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800786c:	f7ff faac 	bl	8006dc8 <xTaskResumeAll>
 8007870:	1e03      	subs	r3, r0, #0
 8007872:	d104      	bne.n	800787e <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8007874:	f000 fa4c 	bl	8007d10 <vPortYield>
}
 8007878:	e001      	b.n	800787e <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800787a:	f7ff faa5 	bl	8006dc8 <xTaskResumeAll>
}
 800787e:	46c0      	nop			; (mov r8, r8)
 8007880:	46bd      	mov	sp, r7
 8007882:	b004      	add	sp, #16
 8007884:	bd80      	pop	{r7, pc}
 8007886:	46c0      	nop			; (mov r8, r8)
 8007888:	20000d3c 	.word	0x20000d3c
 800788c:	20000d40 	.word	0x20000d40

08007890 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007898:	4b0c      	ldr	r3, [pc, #48]	; (80078cc <prvGetNextExpireTime+0x3c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	425a      	negs	r2, r3
 80078a0:	4153      	adcs	r3, r2
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	001a      	movs	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d105      	bne.n	80078be <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078b2:	4b06      	ldr	r3, [pc, #24]	; (80078cc <prvGetNextExpireTime+0x3c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	e001      	b.n	80078c2 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80078be:	2300      	movs	r3, #0
 80078c0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80078c2:	68fb      	ldr	r3, [r7, #12]
}
 80078c4:	0018      	movs	r0, r3
 80078c6:	46bd      	mov	sp, r7
 80078c8:	b004      	add	sp, #16
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	20000d38 	.word	0x20000d38

080078d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80078d8:	f7ff fb02 	bl	8006ee0 <xTaskGetTickCount>
 80078dc:	0003      	movs	r3, r0
 80078de:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80078e0:	4b0a      	ldr	r3, [pc, #40]	; (800790c <prvSampleTimeNow+0x3c>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d205      	bcs.n	80078f6 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80078ea:	f000 f8ed 	bl	8007ac8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	e002      	b.n	80078fc <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80078fc:	4b03      	ldr	r3, [pc, #12]	; (800790c <prvSampleTimeNow+0x3c>)
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8007902:	68fb      	ldr	r3, [r7, #12]
}
 8007904:	0018      	movs	r0, r3
 8007906:	46bd      	mov	sp, r7
 8007908:	b004      	add	sp, #16
 800790a:	bd80      	pop	{r7, pc}
 800790c:	20000d48 	.word	0x20000d48

08007910 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
 800791c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800791e:	2300      	movs	r3, #0
 8007920:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	429a      	cmp	r2, r3
 8007934:	d812      	bhi.n	800795c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	1ad2      	subs	r2, r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	429a      	cmp	r2, r3
 8007942:	d302      	bcc.n	800794a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007944:	2301      	movs	r3, #1
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	e01b      	b.n	8007982 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800794a:	4b10      	ldr	r3, [pc, #64]	; (800798c <prvInsertTimerInActiveList+0x7c>)
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3304      	adds	r3, #4
 8007952:	0019      	movs	r1, r3
 8007954:	0010      	movs	r0, r2
 8007956:	f7fe fbb2 	bl	80060be <vListInsert>
 800795a:	e012      	b.n	8007982 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	429a      	cmp	r2, r3
 8007962:	d206      	bcs.n	8007972 <prvInsertTimerInActiveList+0x62>
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	429a      	cmp	r2, r3
 800796a:	d302      	bcc.n	8007972 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800796c:	2301      	movs	r3, #1
 800796e:	617b      	str	r3, [r7, #20]
 8007970:	e007      	b.n	8007982 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007972:	4b07      	ldr	r3, [pc, #28]	; (8007990 <prvInsertTimerInActiveList+0x80>)
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	3304      	adds	r3, #4
 800797a:	0019      	movs	r1, r3
 800797c:	0010      	movs	r0, r2
 800797e:	f7fe fb9e 	bl	80060be <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007982:	697b      	ldr	r3, [r7, #20]
}
 8007984:	0018      	movs	r0, r3
 8007986:	46bd      	mov	sp, r7
 8007988:	b006      	add	sp, #24
 800798a:	bd80      	pop	{r7, pc}
 800798c:	20000d3c 	.word	0x20000d3c
 8007990:	20000d38 	.word	0x20000d38

08007994 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08c      	sub	sp, #48	; 0x30
 8007998:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800799a:	e082      	b.n	8007aa2 <prvProcessReceivedCommands+0x10e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800799c:	2308      	movs	r3, #8
 800799e:	18fb      	adds	r3, r7, r3
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	da10      	bge.n	80079c8 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80079a6:	2308      	movs	r3, #8
 80079a8:	18fb      	adds	r3, r7, r3
 80079aa:	3304      	adds	r3, #4
 80079ac:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <prvProcessReceivedCommands+0x24>
 80079b4:	b672      	cpsid	i
 80079b6:	e7fe      	b.n	80079b6 <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	6858      	ldr	r0, [r3, #4]
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	0019      	movs	r1, r3
 80079c6:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80079c8:	2308      	movs	r3, #8
 80079ca:	18fb      	adds	r3, r7, r3
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	db66      	blt.n	8007aa0 <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80079d2:	2308      	movs	r3, #8
 80079d4:	18fb      	adds	r3, r7, r3
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d004      	beq.n	80079ec <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	3304      	adds	r3, #4
 80079e6:	0018      	movs	r0, r3
 80079e8:	f7fe fb9f 	bl	800612a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079ec:	1d3b      	adds	r3, r7, #4
 80079ee:	0018      	movs	r0, r3
 80079f0:	f7ff ff6e 	bl	80078d0 <prvSampleTimeNow>
 80079f4:	0003      	movs	r3, r0
 80079f6:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 80079f8:	2308      	movs	r3, #8
 80079fa:	18fb      	adds	r3, r7, r3
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b09      	cmp	r3, #9
 8007a00:	d84f      	bhi.n	8007aa2 <prvProcessReceivedCommands+0x10e>
 8007a02:	009a      	lsls	r2, r3, #2
 8007a04:	4b2e      	ldr	r3, [pc, #184]	; (8007ac0 <prvProcessReceivedCommands+0x12c>)
 8007a06:	18d3      	adds	r3, r2, r3
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a0c:	2008      	movs	r0, #8
 8007a0e:	183b      	adds	r3, r7, r0
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	18d1      	adds	r1, r2, r3
 8007a18:	183b      	adds	r3, r7, r0
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	69fa      	ldr	r2, [r7, #28]
 8007a1e:	6a38      	ldr	r0, [r7, #32]
 8007a20:	f7ff ff76 	bl	8007910 <prvInsertTimerInActiveList>
 8007a24:	1e03      	subs	r3, r0, #0
 8007a26:	d03c      	beq.n	8007aa2 <prvProcessReceivedCommands+0x10e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2c:	6a3a      	ldr	r2, [r7, #32]
 8007a2e:	0010      	movs	r0, r2
 8007a30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d133      	bne.n	8007aa2 <prvProcessReceivedCommands+0x10e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007a3a:	2308      	movs	r3, #8
 8007a3c:	18fb      	adds	r3, r7, r3
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	18d2      	adds	r2, r2, r3
 8007a46:	6a38      	ldr	r0, [r7, #32]
 8007a48:	2300      	movs	r3, #0
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	2100      	movs	r1, #0
 8007a50:	f7ff fe40 	bl	80076d4 <xTimerGenericCommand>
 8007a54:	0003      	movs	r3, r0
 8007a56:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d121      	bne.n	8007aa2 <prvProcessReceivedCommands+0x10e>
 8007a5e:	b672      	cpsid	i
 8007a60:	e7fe      	b.n	8007a60 <prvProcessReceivedCommands+0xcc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007a62:	2308      	movs	r3, #8
 8007a64:	18fb      	adds	r3, r7, r3
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <prvProcessReceivedCommands+0xe4>
 8007a74:	b672      	cpsid	i
 8007a76:	e7fe      	b.n	8007a76 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	699a      	ldr	r2, [r3, #24]
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	18d1      	adds	r1, r2, r3
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	69fa      	ldr	r2, [r7, #28]
 8007a84:	6a38      	ldr	r0, [r7, #32]
 8007a86:	f7ff ff43 	bl	8007910 <prvInsertTimerInActiveList>
					break;
 8007a8a:	e00a      	b.n	8007aa2 <prvProcessReceivedCommands+0x10e>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007a8c:	6a3b      	ldr	r3, [r7, #32]
 8007a8e:	222c      	movs	r2, #44	; 0x2c
 8007a90:	5c9b      	ldrb	r3, [r3, r2]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d105      	bne.n	8007aa2 <prvProcessReceivedCommands+0x10e>
						{
							vPortFree( pxTimer );
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	0018      	movs	r0, r3
 8007a9a:	f000 fa87 	bl	8007fac <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007a9e:	e000      	b.n	8007aa2 <prvProcessReceivedCommands+0x10e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007aa0:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007aa2:	4b08      	ldr	r3, [pc, #32]	; (8007ac4 <prvProcessReceivedCommands+0x130>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2208      	movs	r2, #8
 8007aa8:	18b9      	adds	r1, r7, r2
 8007aaa:	2200      	movs	r2, #0
 8007aac:	0018      	movs	r0, r3
 8007aae:	f7fe fd5f 	bl	8006570 <xQueueReceive>
 8007ab2:	1e03      	subs	r3, r0, #0
 8007ab4:	d000      	beq.n	8007ab8 <prvProcessReceivedCommands+0x124>
 8007ab6:	e771      	b.n	800799c <prvProcessReceivedCommands+0x8>
	}
}
 8007ab8:	46c0      	nop			; (mov r8, r8)
 8007aba:	46bd      	mov	sp, r7
 8007abc:	b00a      	add	sp, #40	; 0x28
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	08008398 	.word	0x08008398
 8007ac4:	20000d40 	.word	0x20000d40

08007ac8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b088      	sub	sp, #32
 8007acc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ace:	e03e      	b.n	8007b4e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ad0:	4b28      	ldr	r3, [pc, #160]	; (8007b74 <prvSwitchTimerLists+0xac>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ada:	4b26      	ldr	r3, [pc, #152]	; (8007b74 <prvSwitchTimerLists+0xac>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3304      	adds	r3, #4
 8007ae8:	0018      	movs	r0, r3
 8007aea:	f7fe fb1e 	bl	800612a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	0010      	movs	r0, r2
 8007af6:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	69db      	ldr	r3, [r3, #28]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d126      	bne.n	8007b4e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	18d3      	adds	r3, r2, r3
 8007b08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d90e      	bls.n	8007b30 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b1e:	4b15      	ldr	r3, [pc, #84]	; (8007b74 <prvSwitchTimerLists+0xac>)
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3304      	adds	r3, #4
 8007b26:	0019      	movs	r1, r3
 8007b28:	0010      	movs	r0, r2
 8007b2a:	f7fe fac8 	bl	80060be <vListInsert>
 8007b2e:	e00e      	b.n	8007b4e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	2300      	movs	r3, #0
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	2300      	movs	r3, #0
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	f7ff fdca 	bl	80076d4 <xTimerGenericCommand>
 8007b40:	0003      	movs	r3, r0
 8007b42:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <prvSwitchTimerLists+0x86>
 8007b4a:	b672      	cpsid	i
 8007b4c:	e7fe      	b.n	8007b4c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b4e:	4b09      	ldr	r3, [pc, #36]	; (8007b74 <prvSwitchTimerLists+0xac>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1bb      	bne.n	8007ad0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007b58:	4b06      	ldr	r3, [pc, #24]	; (8007b74 <prvSwitchTimerLists+0xac>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007b5e:	4b06      	ldr	r3, [pc, #24]	; (8007b78 <prvSwitchTimerLists+0xb0>)
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	4b04      	ldr	r3, [pc, #16]	; (8007b74 <prvSwitchTimerLists+0xac>)
 8007b64:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8007b66:	4b04      	ldr	r3, [pc, #16]	; (8007b78 <prvSwitchTimerLists+0xb0>)
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	601a      	str	r2, [r3, #0]
}
 8007b6c:	46c0      	nop			; (mov r8, r8)
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	b006      	add	sp, #24
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	20000d38 	.word	0x20000d38
 8007b78:	20000d3c 	.word	0x20000d3c

08007b7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007b82:	f000 f8d5 	bl	8007d30 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007b86:	4b17      	ldr	r3, [pc, #92]	; (8007be4 <prvCheckForValidListAndQueue+0x68>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d124      	bne.n	8007bd8 <prvCheckForValidListAndQueue+0x5c>
		{
			vListInitialise( &xActiveTimerList1 );
 8007b8e:	4b16      	ldr	r3, [pc, #88]	; (8007be8 <prvCheckForValidListAndQueue+0x6c>)
 8007b90:	0018      	movs	r0, r3
 8007b92:	f7fe fa49 	bl	8006028 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007b96:	4b15      	ldr	r3, [pc, #84]	; (8007bec <prvCheckForValidListAndQueue+0x70>)
 8007b98:	0018      	movs	r0, r3
 8007b9a:	f7fe fa45 	bl	8006028 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007b9e:	4b14      	ldr	r3, [pc, #80]	; (8007bf0 <prvCheckForValidListAndQueue+0x74>)
 8007ba0:	4a11      	ldr	r2, [pc, #68]	; (8007be8 <prvCheckForValidListAndQueue+0x6c>)
 8007ba2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ba4:	4b13      	ldr	r3, [pc, #76]	; (8007bf4 <prvCheckForValidListAndQueue+0x78>)
 8007ba6:	4a11      	ldr	r2, [pc, #68]	; (8007bec <prvCheckForValidListAndQueue+0x70>)
 8007ba8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007baa:	4913      	ldr	r1, [pc, #76]	; (8007bf8 <prvCheckForValidListAndQueue+0x7c>)
 8007bac:	4a13      	ldr	r2, [pc, #76]	; (8007bfc <prvCheckForValidListAndQueue+0x80>)
 8007bae:	2300      	movs	r3, #0
 8007bb0:	9300      	str	r3, [sp, #0]
 8007bb2:	000b      	movs	r3, r1
 8007bb4:	2110      	movs	r1, #16
 8007bb6:	200a      	movs	r0, #10
 8007bb8:	f7fe fb33 	bl	8006222 <xQueueGenericCreateStatic>
 8007bbc:	0002      	movs	r2, r0
 8007bbe:	4b09      	ldr	r3, [pc, #36]	; (8007be4 <prvCheckForValidListAndQueue+0x68>)
 8007bc0:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007bc2:	4b08      	ldr	r3, [pc, #32]	; (8007be4 <prvCheckForValidListAndQueue+0x68>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d006      	beq.n	8007bd8 <prvCheckForValidListAndQueue+0x5c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007bca:	4b06      	ldr	r3, [pc, #24]	; (8007be4 <prvCheckForValidListAndQueue+0x68>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a0c      	ldr	r2, [pc, #48]	; (8007c00 <prvCheckForValidListAndQueue+0x84>)
 8007bd0:	0011      	movs	r1, r2
 8007bd2:	0018      	movs	r0, r3
 8007bd4:	f7fe fe9e 	bl	8006914 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007bd8:	f000 f8bc 	bl	8007d54 <vPortExitCritical>
}
 8007bdc:	46c0      	nop			; (mov r8, r8)
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	46c0      	nop			; (mov r8, r8)
 8007be4:	20000d40 	.word	0x20000d40
 8007be8:	20000d10 	.word	0x20000d10
 8007bec:	20000d24 	.word	0x20000d24
 8007bf0:	20000d38 	.word	0x20000d38
 8007bf4:	20000d3c 	.word	0x20000d3c
 8007bf8:	20000dec 	.word	0x20000dec
 8007bfc:	20000d4c 	.word	0x20000d4c
 8007c00:	0800828c 	.word	0x0800828c

08007c04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3b04      	subs	r3, #4
 8007c14:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2280      	movs	r2, #128	; 0x80
 8007c1a:	0452      	lsls	r2, r2, #17
 8007c1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	3b04      	subs	r3, #4
 8007c22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	3b04      	subs	r3, #4
 8007c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c30:	4a08      	ldr	r2, [pc, #32]	; (8007c54 <pxPortInitialiseStack+0x50>)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3b14      	subs	r3, #20
 8007c3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	3b20      	subs	r3, #32
 8007c46:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c48:	68fb      	ldr	r3, [r7, #12]
}
 8007c4a:	0018      	movs	r0, r3
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	b004      	add	sp, #16
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	46c0      	nop			; (mov r8, r8)
 8007c54:	08007c59 	.word	0x08007c59

08007c58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c62:	4b07      	ldr	r3, [pc, #28]	; (8007c80 <prvTaskExitError+0x28>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	3301      	adds	r3, #1
 8007c68:	d001      	beq.n	8007c6e <prvTaskExitError+0x16>
 8007c6a:	b672      	cpsid	i
 8007c6c:	e7fe      	b.n	8007c6c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8007c6e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8007c70:	46c0      	nop			; (mov r8, r8)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d0fc      	beq.n	8007c72 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c78:	46c0      	nop			; (mov r8, r8)
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	b002      	add	sp, #8
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	20000080 	.word	0x20000080

08007c84 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8007c88:	46c0      	nop			; (mov r8, r8)
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
	...

08007c90 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007c90:	4a0b      	ldr	r2, [pc, #44]	; (8007cc0 <pxCurrentTCBConst2>)
 8007c92:	6813      	ldr	r3, [r2, #0]
 8007c94:	6818      	ldr	r0, [r3, #0]
 8007c96:	3020      	adds	r0, #32
 8007c98:	f380 8809 	msr	PSP, r0
 8007c9c:	2002      	movs	r0, #2
 8007c9e:	f380 8814 	msr	CONTROL, r0
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007ca8:	46ae      	mov	lr, r5
 8007caa:	bc08      	pop	{r3}
 8007cac:	bc04      	pop	{r2}
 8007cae:	b662      	cpsie	i
 8007cb0:	4718      	bx	r3
 8007cb2:	46c0      	nop			; (mov r8, r8)
 8007cb4:	46c0      	nop			; (mov r8, r8)
 8007cb6:	46c0      	nop			; (mov r8, r8)
 8007cb8:	46c0      	nop			; (mov r8, r8)
 8007cba:	46c0      	nop			; (mov r8, r8)
 8007cbc:	46c0      	nop			; (mov r8, r8)
 8007cbe:	46c0      	nop			; (mov r8, r8)

08007cc0 <pxCurrentTCBConst2>:
 8007cc0:	20000810 	.word	0x20000810
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007cc4:	46c0      	nop			; (mov r8, r8)
 8007cc6:	46c0      	nop			; (mov r8, r8)

08007cc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8007ccc:	4b0e      	ldr	r3, [pc, #56]	; (8007d08 <xPortStartScheduler+0x40>)
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	4b0d      	ldr	r3, [pc, #52]	; (8007d08 <xPortStartScheduler+0x40>)
 8007cd2:	21ff      	movs	r1, #255	; 0xff
 8007cd4:	0409      	lsls	r1, r1, #16
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8007cda:	4b0b      	ldr	r3, [pc, #44]	; (8007d08 <xPortStartScheduler+0x40>)
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <xPortStartScheduler+0x40>)
 8007ce0:	21ff      	movs	r1, #255	; 0xff
 8007ce2:	0609      	lsls	r1, r1, #24
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8007ce8:	f000 f898 	bl	8007e1c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007cec:	4b07      	ldr	r3, [pc, #28]	; (8007d0c <xPortStartScheduler+0x44>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007cf2:	f7ff ffcd 	bl	8007c90 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007cf6:	f7ff f9b5 	bl	8007064 <vTaskSwitchContext>
	prvTaskExitError();
 8007cfa:	f7ff ffad 	bl	8007c58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	0018      	movs	r0, r3
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	46c0      	nop			; (mov r8, r8)
 8007d08:	e000ed20 	.word	0xe000ed20
 8007d0c:	20000080 	.word	0x20000080

08007d10 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8007d14:	4b05      	ldr	r3, [pc, #20]	; (8007d2c <vPortYield+0x1c>)
 8007d16:	2280      	movs	r2, #128	; 0x80
 8007d18:	0552      	lsls	r2, r2, #21
 8007d1a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8007d1c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007d20:	f3bf 8f6f 	isb	sy
}
 8007d24:	46c0      	nop			; (mov r8, r8)
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	46c0      	nop			; (mov r8, r8)
 8007d2c:	e000ed04 	.word	0xe000ed04

08007d30 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8007d34:	b672      	cpsid	i
    uxCriticalNesting++;
 8007d36:	4b06      	ldr	r3, [pc, #24]	; (8007d50 <vPortEnterCritical+0x20>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	1c5a      	adds	r2, r3, #1
 8007d3c:	4b04      	ldr	r3, [pc, #16]	; (8007d50 <vPortEnterCritical+0x20>)
 8007d3e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8007d40:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007d44:	f3bf 8f6f 	isb	sy
}
 8007d48:	46c0      	nop			; (mov r8, r8)
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	46c0      	nop			; (mov r8, r8)
 8007d50:	20000080 	.word	0x20000080

08007d54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d58:	4b09      	ldr	r3, [pc, #36]	; (8007d80 <vPortExitCritical+0x2c>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <vPortExitCritical+0x10>
 8007d60:	b672      	cpsid	i
 8007d62:	e7fe      	b.n	8007d62 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8007d64:	4b06      	ldr	r3, [pc, #24]	; (8007d80 <vPortExitCritical+0x2c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	1e5a      	subs	r2, r3, #1
 8007d6a:	4b05      	ldr	r3, [pc, #20]	; (8007d80 <vPortExitCritical+0x2c>)
 8007d6c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8007d6e:	4b04      	ldr	r3, [pc, #16]	; (8007d80 <vPortExitCritical+0x2c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d100      	bne.n	8007d78 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8007d76:	b662      	cpsie	i
    }
}
 8007d78:	46c0      	nop			; (mov r8, r8)
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	46c0      	nop			; (mov r8, r8)
 8007d80:	20000080 	.word	0x20000080

08007d84 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007d84:	f3ef 8010 	mrs	r0, PRIMASK
 8007d88:	b672      	cpsid	i
 8007d8a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8007d8c:	46c0      	nop			; (mov r8, r8)
 8007d8e:	0018      	movs	r0, r3

08007d90 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007d90:	f380 8810 	msr	PRIMASK, r0
 8007d94:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8007d96:	46c0      	nop			; (mov r8, r8)
	...

08007da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007da0:	f3ef 8009 	mrs	r0, PSP
 8007da4:	4b0e      	ldr	r3, [pc, #56]	; (8007de0 <pxCurrentTCBConst>)
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	3820      	subs	r0, #32
 8007daa:	6010      	str	r0, [r2, #0]
 8007dac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007dae:	4644      	mov	r4, r8
 8007db0:	464d      	mov	r5, r9
 8007db2:	4656      	mov	r6, sl
 8007db4:	465f      	mov	r7, fp
 8007db6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007db8:	b508      	push	{r3, lr}
 8007dba:	b672      	cpsid	i
 8007dbc:	f7ff f952 	bl	8007064 <vTaskSwitchContext>
 8007dc0:	b662      	cpsie	i
 8007dc2:	bc0c      	pop	{r2, r3}
 8007dc4:	6811      	ldr	r1, [r2, #0]
 8007dc6:	6808      	ldr	r0, [r1, #0]
 8007dc8:	3010      	adds	r0, #16
 8007dca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007dcc:	46a0      	mov	r8, r4
 8007dce:	46a9      	mov	r9, r5
 8007dd0:	46b2      	mov	sl, r6
 8007dd2:	46bb      	mov	fp, r7
 8007dd4:	f380 8809 	msr	PSP, r0
 8007dd8:	3820      	subs	r0, #32
 8007dda:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007ddc:	4718      	bx	r3
 8007dde:	46c0      	nop			; (mov r8, r8)

08007de0 <pxCurrentTCBConst>:
 8007de0:	20000810 	.word	0x20000810
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007de4:	46c0      	nop			; (mov r8, r8)
 8007de6:	46c0      	nop			; (mov r8, r8)

08007de8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8007dee:	f7ff ffc9 	bl	8007d84 <ulSetInterruptMaskFromISR>
 8007df2:	0003      	movs	r3, r0
 8007df4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007df6:	f7ff f881 	bl	8006efc <xTaskIncrementTick>
 8007dfa:	1e03      	subs	r3, r0, #0
 8007dfc:	d003      	beq.n	8007e06 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8007dfe:	4b06      	ldr	r3, [pc, #24]	; (8007e18 <SysTick_Handler+0x30>)
 8007e00:	2280      	movs	r2, #128	; 0x80
 8007e02:	0552      	lsls	r2, r2, #21
 8007e04:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	0018      	movs	r0, r3
 8007e0a:	f7ff ffc1 	bl	8007d90 <vClearInterruptMaskFromISR>
}
 8007e0e:	46c0      	nop			; (mov r8, r8)
 8007e10:	46bd      	mov	sp, r7
 8007e12:	b002      	add	sp, #8
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	46c0      	nop			; (mov r8, r8)
 8007e18:	e000ed04 	.word	0xe000ed04

08007e1c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8007e20:	4b0b      	ldr	r3, [pc, #44]	; (8007e50 <prvSetupTimerInterrupt+0x34>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8007e26:	4b0b      	ldr	r3, [pc, #44]	; (8007e54 <prvSetupTimerInterrupt+0x38>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e2c:	4b0a      	ldr	r3, [pc, #40]	; (8007e58 <prvSetupTimerInterrupt+0x3c>)
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	23fa      	movs	r3, #250	; 0xfa
 8007e32:	0099      	lsls	r1, r3, #2
 8007e34:	0010      	movs	r0, r2
 8007e36:	f7f8 f967 	bl	8000108 <__udivsi3>
 8007e3a:	0003      	movs	r3, r0
 8007e3c:	001a      	movs	r2, r3
 8007e3e:	4b07      	ldr	r3, [pc, #28]	; (8007e5c <prvSetupTimerInterrupt+0x40>)
 8007e40:	3a01      	subs	r2, #1
 8007e42:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8007e44:	4b02      	ldr	r3, [pc, #8]	; (8007e50 <prvSetupTimerInterrupt+0x34>)
 8007e46:	2207      	movs	r2, #7
 8007e48:	601a      	str	r2, [r3, #0]
}
 8007e4a:	46c0      	nop			; (mov r8, r8)
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	e000e010 	.word	0xe000e010
 8007e54:	e000e018 	.word	0xe000e018
 8007e58:	20000078 	.word	0x20000078
 8007e5c:	e000e014 	.word	0xe000e014

08007e60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8007e6c:	f7fe ffa0 	bl	8006db0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e70:	4b49      	ldr	r3, [pc, #292]	; (8007f98 <pvPortMalloc+0x138>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d101      	bne.n	8007e7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e78:	f000 f8e0 	bl	800803c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e7c:	4b47      	ldr	r3, [pc, #284]	; (8007f9c <pvPortMalloc+0x13c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	4013      	ands	r3, r2
 8007e84:	d000      	beq.n	8007e88 <pvPortMalloc+0x28>
 8007e86:	e079      	b.n	8007f7c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d012      	beq.n	8007eb4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8007e8e:	2208      	movs	r2, #8
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	189b      	adds	r3, r3, r2
 8007e94:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2207      	movs	r2, #7
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	d00a      	beq.n	8007eb4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2207      	movs	r2, #7
 8007ea2:	4393      	bics	r3, r2
 8007ea4:	3308      	adds	r3, #8
 8007ea6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2207      	movs	r2, #7
 8007eac:	4013      	ands	r3, r2
 8007eae:	d001      	beq.n	8007eb4 <pvPortMalloc+0x54>
 8007eb0:	b672      	cpsid	i
 8007eb2:	e7fe      	b.n	8007eb2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d060      	beq.n	8007f7c <pvPortMalloc+0x11c>
 8007eba:	4b39      	ldr	r3, [pc, #228]	; (8007fa0 <pvPortMalloc+0x140>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d85b      	bhi.n	8007f7c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ec4:	4b37      	ldr	r3, [pc, #220]	; (8007fa4 <pvPortMalloc+0x144>)
 8007ec6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007ec8:	4b36      	ldr	r3, [pc, #216]	; (8007fa4 <pvPortMalloc+0x144>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ece:	e004      	b.n	8007eda <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d903      	bls.n	8007eec <pvPortMalloc+0x8c>
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1f1      	bne.n	8007ed0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007eec:	4b2a      	ldr	r3, [pc, #168]	; (8007f98 <pvPortMalloc+0x138>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d042      	beq.n	8007f7c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2208      	movs	r2, #8
 8007efc:	189b      	adds	r3, r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	1ad2      	subs	r2, r2, r3
 8007f10:	2308      	movs	r3, #8
 8007f12:	005b      	lsls	r3, r3, #1
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d916      	bls.n	8007f46 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	18d3      	adds	r3, r2, r3
 8007f1e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2207      	movs	r2, #7
 8007f24:	4013      	ands	r3, r2
 8007f26:	d001      	beq.n	8007f2c <pvPortMalloc+0xcc>
 8007f28:	b672      	cpsid	i
 8007f2a:	e7fe      	b.n	8007f2a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	685a      	ldr	r2, [r3, #4]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	1ad2      	subs	r2, r2, r3
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	0018      	movs	r0, r3
 8007f42:	f000 f8db 	bl	80080fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f46:	4b16      	ldr	r3, [pc, #88]	; (8007fa0 <pvPortMalloc+0x140>)
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	1ad2      	subs	r2, r2, r3
 8007f50:	4b13      	ldr	r3, [pc, #76]	; (8007fa0 <pvPortMalloc+0x140>)
 8007f52:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f54:	4b12      	ldr	r3, [pc, #72]	; (8007fa0 <pvPortMalloc+0x140>)
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	4b13      	ldr	r3, [pc, #76]	; (8007fa8 <pvPortMalloc+0x148>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d203      	bcs.n	8007f68 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f60:	4b0f      	ldr	r3, [pc, #60]	; (8007fa0 <pvPortMalloc+0x140>)
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	4b10      	ldr	r3, [pc, #64]	; (8007fa8 <pvPortMalloc+0x148>)
 8007f66:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	4b0b      	ldr	r3, [pc, #44]	; (8007f9c <pvPortMalloc+0x13c>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	431a      	orrs	r2, r3
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f7c:	f7fe ff24 	bl	8006dc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2207      	movs	r2, #7
 8007f84:	4013      	ands	r3, r2
 8007f86:	d001      	beq.n	8007f8c <pvPortMalloc+0x12c>
 8007f88:	b672      	cpsid	i
 8007f8a:	e7fe      	b.n	8007f8a <pvPortMalloc+0x12a>
	return pvReturn;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
}
 8007f8e:	0018      	movs	r0, r3
 8007f90:	46bd      	mov	sp, r7
 8007f92:	b006      	add	sp, #24
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	46c0      	nop			; (mov r8, r8)
 8007f98:	20001a44 	.word	0x20001a44
 8007f9c:	20001a50 	.word	0x20001a50
 8007fa0:	20001a48 	.word	0x20001a48
 8007fa4:	20001a3c 	.word	0x20001a3c
 8007fa8:	20001a4c 	.word	0x20001a4c

08007fac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d035      	beq.n	800802a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007fbe:	2308      	movs	r3, #8
 8007fc0:	425b      	negs	r3, r3
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	18d3      	adds	r3, r2, r3
 8007fc6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	4b18      	ldr	r3, [pc, #96]	; (8008034 <vPortFree+0x88>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	d101      	bne.n	8007fdc <vPortFree+0x30>
 8007fd8:	b672      	cpsid	i
 8007fda:	e7fe      	b.n	8007fda <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <vPortFree+0x3c>
 8007fe4:	b672      	cpsid	i
 8007fe6:	e7fe      	b.n	8007fe6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	4b11      	ldr	r3, [pc, #68]	; (8008034 <vPortFree+0x88>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	d01a      	beq.n	800802a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d116      	bne.n	800802a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	685a      	ldr	r2, [r3, #4]
 8008000:	4b0c      	ldr	r3, [pc, #48]	; (8008034 <vPortFree+0x88>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	43db      	mvns	r3, r3
 8008006:	401a      	ands	r2, r3
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800800c:	f7fe fed0 	bl	8006db0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	4b08      	ldr	r3, [pc, #32]	; (8008038 <vPortFree+0x8c>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	18d2      	adds	r2, r2, r3
 800801a:	4b07      	ldr	r3, [pc, #28]	; (8008038 <vPortFree+0x8c>)
 800801c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	0018      	movs	r0, r3
 8008022:	f000 f86b 	bl	80080fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008026:	f7fe fecf 	bl	8006dc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800802a:	46c0      	nop			; (mov r8, r8)
 800802c:	46bd      	mov	sp, r7
 800802e:	b004      	add	sp, #16
 8008030:	bd80      	pop	{r7, pc}
 8008032:	46c0      	nop			; (mov r8, r8)
 8008034:	20001a50 	.word	0x20001a50
 8008038:	20001a48 	.word	0x20001a48

0800803c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008042:	23c0      	movs	r3, #192	; 0xc0
 8008044:	011b      	lsls	r3, r3, #4
 8008046:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008048:	4b26      	ldr	r3, [pc, #152]	; (80080e4 <prvHeapInit+0xa8>)
 800804a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2207      	movs	r2, #7
 8008050:	4013      	ands	r3, r2
 8008052:	d00c      	beq.n	800806e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	3307      	adds	r3, #7
 8008058:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2207      	movs	r2, #7
 800805e:	4393      	bics	r3, r2
 8008060:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	1ad2      	subs	r2, r2, r3
 8008068:	4b1e      	ldr	r3, [pc, #120]	; (80080e4 <prvHeapInit+0xa8>)
 800806a:	18d3      	adds	r3, r2, r3
 800806c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008072:	4b1d      	ldr	r3, [pc, #116]	; (80080e8 <prvHeapInit+0xac>)
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008078:	4b1b      	ldr	r3, [pc, #108]	; (80080e8 <prvHeapInit+0xac>)
 800807a:	2200      	movs	r2, #0
 800807c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	18d3      	adds	r3, r2, r3
 8008084:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008086:	2208      	movs	r2, #8
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	1a9b      	subs	r3, r3, r2
 800808c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2207      	movs	r2, #7
 8008092:	4393      	bics	r3, r2
 8008094:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	4b14      	ldr	r3, [pc, #80]	; (80080ec <prvHeapInit+0xb0>)
 800809a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800809c:	4b13      	ldr	r3, [pc, #76]	; (80080ec <prvHeapInit+0xb0>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2200      	movs	r2, #0
 80080a2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080a4:	4b11      	ldr	r3, [pc, #68]	; (80080ec <prvHeapInit+0xb0>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2200      	movs	r2, #0
 80080aa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	1ad2      	subs	r2, r2, r3
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080ba:	4b0c      	ldr	r3, [pc, #48]	; (80080ec <prvHeapInit+0xb0>)
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	685a      	ldr	r2, [r3, #4]
 80080c6:	4b0a      	ldr	r3, [pc, #40]	; (80080f0 <prvHeapInit+0xb4>)
 80080c8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	4b09      	ldr	r3, [pc, #36]	; (80080f4 <prvHeapInit+0xb8>)
 80080d0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080d2:	4b09      	ldr	r3, [pc, #36]	; (80080f8 <prvHeapInit+0xbc>)
 80080d4:	2280      	movs	r2, #128	; 0x80
 80080d6:	0612      	lsls	r2, r2, #24
 80080d8:	601a      	str	r2, [r3, #0]
}
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	46bd      	mov	sp, r7
 80080de:	b004      	add	sp, #16
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	46c0      	nop			; (mov r8, r8)
 80080e4:	20000e3c 	.word	0x20000e3c
 80080e8:	20001a3c 	.word	0x20001a3c
 80080ec:	20001a44 	.word	0x20001a44
 80080f0:	20001a4c 	.word	0x20001a4c
 80080f4:	20001a48 	.word	0x20001a48
 80080f8:	20001a50 	.word	0x20001a50

080080fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008104:	4b27      	ldr	r3, [pc, #156]	; (80081a4 <prvInsertBlockIntoFreeList+0xa8>)
 8008106:	60fb      	str	r3, [r7, #12]
 8008108:	e002      	b.n	8008110 <prvInsertBlockIntoFreeList+0x14>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	60fb      	str	r3, [r7, #12]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	429a      	cmp	r2, r3
 8008118:	d8f7      	bhi.n	800810a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	18d3      	adds	r3, r2, r3
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	429a      	cmp	r2, r3
 800812a:	d108      	bne.n	800813e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	685a      	ldr	r2, [r3, #4]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	18d2      	adds	r2, r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	18d2      	adds	r2, r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	429a      	cmp	r2, r3
 8008150:	d118      	bne.n	8008184 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	4b14      	ldr	r3, [pc, #80]	; (80081a8 <prvInsertBlockIntoFreeList+0xac>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	429a      	cmp	r2, r3
 800815c:	d00d      	beq.n	800817a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	18d2      	adds	r2, r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	601a      	str	r2, [r3, #0]
 8008178:	e008      	b.n	800818c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800817a:	4b0b      	ldr	r3, [pc, #44]	; (80081a8 <prvInsertBlockIntoFreeList+0xac>)
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	e003      	b.n	800818c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	429a      	cmp	r2, r3
 8008192:	d002      	beq.n	800819a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800819a:	46c0      	nop			; (mov r8, r8)
 800819c:	46bd      	mov	sp, r7
 800819e:	b004      	add	sp, #16
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	46c0      	nop			; (mov r8, r8)
 80081a4:	20001a3c 	.word	0x20001a3c
 80081a8:	20001a44 	.word	0x20001a44

080081ac <__libc_init_array>:
 80081ac:	b570      	push	{r4, r5, r6, lr}
 80081ae:	2600      	movs	r6, #0
 80081b0:	4d0c      	ldr	r5, [pc, #48]	; (80081e4 <__libc_init_array+0x38>)
 80081b2:	4c0d      	ldr	r4, [pc, #52]	; (80081e8 <__libc_init_array+0x3c>)
 80081b4:	1b64      	subs	r4, r4, r5
 80081b6:	10a4      	asrs	r4, r4, #2
 80081b8:	42a6      	cmp	r6, r4
 80081ba:	d109      	bne.n	80081d0 <__libc_init_array+0x24>
 80081bc:	2600      	movs	r6, #0
 80081be:	f000 f82b 	bl	8008218 <_init>
 80081c2:	4d0a      	ldr	r5, [pc, #40]	; (80081ec <__libc_init_array+0x40>)
 80081c4:	4c0a      	ldr	r4, [pc, #40]	; (80081f0 <__libc_init_array+0x44>)
 80081c6:	1b64      	subs	r4, r4, r5
 80081c8:	10a4      	asrs	r4, r4, #2
 80081ca:	42a6      	cmp	r6, r4
 80081cc:	d105      	bne.n	80081da <__libc_init_array+0x2e>
 80081ce:	bd70      	pop	{r4, r5, r6, pc}
 80081d0:	00b3      	lsls	r3, r6, #2
 80081d2:	58eb      	ldr	r3, [r5, r3]
 80081d4:	4798      	blx	r3
 80081d6:	3601      	adds	r6, #1
 80081d8:	e7ee      	b.n	80081b8 <__libc_init_array+0xc>
 80081da:	00b3      	lsls	r3, r6, #2
 80081dc:	58eb      	ldr	r3, [r5, r3]
 80081de:	4798      	blx	r3
 80081e0:	3601      	adds	r6, #1
 80081e2:	e7f2      	b.n	80081ca <__libc_init_array+0x1e>
 80081e4:	080083c8 	.word	0x080083c8
 80081e8:	080083c8 	.word	0x080083c8
 80081ec:	080083c8 	.word	0x080083c8
 80081f0:	080083cc 	.word	0x080083cc

080081f4 <memcpy>:
 80081f4:	2300      	movs	r3, #0
 80081f6:	b510      	push	{r4, lr}
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d100      	bne.n	80081fe <memcpy+0xa>
 80081fc:	bd10      	pop	{r4, pc}
 80081fe:	5ccc      	ldrb	r4, [r1, r3]
 8008200:	54c4      	strb	r4, [r0, r3]
 8008202:	3301      	adds	r3, #1
 8008204:	e7f8      	b.n	80081f8 <memcpy+0x4>

08008206 <memset>:
 8008206:	0003      	movs	r3, r0
 8008208:	1812      	adds	r2, r2, r0
 800820a:	4293      	cmp	r3, r2
 800820c:	d100      	bne.n	8008210 <memset+0xa>
 800820e:	4770      	bx	lr
 8008210:	7019      	strb	r1, [r3, #0]
 8008212:	3301      	adds	r3, #1
 8008214:	e7f9      	b.n	800820a <memset+0x4>
	...

08008218 <_init>:
 8008218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821a:	46c0      	nop			; (mov r8, r8)
 800821c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800821e:	bc08      	pop	{r3}
 8008220:	469e      	mov	lr, r3
 8008222:	4770      	bx	lr

08008224 <_fini>:
 8008224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008226:	46c0      	nop			; (mov r8, r8)
 8008228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800822a:	bc08      	pop	{r3}
 800822c:	469e      	mov	lr, r3
 800822e:	4770      	bx	lr
