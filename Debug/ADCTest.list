
ADCTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060a0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08006160  08006160  00016160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800623c  0800623c  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  0800623c  0800623c  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800623c  0800623c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800623c  0800623c  0001623c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006240  08006240  00016240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08006244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b70  20000030  08006274  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ba0  08006274  00021ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018747  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003375  00000000  00000000  0003879f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001610  00000000  00000000  0003bb18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001478  00000000  00000000  0003d128  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018833  00000000  00000000  0003e5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011544  00000000  00000000  00056dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008dd6e  00000000  00000000  00068317  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f6085  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f34  00000000  00000000  000f6100  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000030 	.word	0x20000030
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006148 	.word	0x08006148

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000034 	.word	0x20000034
 8000104:	08006148 	.word	0x08006148

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <PDM_Init>:

}



void PDM_Init(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
	U8 i;

	// Set timers to 0 (may not need to do this)
	htim17.Instance->CNT = 0;
 8000226:	4b1d      	ldr	r3, [pc, #116]	; (800029c <PDM_Init+0x7c>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	2200      	movs	r2, #0
 800022c:	625a      	str	r2, [r3, #36]	; 0x24
	htim16.Instance->CNT = 0;
 800022e:	4b1c      	ldr	r3, [pc, #112]	; (80002a0 <PDM_Init+0x80>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	2200      	movs	r2, #0
 8000234:	625a      	str	r2, [r3, #36]	; 0x24
	// Enable Channels after DMA starts
	for (i = 0; i < NUM_ADC_CHANNELS; i++) {
 8000236:	1dfb      	adds	r3, r7, #7
 8000238:	2200      	movs	r2, #0
 800023a:	701a      	strb	r2, [r3, #0]
 800023c:	e00e      	b.n	800025c <PDM_Init+0x3c>
		HAL_GPIO_WritePin(GPIO_CONTROL_PORT, gpio_control_pins[i], GPIO_PIN_SET);
 800023e:	1dfb      	adds	r3, r7, #7
 8000240:	781a      	ldrb	r2, [r3, #0]
 8000242:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <PDM_Init+0x84>)
 8000244:	0052      	lsls	r2, r2, #1
 8000246:	5ad3      	ldrh	r3, [r2, r3]
 8000248:	4817      	ldr	r0, [pc, #92]	; (80002a8 <PDM_Init+0x88>)
 800024a:	2201      	movs	r2, #1
 800024c:	0019      	movs	r1, r3
 800024e:	f002 f8f5 	bl	800243c <HAL_GPIO_WritePin>
	for (i = 0; i < NUM_ADC_CHANNELS; i++) {
 8000252:	1dfb      	adds	r3, r7, #7
 8000254:	781a      	ldrb	r2, [r3, #0]
 8000256:	1dfb      	adds	r3, r7, #7
 8000258:	3201      	adds	r2, #1
 800025a:	701a      	strb	r2, [r3, #0]
 800025c:	1dfb      	adds	r3, r7, #7
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b02      	cmp	r3, #2
 8000262:	d9ec      	bls.n	800023e <PDM_Init+0x1e>
	}
	// Unsure about this auto calibration
	HAL_ADCEx_Calibration_Start(&hadc);		// start cal before starting adc
 8000264:	4b11      	ldr	r3, [pc, #68]	; (80002ac <PDM_Init+0x8c>)
 8000266:	0018      	movs	r0, r3
 8000268:	f001 fb56 	bl	8001918 <HAL_ADCEx_Calibration_Start>
	HAL_TIM_Base_Start(&htim16);			// start timer so interrupt gives accurate time
 800026c:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <PDM_Init+0x80>)
 800026e:	0018      	movs	r0, r3
 8000270:	f002 ff70 	bl	8003154 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim17);
 8000274:	4b09      	ldr	r3, [pc, #36]	; (800029c <PDM_Init+0x7c>)
 8000276:	0018      	movs	r0, r3
 8000278:	f002 ff6c 	bl	8003154 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)current_buffer, NUM_ADC_CHANNELS);
 800027c:	490c      	ldr	r1, [pc, #48]	; (80002b0 <PDM_Init+0x90>)
 800027e:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <PDM_Init+0x8c>)
 8000280:	2203      	movs	r2, #3
 8000282:	0018      	movs	r0, r3
 8000284:	f000 ff8a 	bl	800119c <HAL_ADC_Start_DMA>


	i++;
 8000288:	1dfb      	adds	r3, r7, #7
 800028a:	781a      	ldrb	r2, [r3, #0]
 800028c:	1dfb      	adds	r3, r7, #7
 800028e:	3201      	adds	r2, #1
 8000290:	701a      	strb	r2, [r3, #0]
}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	46bd      	mov	sp, r7
 8000296:	b002      	add	sp, #8
 8000298:	bd80      	pop	{r7, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	20001968 	.word	0x20001968
 80002a0:	20001adc 	.word	0x20001adc
 80002a4:	2000001c 	.word	0x2000001c
 80002a8:	48000400 	.word	0x48000400
 80002ac:	20001a9c 	.word	0x20001a9c
 80002b0:	20000054 	.word	0x20000054

080002b4 <Current_Control_Loop>:



void Current_Control_Loop(void) {
 80002b4:	b590      	push	{r4, r7, lr}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
	U8 	adc_channels_idx = 0;
 80002ba:	230f      	movs	r3, #15
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
	U16	adc_val, time_ref, curr_time, time_diff;

	// Infinite loop cycles through NUM_ADC_CHANNELS state machines, one for each channel
	while (1) {

		adc_val = current_buffer[adc_channels_idx];
 80002c2:	200f      	movs	r0, #15
 80002c4:	183b      	adds	r3, r7, r0
 80002c6:	7819      	ldrb	r1, [r3, #0]
 80002c8:	230a      	movs	r3, #10
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	4a59      	ldr	r2, [pc, #356]	; (8000434 <Current_Control_Loop+0x180>)
 80002ce:	0049      	lsls	r1, r1, #1
 80002d0:	5a8a      	ldrh	r2, [r1, r2]
 80002d2:	801a      	strh	r2, [r3, #0]

		switch (channel_states[adc_channels_idx]) {
 80002d4:	183b      	adds	r3, r7, r0
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	4a57      	ldr	r2, [pc, #348]	; (8000438 <Current_Control_Loop+0x184>)
 80002da:	5cd3      	ldrb	r3, [r2, r3]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d005      	beq.n	80002ec <Current_Control_Loop+0x38>
 80002e0:	2b02      	cmp	r3, #2
 80002e2:	d100      	bne.n	80002e6 <Current_Control_Loop+0x32>
 80002e4:	e093      	b.n	800040e <Current_Control_Loop+0x15a>
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d03e      	beq.n	8000368 <Current_Control_Loop+0xb4>
 80002ea:	e08d      	b.n	8000408 <Current_Control_Loop+0x154>
			case PERMANENT_OFF:
				// Ensure current off??
				break;

			case RESTART_OFF:
				curr_time = htim17.Instance->CNT;
 80002ec:	4b53      	ldr	r3, [pc, #332]	; (800043c <Current_Control_Loop+0x188>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002f2:	2008      	movs	r0, #8
 80002f4:	183b      	adds	r3, r7, r0
 80002f6:	801a      	strh	r2, [r3, #0]
				time_ref = restart_timeout_ref[adc_channels_idx];
 80002f8:	230f      	movs	r3, #15
 80002fa:	18fb      	adds	r3, r7, r3
 80002fc:	7819      	ldrb	r1, [r3, #0]
 80002fe:	1dbb      	adds	r3, r7, #6
 8000300:	4a4f      	ldr	r2, [pc, #316]	; (8000440 <Current_Control_Loop+0x18c>)
 8000302:	0049      	lsls	r1, r1, #1
 8000304:	5a8a      	ldrh	r2, [r1, r2]
 8000306:	801a      	strh	r2, [r3, #0]
				if (curr_time < time_ref) {
 8000308:	183a      	adds	r2, r7, r0
 800030a:	1dbb      	adds	r3, r7, #6
 800030c:	8812      	ldrh	r2, [r2, #0]
 800030e:	881b      	ldrh	r3, [r3, #0]
 8000310:	429a      	cmp	r2, r3
 8000312:	d209      	bcs.n	8000328 <Current_Control_Loop+0x74>
					time_diff = (MAX_TIMER_VALUE - time_ref) + curr_time;
 8000314:	230c      	movs	r3, #12
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	2208      	movs	r2, #8
 800031a:	18b9      	adds	r1, r7, r2
 800031c:	1dba      	adds	r2, r7, #6
 800031e:	8809      	ldrh	r1, [r1, #0]
 8000320:	8812      	ldrh	r2, [r2, #0]
 8000322:	1a8a      	subs	r2, r1, r2
 8000324:	801a      	strh	r2, [r3, #0]
 8000326:	e008      	b.n	800033a <Current_Control_Loop+0x86>
				} else {
					time_diff = curr_time - time_ref;
 8000328:	230c      	movs	r3, #12
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	2208      	movs	r2, #8
 800032e:	18b9      	adds	r1, r7, r2
 8000330:	1dba      	adds	r2, r7, #6
 8000332:	8809      	ldrh	r1, [r1, #0]
 8000334:	8812      	ldrh	r2, [r2, #0]
 8000336:	1a8a      	subs	r2, r1, r2
 8000338:	801a      	strh	r2, [r3, #0]
				}

				if (time_diff >= DEVICE_RESTART_TIMEOUT_MS) {
 800033a:	230c      	movs	r3, #12
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	4a40      	ldr	r2, [pc, #256]	; (8000444 <Current_Control_Loop+0x190>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d965      	bls.n	8000412 <Current_Control_Loop+0x15e>
					// turn the channel back on
					HAL_GPIO_WritePin(GPIO_CONTROL_PORT, gpio_control_pins[adc_channels_idx], GPIO_PIN_SET);
 8000346:	240f      	movs	r4, #15
 8000348:	193b      	adds	r3, r7, r4
 800034a:	781a      	ldrb	r2, [r3, #0]
 800034c:	4b3e      	ldr	r3, [pc, #248]	; (8000448 <Current_Control_Loop+0x194>)
 800034e:	0052      	lsls	r2, r2, #1
 8000350:	5ad3      	ldrh	r3, [r2, r3]
 8000352:	483e      	ldr	r0, [pc, #248]	; (800044c <Current_Control_Loop+0x198>)
 8000354:	2201      	movs	r2, #1
 8000356:	0019      	movs	r1, r3
 8000358:	f002 f870 	bl	800243c <HAL_GPIO_WritePin>
					channel_states[adc_channels_idx] = NORMAL;
 800035c:	193b      	adds	r3, r7, r4
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	4a35      	ldr	r2, [pc, #212]	; (8000438 <Current_Control_Loop+0x184>)
 8000362:	2100      	movs	r1, #0
 8000364:	54d1      	strb	r1, [r2, r3]
				}
				break;
 8000366:	e054      	b.n	8000412 <Current_Control_Loop+0x15e>

			case NORMAL:
				if (channel_data_states[adc_channels_idx] == UNUSED) {
 8000368:	230f      	movs	r3, #15
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	4a38      	ldr	r2, [pc, #224]	; (8000450 <Current_Control_Loop+0x19c>)
 8000370:	5cd3      	ldrb	r3, [r2, r3]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d141      	bne.n	80003fa <Current_Control_Loop+0x146>
					if (adc_val >= *channel_setpoints[adc_channels_idx]) {
 8000376:	230f      	movs	r3, #15
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	781a      	ldrb	r2, [r3, #0]
 800037c:	4b35      	ldr	r3, [pc, #212]	; (8000454 <Current_Control_Loop+0x1a0>)
 800037e:	0092      	lsls	r2, r2, #2
 8000380:	58d3      	ldr	r3, [r2, r3]
 8000382:	881b      	ldrh	r3, [r3, #0]
 8000384:	220a      	movs	r2, #10
 8000386:	18ba      	adds	r2, r7, r2
 8000388:	8812      	ldrh	r2, [r2, #0]
 800038a:	429a      	cmp	r2, r3
 800038c:	d32e      	bcc.n	80003ec <Current_Control_Loop+0x138>
						// Overcurrent event (level triggered)
						// turn off control pin
						HAL_GPIO_WritePin(GPIO_CONTROL_PORT, gpio_control_pins[adc_channels_idx], GPIO_PIN_RESET);
 800038e:	240f      	movs	r4, #15
 8000390:	193b      	adds	r3, r7, r4
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	4b2c      	ldr	r3, [pc, #176]	; (8000448 <Current_Control_Loop+0x194>)
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	5ad3      	ldrh	r3, [r2, r3]
 800039a:	482c      	ldr	r0, [pc, #176]	; (800044c <Current_Control_Loop+0x198>)
 800039c:	2200      	movs	r2, #0
 800039e:	0019      	movs	r1, r3
 80003a0:	f002 f84c 	bl	800243c <HAL_GPIO_WritePin>
						if (num_restart_attempts[adc_channels_idx] > 0) {
 80003a4:	193b      	adds	r3, r7, r4
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	4a2b      	ldr	r2, [pc, #172]	; (8000458 <Current_Control_Loop+0x1a4>)
 80003aa:	5cd3      	ldrb	r3, [r2, r3]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d017      	beq.n	80003e0 <Current_Control_Loop+0x12c>
							num_restart_attempts[adc_channels_idx]--;
 80003b0:	200f      	movs	r0, #15
 80003b2:	183b      	adds	r3, r7, r0
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	4a28      	ldr	r2, [pc, #160]	; (8000458 <Current_Control_Loop+0x1a4>)
 80003b8:	5cd2      	ldrb	r2, [r2, r3]
 80003ba:	3a01      	subs	r2, #1
 80003bc:	b2d1      	uxtb	r1, r2
 80003be:	4a26      	ldr	r2, [pc, #152]	; (8000458 <Current_Control_Loop+0x1a4>)
 80003c0:	54d1      	strb	r1, [r2, r3]
							restart_timeout_ref[adc_channels_idx] = htim17.Instance->CNT;
 80003c2:	4b1e      	ldr	r3, [pc, #120]	; (800043c <Current_Control_Loop+0x188>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80003c8:	183b      	adds	r3, r7, r0
 80003ca:	781a      	ldrb	r2, [r3, #0]
 80003cc:	b289      	uxth	r1, r1
 80003ce:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <Current_Control_Loop+0x18c>)
 80003d0:	0052      	lsls	r2, r2, #1
 80003d2:	52d1      	strh	r1, [r2, r3]
							channel_states[adc_channels_idx] = RESTART_OFF;
 80003d4:	183b      	adds	r3, r7, r0
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	4a17      	ldr	r2, [pc, #92]	; (8000438 <Current_Control_Loop+0x184>)
 80003da:	2101      	movs	r1, #1
 80003dc:	54d1      	strb	r1, [r2, r3]
 80003de:	e005      	b.n	80003ec <Current_Control_Loop+0x138>
						} else {
							channel_states[adc_channels_idx] = PERMANENT_OFF;
 80003e0:	230f      	movs	r3, #15
 80003e2:	18fb      	adds	r3, r7, r3
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	4a14      	ldr	r2, [pc, #80]	; (8000438 <Current_Control_Loop+0x184>)
 80003e8:	2102      	movs	r1, #2
 80003ea:	54d1      	strb	r1, [r2, r3]
						}
					}

					channel_data_states[adc_channels_idx] = USED;
 80003ec:	230f      	movs	r3, #15
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	4a17      	ldr	r2, [pc, #92]	; (8000450 <Current_Control_Loop+0x19c>)
 80003f4:	2101      	movs	r1, #1
 80003f6:	54d1      	strb	r1, [r2, r3]
				} else {
					HAL_ADC_Start_DMA(&hadc, (uint32_t*)current_buffer, NUM_ADC_CHANNELS);
				}
				break;
 80003f8:	e00c      	b.n	8000414 <Current_Control_Loop+0x160>
					HAL_ADC_Start_DMA(&hadc, (uint32_t*)current_buffer, NUM_ADC_CHANNELS);
 80003fa:	490e      	ldr	r1, [pc, #56]	; (8000434 <Current_Control_Loop+0x180>)
 80003fc:	4b17      	ldr	r3, [pc, #92]	; (800045c <Current_Control_Loop+0x1a8>)
 80003fe:	2203      	movs	r2, #3
 8000400:	0018      	movs	r0, r3
 8000402:	f000 fecb 	bl	800119c <HAL_ADC_Start_DMA>
				break;
 8000406:	e005      	b.n	8000414 <Current_Control_Loop+0x160>

			default:
				Error_Handler();
 8000408:	f000 fafc 	bl	8000a04 <Error_Handler>
				break;
 800040c:	e002      	b.n	8000414 <Current_Control_Loop+0x160>
				break;
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	e000      	b.n	8000414 <Current_Control_Loop+0x160>
				break;
 8000412:	46c0      	nop			; (mov r8, r8)
		}

		//Log_CAN_Messages();

		adc_channels_idx++;
 8000414:	210f      	movs	r1, #15
 8000416:	187b      	adds	r3, r7, r1
 8000418:	781a      	ldrb	r2, [r3, #0]
 800041a:	187b      	adds	r3, r7, r1
 800041c:	3201      	adds	r2, #1
 800041e:	701a      	strb	r2, [r3, #0]
		if (adc_channels_idx >= NUM_ADC_CHANNELS) {
 8000420:	187b      	adds	r3, r7, r1
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b02      	cmp	r3, #2
 8000426:	d800      	bhi.n	800042a <Current_Control_Loop+0x176>
 8000428:	e74b      	b.n	80002c2 <Current_Control_Loop+0xe>
			adc_channels_idx = 0;
 800042a:	230f      	movs	r3, #15
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	2200      	movs	r2, #0
 8000430:	701a      	strb	r2, [r3, #0]
		adc_val = current_buffer[adc_channels_idx];
 8000432:	e746      	b.n	80002c2 <Current_Control_Loop+0xe>
 8000434:	20000054 	.word	0x20000054
 8000438:	2000005c 	.word	0x2000005c
 800043c:	20001968 	.word	0x20001968
 8000440:	20000060 	.word	0x20000060
 8000444:	000003e7 	.word	0x000003e7
 8000448:	2000001c 	.word	0x2000001c
 800044c:	48000400 	.word	0x48000400
 8000450:	20000008 	.word	0x20000008
 8000454:	2000000c 	.word	0x2000000c
 8000458:	20000018 	.word	0x20000018
 800045c:	20001a9c 	.word	0x20001a9c

08000460 <HAL_ADC_ConvCpltCallback>:
}



// Callbacks / ISRs
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* adc_handle) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	U8 i;

	last_adc_interrupt_delta = this_adc_interrupt_delta;
 8000468:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <HAL_ADC_ConvCpltCallback+0x60>)
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <HAL_ADC_ConvCpltCallback+0x64>)
 800046e:	601a      	str	r2, [r3, #0]
	this_adc_interrupt_delta = (U16)htim16.Instance->CNT;
 8000470:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <HAL_ADC_ConvCpltCallback+0x68>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000476:	b29b      	uxth	r3, r3
 8000478:	001a      	movs	r2, r3
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <HAL_ADC_ConvCpltCallback+0x60>)
 800047c:	601a      	str	r2, [r3, #0]
	htim16.Instance->CNT = 0;
 800047e:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <HAL_ADC_ConvCpltCallback+0x68>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2200      	movs	r2, #0
 8000484:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim16);
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <HAL_ADC_ConvCpltCallback+0x68>)
 8000488:	0018      	movs	r0, r3
 800048a:	f002 fe63 	bl	8003154 <HAL_TIM_Base_Start>

	for (i = 0; i < NUM_ADC_CHANNELS; i++) {
 800048e:	230f      	movs	r3, #15
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	2200      	movs	r2, #0
 8000494:	701a      	strb	r2, [r3, #0]
 8000496:	e00a      	b.n	80004ae <HAL_ADC_ConvCpltCallback+0x4e>
		// Reset data states when next round of ADC data is in
		channel_data_states[i] = UNUSED;
 8000498:	200f      	movs	r0, #15
 800049a:	183b      	adds	r3, r7, r0
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	4a0b      	ldr	r2, [pc, #44]	; (80004cc <HAL_ADC_ConvCpltCallback+0x6c>)
 80004a0:	2100      	movs	r1, #0
 80004a2:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < NUM_ADC_CHANNELS; i++) {
 80004a4:	183b      	adds	r3, r7, r0
 80004a6:	781a      	ldrb	r2, [r3, #0]
 80004a8:	183b      	adds	r3, r7, r0
 80004aa:	3201      	adds	r2, #1
 80004ac:	701a      	strb	r2, [r3, #0]
 80004ae:	230f      	movs	r3, #15
 80004b0:	18fb      	adds	r3, r7, r3
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b02      	cmp	r3, #2
 80004b6:	d9ef      	bls.n	8000498 <HAL_ADC_ConvCpltCallback+0x38>
	}
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b004      	add	sp, #16
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000050 	.word	0x20000050
 80004c4:	2000004c 	.word	0x2000004c
 80004c8:	20001adc 	.word	0x20001adc
 80004cc:	20000008 	.word	0x20000008

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fcd0 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f836 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f9da 	bl	8000894 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e0:	f000 f9ba 	bl	8000858 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f988 	bl	80007f8 <MX_USART2_UART_Init>
  MX_ADC_Init();
 80004e8:	f000 f888 	bl	80005fc <MX_ADC_Init>
  MX_CAN_Init();
 80004ec:	f000 f8fc 	bl	80006e8 <MX_CAN_Init>
  MX_TIM16_Init();
 80004f0:	f000 f930 	bl	8000754 <MX_TIM16_Init>
  MX_TIM17_Init();
 80004f4:	f000 f956 	bl	80007a4 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */



  // **** ALL CONFIG CALLS HERE***************************************
  PDM_Init();
 80004f8:	f7ff fe92 	bl	8000220 <PDM_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fc:	f003 fbcc 	bl	8003c98 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Channel_control */
  Channel_controlHandle = osThreadNew(ADC_Channel_Control, NULL, &Channel_control_attributes);
 8000500:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <main+0x60>)
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <main+0x64>)
 8000504:	2100      	movs	r1, #0
 8000506:	0018      	movs	r0, r3
 8000508:	f003 fc20 	bl	8003d4c <osThreadNew>
 800050c:	0002      	movs	r2, r0
 800050e:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <main+0x68>)
 8000510:	601a      	str	r2, [r3, #0]

  /* creation of CAN_TX_task */
  CAN_TX_taskHandle = osThreadNew(CAN_TX, NULL, &CAN_TX_task_attributes);
 8000512:	4a0a      	ldr	r2, [pc, #40]	; (800053c <main+0x6c>)
 8000514:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <main+0x70>)
 8000516:	2100      	movs	r1, #0
 8000518:	0018      	movs	r0, r3
 800051a:	f003 fc17 	bl	8003d4c <osThreadNew>
 800051e:	0002      	movs	r2, r0
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <main+0x74>)
 8000522:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000524:	f003 fbe4 	bl	8003cf0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Error_Handler();
 8000528:	f000 fa6c 	bl	8000a04 <Error_Handler>
 800052c:	e7fc      	b.n	8000528 <main+0x58>
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	080061b4 	.word	0x080061b4
 8000534:	080009b9 	.word	0x080009b9
 8000538:	200019d0 	.word	0x200019d0
 800053c:	080061d8 	.word	0x080061d8
 8000540:	080009cb 	.word	0x080009cb
 8000544:	200019d4 	.word	0x200019d4

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b099      	sub	sp, #100	; 0x64
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	242c      	movs	r4, #44	; 0x2c
 8000550:	193b      	adds	r3, r7, r4
 8000552:	0018      	movs	r0, r3
 8000554:	2334      	movs	r3, #52	; 0x34
 8000556:	001a      	movs	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	f005 fdec 	bl	8006136 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055e:	231c      	movs	r3, #28
 8000560:	18fb      	adds	r3, r7, r3
 8000562:	0018      	movs	r0, r3
 8000564:	2310      	movs	r3, #16
 8000566:	001a      	movs	r2, r3
 8000568:	2100      	movs	r1, #0
 800056a:	f005 fde4 	bl	8006136 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800056e:	003b      	movs	r3, r7
 8000570:	0018      	movs	r0, r3
 8000572:	231c      	movs	r3, #28
 8000574:	001a      	movs	r2, r3
 8000576:	2100      	movs	r1, #0
 8000578:	f005 fddd 	bl	8006136 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 800057c:	0021      	movs	r1, r4
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2230      	movs	r2, #48	; 0x30
 8000582:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2201      	movs	r2, #1
 8000588:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2201      	movs	r2, #1
 800058e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2210      	movs	r2, #16
 8000594:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	187b      	adds	r3, r7, r1
 800059e:	0018      	movs	r0, r3
 80005a0:	f001 ff84 	bl	80024ac <HAL_RCC_OscConfig>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x64>
  {
    Error_Handler();
 80005a8:	f000 fa2c 	bl	8000a04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	211c      	movs	r1, #28
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2207      	movs	r2, #7
 80005b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2203      	movs	r2, #3
 80005b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2101      	movs	r1, #1
 80005ca:	0018      	movs	r0, r3
 80005cc:	f002 faf4 	bl	8002bb8 <HAL_RCC_ClockConfig>
 80005d0:	1e03      	subs	r3, r0, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005d4:	f000 fa16 	bl	8000a04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005d8:	003b      	movs	r3, r7
 80005da:	2202      	movs	r2, #2
 80005dc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005de:	003b      	movs	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e4:	003b      	movs	r3, r7
 80005e6:	0018      	movs	r0, r3
 80005e8:	f002 fc88 	bl	8002efc <HAL_RCCEx_PeriphCLKConfig>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005f0:	f000 fa08 	bl	8000a04 <Error_Handler>
  }
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b019      	add	sp, #100	; 0x64
 80005fa:	bd90      	pop	{r4, r7, pc}

080005fc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	0018      	movs	r0, r3
 8000606:	230c      	movs	r3, #12
 8000608:	001a      	movs	r2, r3
 800060a:	2100      	movs	r1, #0
 800060c:	f005 fd93 	bl	8006136 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <MX_ADC_Init+0xe4>)
 8000612:	4a34      	ldr	r2, [pc, #208]	; (80006e4 <MX_ADC_Init+0xe8>)
 8000614:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000616:	4b32      	ldr	r3, [pc, #200]	; (80006e0 <MX_ADC_Init+0xe4>)
 8000618:	2200      	movs	r2, #0
 800061a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800061c:	4b30      	ldr	r3, [pc, #192]	; (80006e0 <MX_ADC_Init+0xe4>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <MX_ADC_Init+0xe4>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <MX_ADC_Init+0xe4>)
 800062a:	2201      	movs	r2, #1
 800062c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800062e:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <MX_ADC_Init+0xe4>)
 8000630:	2208      	movs	r2, #8
 8000632:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <MX_ADC_Init+0xe4>)
 8000636:	2200      	movs	r2, #0
 8000638:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800063a:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <MX_ADC_Init+0xe4>)
 800063c:	2200      	movs	r2, #0
 800063e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <MX_ADC_Init+0xe4>)
 8000642:	2200      	movs	r2, #0
 8000644:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000646:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <MX_ADC_Init+0xe4>)
 8000648:	2200      	movs	r2, #0
 800064a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <MX_ADC_Init+0xe4>)
 800064e:	22c2      	movs	r2, #194	; 0xc2
 8000650:	32ff      	adds	r2, #255	; 0xff
 8000652:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <MX_ADC_Init+0xe4>)
 8000656:	2200      	movs	r2, #0
 8000658:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800065a:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MX_ADC_Init+0xe4>)
 800065c:	2224      	movs	r2, #36	; 0x24
 800065e:	2101      	movs	r1, #1
 8000660:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000662:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <MX_ADC_Init+0xe4>)
 8000664:	2200      	movs	r2, #0
 8000666:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000668:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <MX_ADC_Init+0xe4>)
 800066a:	0018      	movs	r0, r3
 800066c:	f000 fc56 	bl	8000f1c <HAL_ADC_Init>
 8000670:	1e03      	subs	r3, r0, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000674:	f000 f9c6 	bl	8000a04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2280      	movs	r2, #128	; 0x80
 8000682:	0152      	lsls	r2, r2, #5
 8000684:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2280      	movs	r2, #128	; 0x80
 800068a:	0552      	lsls	r2, r2, #21
 800068c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800068e:	1d3a      	adds	r2, r7, #4
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_ADC_Init+0xe4>)
 8000692:	0011      	movs	r1, r2
 8000694:	0018      	movs	r0, r3
 8000696:	f000 fe81 	bl	800139c <HAL_ADC_ConfigChannel>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800069e:	f000 f9b1 	bl	8000a04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2201      	movs	r2, #1
 80006a6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006a8:	1d3a      	adds	r2, r7, #4
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <MX_ADC_Init+0xe4>)
 80006ac:	0011      	movs	r1, r2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fe74 	bl	800139c <HAL_ADC_ConfigChannel>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80006b8:	f000 f9a4 	bl	8000a04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2204      	movs	r2, #4
 80006c0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006c2:	1d3a      	adds	r2, r7, #4
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_ADC_Init+0xe4>)
 80006c6:	0011      	movs	r1, r2
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fe67 	bl	800139c <HAL_ADC_ConfigChannel>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80006d2:	f000 f997 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b004      	add	sp, #16
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	20001a9c 	.word	0x20001a9c
 80006e4:	40012400 	.word	0x40012400

080006e8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_CAN_Init+0x64>)
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <MX_CAN_Init+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_CAN_Init+0x64>)
 80006f4:	2206      	movs	r2, #6
 80006f6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_CAN_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_CAN_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_CAN_Init+0x64>)
 8000706:	22a0      	movs	r2, #160	; 0xa0
 8000708:	02d2      	lsls	r2, r2, #11
 800070a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_CAN_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_CAN_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_CAN_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_CAN_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_CAN_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_CAN_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_CAN_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <MX_CAN_Init+0x64>)
 8000738:	0018      	movs	r0, r3
 800073a:	f001 f98b 	bl	8001a54 <HAL_CAN_Init>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000742:	f000 f95f 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200019a8 	.word	0x200019a8
 8000750:	40006400 	.word	0x40006400

08000754 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_TIM16_Init+0x44>)
 800075a:	4a10      	ldr	r2, [pc, #64]	; (800079c <MX_TIM16_Init+0x48>)
 800075c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_TIM16_Init+0x44>)
 8000760:	2230      	movs	r2, #48	; 0x30
 8000762:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_TIM16_Init+0x44>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0xFFFF;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_TIM16_Init+0x44>)
 800076c:	4a0c      	ldr	r2, [pc, #48]	; (80007a0 <MX_TIM16_Init+0x4c>)
 800076e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_TIM16_Init+0x44>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_TIM16_Init+0x44>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_TIM16_Init+0x44>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <MX_TIM16_Init+0x44>)
 8000784:	0018      	movs	r0, r3
 8000786:	f002 fcb9 	bl	80030fc <HAL_TIM_Base_Init>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800078e:	f000 f939 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20001adc 	.word	0x20001adc
 800079c:	40014400 	.word	0x40014400
 80007a0:	0000ffff 	.word	0x0000ffff

080007a4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_TIM17_Init+0x44>)
 80007aa:	4a10      	ldr	r2, [pc, #64]	; (80007ec <MX_TIM17_Init+0x48>)
 80007ac:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48000;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_TIM17_Init+0x44>)
 80007b0:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <MX_TIM17_Init+0x4c>)
 80007b2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_TIM17_Init+0x44>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 0xFFFF;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_TIM17_Init+0x44>)
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <MX_TIM17_Init+0x50>)
 80007be:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_TIM17_Init+0x44>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_TIM17_Init+0x44>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_TIM17_Init+0x44>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80007d2:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <MX_TIM17_Init+0x44>)
 80007d4:	0018      	movs	r0, r3
 80007d6:	f002 fc91 	bl	80030fc <HAL_TIM_Base_Init>
 80007da:	1e03      	subs	r3, r0, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80007de:	f000 f911 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20001968 	.word	0x20001968
 80007ec:	40014800 	.word	0x40014800
 80007f0:	0000bb80 	.word	0x0000bb80
 80007f4:	0000ffff 	.word	0x0000ffff

080007f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_USART2_UART_Init+0x58>)
 80007fe:	4a15      	ldr	r2, [pc, #84]	; (8000854 <MX_USART2_UART_Init+0x5c>)
 8000800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000804:	2296      	movs	r2, #150	; 0x96
 8000806:	0212      	lsls	r2, r2, #8
 8000808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART2_UART_Init+0x58>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART2_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART2_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <MX_USART2_UART_Init+0x58>)
 800083c:	0018      	movs	r0, r3
 800083e:	f002 fe93 	bl	8003568 <HAL_UART_Init>
 8000842:	1e03      	subs	r3, r0, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000846:	f000 f8dd 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200019d8 	.word	0x200019d8
 8000854:	40004400 	.word	0x40004400

08000858 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_DMA_Init+0x38>)
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_DMA_Init+0x38>)
 8000864:	2101      	movs	r1, #1
 8000866:	430a      	orrs	r2, r1
 8000868:	615a      	str	r2, [r3, #20]
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_DMA_Init+0x38>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	2201      	movs	r2, #1
 8000870:	4013      	ands	r3, r2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2103      	movs	r1, #3
 800087a:	2009      	movs	r0, #9
 800087c:	f001 fa70 	bl	8001d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000880:	2009      	movs	r0, #9
 8000882:	f001 fa82 	bl	8001d8a <HAL_NVIC_EnableIRQ>

}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b002      	add	sp, #8
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	40021000 	.word	0x40021000

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b08b      	sub	sp, #44	; 0x2c
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	2414      	movs	r4, #20
 800089c:	193b      	adds	r3, r7, r4
 800089e:	0018      	movs	r0, r3
 80008a0:	2314      	movs	r3, #20
 80008a2:	001a      	movs	r2, r3
 80008a4:	2100      	movs	r1, #0
 80008a6:	f005 fc46 	bl	8006136 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	4b3f      	ldr	r3, [pc, #252]	; (80009a8 <MX_GPIO_Init+0x114>)
 80008ac:	695a      	ldr	r2, [r3, #20]
 80008ae:	4b3e      	ldr	r3, [pc, #248]	; (80009a8 <MX_GPIO_Init+0x114>)
 80008b0:	2180      	movs	r1, #128	; 0x80
 80008b2:	0309      	lsls	r1, r1, #12
 80008b4:	430a      	orrs	r2, r1
 80008b6:	615a      	str	r2, [r3, #20]
 80008b8:	4b3b      	ldr	r3, [pc, #236]	; (80009a8 <MX_GPIO_Init+0x114>)
 80008ba:	695a      	ldr	r2, [r3, #20]
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	031b      	lsls	r3, r3, #12
 80008c0:	4013      	ands	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c6:	4b38      	ldr	r3, [pc, #224]	; (80009a8 <MX_GPIO_Init+0x114>)
 80008c8:	695a      	ldr	r2, [r3, #20]
 80008ca:	4b37      	ldr	r3, [pc, #220]	; (80009a8 <MX_GPIO_Init+0x114>)
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	03c9      	lsls	r1, r1, #15
 80008d0:	430a      	orrs	r2, r1
 80008d2:	615a      	str	r2, [r3, #20]
 80008d4:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <MX_GPIO_Init+0x114>)
 80008d6:	695a      	ldr	r2, [r3, #20]
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	03db      	lsls	r3, r3, #15
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b31      	ldr	r3, [pc, #196]	; (80009a8 <MX_GPIO_Init+0x114>)
 80008e4:	695a      	ldr	r2, [r3, #20]
 80008e6:	4b30      	ldr	r3, [pc, #192]	; (80009a8 <MX_GPIO_Init+0x114>)
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	0289      	lsls	r1, r1, #10
 80008ec:	430a      	orrs	r2, r1
 80008ee:	615a      	str	r2, [r3, #20]
 80008f0:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <MX_GPIO_Init+0x114>)
 80008f2:	695a      	ldr	r2, [r3, #20]
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	029b      	lsls	r3, r3, #10
 80008f8:	4013      	ands	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <MX_GPIO_Init+0x114>)
 8000900:	695a      	ldr	r2, [r3, #20]
 8000902:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <MX_GPIO_Init+0x114>)
 8000904:	2180      	movs	r1, #128	; 0x80
 8000906:	02c9      	lsls	r1, r1, #11
 8000908:	430a      	orrs	r2, r1
 800090a:	615a      	str	r2, [r3, #20]
 800090c:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <MX_GPIO_Init+0x114>)
 800090e:	695a      	ldr	r2, [r3, #20]
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	02db      	lsls	r3, r3, #11
 8000914:	4013      	ands	r3, r2
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800091a:	2390      	movs	r3, #144	; 0x90
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	2200      	movs	r2, #0
 8000920:	2120      	movs	r1, #32
 8000922:	0018      	movs	r0, r3
 8000924:	f001 fd8a 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000928:	4b20      	ldr	r3, [pc, #128]	; (80009ac <MX_GPIO_Init+0x118>)
 800092a:	2200      	movs	r2, #0
 800092c:	2138      	movs	r1, #56	; 0x38
 800092e:	0018      	movs	r0, r3
 8000930:	f001 fd84 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2280      	movs	r2, #128	; 0x80
 8000938:	0192      	lsls	r2, r2, #6
 800093a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800093c:	193b      	adds	r3, r7, r4
 800093e:	4a1c      	ldr	r2, [pc, #112]	; (80009b0 <MX_GPIO_Init+0x11c>)
 8000940:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	193b      	adds	r3, r7, r4
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000948:	193b      	adds	r3, r7, r4
 800094a:	4a1a      	ldr	r2, [pc, #104]	; (80009b4 <MX_GPIO_Init+0x120>)
 800094c:	0019      	movs	r1, r3
 800094e:	0010      	movs	r0, r2
 8000950:	f001 fbfc 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000954:	193b      	adds	r3, r7, r4
 8000956:	2220      	movs	r2, #32
 8000958:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	193b      	adds	r3, r7, r4
 800095c:	2201      	movs	r2, #1
 800095e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	193b      	adds	r3, r7, r4
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	193b      	adds	r3, r7, r4
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800096c:	193a      	adds	r2, r7, r4
 800096e:	2390      	movs	r3, #144	; 0x90
 8000970:	05db      	lsls	r3, r3, #23
 8000972:	0011      	movs	r1, r2
 8000974:	0018      	movs	r0, r3
 8000976:	f001 fbe9 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800097a:	0021      	movs	r1, r4
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2238      	movs	r2, #56	; 0x38
 8000980:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2201      	movs	r2, #1
 8000986:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000994:	187b      	adds	r3, r7, r1
 8000996:	4a05      	ldr	r2, [pc, #20]	; (80009ac <MX_GPIO_Init+0x118>)
 8000998:	0019      	movs	r1, r3
 800099a:	0010      	movs	r0, r2
 800099c:	f001 fbd6 	bl	800214c <HAL_GPIO_Init>

}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b00b      	add	sp, #44	; 0x2c
 80009a6:	bd90      	pop	{r4, r7, pc}
 80009a8:	40021000 	.word	0x40021000
 80009ac:	48000400 	.word	0x48000400
 80009b0:	10210000 	.word	0x10210000
 80009b4:	48000800 	.word	0x48000800

080009b8 <ADC_Channel_Control>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_ADC_Channel_Control */
void ADC_Channel_Control(void *argument)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	Current_Control_Loop();
 80009c0:	f7ff fc78 	bl	80002b4 <Current_Control_Loop>
    Error_Handler();
 80009c4:	f000 f81e 	bl	8000a04 <Error_Handler>
	Current_Control_Loop();
 80009c8:	e7fa      	b.n	80009c0 <ADC_Channel_Control+0x8>

080009ca <CAN_TX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_TX */
void CAN_TX(void *argument)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_TX */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80009d2:	23fa      	movs	r3, #250	; 0xfa
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f003 fa60 	bl	8003e9c <osDelay>
 80009dc:	e7f9      	b.n	80009d2 <CAN_TX+0x8>
	...

080009e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d101      	bne.n	80009f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009f2:	f000 fa55 	bl	8000ea0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b002      	add	sp, #8
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	40002000 	.word	0x40002000

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	HAL_ADC_Stop_DMA(&hadc);
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <Error_Handler+0x34>)
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 fc48 	bl	80012a0 <HAL_ADC_Stop_DMA>
	// Infinitely flash nucelo LD2 in event of an error
	while (1) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a10:	2390      	movs	r3, #144	; 0x90
 8000a12:	05db      	lsls	r3, r3, #23
 8000a14:	2120      	movs	r1, #32
 8000a16:	0018      	movs	r0, r3
 8000a18:	f001 fd2d 	bl	8002476 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8000a1c:	20c8      	movs	r0, #200	; 0xc8
 8000a1e:	f000 fa5b 	bl	8000ed8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a22:	2390      	movs	r3, #144	; 0x90
 8000a24:	05db      	lsls	r3, r3, #23
 8000a26:	2120      	movs	r1, #32
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f001 fd24 	bl	8002476 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8000a2e:	20c8      	movs	r0, #200	; 0xc8
 8000a30:	f000 fa52 	bl	8000ed8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a34:	e7ec      	b.n	8000a10 <Error_Handler+0xc>
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	20001a9c 	.word	0x20001a9c

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_MspInit+0x50>)
 8000a44:	699a      	ldr	r2, [r3, #24]
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_MspInit+0x50>)
 8000a48:	2101      	movs	r1, #1
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	619a      	str	r2, [r3, #24]
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_MspInit+0x50>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	2201      	movs	r2, #1
 8000a54:	4013      	ands	r3, r2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_MspInit+0x50>)
 8000a5c:	69da      	ldr	r2, [r3, #28]
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_MspInit+0x50>)
 8000a60:	2180      	movs	r1, #128	; 0x80
 8000a62:	0549      	lsls	r1, r1, #21
 8000a64:	430a      	orrs	r2, r1
 8000a66:	61da      	str	r2, [r3, #28]
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_MspInit+0x50>)
 8000a6a:	69da      	ldr	r2, [r3, #28]
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	055b      	lsls	r3, r3, #21
 8000a70:	4013      	ands	r3, r2
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000a76:	2302      	movs	r3, #2
 8000a78:	425b      	negs	r3, r3
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2103      	movs	r1, #3
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f001 f96e 	bl	8001d60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b002      	add	sp, #8
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40021000 	.word	0x40021000

08000a90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	2314      	movs	r3, #20
 8000a9a:	18fb      	adds	r3, r7, r3
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	2314      	movs	r3, #20
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	f005 fb47 	bl	8006136 <memset>
  if(hadc->Instance==ADC1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a2e      	ldr	r2, [pc, #184]	; (8000b68 <HAL_ADC_MspInit+0xd8>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d155      	bne.n	8000b5e <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ab2:	4b2e      	ldr	r3, [pc, #184]	; (8000b6c <HAL_ADC_MspInit+0xdc>)
 8000ab4:	699a      	ldr	r2, [r3, #24]
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <HAL_ADC_MspInit+0xdc>)
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	0089      	lsls	r1, r1, #2
 8000abc:	430a      	orrs	r2, r1
 8000abe:	619a      	str	r2, [r3, #24]
 8000ac0:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <HAL_ADC_MspInit+0xdc>)
 8000ac2:	699a      	ldr	r2, [r3, #24]
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <HAL_ADC_MspInit+0xdc>)
 8000ad0:	695a      	ldr	r2, [r3, #20]
 8000ad2:	4b26      	ldr	r3, [pc, #152]	; (8000b6c <HAL_ADC_MspInit+0xdc>)
 8000ad4:	2180      	movs	r1, #128	; 0x80
 8000ad6:	0289      	lsls	r1, r1, #10
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	615a      	str	r2, [r3, #20]
 8000adc:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <HAL_ADC_MspInit+0xdc>)
 8000ade:	695a      	ldr	r2, [r3, #20]
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	029b      	lsls	r3, r3, #10
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000aea:	2114      	movs	r1, #20
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2213      	movs	r2, #19
 8000af0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2203      	movs	r2, #3
 8000af6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	187a      	adds	r2, r7, r1
 8000b00:	2390      	movs	r3, #144	; 0x90
 8000b02:	05db      	lsls	r3, r3, #23
 8000b04:	0011      	movs	r1, r2
 8000b06:	0018      	movs	r0, r3
 8000b08:	f001 fb20 	bl	800214c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000b0c:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <HAL_ADC_MspInit+0xe0>)
 8000b0e:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <HAL_ADC_MspInit+0xe4>)
 8000b10:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <HAL_ADC_MspInit+0xe0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_ADC_MspInit+0xe0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <HAL_ADC_MspInit+0xe0>)
 8000b20:	2280      	movs	r2, #128	; 0x80
 8000b22:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_ADC_MspInit+0xe0>)
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	0052      	lsls	r2, r2, #1
 8000b2a:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b2c:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <HAL_ADC_MspInit+0xe0>)
 8000b2e:	2280      	movs	r2, #128	; 0x80
 8000b30:	00d2      	lsls	r2, r2, #3
 8000b32:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8000b34:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_ADC_MspInit+0xe0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <HAL_ADC_MspInit+0xe0>)
 8000b3c:	22c0      	movs	r2, #192	; 0xc0
 8000b3e:	0192      	lsls	r2, r2, #6
 8000b40:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <HAL_ADC_MspInit+0xe0>)
 8000b44:	0018      	movs	r0, r3
 8000b46:	f001 f931 	bl	8001dac <HAL_DMA_Init>
 8000b4a:	1e03      	subs	r3, r0, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000b4e:	f7ff ff59 	bl	8000a04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <HAL_ADC_MspInit+0xe0>)
 8000b56:	631a      	str	r2, [r3, #48]	; 0x30
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_ADC_MspInit+0xe0>)
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b00a      	add	sp, #40	; 0x28
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	40012400 	.word	0x40012400
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	20001a58 	.word	0x20001a58
 8000b74:	40020008 	.word	0x40020008

08000b78 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	2314      	movs	r3, #20
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	0018      	movs	r0, r3
 8000b86:	2314      	movs	r3, #20
 8000b88:	001a      	movs	r2, r3
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	f005 fad3 	bl	8006136 <memset>
  if(hcan->Instance==CAN)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a1d      	ldr	r2, [pc, #116]	; (8000c0c <HAL_CAN_MspInit+0x94>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d133      	bne.n	8000c02 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <HAL_CAN_MspInit+0x98>)
 8000b9c:	69da      	ldr	r2, [r3, #28]
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <HAL_CAN_MspInit+0x98>)
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	0489      	lsls	r1, r1, #18
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	61da      	str	r2, [r3, #28]
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <HAL_CAN_MspInit+0x98>)
 8000baa:	69da      	ldr	r2, [r3, #28]
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	049b      	lsls	r3, r3, #18
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <HAL_CAN_MspInit+0x98>)
 8000bb8:	695a      	ldr	r2, [r3, #20]
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_CAN_MspInit+0x98>)
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	0289      	lsls	r1, r1, #10
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	615a      	str	r2, [r3, #20]
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_CAN_MspInit+0x98>)
 8000bc6:	695a      	ldr	r2, [r3, #20]
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	029b      	lsls	r3, r3, #10
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000bd2:	2114      	movs	r1, #20
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	22c0      	movs	r2, #192	; 0xc0
 8000bd8:	0152      	lsls	r2, r2, #5
 8000bda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2202      	movs	r2, #2
 8000be0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2203      	movs	r2, #3
 8000bec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2204      	movs	r2, #4
 8000bf2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	187a      	adds	r2, r7, r1
 8000bf6:	2390      	movs	r3, #144	; 0x90
 8000bf8:	05db      	lsls	r3, r3, #23
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f001 faa5 	bl	800214c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b00a      	add	sp, #40	; 0x28
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	40006400 	.word	0x40006400
 8000c10:	40021000 	.word	0x40021000

08000c14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <HAL_TIM_Base_MspInit+0x60>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d10e      	bne.n	8000c44 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <HAL_TIM_Base_MspInit+0x64>)
 8000c28:	699a      	ldr	r2, [r3, #24]
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <HAL_TIM_Base_MspInit+0x64>)
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	0289      	lsls	r1, r1, #10
 8000c30:	430a      	orrs	r2, r1
 8000c32:	619a      	str	r2, [r3, #24]
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <HAL_TIM_Base_MspInit+0x64>)
 8000c36:	699a      	ldr	r2, [r3, #24]
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	029b      	lsls	r3, r3, #10
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000c42:	e012      	b.n	8000c6a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM17)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0c      	ldr	r2, [pc, #48]	; (8000c7c <HAL_TIM_Base_MspInit+0x68>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d10d      	bne.n	8000c6a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_TIM_Base_MspInit+0x64>)
 8000c50:	699a      	ldr	r2, [r3, #24]
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_TIM_Base_MspInit+0x64>)
 8000c54:	2180      	movs	r1, #128	; 0x80
 8000c56:	02c9      	lsls	r1, r1, #11
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	619a      	str	r2, [r3, #24]
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_TIM_Base_MspInit+0x64>)
 8000c5e:	699a      	ldr	r2, [r3, #24]
 8000c60:	2380      	movs	r3, #128	; 0x80
 8000c62:	02db      	lsls	r3, r3, #11
 8000c64:	4013      	ands	r3, r2
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b004      	add	sp, #16
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	40014400 	.word	0x40014400
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40014800 	.word	0x40014800

08000c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	2314      	movs	r3, #20
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	2314      	movs	r3, #20
 8000c90:	001a      	movs	r2, r3
 8000c92:	2100      	movs	r1, #0
 8000c94:	f005 fa4f 	bl	8006136 <memset>
  if(huart->Instance==USART2)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a1c      	ldr	r2, [pc, #112]	; (8000d10 <HAL_UART_MspInit+0x90>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d132      	bne.n	8000d08 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <HAL_UART_MspInit+0x94>)
 8000ca4:	69da      	ldr	r2, [r3, #28]
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <HAL_UART_MspInit+0x94>)
 8000ca8:	2180      	movs	r1, #128	; 0x80
 8000caa:	0289      	lsls	r1, r1, #10
 8000cac:	430a      	orrs	r2, r1
 8000cae:	61da      	str	r2, [r3, #28]
 8000cb0:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <HAL_UART_MspInit+0x94>)
 8000cb2:	69da      	ldr	r2, [r3, #28]
 8000cb4:	2380      	movs	r3, #128	; 0x80
 8000cb6:	029b      	lsls	r3, r3, #10
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_UART_MspInit+0x94>)
 8000cc0:	695a      	ldr	r2, [r3, #20]
 8000cc2:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <HAL_UART_MspInit+0x94>)
 8000cc4:	2180      	movs	r1, #128	; 0x80
 8000cc6:	0289      	lsls	r1, r1, #10
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	615a      	str	r2, [r3, #20]
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_UART_MspInit+0x94>)
 8000cce:	695a      	ldr	r2, [r3, #20]
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	029b      	lsls	r3, r3, #10
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cda:	2114      	movs	r1, #20
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	220c      	movs	r2, #12
 8000ce0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2202      	movs	r2, #2
 8000ce6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	187a      	adds	r2, r7, r1
 8000cfc:	2390      	movs	r3, #144	; 0x90
 8000cfe:	05db      	lsls	r3, r3, #23
 8000d00:	0011      	movs	r1, r2
 8000d02:	0018      	movs	r0, r3
 8000d04:	f001 fa22 	bl	800214c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b00a      	add	sp, #40	; 0x28
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40004400 	.word	0x40004400
 8000d14:	40021000 	.word	0x40021000

08000d18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM14_IRQn, TickPriority ,0); 
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	0019      	movs	r1, r3
 8000d2e:	2013      	movs	r0, #19
 8000d30:	f001 f816 	bl	8001d60 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM14_IRQn); 
 8000d34:	2013      	movs	r0, #19
 8000d36:	f001 f828 	bl	8001d8a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <HAL_InitTick+0xa8>)
 8000d3c:	69da      	ldr	r2, [r3, #28]
 8000d3e:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <HAL_InitTick+0xa8>)
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	0049      	lsls	r1, r1, #1
 8000d44:	430a      	orrs	r2, r1
 8000d46:	61da      	str	r2, [r3, #28]
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <HAL_InitTick+0xa8>)
 8000d4a:	69da      	ldr	r2, [r3, #28]
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d56:	230c      	movs	r3, #12
 8000d58:	18fa      	adds	r2, r7, r3
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	0011      	movs	r1, r2
 8000d60:	0018      	movs	r0, r3
 8000d62:	f002 f8a1 	bl	8002ea8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d66:	f002 f889 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d70:	4914      	ldr	r1, [pc, #80]	; (8000dc4 <HAL_InitTick+0xac>)
 8000d72:	0018      	movs	r0, r3
 8000d74:	f7ff f9c8 	bl	8000108 <__udivsi3>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0xb0>)
 8000d80:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <HAL_InitTick+0xb4>)
 8000d82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8000d84:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <HAL_InitTick+0xb0>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <HAL_InitTick+0xb8>)
 8000d88:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_InitTick+0xb0>)
 8000d8c:	6a3a      	ldr	r2, [r7, #32]
 8000d8e:	605a      	str	r2, [r3, #4]
  htim14.Init.ClockDivision = 0;
 8000d90:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <HAL_InitTick+0xb0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_InitTick+0xb0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <HAL_InitTick+0xb0>)
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f002 f9ac 	bl	80030fc <HAL_TIM_Base_Init>
 8000da4:	1e03      	subs	r3, r0, #0
 8000da6:	d105      	bne.n	8000db4 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <HAL_InitTick+0xb0>)
 8000daa:	0018      	movs	r0, r3
 8000dac:	f002 f9f4 	bl	8003198 <HAL_TIM_Base_Start_IT>
 8000db0:	0003      	movs	r3, r0
 8000db2:	e000      	b.n	8000db6 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
}
 8000db6:	0018      	movs	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b00a      	add	sp, #40	; 0x28
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	000f4240 	.word	0x000f4240
 8000dc8:	20001b1c 	.word	0x20001b1c
 8000dcc:	40002000 	.word	0x40002000
 8000dd0:	000003e7 	.word	0x000003e7

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 8000de2:	f7ff fe0f 	bl	8000a04 <Error_Handler>
 8000de6:	e7fc      	b.n	8000de2 <HardFault_Handler+0x4>

08000de8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <DMA1_Channel1_IRQHandler+0x14>)
 8000dee:	0018      	movs	r0, r3
 8000df0:	f001 f8c2 	bl	8001f78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	20001a58 	.word	0x20001a58

08000e00 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <TIM14_IRQHandler+0x14>)
 8000e06:	0018      	movs	r0, r3
 8000e08:	f002 f9e8 	bl	80031dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	20001b1c 	.word	0x20001b1c

08000e18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e24:	480d      	ldr	r0, [pc, #52]	; (8000e5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e26:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e2a:	490e      	ldr	r1, [pc, #56]	; (8000e64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e2c:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <LoopForever+0xe>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e40:	4c0b      	ldr	r4, [pc, #44]	; (8000e70 <LoopForever+0x16>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e4e:	f7ff ffe3 	bl	8000e18 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000e52:	f005 f943 	bl	80060dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e56:	f7ff fb3b 	bl	80004d0 <main>

08000e5a <LoopForever>:

LoopForever:
    b LoopForever
 8000e5a:	e7fe      	b.n	8000e5a <LoopForever>
  ldr   r0, =_estack
 8000e5c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000e68:	08006244 	.word	0x08006244
  ldr r2, =_sbss
 8000e6c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000e70:	20001ba0 	.word	0x20001ba0

08000e74 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC1_COMP_IRQHandler>
	...

08000e78 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <HAL_Init+0x24>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_Init+0x24>)
 8000e82:	2110      	movs	r1, #16
 8000e84:	430a      	orrs	r2, r1
 8000e86:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f7ff ff45 	bl	8000d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8e:	f7ff fdd5 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	0018      	movs	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	40022000 	.word	0x40022000

08000ea0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_IncTick+0x1c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	001a      	movs	r2, r3
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_IncTick+0x20>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	18d2      	adds	r2, r2, r3
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_IncTick+0x20>)
 8000eb2:	601a      	str	r2, [r3, #0]
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	20000028 	.word	0x20000028
 8000ec0:	20001b5c 	.word	0x20001b5c

08000ec4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b02      	ldr	r3, [pc, #8]	; (8000ed4 <HAL_GetTick+0x10>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	20001b5c 	.word	0x20001b5c

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff fff0 	bl	8000ec4 <HAL_GetTick>
 8000ee4:	0003      	movs	r3, r0
 8000ee6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <HAL_Delay+0x40>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	001a      	movs	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	189b      	adds	r3, r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	f7ff ffe0 	bl	8000ec4 <HAL_GetTick>
 8000f04:	0002      	movs	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b004      	add	sp, #16
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000028 	.word	0x20000028

08000f1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f24:	230f      	movs	r3, #15
 8000f26:	18fb      	adds	r3, r7, r3
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d101      	bne.n	8000f3a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e125      	b.n	8001186 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10a      	bne.n	8000f58 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2234      	movs	r2, #52	; 0x34
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	0018      	movs	r0, r3
 8000f54:	f7ff fd9c 	bl	8000a90 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f5c:	2210      	movs	r2, #16
 8000f5e:	4013      	ands	r3, r2
 8000f60:	d000      	beq.n	8000f64 <HAL_ADC_Init+0x48>
 8000f62:	e103      	b.n	800116c <HAL_ADC_Init+0x250>
 8000f64:	230f      	movs	r3, #15
 8000f66:	18fb      	adds	r3, r7, r3
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d000      	beq.n	8000f70 <HAL_ADC_Init+0x54>
 8000f6e:	e0fd      	b.n	800116c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	2204      	movs	r2, #4
 8000f78:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000f7a:	d000      	beq.n	8000f7e <HAL_ADC_Init+0x62>
 8000f7c:	e0f6      	b.n	800116c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f82:	4a83      	ldr	r2, [pc, #524]	; (8001190 <HAL_ADC_Init+0x274>)
 8000f84:	4013      	ands	r3, r2
 8000f86:	2202      	movs	r2, #2
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	2203      	movs	r2, #3
 8000f96:	4013      	ands	r3, r2
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d112      	bne.n	8000fc2 <HAL_ADC_Init+0xa6>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d009      	beq.n	8000fbe <HAL_ADC_Init+0xa2>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68da      	ldr	r2, [r3, #12]
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	401a      	ands	r2, r3
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d101      	bne.n	8000fc2 <HAL_ADC_Init+0xa6>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <HAL_ADC_Init+0xa8>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d116      	bne.n	8000ff6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	2218      	movs	r2, #24
 8000fd0:	4393      	bics	r3, r2
 8000fd2:	0019      	movs	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	0899      	lsrs	r1, r3, #2
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4964      	ldr	r1, [pc, #400]	; (8001194 <HAL_ADC_Init+0x278>)
 8001002:	400a      	ands	r2, r1
 8001004:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7e1b      	ldrb	r3, [r3, #24]
 800100a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7e5b      	ldrb	r3, [r3, #25]
 8001010:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001012:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7e9b      	ldrb	r3, [r3, #26]
 8001018:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800101a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001020:	2b01      	cmp	r3, #1
 8001022:	d002      	beq.n	800102a <HAL_ADC_Init+0x10e>
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	015b      	lsls	r3, r3, #5
 8001028:	e000      	b.n	800102c <HAL_ADC_Init+0x110>
 800102a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800102c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001032:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d101      	bne.n	8001040 <HAL_ADC_Init+0x124>
 800103c:	2304      	movs	r3, #4
 800103e:	e000      	b.n	8001042 <HAL_ADC_Init+0x126>
 8001040:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001042:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2124      	movs	r1, #36	; 0x24
 8001048:	5c5b      	ldrb	r3, [r3, r1]
 800104a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800104c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	4313      	orrs	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7edb      	ldrb	r3, [r3, #27]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d115      	bne.n	8001088 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7e9b      	ldrb	r3, [r3, #26]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d105      	bne.n	8001070 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	0252      	lsls	r2, r2, #9
 800106a:	4313      	orrs	r3, r2
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	e00b      	b.n	8001088 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001074:	2220      	movs	r2, #32
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001080:	2201      	movs	r2, #1
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69da      	ldr	r2, [r3, #28]
 800108c:	23c2      	movs	r3, #194	; 0xc2
 800108e:	33ff      	adds	r3, #255	; 0xff
 8001090:	429a      	cmp	r2, r3
 8001092:	d007      	beq.n	80010a4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800109c:	4313      	orrs	r3, r2
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	68d9      	ldr	r1, [r3, #12]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	430a      	orrs	r2, r1
 80010b2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	055b      	lsls	r3, r3, #21
 80010bc:	429a      	cmp	r2, r3
 80010be:	d01b      	beq.n	80010f8 <HAL_ADC_Init+0x1dc>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d017      	beq.n	80010f8 <HAL_ADC_Init+0x1dc>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d013      	beq.n	80010f8 <HAL_ADC_Init+0x1dc>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d00f      	beq.n	80010f8 <HAL_ADC_Init+0x1dc>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010dc:	2b04      	cmp	r3, #4
 80010de:	d00b      	beq.n	80010f8 <HAL_ADC_Init+0x1dc>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e4:	2b05      	cmp	r3, #5
 80010e6:	d007      	beq.n	80010f8 <HAL_ADC_Init+0x1dc>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ec:	2b06      	cmp	r3, #6
 80010ee:	d003      	beq.n	80010f8 <HAL_ADC_Init+0x1dc>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f4:	2b07      	cmp	r3, #7
 80010f6:	d112      	bne.n	800111e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	695a      	ldr	r2, [r3, #20]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2107      	movs	r1, #7
 8001104:	438a      	bics	r2, r1
 8001106:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6959      	ldr	r1, [r3, #20]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001112:	2207      	movs	r2, #7
 8001114:	401a      	ands	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	430a      	orrs	r2, r1
 800111c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	4a1c      	ldr	r2, [pc, #112]	; (8001198 <HAL_ADC_Init+0x27c>)
 8001126:	4013      	ands	r3, r2
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	429a      	cmp	r2, r3
 800112c:	d10b      	bne.n	8001146 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001138:	2203      	movs	r2, #3
 800113a:	4393      	bics	r3, r2
 800113c:	2201      	movs	r2, #1
 800113e:	431a      	orrs	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001144:	e01c      	b.n	8001180 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800114a:	2212      	movs	r2, #18
 800114c:	4393      	bics	r3, r2
 800114e:	2210      	movs	r2, #16
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800115a:	2201      	movs	r2, #1
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001162:	230f      	movs	r3, #15
 8001164:	18fb      	adds	r3, r7, r3
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800116a:	e009      	b.n	8001180 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001170:	2210      	movs	r2, #16
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001178:	230f      	movs	r3, #15
 800117a:	18fb      	adds	r3, r7, r3
 800117c:	2201      	movs	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001180:	230f      	movs	r3, #15
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	781b      	ldrb	r3, [r3, #0]
}
 8001186:	0018      	movs	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	b004      	add	sp, #16
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	fffffefd 	.word	0xfffffefd
 8001194:	fffe0219 	.word	0xfffe0219
 8001198:	833fffe7 	.word	0x833fffe7

0800119c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a8:	2317      	movs	r3, #23
 80011aa:	18fb      	adds	r3, r7, r3
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2204      	movs	r2, #4
 80011b8:	4013      	ands	r3, r2
 80011ba:	d15e      	bne.n	800127a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2234      	movs	r2, #52	; 0x34
 80011c0:	5c9b      	ldrb	r3, [r3, r2]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d101      	bne.n	80011ca <HAL_ADC_Start_DMA+0x2e>
 80011c6:	2302      	movs	r3, #2
 80011c8:	e05e      	b.n	8001288 <HAL_ADC_Start_DMA+0xec>
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2234      	movs	r2, #52	; 0x34
 80011ce:	2101      	movs	r1, #1
 80011d0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	7e5b      	ldrb	r3, [r3, #25]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d007      	beq.n	80011ea <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80011da:	2317      	movs	r3, #23
 80011dc:	18fc      	adds	r4, r7, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	0018      	movs	r0, r3
 80011e2:	f000 f9e9 	bl	80015b8 <ADC_Enable>
 80011e6:	0003      	movs	r3, r0
 80011e8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80011ea:	2317      	movs	r3, #23
 80011ec:	18fb      	adds	r3, r7, r3
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d146      	bne.n	8001282 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f8:	4a25      	ldr	r2, [pc, #148]	; (8001290 <HAL_ADC_Start_DMA+0xf4>)
 80011fa:	4013      	ands	r3, r2
 80011fc:	2280      	movs	r2, #128	; 0x80
 80011fe:	0052      	lsls	r2, r2, #1
 8001200:	431a      	orrs	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2200      	movs	r2, #0
 800120a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2234      	movs	r2, #52	; 0x34
 8001210:	2100      	movs	r1, #0
 8001212:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <HAL_ADC_Start_DMA+0xf8>)
 800121a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	4a1d      	ldr	r2, [pc, #116]	; (8001298 <HAL_ADC_Start_DMA+0xfc>)
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	4a1c      	ldr	r2, [pc, #112]	; (800129c <HAL_ADC_Start_DMA+0x100>)
 800122a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	221c      	movs	r2, #28
 8001232:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2110      	movs	r1, #16
 8001240:	430a      	orrs	r2, r1
 8001242:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68da      	ldr	r2, [r3, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2101      	movs	r1, #1
 8001250:	430a      	orrs	r2, r1
 8001252:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	3340      	adds	r3, #64	; 0x40
 800125e:	0019      	movs	r1, r3
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f000 fdea 	bl	8001e3c <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2104      	movs	r1, #4
 8001274:	430a      	orrs	r2, r1
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	e003      	b.n	8001282 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800127a:	2317      	movs	r3, #23
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	2202      	movs	r2, #2
 8001280:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001282:	2317      	movs	r3, #23
 8001284:	18fb      	adds	r3, r7, r3
 8001286:	781b      	ldrb	r3, [r3, #0]
}
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	b007      	add	sp, #28
 800128e:	bd90      	pop	{r4, r7, pc}
 8001290:	fffff0fe 	.word	0xfffff0fe
 8001294:	08001811 	.word	0x08001811
 8001298:	080018c5 	.word	0x080018c5
 800129c:	080018e3 	.word	0x080018e3

080012a0 <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012a8:	230f      	movs	r3, #15
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2234      	movs	r2, #52	; 0x34
 80012b4:	5c9b      	ldrb	r3, [r3, r2]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d101      	bne.n	80012be <HAL_ADC_Stop_DMA+0x1e>
 80012ba:	2302      	movs	r3, #2
 80012bc:	e058      	b.n	8001370 <HAL_ADC_Stop_DMA+0xd0>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2234      	movs	r2, #52	; 0x34
 80012c2:	2101      	movs	r1, #1
 80012c4:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80012c6:	250f      	movs	r5, #15
 80012c8:	197c      	adds	r4, r7, r5
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	0018      	movs	r0, r3
 80012ce:	f000 fa59 	bl	8001784 <ADC_ConversionStop>
 80012d2:	0003      	movs	r3, r0
 80012d4:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80012d6:	197b      	adds	r3, r7, r5
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d141      	bne.n	8001362 <HAL_ADC_Stop_DMA+0xc2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2101      	movs	r1, #1
 80012ea:	438a      	bics	r2, r1
 80012ec:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	250f      	movs	r5, #15
 80012f4:	197c      	adds	r4, r7, r5
 80012f6:	0018      	movs	r0, r3
 80012f8:	f000 fe06 	bl	8001f08 <HAL_DMA_Abort>
 80012fc:	0003      	movs	r3, r0
 80012fe:	7023      	strb	r3, [r4, #0]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 8001300:	197b      	adds	r3, r7, r5
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <HAL_ADC_Stop_DMA+0x74>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130c:	2240      	movs	r2, #64	; 0x40
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2110      	movs	r1, #16
 8001320:	438a      	bics	r2, r1
 8001322:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8001324:	230f      	movs	r3, #15
 8001326:	18fb      	adds	r3, r7, r3
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d108      	bne.n	8001340 <HAL_ADC_Stop_DMA+0xa0>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800132e:	230f      	movs	r3, #15
 8001330:	18fc      	adds	r4, r7, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	0018      	movs	r0, r3
 8001336:	f000 f9bb 	bl	80016b0 <ADC_Disable>
 800133a:	0003      	movs	r3, r0
 800133c:	7023      	strb	r3, [r4, #0]
 800133e:	e003      	b.n	8001348 <HAL_ADC_Stop_DMA+0xa8>
    }
    else
    {
      ADC_Disable(hadc);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	0018      	movs	r0, r3
 8001344:	f000 f9b4 	bl	80016b0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001348:	230f      	movs	r3, #15
 800134a:	18fb      	adds	r3, r7, r3
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d107      	bne.n	8001362 <HAL_ADC_Stop_DMA+0xc2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <HAL_ADC_Stop_DMA+0xd8>)
 8001358:	4013      	ands	r3, r2
 800135a:	2201      	movs	r2, #1
 800135c:	431a      	orrs	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2234      	movs	r2, #52	; 0x34
 8001366:	2100      	movs	r1, #0
 8001368:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800136a:	230f      	movs	r3, #15
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	781b      	ldrb	r3, [r3, #0]
}
 8001370:	0018      	movs	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	b004      	add	sp, #16
 8001376:	bdb0      	pop	{r4, r5, r7, pc}
 8001378:	fffffefe 	.word	0xfffffefe

0800137c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	b002      	add	sp, #8
 800138a:	bd80      	pop	{r7, pc}

0800138c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001394:	46c0      	nop			; (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b002      	add	sp, #8
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a6:	230f      	movs	r3, #15
 80013a8:	18fb      	adds	r3, r7, r3
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	055b      	lsls	r3, r3, #21
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d011      	beq.n	80013e2 <HAL_ADC_ConfigChannel+0x46>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d00d      	beq.n	80013e2 <HAL_ADC_ConfigChannel+0x46>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d009      	beq.n	80013e2 <HAL_ADC_ConfigChannel+0x46>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	d005      	beq.n	80013e2 <HAL_ADC_ConfigChannel+0x46>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d001      	beq.n	80013e2 <HAL_ADC_ConfigChannel+0x46>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2234      	movs	r2, #52	; 0x34
 80013e6:	5c9b      	ldrb	r3, [r3, r2]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d101      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x54>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e0d0      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1f6>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2234      	movs	r2, #52	; 0x34
 80013f4:	2101      	movs	r1, #1
 80013f6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2204      	movs	r2, #4
 8001400:	4013      	ands	r3, r2
 8001402:	d000      	beq.n	8001406 <HAL_ADC_ConfigChannel+0x6a>
 8001404:	e0b4      	b.n	8001570 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4a64      	ldr	r2, [pc, #400]	; (800159c <HAL_ADC_ConfigChannel+0x200>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d100      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x76>
 8001410:	e082      	b.n	8001518 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2201      	movs	r2, #1
 800141e:	409a      	lsls	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	055b      	lsls	r3, r3, #21
 8001430:	429a      	cmp	r2, r3
 8001432:	d037      	beq.n	80014a4 <HAL_ADC_ConfigChannel+0x108>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001438:	2b01      	cmp	r3, #1
 800143a:	d033      	beq.n	80014a4 <HAL_ADC_ConfigChannel+0x108>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001440:	2b02      	cmp	r3, #2
 8001442:	d02f      	beq.n	80014a4 <HAL_ADC_ConfigChannel+0x108>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001448:	2b03      	cmp	r3, #3
 800144a:	d02b      	beq.n	80014a4 <HAL_ADC_ConfigChannel+0x108>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	2b04      	cmp	r3, #4
 8001452:	d027      	beq.n	80014a4 <HAL_ADC_ConfigChannel+0x108>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	2b05      	cmp	r3, #5
 800145a:	d023      	beq.n	80014a4 <HAL_ADC_ConfigChannel+0x108>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	2b06      	cmp	r3, #6
 8001462:	d01f      	beq.n	80014a4 <HAL_ADC_ConfigChannel+0x108>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	2b07      	cmp	r3, #7
 800146a:	d01b      	beq.n	80014a4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	2107      	movs	r1, #7
 8001478:	400b      	ands	r3, r1
 800147a:	429a      	cmp	r2, r3
 800147c:	d012      	beq.n	80014a4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	695a      	ldr	r2, [r3, #20]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2107      	movs	r1, #7
 800148a:	438a      	bics	r2, r1
 800148c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6959      	ldr	r1, [r3, #20]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2207      	movs	r2, #7
 800149a:	401a      	ands	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b10      	cmp	r3, #16
 80014aa:	d007      	beq.n	80014bc <HAL_ADC_ConfigChannel+0x120>
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b11      	cmp	r3, #17
 80014b2:	d003      	beq.n	80014bc <HAL_ADC_ConfigChannel+0x120>
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b12      	cmp	r3, #18
 80014ba:	d163      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80014bc:	4b38      	ldr	r3, [pc, #224]	; (80015a0 <HAL_ADC_ConfigChannel+0x204>)
 80014be:	6819      	ldr	r1, [r3, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b10      	cmp	r3, #16
 80014c6:	d009      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x140>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b11      	cmp	r3, #17
 80014ce:	d102      	bne.n	80014d6 <HAL_ADC_ConfigChannel+0x13a>
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	03db      	lsls	r3, r3, #15
 80014d4:	e004      	b.n	80014e0 <HAL_ADC_ConfigChannel+0x144>
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	045b      	lsls	r3, r3, #17
 80014da:	e001      	b.n	80014e0 <HAL_ADC_ConfigChannel+0x144>
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	041b      	lsls	r3, r3, #16
 80014e0:	4a2f      	ldr	r2, [pc, #188]	; (80015a0 <HAL_ADC_ConfigChannel+0x204>)
 80014e2:	430b      	orrs	r3, r1
 80014e4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b10      	cmp	r3, #16
 80014ec:	d14a      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014ee:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <HAL_ADC_ConfigChannel+0x208>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	492d      	ldr	r1, [pc, #180]	; (80015a8 <HAL_ADC_ConfigChannel+0x20c>)
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7fe fe07 	bl	8000108 <__udivsi3>
 80014fa:	0003      	movs	r3, r0
 80014fc:	001a      	movs	r2, r3
 80014fe:	0013      	movs	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	189b      	adds	r3, r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001508:	e002      	b.n	8001510 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	3b01      	subs	r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f9      	bne.n	800150a <HAL_ADC_ConfigChannel+0x16e>
 8001516:	e035      	b.n	8001584 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2101      	movs	r1, #1
 8001524:	4099      	lsls	r1, r3
 8001526:	000b      	movs	r3, r1
 8001528:	43d9      	mvns	r1, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	400a      	ands	r2, r1
 8001530:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b10      	cmp	r3, #16
 8001538:	d007      	beq.n	800154a <HAL_ADC_ConfigChannel+0x1ae>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b11      	cmp	r3, #17
 8001540:	d003      	beq.n	800154a <HAL_ADC_ConfigChannel+0x1ae>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b12      	cmp	r3, #18
 8001548:	d11c      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_ADC_ConfigChannel+0x204>)
 800154c:	6819      	ldr	r1, [r3, #0]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b10      	cmp	r3, #16
 8001554:	d007      	beq.n	8001566 <HAL_ADC_ConfigChannel+0x1ca>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b11      	cmp	r3, #17
 800155c:	d101      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x1c6>
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <HAL_ADC_ConfigChannel+0x210>)
 8001560:	e002      	b.n	8001568 <HAL_ADC_ConfigChannel+0x1cc>
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <HAL_ADC_ConfigChannel+0x214>)
 8001564:	e000      	b.n	8001568 <HAL_ADC_ConfigChannel+0x1cc>
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <HAL_ADC_ConfigChannel+0x218>)
 8001568:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <HAL_ADC_ConfigChannel+0x204>)
 800156a:	400b      	ands	r3, r1
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	e009      	b.n	8001584 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001574:	2220      	movs	r2, #32
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800157c:	230f      	movs	r3, #15
 800157e:	18fb      	adds	r3, r7, r3
 8001580:	2201      	movs	r2, #1
 8001582:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2234      	movs	r2, #52	; 0x34
 8001588:	2100      	movs	r1, #0
 800158a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800158c:	230f      	movs	r3, #15
 800158e:	18fb      	adds	r3, r7, r3
 8001590:	781b      	ldrb	r3, [r3, #0]
}
 8001592:	0018      	movs	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	b004      	add	sp, #16
 8001598:	bd80      	pop	{r7, pc}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	00001001 	.word	0x00001001
 80015a0:	40012708 	.word	0x40012708
 80015a4:	20000024 	.word	0x20000024
 80015a8:	000f4240 	.word	0x000f4240
 80015ac:	ffbfffff 	.word	0xffbfffff
 80015b0:	feffffff 	.word	0xfeffffff
 80015b4:	ff7fffff 	.word	0xff7fffff

080015b8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2203      	movs	r2, #3
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d112      	bne.n	80015fc <ADC_Enable+0x44>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2201      	movs	r2, #1
 80015de:	4013      	ands	r3, r2
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d009      	beq.n	80015f8 <ADC_Enable+0x40>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	401a      	ands	r2, r3
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d101      	bne.n	80015fc <ADC_Enable+0x44>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <ADC_Enable+0x46>
 80015fc:	2300      	movs	r3, #0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d14b      	bne.n	800169a <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	4a26      	ldr	r2, [pc, #152]	; (80016a4 <ADC_Enable+0xec>)
 800160a:	4013      	ands	r3, r2
 800160c:	d00d      	beq.n	800162a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001612:	2210      	movs	r2, #16
 8001614:	431a      	orrs	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800161e:	2201      	movs	r2, #1
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e038      	b.n	800169c <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2101      	movs	r1, #1
 8001636:	430a      	orrs	r2, r1
 8001638:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <ADC_Enable+0xf0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	491b      	ldr	r1, [pc, #108]	; (80016ac <ADC_Enable+0xf4>)
 8001640:	0018      	movs	r0, r3
 8001642:	f7fe fd61 	bl	8000108 <__udivsi3>
 8001646:	0003      	movs	r3, r0
 8001648:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800164a:	e002      	b.n	8001652 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	3b01      	subs	r3, #1
 8001650:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f9      	bne.n	800164c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001658:	f7ff fc34 	bl	8000ec4 <HAL_GetTick>
 800165c:	0003      	movs	r3, r0
 800165e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001660:	e014      	b.n	800168c <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001662:	f7ff fc2f 	bl	8000ec4 <HAL_GetTick>
 8001666:	0002      	movs	r2, r0
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d90d      	bls.n	800168c <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001674:	2210      	movs	r2, #16
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001680:	2201      	movs	r2, #1
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e007      	b.n	800169c <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2201      	movs	r2, #1
 8001694:	4013      	ands	r3, r2
 8001696:	2b01      	cmp	r3, #1
 8001698:	d1e3      	bne.n	8001662 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	0018      	movs	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	b004      	add	sp, #16
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	80000017 	.word	0x80000017
 80016a8:	20000024 	.word	0x20000024
 80016ac:	000f4240 	.word	0x000f4240

080016b0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2203      	movs	r2, #3
 80016c4:	4013      	ands	r3, r2
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d112      	bne.n	80016f0 <ADC_Disable+0x40>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2201      	movs	r2, #1
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d009      	beq.n	80016ec <ADC_Disable+0x3c>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	401a      	ands	r2, r3
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d101      	bne.n	80016f0 <ADC_Disable+0x40>
 80016ec:	2301      	movs	r3, #1
 80016ee:	e000      	b.n	80016f2 <ADC_Disable+0x42>
 80016f0:	2300      	movs	r3, #0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d041      	beq.n	800177a <ADC_Disable+0xca>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2205      	movs	r2, #5
 80016fe:	4013      	ands	r3, r2
 8001700:	2b01      	cmp	r3, #1
 8001702:	d110      	bne.n	8001726 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2102      	movs	r1, #2
 8001710:	430a      	orrs	r2, r1
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2203      	movs	r2, #3
 800171a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800171c:	f7ff fbd2 	bl	8000ec4 <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001724:	e022      	b.n	800176c <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172a:	2210      	movs	r2, #16
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001736:	2201      	movs	r2, #1
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e01c      	b.n	800177c <ADC_Disable+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001742:	f7ff fbbf 	bl	8000ec4 <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d90d      	bls.n	800176c <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001754:	2210      	movs	r2, #16
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001760:	2201      	movs	r2, #1
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e007      	b.n	800177c <ADC_Disable+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2201      	movs	r2, #1
 8001774:	4013      	ands	r3, r2
 8001776:	2b01      	cmp	r3, #1
 8001778:	d0e3      	beq.n	8001742 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	0018      	movs	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	b004      	add	sp, #16
 8001782:	bd80      	pop	{r7, pc}

08001784 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2204      	movs	r2, #4
 8001798:	4013      	ands	r3, r2
 800179a:	d034      	beq.n	8001806 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2204      	movs	r2, #4
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d10d      	bne.n	80017c6 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2202      	movs	r2, #2
 80017b2:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80017b4:	d107      	bne.n	80017c6 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2110      	movs	r1, #16
 80017c2:	430a      	orrs	r2, r1
 80017c4:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017c6:	f7ff fb7d 	bl	8000ec4 <HAL_GetTick>
 80017ca:	0003      	movs	r3, r0
 80017cc:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80017ce:	e014      	b.n	80017fa <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80017d0:	f7ff fb78 	bl	8000ec4 <HAL_GetTick>
 80017d4:	0002      	movs	r2, r0
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d90d      	bls.n	80017fa <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e2:	2210      	movs	r2, #16
 80017e4:	431a      	orrs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ee:	2201      	movs	r2, #1
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e006      	b.n	8001808 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2204      	movs	r2, #4
 8001802:	4013      	ands	r3, r2
 8001804:	d1e4      	bne.n	80017d0 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	0018      	movs	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	b004      	add	sp, #16
 800180e:	bd80      	pop	{r7, pc}

08001810 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001822:	2250      	movs	r2, #80	; 0x50
 8001824:	4013      	ands	r3, r2
 8001826:	d140      	bne.n	80018aa <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182c:	2280      	movs	r2, #128	; 0x80
 800182e:	0092      	lsls	r2, r2, #2
 8001830:	431a      	orrs	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	23c0      	movs	r3, #192	; 0xc0
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	4013      	ands	r3, r2
 8001842:	d12d      	bne.n	80018a0 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001848:	2b00      	cmp	r3, #0
 800184a:	d129      	bne.n	80018a0 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2208      	movs	r2, #8
 8001854:	4013      	ands	r3, r2
 8001856:	2b08      	cmp	r3, #8
 8001858:	d122      	bne.n	80018a0 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2204      	movs	r2, #4
 8001862:	4013      	ands	r3, r2
 8001864:	d110      	bne.n	8001888 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	210c      	movs	r1, #12
 8001872:	438a      	bics	r2, r1
 8001874:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187a:	4a11      	ldr	r2, [pc, #68]	; (80018c0 <ADC_DMAConvCplt+0xb0>)
 800187c:	4013      	ands	r3, r2
 800187e:	2201      	movs	r2, #1
 8001880:	431a      	orrs	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	639a      	str	r2, [r3, #56]	; 0x38
 8001886:	e00b      	b.n	80018a0 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188c:	2220      	movs	r2, #32
 800188e:	431a      	orrs	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001898:	2201      	movs	r2, #1
 800189a:	431a      	orrs	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	0018      	movs	r0, r3
 80018a4:	f7fe fddc 	bl	8000460 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80018a8:	e005      	b.n	80018b6 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	0010      	movs	r0, r2
 80018b4:	4798      	blx	r3
}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b004      	add	sp, #16
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	fffffefe 	.word	0xfffffefe

080018c4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7ff fd51 	bl	800137c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	46bd      	mov	sp, r7
 80018de:	b004      	add	sp, #16
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b084      	sub	sp, #16
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f4:	2240      	movs	r2, #64	; 0x40
 80018f6:	431a      	orrs	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001900:	2204      	movs	r2, #4
 8001902:	431a      	orrs	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	0018      	movs	r0, r3
 800190c:	f7ff fd3e 	bl	800138c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	b004      	add	sp, #16
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001920:	2317      	movs	r3, #23
 8001922:	18fb      	adds	r3, r7, r3
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2234      	movs	r2, #52	; 0x34
 8001934:	5c9b      	ldrb	r3, [r3, r2]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d101      	bne.n	800193e <HAL_ADCEx_Calibration_Start+0x26>
 800193a:	2302      	movs	r3, #2
 800193c:	e084      	b.n	8001a48 <HAL_ADCEx_Calibration_Start+0x130>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2234      	movs	r2, #52	; 0x34
 8001942:	2101      	movs	r1, #1
 8001944:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2203      	movs	r2, #3
 800194e:	4013      	ands	r3, r2
 8001950:	2b01      	cmp	r3, #1
 8001952:	d112      	bne.n	800197a <HAL_ADCEx_Calibration_Start+0x62>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2201      	movs	r2, #1
 800195c:	4013      	ands	r3, r2
 800195e:	2b01      	cmp	r3, #1
 8001960:	d009      	beq.n	8001976 <HAL_ADCEx_Calibration_Start+0x5e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	401a      	ands	r2, r3
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	429a      	cmp	r2, r3
 8001974:	d101      	bne.n	800197a <HAL_ADCEx_Calibration_Start+0x62>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <HAL_ADCEx_Calibration_Start+0x64>
 800197a:	2300      	movs	r3, #0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d152      	bne.n	8001a26 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001984:	4a32      	ldr	r2, [pc, #200]	; (8001a50 <HAL_ADCEx_Calibration_Start+0x138>)
 8001986:	4013      	ands	r3, r2
 8001988:	2202      	movs	r2, #2
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2203      	movs	r2, #3
 8001998:	4013      	ands	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2103      	movs	r1, #3
 80019a8:	438a      	bics	r2, r1
 80019aa:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2180      	movs	r1, #128	; 0x80
 80019b8:	0609      	lsls	r1, r1, #24
 80019ba:	430a      	orrs	r2, r1
 80019bc:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80019be:	f7ff fa81 	bl	8000ec4 <HAL_GetTick>
 80019c2:	0003      	movs	r3, r0
 80019c4:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80019c6:	e014      	b.n	80019f2 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80019c8:	f7ff fa7c 	bl	8000ec4 <HAL_GetTick>
 80019cc:	0002      	movs	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d90d      	bls.n	80019f2 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019da:	2212      	movs	r2, #18
 80019dc:	4393      	bics	r3, r2
 80019de:	2210      	movs	r2, #16
 80019e0:	431a      	orrs	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2234      	movs	r2, #52	; 0x34
 80019ea:	2100      	movs	r1, #0
 80019ec:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e02a      	b.n	8001a48 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	0fdb      	lsrs	r3, r3, #31
 80019fa:	07da      	lsls	r2, r3, #31
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	061b      	lsls	r3, r3, #24
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d0e1      	beq.n	80019c8 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68d9      	ldr	r1, [r3, #12]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a18:	2203      	movs	r2, #3
 8001a1a:	4393      	bics	r3, r2
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	639a      	str	r2, [r3, #56]	; 0x38
 8001a24:	e009      	b.n	8001a3a <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001a32:	2317      	movs	r3, #23
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2234      	movs	r2, #52	; 0x34
 8001a3e:	2100      	movs	r1, #0
 8001a40:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001a42:	2317      	movs	r3, #23
 8001a44:	18fb      	adds	r3, r7, r3
 8001a46:	781b      	ldrb	r3, [r3, #0]
}
 8001a48:	0018      	movs	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b006      	add	sp, #24
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	fffffefd 	.word	0xfffffefd

08001a54 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0f0      	b.n	8001c48 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	5c9b      	ldrb	r3, [r3, r2]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d103      	bne.n	8001a7a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff f87f 	bl	8000b78 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2102      	movs	r1, #2
 8001a86:	438a      	bics	r2, r1
 8001a88:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a8a:	f7ff fa1b 	bl	8000ec4 <HAL_GetTick>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a92:	e013      	b.n	8001abc <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a94:	f7ff fa16 	bl	8000ec4 <HAL_GetTick>
 8001a98:	0002      	movs	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b0a      	cmp	r3, #10
 8001aa0:	d90c      	bls.n	8001abc <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	2280      	movs	r2, #128	; 0x80
 8001aa8:	0292      	lsls	r2, r2, #10
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	2105      	movs	r1, #5
 8001ab6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0c5      	b.n	8001c48 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d1e5      	bne.n	8001a94 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ad8:	f7ff f9f4 	bl	8000ec4 <HAL_GetTick>
 8001adc:	0003      	movs	r3, r0
 8001ade:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ae0:	e013      	b.n	8001b0a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ae2:	f7ff f9ef 	bl	8000ec4 <HAL_GetTick>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b0a      	cmp	r3, #10
 8001aee:	d90c      	bls.n	8001b0a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	2280      	movs	r2, #128	; 0x80
 8001af6:	0292      	lsls	r2, r2, #10
 8001af8:	431a      	orrs	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2220      	movs	r2, #32
 8001b02:	2105      	movs	r1, #5
 8001b04:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e09e      	b.n	8001c48 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	4013      	ands	r3, r2
 8001b14:	d0e5      	beq.n	8001ae2 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	7e1b      	ldrb	r3, [r3, #24]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d108      	bne.n	8001b30 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2180      	movs	r1, #128	; 0x80
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	e007      	b.n	8001b40 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2180      	movs	r1, #128	; 0x80
 8001b3c:	438a      	bics	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	7e5b      	ldrb	r3, [r3, #25]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d108      	bne.n	8001b5a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2140      	movs	r1, #64	; 0x40
 8001b54:	430a      	orrs	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	e007      	b.n	8001b6a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2140      	movs	r1, #64	; 0x40
 8001b66:	438a      	bics	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	7e9b      	ldrb	r3, [r3, #26]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d108      	bne.n	8001b84 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2120      	movs	r1, #32
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	e007      	b.n	8001b94 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2120      	movs	r1, #32
 8001b90:	438a      	bics	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7edb      	ldrb	r3, [r3, #27]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d108      	bne.n	8001bae <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2110      	movs	r1, #16
 8001ba8:	438a      	bics	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	e007      	b.n	8001bbe <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2110      	movs	r1, #16
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	7f1b      	ldrb	r3, [r3, #28]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d108      	bne.n	8001bd8 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2108      	movs	r1, #8
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e007      	b.n	8001be8 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2108      	movs	r1, #8
 8001be4:	438a      	bics	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	7f5b      	ldrb	r3, [r3, #29]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d108      	bne.n	8001c02 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2104      	movs	r1, #4
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	e007      	b.n	8001c12 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	438a      	bics	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	431a      	orrs	r2, r3
 8001c28:	0011      	movs	r1, r2
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	1e5a      	subs	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2220      	movs	r2, #32
 8001c42:	2101      	movs	r1, #1
 8001c44:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	0018      	movs	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b004      	add	sp, #16
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	0002      	movs	r2, r0
 8001c58:	1dfb      	adds	r3, r7, #7
 8001c5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c5c:	1dfb      	adds	r3, r7, #7
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b7f      	cmp	r3, #127	; 0x7f
 8001c62:	d809      	bhi.n	8001c78 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c64:	1dfb      	adds	r3, r7, #7
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	001a      	movs	r2, r3
 8001c6a:	231f      	movs	r3, #31
 8001c6c:	401a      	ands	r2, r3
 8001c6e:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <__NVIC_EnableIRQ+0x30>)
 8001c70:	2101      	movs	r1, #1
 8001c72:	4091      	lsls	r1, r2
 8001c74:	000a      	movs	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]
  }
}
 8001c78:	46c0      	nop			; (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b002      	add	sp, #8
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	e000e100 	.word	0xe000e100

08001c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c84:	b590      	push	{r4, r7, lr}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	1dfb      	adds	r3, r7, #7
 8001c90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c92:	1dfb      	adds	r3, r7, #7
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b7f      	cmp	r3, #127	; 0x7f
 8001c98:	d828      	bhi.n	8001cec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c9a:	4a2f      	ldr	r2, [pc, #188]	; (8001d58 <__NVIC_SetPriority+0xd4>)
 8001c9c:	1dfb      	adds	r3, r7, #7
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	b25b      	sxtb	r3, r3
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	33c0      	adds	r3, #192	; 0xc0
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	589b      	ldr	r3, [r3, r2]
 8001caa:	1dfa      	adds	r2, r7, #7
 8001cac:	7812      	ldrb	r2, [r2, #0]
 8001cae:	0011      	movs	r1, r2
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	400a      	ands	r2, r1
 8001cb4:	00d2      	lsls	r2, r2, #3
 8001cb6:	21ff      	movs	r1, #255	; 0xff
 8001cb8:	4091      	lsls	r1, r2
 8001cba:	000a      	movs	r2, r1
 8001cbc:	43d2      	mvns	r2, r2
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	019b      	lsls	r3, r3, #6
 8001cc6:	22ff      	movs	r2, #255	; 0xff
 8001cc8:	401a      	ands	r2, r3
 8001cca:	1dfb      	adds	r3, r7, #7
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	0018      	movs	r0, r3
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	4003      	ands	r3, r0
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cd8:	481f      	ldr	r0, [pc, #124]	; (8001d58 <__NVIC_SetPriority+0xd4>)
 8001cda:	1dfb      	adds	r3, r7, #7
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b25b      	sxtb	r3, r3
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	33c0      	adds	r3, #192	; 0xc0
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001cea:	e031      	b.n	8001d50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cec:	4a1b      	ldr	r2, [pc, #108]	; (8001d5c <__NVIC_SetPriority+0xd8>)
 8001cee:	1dfb      	adds	r3, r7, #7
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	230f      	movs	r3, #15
 8001cf6:	400b      	ands	r3, r1
 8001cf8:	3b08      	subs	r3, #8
 8001cfa:	089b      	lsrs	r3, r3, #2
 8001cfc:	3306      	adds	r3, #6
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	18d3      	adds	r3, r2, r3
 8001d02:	3304      	adds	r3, #4
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	1dfa      	adds	r2, r7, #7
 8001d08:	7812      	ldrb	r2, [r2, #0]
 8001d0a:	0011      	movs	r1, r2
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	400a      	ands	r2, r1
 8001d10:	00d2      	lsls	r2, r2, #3
 8001d12:	21ff      	movs	r1, #255	; 0xff
 8001d14:	4091      	lsls	r1, r2
 8001d16:	000a      	movs	r2, r1
 8001d18:	43d2      	mvns	r2, r2
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	019b      	lsls	r3, r3, #6
 8001d22:	22ff      	movs	r2, #255	; 0xff
 8001d24:	401a      	ands	r2, r3
 8001d26:	1dfb      	adds	r3, r7, #7
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	4003      	ands	r3, r0
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d34:	4809      	ldr	r0, [pc, #36]	; (8001d5c <__NVIC_SetPriority+0xd8>)
 8001d36:	1dfb      	adds	r3, r7, #7
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	001c      	movs	r4, r3
 8001d3c:	230f      	movs	r3, #15
 8001d3e:	4023      	ands	r3, r4
 8001d40:	3b08      	subs	r3, #8
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	430a      	orrs	r2, r1
 8001d46:	3306      	adds	r3, #6
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	18c3      	adds	r3, r0, r3
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	601a      	str	r2, [r3, #0]
}
 8001d50:	46c0      	nop			; (mov r8, r8)
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b003      	add	sp, #12
 8001d56:	bd90      	pop	{r4, r7, pc}
 8001d58:	e000e100 	.word	0xe000e100
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	187b      	adds	r3, r7, r1
 8001d6e:	1c02      	adds	r2, r0, #0
 8001d70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	187b      	adds	r3, r7, r1
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	b25b      	sxtb	r3, r3
 8001d7a:	0011      	movs	r1, r2
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f7ff ff81 	bl	8001c84 <__NVIC_SetPriority>
}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b004      	add	sp, #16
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	0002      	movs	r2, r0
 8001d92:	1dfb      	adds	r3, r7, #7
 8001d94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d96:	1dfb      	adds	r3, r7, #7
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b25b      	sxtb	r3, r3
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f7ff ff57 	bl	8001c50 <__NVIC_EnableIRQ>
}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b002      	add	sp, #8
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e036      	b.n	8001e30 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2221      	movs	r2, #33	; 0x21
 8001dc6:	2102      	movs	r1, #2
 8001dc8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4a18      	ldr	r2, [pc, #96]	; (8001e38 <HAL_DMA_Init+0x8c>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	0018      	movs	r0, r3
 8001e14:	f000 f97e 	bl	8002114 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2221      	movs	r2, #33	; 0x21
 8001e22:	2101      	movs	r1, #1
 8001e24:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}  
 8001e30:	0018      	movs	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b004      	add	sp, #16
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	ffffc00f 	.word	0xffffc00f

08001e3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001e4a:	2317      	movs	r3, #23
 8001e4c:	18fb      	adds	r3, r7, r3
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2220      	movs	r2, #32
 8001e56:	5c9b      	ldrb	r3, [r3, r2]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_DMA_Start_IT+0x24>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e04f      	b.n	8001f00 <HAL_DMA_Start_IT+0xc4>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2220      	movs	r2, #32
 8001e64:	2101      	movs	r1, #1
 8001e66:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2221      	movs	r2, #33	; 0x21
 8001e6c:	5c9b      	ldrb	r3, [r3, r2]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d13a      	bne.n	8001eea <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2221      	movs	r2, #33	; 0x21
 8001e78:	2102      	movs	r1, #2
 8001e7a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	438a      	bics	r2, r1
 8001e90:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f90f 	bl	80020bc <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d008      	beq.n	8001eb8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	210e      	movs	r1, #14
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	e00f      	b.n	8001ed8 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	210a      	movs	r1, #10
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2104      	movs	r1, #4
 8001ed4:	438a      	bics	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	e007      	b.n	8001efa <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2220      	movs	r2, #32
 8001eee:	2100      	movs	r1, #0
 8001ef0:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001ef2:	2317      	movs	r3, #23
 8001ef4:	18fb      	adds	r3, r7, r3
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8001efa:	2317      	movs	r3, #23
 8001efc:	18fb      	adds	r3, r7, r3
 8001efe:	781b      	ldrb	r3, [r3, #0]
} 
 8001f00:	0018      	movs	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b006      	add	sp, #24
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2221      	movs	r2, #33	; 0x21
 8001f14:	5c9b      	ldrb	r3, [r3, r2]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d008      	beq.n	8001f2e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2204      	movs	r2, #4
 8001f20:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2220      	movs	r2, #32
 8001f26:	2100      	movs	r1, #0
 8001f28:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e020      	b.n	8001f70 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	210e      	movs	r1, #14
 8001f3a:	438a      	bics	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2101      	movs	r1, #1
 8001f4a:	438a      	bics	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f56:	2101      	movs	r1, #1
 8001f58:	4091      	lsls	r1, r2
 8001f5a:	000a      	movs	r2, r1
 8001f5c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2221      	movs	r2, #33	; 0x21
 8001f62:	2101      	movs	r1, #1
 8001f64:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b002      	add	sp, #8
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	2204      	movs	r2, #4
 8001f96:	409a      	lsls	r2, r3
 8001f98:	0013      	movs	r3, r2
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d024      	beq.n	8001fea <HAL_DMA_IRQHandler+0x72>
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2204      	movs	r2, #4
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d020      	beq.n	8001fea <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d107      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2104      	movs	r1, #4
 8001fc0:	438a      	bics	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fcc:	2104      	movs	r1, #4
 8001fce:	4091      	lsls	r1, r2
 8001fd0:	000a      	movs	r2, r1
 8001fd2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d100      	bne.n	8001fde <HAL_DMA_IRQHandler+0x66>
 8001fdc:	e06a      	b.n	80020b4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	0010      	movs	r0, r2
 8001fe6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001fe8:	e064      	b.n	80020b4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	2202      	movs	r2, #2
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	0013      	movs	r3, r2
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d02b      	beq.n	8002052 <HAL_DMA_IRQHandler+0xda>
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	4013      	ands	r3, r2
 8002000:	d027      	beq.n	8002052 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2220      	movs	r2, #32
 800200a:	4013      	ands	r3, r2
 800200c:	d10b      	bne.n	8002026 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	210a      	movs	r1, #10
 800201a:	438a      	bics	r2, r1
 800201c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2221      	movs	r2, #33	; 0x21
 8002022:	2101      	movs	r1, #1
 8002024:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202e:	2102      	movs	r1, #2
 8002030:	4091      	lsls	r1, r2
 8002032:	000a      	movs	r2, r1
 8002034:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2220      	movs	r2, #32
 800203a:	2100      	movs	r1, #0
 800203c:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	2b00      	cmp	r3, #0
 8002044:	d036      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	0010      	movs	r0, r2
 800204e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002050:	e030      	b.n	80020b4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	2208      	movs	r2, #8
 8002058:	409a      	lsls	r2, r3
 800205a:	0013      	movs	r3, r2
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4013      	ands	r3, r2
 8002060:	d028      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x13c>
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2208      	movs	r2, #8
 8002066:	4013      	ands	r3, r2
 8002068:	d024      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	210e      	movs	r1, #14
 8002076:	438a      	bics	r2, r1
 8002078:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002082:	2101      	movs	r1, #1
 8002084:	4091      	lsls	r1, r2
 8002086:	000a      	movs	r2, r1
 8002088:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2221      	movs	r2, #33	; 0x21
 8002094:	2101      	movs	r1, #1
 8002096:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2220      	movs	r2, #32
 800209c:	2100      	movs	r1, #0
 800209e:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	0010      	movs	r0, r2
 80020b0:	4798      	blx	r3
    }
   }
}  
 80020b2:	e7ff      	b.n	80020b4 <HAL_DMA_IRQHandler+0x13c>
 80020b4:	46c0      	nop			; (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b004      	add	sp, #16
 80020ba:	bd80      	pop	{r7, pc}

080020bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d2:	2101      	movs	r1, #1
 80020d4:	4091      	lsls	r1, r2
 80020d6:	000a      	movs	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b10      	cmp	r3, #16
 80020e8:	d108      	bne.n	80020fc <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020fa:	e007      	b.n	800210c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	60da      	str	r2, [r3, #12]
}
 800210c:	46c0      	nop			; (mov r8, r8)
 800210e:	46bd      	mov	sp, r7
 8002110:	b004      	add	sp, #16
 8002112:	bd80      	pop	{r7, pc}

08002114 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a08      	ldr	r2, [pc, #32]	; (8002144 <DMA_CalcBaseAndBitshift+0x30>)
 8002122:	4694      	mov	ip, r2
 8002124:	4463      	add	r3, ip
 8002126:	2114      	movs	r1, #20
 8002128:	0018      	movs	r0, r3
 800212a:	f7fd ffed 	bl	8000108 <__udivsi3>
 800212e:	0003      	movs	r3, r0
 8002130:	009a      	lsls	r2, r3, #2
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a03      	ldr	r2, [pc, #12]	; (8002148 <DMA_CalcBaseAndBitshift+0x34>)
 800213a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b002      	add	sp, #8
 8002142:	bd80      	pop	{r7, pc}
 8002144:	bffdfff8 	.word	0xbffdfff8
 8002148:	40020000 	.word	0x40020000

0800214c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800215a:	e155      	b.n	8002408 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2101      	movs	r1, #1
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4091      	lsls	r1, r2
 8002166:	000a      	movs	r2, r1
 8002168:	4013      	ands	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d100      	bne.n	8002174 <HAL_GPIO_Init+0x28>
 8002172:	e146      	b.n	8002402 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x38>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b12      	cmp	r3, #18
 8002182:	d123      	bne.n	80021cc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	08da      	lsrs	r2, r3, #3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3208      	adds	r2, #8
 800218c:	0092      	lsls	r2, r2, #2
 800218e:	58d3      	ldr	r3, [r2, r3]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2207      	movs	r2, #7
 8002196:	4013      	ands	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	220f      	movs	r2, #15
 800219c:	409a      	lsls	r2, r3
 800219e:	0013      	movs	r3, r2
 80021a0:	43da      	mvns	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	2107      	movs	r1, #7
 80021b0:	400b      	ands	r3, r1
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	409a      	lsls	r2, r3
 80021b6:	0013      	movs	r3, r2
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	08da      	lsrs	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3208      	adds	r2, #8
 80021c6:	0092      	lsls	r2, r2, #2
 80021c8:	6939      	ldr	r1, [r7, #16]
 80021ca:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	409a      	lsls	r2, r3
 80021da:	0013      	movs	r3, r2
 80021dc:	43da      	mvns	r2, r3
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2203      	movs	r2, #3
 80021ea:	401a      	ands	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	409a      	lsls	r2, r3
 80021f2:	0013      	movs	r3, r2
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d00b      	beq.n	8002220 <HAL_GPIO_Init+0xd4>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d007      	beq.n	8002220 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002214:	2b11      	cmp	r3, #17
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b12      	cmp	r3, #18
 800221e:	d130      	bne.n	8002282 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	2203      	movs	r2, #3
 800222c:	409a      	lsls	r2, r3
 800222e:	0013      	movs	r3, r2
 8002230:	43da      	mvns	r2, r3
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	409a      	lsls	r2, r3
 8002242:	0013      	movs	r3, r2
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002256:	2201      	movs	r2, #1
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	409a      	lsls	r2, r3
 800225c:	0013      	movs	r3, r2
 800225e:	43da      	mvns	r2, r3
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	2201      	movs	r2, #1
 800226e:	401a      	ands	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	409a      	lsls	r2, r3
 8002274:	0013      	movs	r3, r2
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2203      	movs	r2, #3
 800228e:	409a      	lsls	r2, r3
 8002290:	0013      	movs	r3, r2
 8002292:	43da      	mvns	r2, r3
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	409a      	lsls	r2, r3
 80022a4:	0013      	movs	r3, r2
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	055b      	lsls	r3, r3, #21
 80022ba:	4013      	ands	r3, r2
 80022bc:	d100      	bne.n	80022c0 <HAL_GPIO_Init+0x174>
 80022be:	e0a0      	b.n	8002402 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c0:	4b57      	ldr	r3, [pc, #348]	; (8002420 <HAL_GPIO_Init+0x2d4>)
 80022c2:	699a      	ldr	r2, [r3, #24]
 80022c4:	4b56      	ldr	r3, [pc, #344]	; (8002420 <HAL_GPIO_Init+0x2d4>)
 80022c6:	2101      	movs	r1, #1
 80022c8:	430a      	orrs	r2, r1
 80022ca:	619a      	str	r2, [r3, #24]
 80022cc:	4b54      	ldr	r3, [pc, #336]	; (8002420 <HAL_GPIO_Init+0x2d4>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	2201      	movs	r2, #1
 80022d2:	4013      	ands	r3, r2
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022d8:	4a52      	ldr	r2, [pc, #328]	; (8002424 <HAL_GPIO_Init+0x2d8>)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	3302      	adds	r3, #2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	589b      	ldr	r3, [r3, r2]
 80022e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2203      	movs	r2, #3
 80022ea:	4013      	ands	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	220f      	movs	r2, #15
 80022f0:	409a      	lsls	r2, r3
 80022f2:	0013      	movs	r3, r2
 80022f4:	43da      	mvns	r2, r3
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	2390      	movs	r3, #144	; 0x90
 8002300:	05db      	lsls	r3, r3, #23
 8002302:	429a      	cmp	r2, r3
 8002304:	d019      	beq.n	800233a <HAL_GPIO_Init+0x1ee>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a47      	ldr	r2, [pc, #284]	; (8002428 <HAL_GPIO_Init+0x2dc>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d013      	beq.n	8002336 <HAL_GPIO_Init+0x1ea>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a46      	ldr	r2, [pc, #280]	; (800242c <HAL_GPIO_Init+0x2e0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00d      	beq.n	8002332 <HAL_GPIO_Init+0x1e6>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a45      	ldr	r2, [pc, #276]	; (8002430 <HAL_GPIO_Init+0x2e4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d007      	beq.n	800232e <HAL_GPIO_Init+0x1e2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a44      	ldr	r2, [pc, #272]	; (8002434 <HAL_GPIO_Init+0x2e8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d101      	bne.n	800232a <HAL_GPIO_Init+0x1de>
 8002326:	2304      	movs	r3, #4
 8002328:	e008      	b.n	800233c <HAL_GPIO_Init+0x1f0>
 800232a:	2305      	movs	r3, #5
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x1f0>
 800232e:	2303      	movs	r3, #3
 8002330:	e004      	b.n	800233c <HAL_GPIO_Init+0x1f0>
 8002332:	2302      	movs	r3, #2
 8002334:	e002      	b.n	800233c <HAL_GPIO_Init+0x1f0>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_GPIO_Init+0x1f0>
 800233a:	2300      	movs	r3, #0
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	2103      	movs	r1, #3
 8002340:	400a      	ands	r2, r1
 8002342:	0092      	lsls	r2, r2, #2
 8002344:	4093      	lsls	r3, r2
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800234c:	4935      	ldr	r1, [pc, #212]	; (8002424 <HAL_GPIO_Init+0x2d8>)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	3302      	adds	r3, #2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800235a:	4b37      	ldr	r3, [pc, #220]	; (8002438 <HAL_GPIO_Init+0x2ec>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	43da      	mvns	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	025b      	lsls	r3, r3, #9
 8002372:	4013      	ands	r3, r2
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800237e:	4b2e      	ldr	r3, [pc, #184]	; (8002438 <HAL_GPIO_Init+0x2ec>)
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002384:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <HAL_GPIO_Init+0x2ec>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	43da      	mvns	r2, r3
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	029b      	lsls	r3, r3, #10
 800239c:	4013      	ands	r3, r2
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023a8:	4b23      	ldr	r3, [pc, #140]	; (8002438 <HAL_GPIO_Init+0x2ec>)
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ae:	4b22      	ldr	r3, [pc, #136]	; (8002438 <HAL_GPIO_Init+0x2ec>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	43da      	mvns	r2, r3
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	035b      	lsls	r3, r3, #13
 80023c6:	4013      	ands	r3, r2
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023d2:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_GPIO_Init+0x2ec>)
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80023d8:	4b17      	ldr	r3, [pc, #92]	; (8002438 <HAL_GPIO_Init+0x2ec>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	43da      	mvns	r2, r3
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	039b      	lsls	r3, r3, #14
 80023f0:	4013      	ands	r3, r2
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <HAL_GPIO_Init+0x2ec>)
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	3301      	adds	r3, #1
 8002406:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	40da      	lsrs	r2, r3
 8002410:	1e13      	subs	r3, r2, #0
 8002412:	d000      	beq.n	8002416 <HAL_GPIO_Init+0x2ca>
 8002414:	e6a2      	b.n	800215c <HAL_GPIO_Init+0x10>
  } 
}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	46bd      	mov	sp, r7
 800241a:	b006      	add	sp, #24
 800241c:	bd80      	pop	{r7, pc}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	40021000 	.word	0x40021000
 8002424:	40010000 	.word	0x40010000
 8002428:	48000400 	.word	0x48000400
 800242c:	48000800 	.word	0x48000800
 8002430:	48000c00 	.word	0x48000c00
 8002434:	48001000 	.word	0x48001000
 8002438:	40010400 	.word	0x40010400

0800243c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	0008      	movs	r0, r1
 8002446:	0011      	movs	r1, r2
 8002448:	1cbb      	adds	r3, r7, #2
 800244a:	1c02      	adds	r2, r0, #0
 800244c:	801a      	strh	r2, [r3, #0]
 800244e:	1c7b      	adds	r3, r7, #1
 8002450:	1c0a      	adds	r2, r1, #0
 8002452:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002454:	1c7b      	adds	r3, r7, #1
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d004      	beq.n	8002466 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800245c:	1cbb      	adds	r3, r7, #2
 800245e:	881a      	ldrh	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002464:	e003      	b.n	800246e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002466:	1cbb      	adds	r3, r7, #2
 8002468:	881a      	ldrh	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	46bd      	mov	sp, r7
 8002472:	b002      	add	sp, #8
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	000a      	movs	r2, r1
 8002480:	1cbb      	adds	r3, r7, #2
 8002482:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	1cba      	adds	r2, r7, #2
 800248a:	8812      	ldrh	r2, [r2, #0]
 800248c:	4013      	ands	r3, r2
 800248e:	d005      	beq.n	800249c <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002490:	1cbb      	adds	r3, r7, #2
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	041a      	lsls	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800249a:	e003      	b.n	80024a4 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800249c:	1cbb      	adds	r3, r7, #2
 800249e:	881a      	ldrh	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	619a      	str	r2, [r3, #24]
}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f000 fb76 	bl	8002bac <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2201      	movs	r2, #1
 80024c6:	4013      	ands	r3, r2
 80024c8:	d100      	bne.n	80024cc <HAL_RCC_OscConfig+0x20>
 80024ca:	e08e      	b.n	80025ea <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024cc:	4bc5      	ldr	r3, [pc, #788]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	220c      	movs	r2, #12
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d00e      	beq.n	80024f6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024d8:	4bc2      	ldr	r3, [pc, #776]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	220c      	movs	r2, #12
 80024de:	4013      	ands	r3, r2
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d117      	bne.n	8002514 <HAL_RCC_OscConfig+0x68>
 80024e4:	4bbf      	ldr	r3, [pc, #764]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	23c0      	movs	r3, #192	; 0xc0
 80024ea:	025b      	lsls	r3, r3, #9
 80024ec:	401a      	ands	r2, r3
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	025b      	lsls	r3, r3, #9
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d10e      	bne.n	8002514 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f6:	4bbb      	ldr	r3, [pc, #748]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	029b      	lsls	r3, r3, #10
 80024fe:	4013      	ands	r3, r2
 8002500:	d100      	bne.n	8002504 <HAL_RCC_OscConfig+0x58>
 8002502:	e071      	b.n	80025e8 <HAL_RCC_OscConfig+0x13c>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d000      	beq.n	800250e <HAL_RCC_OscConfig+0x62>
 800250c:	e06c      	b.n	80025e8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	f000 fb4c 	bl	8002bac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d107      	bne.n	800252c <HAL_RCC_OscConfig+0x80>
 800251c:	4bb1      	ldr	r3, [pc, #708]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4bb0      	ldr	r3, [pc, #704]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002522:	2180      	movs	r1, #128	; 0x80
 8002524:	0249      	lsls	r1, r1, #9
 8002526:	430a      	orrs	r2, r1
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	e02f      	b.n	800258c <HAL_RCC_OscConfig+0xe0>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10c      	bne.n	800254e <HAL_RCC_OscConfig+0xa2>
 8002534:	4bab      	ldr	r3, [pc, #684]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4baa      	ldr	r3, [pc, #680]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800253a:	49ab      	ldr	r1, [pc, #684]	; (80027e8 <HAL_RCC_OscConfig+0x33c>)
 800253c:	400a      	ands	r2, r1
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	4ba8      	ldr	r3, [pc, #672]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4ba7      	ldr	r3, [pc, #668]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002546:	49a9      	ldr	r1, [pc, #676]	; (80027ec <HAL_RCC_OscConfig+0x340>)
 8002548:	400a      	ands	r2, r1
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	e01e      	b.n	800258c <HAL_RCC_OscConfig+0xe0>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b05      	cmp	r3, #5
 8002554:	d10e      	bne.n	8002574 <HAL_RCC_OscConfig+0xc8>
 8002556:	4ba3      	ldr	r3, [pc, #652]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4ba2      	ldr	r3, [pc, #648]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800255c:	2180      	movs	r1, #128	; 0x80
 800255e:	02c9      	lsls	r1, r1, #11
 8002560:	430a      	orrs	r2, r1
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	4b9f      	ldr	r3, [pc, #636]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b9e      	ldr	r3, [pc, #632]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800256a:	2180      	movs	r1, #128	; 0x80
 800256c:	0249      	lsls	r1, r1, #9
 800256e:	430a      	orrs	r2, r1
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e00b      	b.n	800258c <HAL_RCC_OscConfig+0xe0>
 8002574:	4b9b      	ldr	r3, [pc, #620]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b9a      	ldr	r3, [pc, #616]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800257a:	499b      	ldr	r1, [pc, #620]	; (80027e8 <HAL_RCC_OscConfig+0x33c>)
 800257c:	400a      	ands	r2, r1
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	4b98      	ldr	r3, [pc, #608]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b97      	ldr	r3, [pc, #604]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002586:	4999      	ldr	r1, [pc, #612]	; (80027ec <HAL_RCC_OscConfig+0x340>)
 8002588:	400a      	ands	r2, r1
 800258a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d014      	beq.n	80025be <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7fe fc96 	bl	8000ec4 <HAL_GetTick>
 8002598:	0003      	movs	r3, r0
 800259a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800259e:	f7fe fc91 	bl	8000ec4 <HAL_GetTick>
 80025a2:	0002      	movs	r2, r0
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b64      	cmp	r3, #100	; 0x64
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e2fd      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b0:	4b8c      	ldr	r3, [pc, #560]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	029b      	lsls	r3, r3, #10
 80025b8:	4013      	ands	r3, r2
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0xf2>
 80025bc:	e015      	b.n	80025ea <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7fe fc81 	bl	8000ec4 <HAL_GetTick>
 80025c2:	0003      	movs	r3, r0
 80025c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c8:	f7fe fc7c 	bl	8000ec4 <HAL_GetTick>
 80025cc:	0002      	movs	r2, r0
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e2e8      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	4b82      	ldr	r3, [pc, #520]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	029b      	lsls	r3, r3, #10
 80025e2:	4013      	ands	r3, r2
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x11c>
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2202      	movs	r2, #2
 80025f0:	4013      	ands	r3, r2
 80025f2:	d100      	bne.n	80025f6 <HAL_RCC_OscConfig+0x14a>
 80025f4:	e06c      	b.n	80026d0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025f6:	4b7b      	ldr	r3, [pc, #492]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	220c      	movs	r2, #12
 80025fc:	4013      	ands	r3, r2
 80025fe:	d00e      	beq.n	800261e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002600:	4b78      	ldr	r3, [pc, #480]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	220c      	movs	r2, #12
 8002606:	4013      	ands	r3, r2
 8002608:	2b08      	cmp	r3, #8
 800260a:	d11f      	bne.n	800264c <HAL_RCC_OscConfig+0x1a0>
 800260c:	4b75      	ldr	r3, [pc, #468]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	23c0      	movs	r3, #192	; 0xc0
 8002612:	025b      	lsls	r3, r3, #9
 8002614:	401a      	ands	r2, r3
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	429a      	cmp	r2, r3
 800261c:	d116      	bne.n	800264c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261e:	4b71      	ldr	r3, [pc, #452]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2202      	movs	r2, #2
 8002624:	4013      	ands	r3, r2
 8002626:	d005      	beq.n	8002634 <HAL_RCC_OscConfig+0x188>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d001      	beq.n	8002634 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e2bb      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002634:	4b6b      	ldr	r3, [pc, #428]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	22f8      	movs	r2, #248	; 0xf8
 800263a:	4393      	bics	r3, r2
 800263c:	0019      	movs	r1, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	00da      	lsls	r2, r3, #3
 8002644:	4b67      	ldr	r3, [pc, #412]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264a:	e041      	b.n	80026d0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d024      	beq.n	800269e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002654:	4b63      	ldr	r3, [pc, #396]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b62      	ldr	r3, [pc, #392]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800265a:	2101      	movs	r1, #1
 800265c:	430a      	orrs	r2, r1
 800265e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7fe fc30 	bl	8000ec4 <HAL_GetTick>
 8002664:	0003      	movs	r3, r0
 8002666:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800266a:	f7fe fc2b 	bl	8000ec4 <HAL_GetTick>
 800266e:	0002      	movs	r2, r0
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e297      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267c:	4b59      	ldr	r3, [pc, #356]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2202      	movs	r2, #2
 8002682:	4013      	ands	r3, r2
 8002684:	d0f1      	beq.n	800266a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002686:	4b57      	ldr	r3, [pc, #348]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	22f8      	movs	r2, #248	; 0xf8
 800268c:	4393      	bics	r3, r2
 800268e:	0019      	movs	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	00da      	lsls	r2, r3, #3
 8002696:	4b53      	ldr	r3, [pc, #332]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e018      	b.n	80026d0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800269e:	4b51      	ldr	r3, [pc, #324]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	4b50      	ldr	r3, [pc, #320]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80026a4:	2101      	movs	r1, #1
 80026a6:	438a      	bics	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026aa:	f7fe fc0b 	bl	8000ec4 <HAL_GetTick>
 80026ae:	0003      	movs	r3, r0
 80026b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026b4:	f7fe fc06 	bl	8000ec4 <HAL_GetTick>
 80026b8:	0002      	movs	r2, r0
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e272      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c6:	4b47      	ldr	r3, [pc, #284]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2202      	movs	r2, #2
 80026cc:	4013      	ands	r3, r2
 80026ce:	d1f1      	bne.n	80026b4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2208      	movs	r2, #8
 80026d6:	4013      	ands	r3, r2
 80026d8:	d036      	beq.n	8002748 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d019      	beq.n	8002716 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e2:	4b40      	ldr	r3, [pc, #256]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80026e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026e6:	4b3f      	ldr	r3, [pc, #252]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80026e8:	2101      	movs	r1, #1
 80026ea:	430a      	orrs	r2, r1
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ee:	f7fe fbe9 	bl	8000ec4 <HAL_GetTick>
 80026f2:	0003      	movs	r3, r0
 80026f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f8:	f7fe fbe4 	bl	8000ec4 <HAL_GetTick>
 80026fc:	0002      	movs	r2, r0
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e250      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270a:	4b36      	ldr	r3, [pc, #216]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	2202      	movs	r2, #2
 8002710:	4013      	ands	r3, r2
 8002712:	d0f1      	beq.n	80026f8 <HAL_RCC_OscConfig+0x24c>
 8002714:	e018      	b.n	8002748 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002716:	4b33      	ldr	r3, [pc, #204]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800271a:	4b32      	ldr	r3, [pc, #200]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800271c:	2101      	movs	r1, #1
 800271e:	438a      	bics	r2, r1
 8002720:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002722:	f7fe fbcf 	bl	8000ec4 <HAL_GetTick>
 8002726:	0003      	movs	r3, r0
 8002728:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800272c:	f7fe fbca 	bl	8000ec4 <HAL_GetTick>
 8002730:	0002      	movs	r2, r0
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e236      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273e:	4b29      	ldr	r3, [pc, #164]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	2202      	movs	r2, #2
 8002744:	4013      	ands	r3, r2
 8002746:	d1f1      	bne.n	800272c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2204      	movs	r2, #4
 800274e:	4013      	ands	r3, r2
 8002750:	d100      	bne.n	8002754 <HAL_RCC_OscConfig+0x2a8>
 8002752:	e0b5      	b.n	80028c0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002754:	231f      	movs	r3, #31
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275c:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	055b      	lsls	r3, r3, #21
 8002764:	4013      	ands	r3, r2
 8002766:	d111      	bne.n	800278c <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002768:	4b1e      	ldr	r3, [pc, #120]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800276a:	69da      	ldr	r2, [r3, #28]
 800276c:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 800276e:	2180      	movs	r1, #128	; 0x80
 8002770:	0549      	lsls	r1, r1, #21
 8002772:	430a      	orrs	r2, r1
 8002774:	61da      	str	r2, [r3, #28]
 8002776:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 8002778:	69da      	ldr	r2, [r3, #28]
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	055b      	lsls	r3, r3, #21
 800277e:	4013      	ands	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002784:	231f      	movs	r3, #31
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	2201      	movs	r2, #1
 800278a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278c:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <HAL_RCC_OscConfig+0x344>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4013      	ands	r3, r2
 8002796:	d11a      	bne.n	80027ce <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002798:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_RCC_OscConfig+0x344>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <HAL_RCC_OscConfig+0x344>)
 800279e:	2180      	movs	r1, #128	; 0x80
 80027a0:	0049      	lsls	r1, r1, #1
 80027a2:	430a      	orrs	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a6:	f7fe fb8d 	bl	8000ec4 <HAL_GetTick>
 80027aa:	0003      	movs	r3, r0
 80027ac:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b0:	f7fe fb88 	bl	8000ec4 <HAL_GetTick>
 80027b4:	0002      	movs	r2, r0
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	; 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e1f4      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c2:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_RCC_OscConfig+0x344>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4013      	ands	r3, r2
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d10e      	bne.n	80027f4 <HAL_RCC_OscConfig+0x348>
 80027d6:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80027d8:	6a1a      	ldr	r2, [r3, #32]
 80027da:	4b02      	ldr	r3, [pc, #8]	; (80027e4 <HAL_RCC_OscConfig+0x338>)
 80027dc:	2101      	movs	r1, #1
 80027de:	430a      	orrs	r2, r1
 80027e0:	621a      	str	r2, [r3, #32]
 80027e2:	e035      	b.n	8002850 <HAL_RCC_OscConfig+0x3a4>
 80027e4:	40021000 	.word	0x40021000
 80027e8:	fffeffff 	.word	0xfffeffff
 80027ec:	fffbffff 	.word	0xfffbffff
 80027f0:	40007000 	.word	0x40007000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10c      	bne.n	8002816 <HAL_RCC_OscConfig+0x36a>
 80027fc:	4bca      	ldr	r3, [pc, #808]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80027fe:	6a1a      	ldr	r2, [r3, #32]
 8002800:	4bc9      	ldr	r3, [pc, #804]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002802:	2101      	movs	r1, #1
 8002804:	438a      	bics	r2, r1
 8002806:	621a      	str	r2, [r3, #32]
 8002808:	4bc7      	ldr	r3, [pc, #796]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800280a:	6a1a      	ldr	r2, [r3, #32]
 800280c:	4bc6      	ldr	r3, [pc, #792]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800280e:	2104      	movs	r1, #4
 8002810:	438a      	bics	r2, r1
 8002812:	621a      	str	r2, [r3, #32]
 8002814:	e01c      	b.n	8002850 <HAL_RCC_OscConfig+0x3a4>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b05      	cmp	r3, #5
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x38c>
 800281e:	4bc2      	ldr	r3, [pc, #776]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002820:	6a1a      	ldr	r2, [r3, #32]
 8002822:	4bc1      	ldr	r3, [pc, #772]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002824:	2104      	movs	r1, #4
 8002826:	430a      	orrs	r2, r1
 8002828:	621a      	str	r2, [r3, #32]
 800282a:	4bbf      	ldr	r3, [pc, #764]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800282c:	6a1a      	ldr	r2, [r3, #32]
 800282e:	4bbe      	ldr	r3, [pc, #760]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002830:	2101      	movs	r1, #1
 8002832:	430a      	orrs	r2, r1
 8002834:	621a      	str	r2, [r3, #32]
 8002836:	e00b      	b.n	8002850 <HAL_RCC_OscConfig+0x3a4>
 8002838:	4bbb      	ldr	r3, [pc, #748]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800283a:	6a1a      	ldr	r2, [r3, #32]
 800283c:	4bba      	ldr	r3, [pc, #744]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800283e:	2101      	movs	r1, #1
 8002840:	438a      	bics	r2, r1
 8002842:	621a      	str	r2, [r3, #32]
 8002844:	4bb8      	ldr	r3, [pc, #736]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002846:	6a1a      	ldr	r2, [r3, #32]
 8002848:	4bb7      	ldr	r3, [pc, #732]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800284a:	2104      	movs	r1, #4
 800284c:	438a      	bics	r2, r1
 800284e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d014      	beq.n	8002882 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002858:	f7fe fb34 	bl	8000ec4 <HAL_GetTick>
 800285c:	0003      	movs	r3, r0
 800285e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002860:	e009      	b.n	8002876 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002862:	f7fe fb2f 	bl	8000ec4 <HAL_GetTick>
 8002866:	0002      	movs	r2, r0
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	4aaf      	ldr	r2, [pc, #700]	; (8002b2c <HAL_RCC_OscConfig+0x680>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e19a      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002876:	4bac      	ldr	r3, [pc, #688]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	2202      	movs	r2, #2
 800287c:	4013      	ands	r3, r2
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x3b6>
 8002880:	e013      	b.n	80028aa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002882:	f7fe fb1f 	bl	8000ec4 <HAL_GetTick>
 8002886:	0003      	movs	r3, r0
 8002888:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288a:	e009      	b.n	80028a0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800288c:	f7fe fb1a 	bl	8000ec4 <HAL_GetTick>
 8002890:	0002      	movs	r2, r0
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	4aa5      	ldr	r2, [pc, #660]	; (8002b2c <HAL_RCC_OscConfig+0x680>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e185      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a0:	4ba1      	ldr	r3, [pc, #644]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	2202      	movs	r2, #2
 80028a6:	4013      	ands	r3, r2
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028aa:	231f      	movs	r3, #31
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d105      	bne.n	80028c0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b4:	4b9c      	ldr	r3, [pc, #624]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80028b6:	69da      	ldr	r2, [r3, #28]
 80028b8:	4b9b      	ldr	r3, [pc, #620]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80028ba:	499d      	ldr	r1, [pc, #628]	; (8002b30 <HAL_RCC_OscConfig+0x684>)
 80028bc:	400a      	ands	r2, r1
 80028be:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2210      	movs	r2, #16
 80028c6:	4013      	ands	r3, r2
 80028c8:	d063      	beq.n	8002992 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d12a      	bne.n	8002928 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80028d2:	4b95      	ldr	r3, [pc, #596]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80028d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d6:	4b94      	ldr	r3, [pc, #592]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80028d8:	2104      	movs	r1, #4
 80028da:	430a      	orrs	r2, r1
 80028dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80028de:	4b92      	ldr	r3, [pc, #584]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80028e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e2:	4b91      	ldr	r3, [pc, #580]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80028e4:	2101      	movs	r1, #1
 80028e6:	430a      	orrs	r2, r1
 80028e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ea:	f7fe faeb 	bl	8000ec4 <HAL_GetTick>
 80028ee:	0003      	movs	r3, r0
 80028f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80028f4:	f7fe fae6 	bl	8000ec4 <HAL_GetTick>
 80028f8:	0002      	movs	r2, r0
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e152      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002906:	4b88      	ldr	r3, [pc, #544]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290a:	2202      	movs	r2, #2
 800290c:	4013      	ands	r3, r2
 800290e:	d0f1      	beq.n	80028f4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002910:	4b85      	ldr	r3, [pc, #532]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002914:	22f8      	movs	r2, #248	; 0xf8
 8002916:	4393      	bics	r3, r2
 8002918:	0019      	movs	r1, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	00da      	lsls	r2, r3, #3
 8002920:	4b81      	ldr	r3, [pc, #516]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002922:	430a      	orrs	r2, r1
 8002924:	635a      	str	r2, [r3, #52]	; 0x34
 8002926:	e034      	b.n	8002992 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	3305      	adds	r3, #5
 800292e:	d111      	bne.n	8002954 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002930:	4b7d      	ldr	r3, [pc, #500]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002934:	4b7c      	ldr	r3, [pc, #496]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002936:	2104      	movs	r1, #4
 8002938:	438a      	bics	r2, r1
 800293a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800293c:	4b7a      	ldr	r3, [pc, #488]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800293e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002940:	22f8      	movs	r2, #248	; 0xf8
 8002942:	4393      	bics	r3, r2
 8002944:	0019      	movs	r1, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	00da      	lsls	r2, r3, #3
 800294c:	4b76      	ldr	r3, [pc, #472]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800294e:	430a      	orrs	r2, r1
 8002950:	635a      	str	r2, [r3, #52]	; 0x34
 8002952:	e01e      	b.n	8002992 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002954:	4b74      	ldr	r3, [pc, #464]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800295a:	2104      	movs	r1, #4
 800295c:	430a      	orrs	r2, r1
 800295e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002960:	4b71      	ldr	r3, [pc, #452]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002964:	4b70      	ldr	r3, [pc, #448]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002966:	2101      	movs	r1, #1
 8002968:	438a      	bics	r2, r1
 800296a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296c:	f7fe faaa 	bl	8000ec4 <HAL_GetTick>
 8002970:	0003      	movs	r3, r0
 8002972:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002976:	f7fe faa5 	bl	8000ec4 <HAL_GetTick>
 800297a:	0002      	movs	r2, r0
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e111      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002988:	4b67      	ldr	r3, [pc, #412]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800298a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298c:	2202      	movs	r2, #2
 800298e:	4013      	ands	r3, r2
 8002990:	d1f1      	bne.n	8002976 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2220      	movs	r2, #32
 8002998:	4013      	ands	r3, r2
 800299a:	d05c      	beq.n	8002a56 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800299c:	4b62      	ldr	r3, [pc, #392]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	220c      	movs	r2, #12
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b0c      	cmp	r3, #12
 80029a6:	d00e      	beq.n	80029c6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80029a8:	4b5f      	ldr	r3, [pc, #380]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	220c      	movs	r2, #12
 80029ae:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d114      	bne.n	80029de <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80029b4:	4b5c      	ldr	r3, [pc, #368]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	23c0      	movs	r3, #192	; 0xc0
 80029ba:	025b      	lsls	r3, r3, #9
 80029bc:	401a      	ands	r2, r3
 80029be:	23c0      	movs	r3, #192	; 0xc0
 80029c0:	025b      	lsls	r3, r3, #9
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d10b      	bne.n	80029de <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80029c6:	4b58      	ldr	r3, [pc, #352]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80029c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ca:	2380      	movs	r3, #128	; 0x80
 80029cc:	025b      	lsls	r3, r3, #9
 80029ce:	4013      	ands	r3, r2
 80029d0:	d040      	beq.n	8002a54 <HAL_RCC_OscConfig+0x5a8>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d03c      	beq.n	8002a54 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e0e6      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d01b      	beq.n	8002a1e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80029e6:	4b50      	ldr	r3, [pc, #320]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80029e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ea:	4b4f      	ldr	r3, [pc, #316]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 80029ec:	2180      	movs	r1, #128	; 0x80
 80029ee:	0249      	lsls	r1, r1, #9
 80029f0:	430a      	orrs	r2, r1
 80029f2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe fa66 	bl	8000ec4 <HAL_GetTick>
 80029f8:	0003      	movs	r3, r0
 80029fa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029fe:	f7fe fa61 	bl	8000ec4 <HAL_GetTick>
 8002a02:	0002      	movs	r2, r0
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e0cd      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002a10:	4b45      	ldr	r3, [pc, #276]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	025b      	lsls	r3, r3, #9
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x552>
 8002a1c:	e01b      	b.n	8002a56 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002a1e:	4b42      	ldr	r3, [pc, #264]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a22:	4b41      	ldr	r3, [pc, #260]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002a24:	4943      	ldr	r1, [pc, #268]	; (8002b34 <HAL_RCC_OscConfig+0x688>)
 8002a26:	400a      	ands	r2, r1
 8002a28:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7fe fa4b 	bl	8000ec4 <HAL_GetTick>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a34:	f7fe fa46 	bl	8000ec4 <HAL_GetTick>
 8002a38:	0002      	movs	r2, r0
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e0b2      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002a46:	4b38      	ldr	r3, [pc, #224]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a4a:	2380      	movs	r3, #128	; 0x80
 8002a4c:	025b      	lsls	r3, r3, #9
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x588>
 8002a52:	e000      	b.n	8002a56 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002a54:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d100      	bne.n	8002a60 <HAL_RCC_OscConfig+0x5b4>
 8002a5e:	e0a4      	b.n	8002baa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a60:	4b31      	ldr	r3, [pc, #196]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	220c      	movs	r2, #12
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d100      	bne.n	8002a6e <HAL_RCC_OscConfig+0x5c2>
 8002a6c:	e078      	b.n	8002b60 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d14c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a76:	4b2c      	ldr	r3, [pc, #176]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002a7c:	492e      	ldr	r1, [pc, #184]	; (8002b38 <HAL_RCC_OscConfig+0x68c>)
 8002a7e:	400a      	ands	r2, r1
 8002a80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a82:	f7fe fa1f 	bl	8000ec4 <HAL_GetTick>
 8002a86:	0003      	movs	r3, r0
 8002a88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fa1a 	bl	8000ec4 <HAL_GetTick>
 8002a90:	0002      	movs	r2, r0
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e086      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a9e:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	049b      	lsls	r3, r3, #18
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aaa:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	220f      	movs	r2, #15
 8002ab0:	4393      	bics	r3, r2
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002aba:	430a      	orrs	r2, r1
 8002abc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002abe:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	4a1e      	ldr	r2, [pc, #120]	; (8002b3c <HAL_RCC_OscConfig+0x690>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad8:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002ade:	2180      	movs	r1, #128	; 0x80
 8002ae0:	0449      	lsls	r1, r1, #17
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7fe f9ed 	bl	8000ec4 <HAL_GetTick>
 8002aea:	0003      	movs	r3, r0
 8002aec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af0:	f7fe f9e8 	bl	8000ec4 <HAL_GetTick>
 8002af4:	0002      	movs	r2, r0
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e054      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	2380      	movs	r3, #128	; 0x80
 8002b08:	049b      	lsls	r3, r3, #18
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x644>
 8002b0e:	e04c      	b.n	8002baa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <HAL_RCC_OscConfig+0x67c>)
 8002b16:	4908      	ldr	r1, [pc, #32]	; (8002b38 <HAL_RCC_OscConfig+0x68c>)
 8002b18:	400a      	ands	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7fe f9d2 	bl	8000ec4 <HAL_GetTick>
 8002b20:	0003      	movs	r3, r0
 8002b22:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b24:	e015      	b.n	8002b52 <HAL_RCC_OscConfig+0x6a6>
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	00001388 	.word	0x00001388
 8002b30:	efffffff 	.word	0xefffffff
 8002b34:	fffeffff 	.word	0xfffeffff
 8002b38:	feffffff 	.word	0xfeffffff
 8002b3c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b40:	f7fe f9c0 	bl	8000ec4 <HAL_GetTick>
 8002b44:	0002      	movs	r2, r0
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e02c      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b52:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <HAL_RCC_OscConfig+0x708>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	049b      	lsls	r3, r3, #18
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x694>
 8002b5e:	e024      	b.n	8002baa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e01f      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <HAL_RCC_OscConfig+0x708>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002b72:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <HAL_RCC_OscConfig+0x708>)
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	23c0      	movs	r3, #192	; 0xc0
 8002b7c:	025b      	lsls	r3, r3, #9
 8002b7e:	401a      	ands	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d10e      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	220f      	movs	r2, #15
 8002b8c:	401a      	ands	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	23f0      	movs	r3, #240	; 0xf0
 8002b9a:	039b      	lsls	r3, r3, #14
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d001      	beq.n	8002baa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	0018      	movs	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b008      	add	sp, #32
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0bf      	b.n	8002d4c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b61      	ldr	r3, [pc, #388]	; (8002d54 <HAL_RCC_ClockConfig+0x19c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d911      	bls.n	8002bfe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b5e      	ldr	r3, [pc, #376]	; (8002d54 <HAL_RCC_ClockConfig+0x19c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2201      	movs	r2, #1
 8002be0:	4393      	bics	r3, r2
 8002be2:	0019      	movs	r1, r3
 8002be4:	4b5b      	ldr	r3, [pc, #364]	; (8002d54 <HAL_RCC_ClockConfig+0x19c>)
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bec:	4b59      	ldr	r3, [pc, #356]	; (8002d54 <HAL_RCC_ClockConfig+0x19c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d001      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e0a6      	b.n	8002d4c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2202      	movs	r2, #2
 8002c04:	4013      	ands	r3, r2
 8002c06:	d015      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d006      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c12:	4b51      	ldr	r3, [pc, #324]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	4b50      	ldr	r3, [pc, #320]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002c18:	21e0      	movs	r1, #224	; 0xe0
 8002c1a:	00c9      	lsls	r1, r1, #3
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c20:	4b4d      	ldr	r3, [pc, #308]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	22f0      	movs	r2, #240	; 0xf0
 8002c26:	4393      	bics	r3, r2
 8002c28:	0019      	movs	r1, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	4b4a      	ldr	r3, [pc, #296]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002c30:	430a      	orrs	r2, r1
 8002c32:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d04c      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d107      	bne.n	8002c56 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	4b44      	ldr	r3, [pc, #272]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	029b      	lsls	r3, r3, #10
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d120      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e07a      	b.n	8002d4c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d107      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5e:	4b3e      	ldr	r3, [pc, #248]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	049b      	lsls	r3, r3, #18
 8002c66:	4013      	ands	r3, r2
 8002c68:	d114      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e06e      	b.n	8002d4c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002c76:	4b38      	ldr	r3, [pc, #224]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	025b      	lsls	r3, r3, #9
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d108      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e062      	b.n	8002d4c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c86:	4b34      	ldr	r3, [pc, #208]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d101      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e05b      	b.n	8002d4c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c94:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2203      	movs	r2, #3
 8002c9a:	4393      	bics	r3, r2
 8002c9c:	0019      	movs	r1, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca8:	f7fe f90c 	bl	8000ec4 <HAL_GetTick>
 8002cac:	0003      	movs	r3, r0
 8002cae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb0:	e009      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb2:	f7fe f907 	bl	8000ec4 <HAL_GetTick>
 8002cb6:	0002      	movs	r2, r0
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	4a27      	ldr	r2, [pc, #156]	; (8002d5c <HAL_RCC_ClockConfig+0x1a4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e042      	b.n	8002d4c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc6:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	220c      	movs	r2, #12
 8002ccc:	401a      	ands	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d1ec      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <HAL_RCC_ClockConfig+0x19c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	4013      	ands	r3, r2
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d211      	bcs.n	8002d0a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_RCC_ClockConfig+0x19c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2201      	movs	r2, #1
 8002cec:	4393      	bics	r3, r2
 8002cee:	0019      	movs	r1, r3
 8002cf0:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <HAL_RCC_ClockConfig+0x19c>)
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf8:	4b16      	ldr	r3, [pc, #88]	; (8002d54 <HAL_RCC_ClockConfig+0x19c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	4013      	ands	r3, r2
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d001      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e020      	b.n	8002d4c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2204      	movs	r2, #4
 8002d10:	4013      	ands	r3, r2
 8002d12:	d009      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d14:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	4a11      	ldr	r2, [pc, #68]	; (8002d60 <HAL_RCC_ClockConfig+0x1a8>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002d24:	430a      	orrs	r2, r1
 8002d26:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d28:	f000 f820 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 8002d2c:	0001      	movs	r1, r0
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <HAL_RCC_ClockConfig+0x1a0>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	091b      	lsrs	r3, r3, #4
 8002d34:	220f      	movs	r2, #15
 8002d36:	4013      	ands	r3, r2
 8002d38:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <HAL_RCC_ClockConfig+0x1ac>)
 8002d3a:	5cd3      	ldrb	r3, [r2, r3]
 8002d3c:	000a      	movs	r2, r1
 8002d3e:	40da      	lsrs	r2, r3
 8002d40:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_RCC_ClockConfig+0x1b0>)
 8002d42:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f7fd ffe7 	bl	8000d18 <HAL_InitTick>
  
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b004      	add	sp, #16
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40022000 	.word	0x40022000
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	00001388 	.word	0x00001388
 8002d60:	fffff8ff 	.word	0xfffff8ff
 8002d64:	080061fc 	.word	0x080061fc
 8002d68:	20000024 	.word	0x20000024

08002d6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d6c:	b590      	push	{r4, r7, lr}
 8002d6e:	b08f      	sub	sp, #60	; 0x3c
 8002d70:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002d72:	2314      	movs	r3, #20
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	4a37      	ldr	r2, [pc, #220]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002d78:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d7a:	c313      	stmia	r3!, {r0, r1, r4}
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002d80:	1d3b      	adds	r3, r7, #4
 8002d82:	4a35      	ldr	r2, [pc, #212]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xec>)
 8002d84:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d86:	c313      	stmia	r3!, {r0, r1, r4}
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d90:	2300      	movs	r3, #0
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d94:	2300      	movs	r3, #0
 8002d96:	637b      	str	r3, [r7, #52]	; 0x34
 8002d98:	2300      	movs	r3, #0
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002da0:	4b2e      	ldr	r3, [pc, #184]	; (8002e5c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	220c      	movs	r2, #12
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d006      	beq.n	8002dbe <HAL_RCC_GetSysClockFreq+0x52>
 8002db0:	2b0c      	cmp	r3, #12
 8002db2:	d043      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0xd0>
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d144      	bne.n	8002e42 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002db8:	4b29      	ldr	r3, [pc, #164]	; (8002e60 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002dba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dbc:	e044      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc0:	0c9b      	lsrs	r3, r3, #18
 8002dc2:	220f      	movs	r2, #15
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2214      	movs	r2, #20
 8002dc8:	18ba      	adds	r2, r7, r2
 8002dca:	5cd3      	ldrb	r3, [r2, r3]
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002dce:	4b23      	ldr	r3, [pc, #140]	; (8002e5c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	220f      	movs	r2, #15
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	1d3a      	adds	r2, r7, #4
 8002dd8:	5cd3      	ldrb	r3, [r2, r3]
 8002dda:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dde:	23c0      	movs	r3, #192	; 0xc0
 8002de0:	025b      	lsls	r3, r3, #9
 8002de2:	401a      	ands	r2, r3
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	025b      	lsls	r3, r3, #9
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d109      	bne.n	8002e00 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002dec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dee:	481c      	ldr	r0, [pc, #112]	; (8002e60 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002df0:	f7fd f98a 	bl	8000108 <__udivsi3>
 8002df4:	0003      	movs	r3, r0
 8002df6:	001a      	movs	r2, r3
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	4353      	muls	r3, r2
 8002dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8002dfe:	e01a      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e02:	23c0      	movs	r3, #192	; 0xc0
 8002e04:	025b      	lsls	r3, r3, #9
 8002e06:	401a      	ands	r2, r3
 8002e08:	23c0      	movs	r3, #192	; 0xc0
 8002e0a:	025b      	lsls	r3, r3, #9
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d109      	bne.n	8002e24 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e12:	4814      	ldr	r0, [pc, #80]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e14:	f7fd f978 	bl	8000108 <__udivsi3>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	001a      	movs	r2, r3
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	4353      	muls	r3, r2
 8002e20:	637b      	str	r3, [r7, #52]	; 0x34
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e26:	480e      	ldr	r0, [pc, #56]	; (8002e60 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002e28:	f7fd f96e 	bl	8000108 <__udivsi3>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	001a      	movs	r2, r3
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	4353      	muls	r3, r2
 8002e34:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e38:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e3a:	e005      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e3e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e40:	e002      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e42:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002e44:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e46:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	b00f      	add	sp, #60	; 0x3c
 8002e50:	bd90      	pop	{r4, r7, pc}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	0800617c 	.word	0x0800617c
 8002e58:	0800618c 	.word	0x0800618c
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	007a1200 	.word	0x007a1200
 8002e64:	02dc6c00 	.word	0x02dc6c00

08002e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e6c:	4b02      	ldr	r3, [pc, #8]	; (8002e78 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
}
 8002e70:	0018      	movs	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	20000024 	.word	0x20000024

08002e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002e80:	f7ff fff2 	bl	8002e68 <HAL_RCC_GetHCLKFreq>
 8002e84:	0001      	movs	r1, r0
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	0a1b      	lsrs	r3, r3, #8
 8002e8c:	2207      	movs	r2, #7
 8002e8e:	4013      	ands	r3, r2
 8002e90:	4a04      	ldr	r2, [pc, #16]	; (8002ea4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e92:	5cd3      	ldrb	r3, [r2, r3]
 8002e94:	40d9      	lsrs	r1, r3
 8002e96:	000b      	movs	r3, r1
}    
 8002e98:	0018      	movs	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	0800620c 	.word	0x0800620c

08002ea8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2207      	movs	r2, #7
 8002eb6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002eb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <HAL_RCC_GetClockConfig+0x4c>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_RCC_GetClockConfig+0x4c>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	22f0      	movs	r2, #240	; 0xf0
 8002eca:	401a      	ands	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_RCC_GetClockConfig+0x4c>)
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	23e0      	movs	r3, #224	; 0xe0
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	401a      	ands	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8002ede:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <HAL_RCC_GetClockConfig+0x50>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	601a      	str	r2, [r3, #0]
}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b002      	add	sp, #8
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40022000 	.word	0x40022000

08002efc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	025b      	lsls	r3, r3, #9
 8002f14:	4013      	ands	r3, r2
 8002f16:	d100      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002f18:	e08f      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002f1a:	2317      	movs	r3, #23
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f22:	4b6f      	ldr	r3, [pc, #444]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002f24:	69da      	ldr	r2, [r3, #28]
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	055b      	lsls	r3, r3, #21
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d111      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	4b6c      	ldr	r3, [pc, #432]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	4b6b      	ldr	r3, [pc, #428]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002f34:	2180      	movs	r1, #128	; 0x80
 8002f36:	0549      	lsls	r1, r1, #21
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	61da      	str	r2, [r3, #28]
 8002f3c:	4b68      	ldr	r3, [pc, #416]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002f3e:	69da      	ldr	r2, [r3, #28]
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	055b      	lsls	r3, r3, #21
 8002f44:	4013      	ands	r3, r2
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f4a:	2317      	movs	r3, #23
 8002f4c:	18fb      	adds	r3, r7, r3
 8002f4e:	2201      	movs	r2, #1
 8002f50:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f52:	4b64      	ldr	r3, [pc, #400]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d11a      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f5e:	4b61      	ldr	r3, [pc, #388]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	4b60      	ldr	r3, [pc, #384]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002f64:	2180      	movs	r1, #128	; 0x80
 8002f66:	0049      	lsls	r1, r1, #1
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6c:	f7fd ffaa 	bl	8000ec4 <HAL_GetTick>
 8002f70:	0003      	movs	r3, r0
 8002f72:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	e008      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f76:	f7fd ffa5 	bl	8000ec4 <HAL_GetTick>
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b64      	cmp	r3, #100	; 0x64
 8002f82:	d901      	bls.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e0a6      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f88:	4b56      	ldr	r3, [pc, #344]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4013      	ands	r3, r2
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f94:	4b52      	ldr	r3, [pc, #328]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002f96:	6a1a      	ldr	r2, [r3, #32]
 8002f98:	23c0      	movs	r3, #192	; 0xc0
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d034      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	23c0      	movs	r3, #192	; 0xc0
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4013      	ands	r3, r2
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d02c      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fb6:	4b4a      	ldr	r3, [pc, #296]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	4a4b      	ldr	r2, [pc, #300]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fc0:	4b47      	ldr	r3, [pc, #284]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002fc2:	6a1a      	ldr	r2, [r3, #32]
 8002fc4:	4b46      	ldr	r3, [pc, #280]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002fc6:	2180      	movs	r1, #128	; 0x80
 8002fc8:	0249      	lsls	r1, r1, #9
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fce:	4b44      	ldr	r3, [pc, #272]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002fd0:	6a1a      	ldr	r2, [r3, #32]
 8002fd2:	4b43      	ldr	r3, [pc, #268]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002fd4:	4945      	ldr	r1, [pc, #276]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002fd6:	400a      	ands	r2, r1
 8002fd8:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fda:	4b41      	ldr	r3, [pc, #260]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d013      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fd ff6c 	bl	8000ec4 <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff0:	e009      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fd ff67 	bl	8000ec4 <HAL_GetTick>
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	4a3c      	ldr	r2, [pc, #240]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e067      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003006:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	2202      	movs	r2, #2
 800300c:	4013      	ands	r3, r2
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003010:	4b33      	ldr	r3, [pc, #204]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4a34      	ldr	r2, [pc, #208]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003016:	4013      	ands	r3, r2
 8003018:	0019      	movs	r1, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	4b30      	ldr	r3, [pc, #192]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003020:	430a      	orrs	r2, r1
 8003022:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003024:	2317      	movs	r3, #23
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d105      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800302e:	4b2c      	ldr	r3, [pc, #176]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003030:	69da      	ldr	r2, [r3, #28]
 8003032:	4b2b      	ldr	r3, [pc, #172]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003034:	492f      	ldr	r1, [pc, #188]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003036:	400a      	ands	r2, r1
 8003038:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2201      	movs	r2, #1
 8003040:	4013      	ands	r3, r2
 8003042:	d009      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003044:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003048:	2203      	movs	r2, #3
 800304a:	4393      	bics	r3, r2
 800304c:	0019      	movs	r1, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003054:	430a      	orrs	r2, r1
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2202      	movs	r2, #2
 800305e:	4013      	ands	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003062:	4b1f      	ldr	r3, [pc, #124]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	4a24      	ldr	r2, [pc, #144]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003068:	4013      	ands	r3, r2
 800306a:	0019      	movs	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003072:	430a      	orrs	r2, r1
 8003074:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2220      	movs	r2, #32
 800307c:	4013      	ands	r3, r2
 800307e:	d009      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003080:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	2210      	movs	r2, #16
 8003086:	4393      	bics	r3, r2
 8003088:	0019      	movs	r1, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691a      	ldr	r2, [r3, #16]
 800308e:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003090:	430a      	orrs	r2, r1
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	2380      	movs	r3, #128	; 0x80
 800309a:	029b      	lsls	r3, r3, #10
 800309c:	4013      	ands	r3, r2
 800309e:	d009      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	2280      	movs	r2, #128	; 0x80
 80030a6:	4393      	bics	r3, r2
 80030a8:	0019      	movs	r1, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699a      	ldr	r2, [r3, #24]
 80030ae:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030b0:	430a      	orrs	r2, r1
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4013      	ands	r3, r2
 80030be:	d009      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	2240      	movs	r2, #64	; 0x40
 80030c6:	4393      	bics	r3, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030d0:	430a      	orrs	r2, r1
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	0018      	movs	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	b006      	add	sp, #24
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40007000 	.word	0x40007000
 80030e8:	fffffcff 	.word	0xfffffcff
 80030ec:	fffeffff 	.word	0xfffeffff
 80030f0:	00001388 	.word	0x00001388
 80030f4:	efffffff 	.word	0xefffffff
 80030f8:	fffcffff 	.word	0xfffcffff

080030fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e01e      	b.n	800314c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	223d      	movs	r2, #61	; 0x3d
 8003112:	5c9b      	ldrb	r3, [r3, r2]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d107      	bne.n	800312a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	223c      	movs	r2, #60	; 0x3c
 800311e:	2100      	movs	r1, #0
 8003120:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	0018      	movs	r0, r3
 8003126:	f7fd fd75 	bl	8000c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	223d      	movs	r2, #61	; 0x3d
 800312e:	2102      	movs	r1, #2
 8003130:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3304      	adds	r3, #4
 800313a:	0019      	movs	r1, r3
 800313c:	0010      	movs	r0, r2
 800313e:	f000 f983 	bl	8003448 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	223d      	movs	r2, #61	; 0x3d
 8003146:	2101      	movs	r1, #1
 8003148:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	0018      	movs	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	b002      	add	sp, #8
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	223d      	movs	r2, #61	; 0x3d
 8003160:	2102      	movs	r1, #2
 8003162:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2207      	movs	r2, #7
 800316c:	4013      	ands	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b06      	cmp	r3, #6
 8003174:	d007      	beq.n	8003186 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2101      	movs	r1, #1
 8003182:	430a      	orrs	r2, r1
 8003184:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	223d      	movs	r2, #61	; 0x3d
 800318a:	2101      	movs	r1, #1
 800318c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	0018      	movs	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	b004      	add	sp, #16
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2101      	movs	r1, #1
 80031ac:	430a      	orrs	r2, r1
 80031ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2207      	movs	r2, #7
 80031b8:	4013      	ands	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b06      	cmp	r3, #6
 80031c0:	d007      	beq.n	80031d2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2101      	movs	r1, #1
 80031ce:	430a      	orrs	r2, r1
 80031d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	0018      	movs	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b004      	add	sp, #16
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2202      	movs	r2, #2
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d124      	bne.n	800323c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	2202      	movs	r2, #2
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d11d      	bne.n	800323c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2203      	movs	r2, #3
 8003206:	4252      	negs	r2, r2
 8003208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2203      	movs	r2, #3
 8003218:	4013      	ands	r3, r2
 800321a:	d004      	beq.n	8003226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	0018      	movs	r0, r3
 8003220:	f000 f8fa 	bl	8003418 <HAL_TIM_IC_CaptureCallback>
 8003224:	e007      	b.n	8003236 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	0018      	movs	r0, r3
 800322a:	f000 f8ed 	bl	8003408 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	0018      	movs	r0, r3
 8003232:	f000 f8f9 	bl	8003428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	2204      	movs	r2, #4
 8003244:	4013      	ands	r3, r2
 8003246:	2b04      	cmp	r3, #4
 8003248:	d125      	bne.n	8003296 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2204      	movs	r2, #4
 8003252:	4013      	ands	r3, r2
 8003254:	2b04      	cmp	r3, #4
 8003256:	d11e      	bne.n	8003296 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2205      	movs	r2, #5
 800325e:	4252      	negs	r2, r2
 8003260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2202      	movs	r2, #2
 8003266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	23c0      	movs	r3, #192	; 0xc0
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4013      	ands	r3, r2
 8003274:	d004      	beq.n	8003280 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	0018      	movs	r0, r3
 800327a:	f000 f8cd 	bl	8003418 <HAL_TIM_IC_CaptureCallback>
 800327e:	e007      	b.n	8003290 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	0018      	movs	r0, r3
 8003284:	f000 f8c0 	bl	8003408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	0018      	movs	r0, r3
 800328c:	f000 f8cc 	bl	8003428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	2208      	movs	r2, #8
 800329e:	4013      	ands	r3, r2
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d124      	bne.n	80032ee <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	2208      	movs	r2, #8
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d11d      	bne.n	80032ee <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2209      	movs	r2, #9
 80032b8:	4252      	negs	r2, r2
 80032ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2204      	movs	r2, #4
 80032c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	2203      	movs	r2, #3
 80032ca:	4013      	ands	r3, r2
 80032cc:	d004      	beq.n	80032d8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f000 f8a1 	bl	8003418 <HAL_TIM_IC_CaptureCallback>
 80032d6:	e007      	b.n	80032e8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	0018      	movs	r0, r3
 80032dc:	f000 f894 	bl	8003408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	0018      	movs	r0, r3
 80032e4:	f000 f8a0 	bl	8003428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	2210      	movs	r2, #16
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b10      	cmp	r3, #16
 80032fa:	d125      	bne.n	8003348 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	2210      	movs	r2, #16
 8003304:	4013      	ands	r3, r2
 8003306:	2b10      	cmp	r3, #16
 8003308:	d11e      	bne.n	8003348 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2211      	movs	r2, #17
 8003310:	4252      	negs	r2, r2
 8003312:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2208      	movs	r2, #8
 8003318:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69da      	ldr	r2, [r3, #28]
 8003320:	23c0      	movs	r3, #192	; 0xc0
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4013      	ands	r3, r2
 8003326:	d004      	beq.n	8003332 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	0018      	movs	r0, r3
 800332c:	f000 f874 	bl	8003418 <HAL_TIM_IC_CaptureCallback>
 8003330:	e007      	b.n	8003342 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	0018      	movs	r0, r3
 8003336:	f000 f867 	bl	8003408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	0018      	movs	r0, r3
 800333e:	f000 f873 	bl	8003428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2201      	movs	r2, #1
 8003350:	4013      	ands	r3, r2
 8003352:	2b01      	cmp	r3, #1
 8003354:	d10f      	bne.n	8003376 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2201      	movs	r2, #1
 800335e:	4013      	ands	r3, r2
 8003360:	2b01      	cmp	r3, #1
 8003362:	d108      	bne.n	8003376 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2202      	movs	r2, #2
 800336a:	4252      	negs	r2, r2
 800336c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	0018      	movs	r0, r3
 8003372:	f7fd fb35 	bl	80009e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	2280      	movs	r2, #128	; 0x80
 800337e:	4013      	ands	r3, r2
 8003380:	2b80      	cmp	r3, #128	; 0x80
 8003382:	d10f      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	2280      	movs	r2, #128	; 0x80
 800338c:	4013      	ands	r3, r2
 800338e:	2b80      	cmp	r3, #128	; 0x80
 8003390:	d108      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2281      	movs	r2, #129	; 0x81
 8003398:	4252      	negs	r2, r2
 800339a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	0018      	movs	r0, r3
 80033a0:	f000 f8da 	bl	8003558 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	2240      	movs	r2, #64	; 0x40
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b40      	cmp	r3, #64	; 0x40
 80033b0:	d10f      	bne.n	80033d2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	2240      	movs	r2, #64	; 0x40
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b40      	cmp	r3, #64	; 0x40
 80033be:	d108      	bne.n	80033d2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2241      	movs	r2, #65	; 0x41
 80033c6:	4252      	negs	r2, r2
 80033c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	0018      	movs	r0, r3
 80033ce:	f000 f833 	bl	8003438 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	2220      	movs	r2, #32
 80033da:	4013      	ands	r3, r2
 80033dc:	2b20      	cmp	r3, #32
 80033de:	d10f      	bne.n	8003400 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	d108      	bne.n	8003400 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2221      	movs	r2, #33	; 0x21
 80033f4:	4252      	negs	r2, r2
 80033f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	0018      	movs	r0, r3
 80033fc:	f000 f8a4 	bl	8003548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003400:	46c0      	nop			; (mov r8, r8)
 8003402:	46bd      	mov	sp, r7
 8003404:	b002      	add	sp, #8
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003410:	46c0      	nop			; (mov r8, r8)
 8003412:	46bd      	mov	sp, r7
 8003414:	b002      	add	sp, #8
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003420:	46c0      	nop			; (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	b002      	add	sp, #8
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003430:	46c0      	nop			; (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	b002      	add	sp, #8
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003440:	46c0      	nop			; (mov r8, r8)
 8003442:	46bd      	mov	sp, r7
 8003444:	b002      	add	sp, #8
 8003446:	bd80      	pop	{r7, pc}

08003448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a34      	ldr	r2, [pc, #208]	; (800352c <TIM_Base_SetConfig+0xe4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d008      	beq.n	8003472 <TIM_Base_SetConfig+0x2a>
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	2380      	movs	r3, #128	; 0x80
 8003464:	05db      	lsls	r3, r3, #23
 8003466:	429a      	cmp	r2, r3
 8003468:	d003      	beq.n	8003472 <TIM_Base_SetConfig+0x2a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a30      	ldr	r2, [pc, #192]	; (8003530 <TIM_Base_SetConfig+0xe8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d108      	bne.n	8003484 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2270      	movs	r2, #112	; 0x70
 8003476:	4393      	bics	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a29      	ldr	r2, [pc, #164]	; (800352c <TIM_Base_SetConfig+0xe4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d018      	beq.n	80034be <TIM_Base_SetConfig+0x76>
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	05db      	lsls	r3, r3, #23
 8003492:	429a      	cmp	r2, r3
 8003494:	d013      	beq.n	80034be <TIM_Base_SetConfig+0x76>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a25      	ldr	r2, [pc, #148]	; (8003530 <TIM_Base_SetConfig+0xe8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00f      	beq.n	80034be <TIM_Base_SetConfig+0x76>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a24      	ldr	r2, [pc, #144]	; (8003534 <TIM_Base_SetConfig+0xec>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00b      	beq.n	80034be <TIM_Base_SetConfig+0x76>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a23      	ldr	r2, [pc, #140]	; (8003538 <TIM_Base_SetConfig+0xf0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d007      	beq.n	80034be <TIM_Base_SetConfig+0x76>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a22      	ldr	r2, [pc, #136]	; (800353c <TIM_Base_SetConfig+0xf4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d003      	beq.n	80034be <TIM_Base_SetConfig+0x76>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a21      	ldr	r2, [pc, #132]	; (8003540 <TIM_Base_SetConfig+0xf8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d108      	bne.n	80034d0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4a20      	ldr	r2, [pc, #128]	; (8003544 <TIM_Base_SetConfig+0xfc>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2280      	movs	r2, #128	; 0x80
 80034d4:	4393      	bics	r3, r2
 80034d6:	001a      	movs	r2, r3
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a0c      	ldr	r2, [pc, #48]	; (800352c <TIM_Base_SetConfig+0xe4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00b      	beq.n	8003516 <TIM_Base_SetConfig+0xce>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a0d      	ldr	r2, [pc, #52]	; (8003538 <TIM_Base_SetConfig+0xf0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d007      	beq.n	8003516 <TIM_Base_SetConfig+0xce>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a0c      	ldr	r2, [pc, #48]	; (800353c <TIM_Base_SetConfig+0xf4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d003      	beq.n	8003516 <TIM_Base_SetConfig+0xce>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a0b      	ldr	r2, [pc, #44]	; (8003540 <TIM_Base_SetConfig+0xf8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d103      	bne.n	800351e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	615a      	str	r2, [r3, #20]
}
 8003524:	46c0      	nop			; (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	b004      	add	sp, #16
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40012c00 	.word	0x40012c00
 8003530:	40000400 	.word	0x40000400
 8003534:	40002000 	.word	0x40002000
 8003538:	40014000 	.word	0x40014000
 800353c:	40014400 	.word	0x40014400
 8003540:	40014800 	.word	0x40014800
 8003544:	fffffcff 	.word	0xfffffcff

08003548 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003550:	46c0      	nop			; (mov r8, r8)
 8003552:	46bd      	mov	sp, r7
 8003554:	b002      	add	sp, #8
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003560:	46c0      	nop			; (mov r8, r8)
 8003562:	46bd      	mov	sp, r7
 8003564:	b002      	add	sp, #8
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e044      	b.n	8003604 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357e:	2b00      	cmp	r3, #0
 8003580:	d107      	bne.n	8003592 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2270      	movs	r2, #112	; 0x70
 8003586:	2100      	movs	r1, #0
 8003588:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	0018      	movs	r0, r3
 800358e:	f7fd fb77 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2224      	movs	r2, #36	; 0x24
 8003596:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2101      	movs	r1, #1
 80035a4:	438a      	bics	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	0018      	movs	r0, r3
 80035ac:	f000 f830 	bl	8003610 <UART_SetConfig>
 80035b0:	0003      	movs	r3, r0
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e024      	b.n	8003604 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	0018      	movs	r0, r3
 80035c6:	f000 f9ef 	bl	80039a8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	490d      	ldr	r1, [pc, #52]	; (800360c <HAL_UART_Init+0xa4>)
 80035d6:	400a      	ands	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	212a      	movs	r1, #42	; 0x2a
 80035e6:	438a      	bics	r2, r1
 80035e8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2101      	movs	r1, #1
 80035f6:	430a      	orrs	r2, r1
 80035f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	0018      	movs	r0, r3
 80035fe:	f000 fa87 	bl	8003b10 <UART_CheckIdleState>
 8003602:	0003      	movs	r3, r0
}
 8003604:	0018      	movs	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	b002      	add	sp, #8
 800360a:	bd80      	pop	{r7, pc}
 800360c:	ffffb7ff 	.word	0xffffb7ff

08003610 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003618:	2300      	movs	r3, #0
 800361a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800361c:	2317      	movs	r3, #23
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4ac5      	ldr	r2, [pc, #788]	; (8003958 <UART_SetConfig+0x348>)
 8003644:	4013      	ands	r3, r2
 8003646:	0019      	movs	r1, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	430a      	orrs	r2, r1
 8003650:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4ac0      	ldr	r2, [pc, #768]	; (800395c <UART_SetConfig+0x34c>)
 800365a:	4013      	ands	r3, r2
 800365c:	0019      	movs	r1, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4ab7      	ldr	r2, [pc, #732]	; (8003960 <UART_SetConfig+0x350>)
 8003682:	4013      	ands	r3, r2
 8003684:	0019      	movs	r1, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	430a      	orrs	r2, r1
 800368e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4ab3      	ldr	r2, [pc, #716]	; (8003964 <UART_SetConfig+0x354>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d125      	bne.n	80036e6 <UART_SetConfig+0xd6>
 800369a:	4bb3      	ldr	r3, [pc, #716]	; (8003968 <UART_SetConfig+0x358>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	2203      	movs	r2, #3
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d00f      	beq.n	80036c6 <UART_SetConfig+0xb6>
 80036a6:	d304      	bcc.n	80036b2 <UART_SetConfig+0xa2>
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d011      	beq.n	80036d0 <UART_SetConfig+0xc0>
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d005      	beq.n	80036bc <UART_SetConfig+0xac>
 80036b0:	e013      	b.n	80036da <UART_SetConfig+0xca>
 80036b2:	231f      	movs	r3, #31
 80036b4:	18fb      	adds	r3, r7, r3
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]
 80036ba:	e064      	b.n	8003786 <UART_SetConfig+0x176>
 80036bc:	231f      	movs	r3, #31
 80036be:	18fb      	adds	r3, r7, r3
 80036c0:	2202      	movs	r2, #2
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	e05f      	b.n	8003786 <UART_SetConfig+0x176>
 80036c6:	231f      	movs	r3, #31
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	2204      	movs	r2, #4
 80036cc:	701a      	strb	r2, [r3, #0]
 80036ce:	e05a      	b.n	8003786 <UART_SetConfig+0x176>
 80036d0:	231f      	movs	r3, #31
 80036d2:	18fb      	adds	r3, r7, r3
 80036d4:	2208      	movs	r2, #8
 80036d6:	701a      	strb	r2, [r3, #0]
 80036d8:	e055      	b.n	8003786 <UART_SetConfig+0x176>
 80036da:	231f      	movs	r3, #31
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	2210      	movs	r2, #16
 80036e0:	701a      	strb	r2, [r3, #0]
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	e04f      	b.n	8003786 <UART_SetConfig+0x176>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4aa0      	ldr	r2, [pc, #640]	; (800396c <UART_SetConfig+0x35c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d132      	bne.n	8003756 <UART_SetConfig+0x146>
 80036f0:	4b9d      	ldr	r3, [pc, #628]	; (8003968 <UART_SetConfig+0x358>)
 80036f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036f4:	23c0      	movs	r3, #192	; 0xc0
 80036f6:	029b      	lsls	r3, r3, #10
 80036f8:	4013      	ands	r3, r2
 80036fa:	2280      	movs	r2, #128	; 0x80
 80036fc:	0252      	lsls	r2, r2, #9
 80036fe:	4293      	cmp	r3, r2
 8003700:	d019      	beq.n	8003736 <UART_SetConfig+0x126>
 8003702:	2280      	movs	r2, #128	; 0x80
 8003704:	0252      	lsls	r2, r2, #9
 8003706:	4293      	cmp	r3, r2
 8003708:	d802      	bhi.n	8003710 <UART_SetConfig+0x100>
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <UART_SetConfig+0x112>
 800370e:	e01c      	b.n	800374a <UART_SetConfig+0x13a>
 8003710:	2280      	movs	r2, #128	; 0x80
 8003712:	0292      	lsls	r2, r2, #10
 8003714:	4293      	cmp	r3, r2
 8003716:	d013      	beq.n	8003740 <UART_SetConfig+0x130>
 8003718:	22c0      	movs	r2, #192	; 0xc0
 800371a:	0292      	lsls	r2, r2, #10
 800371c:	4293      	cmp	r3, r2
 800371e:	d005      	beq.n	800372c <UART_SetConfig+0x11c>
 8003720:	e013      	b.n	800374a <UART_SetConfig+0x13a>
 8003722:	231f      	movs	r3, #31
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	2200      	movs	r2, #0
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	e02c      	b.n	8003786 <UART_SetConfig+0x176>
 800372c:	231f      	movs	r3, #31
 800372e:	18fb      	adds	r3, r7, r3
 8003730:	2202      	movs	r2, #2
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	e027      	b.n	8003786 <UART_SetConfig+0x176>
 8003736:	231f      	movs	r3, #31
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	2204      	movs	r2, #4
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	e022      	b.n	8003786 <UART_SetConfig+0x176>
 8003740:	231f      	movs	r3, #31
 8003742:	18fb      	adds	r3, r7, r3
 8003744:	2208      	movs	r2, #8
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	e01d      	b.n	8003786 <UART_SetConfig+0x176>
 800374a:	231f      	movs	r3, #31
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	2210      	movs	r2, #16
 8003750:	701a      	strb	r2, [r3, #0]
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	e017      	b.n	8003786 <UART_SetConfig+0x176>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a85      	ldr	r2, [pc, #532]	; (8003970 <UART_SetConfig+0x360>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d104      	bne.n	800376a <UART_SetConfig+0x15a>
 8003760:	231f      	movs	r3, #31
 8003762:	18fb      	adds	r3, r7, r3
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
 8003768:	e00d      	b.n	8003786 <UART_SetConfig+0x176>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a81      	ldr	r2, [pc, #516]	; (8003974 <UART_SetConfig+0x364>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d104      	bne.n	800377e <UART_SetConfig+0x16e>
 8003774:	231f      	movs	r3, #31
 8003776:	18fb      	adds	r3, r7, r3
 8003778:	2200      	movs	r2, #0
 800377a:	701a      	strb	r2, [r3, #0]
 800377c:	e003      	b.n	8003786 <UART_SetConfig+0x176>
 800377e:	231f      	movs	r3, #31
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	2210      	movs	r2, #16
 8003784:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69da      	ldr	r2, [r3, #28]
 800378a:	2380      	movs	r3, #128	; 0x80
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	429a      	cmp	r2, r3
 8003790:	d000      	beq.n	8003794 <UART_SetConfig+0x184>
 8003792:	e07d      	b.n	8003890 <UART_SetConfig+0x280>
  {
    switch (clocksource)
 8003794:	231f      	movs	r3, #31
 8003796:	18fb      	adds	r3, r7, r3
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d01c      	beq.n	80037d8 <UART_SetConfig+0x1c8>
 800379e:	dc02      	bgt.n	80037a6 <UART_SetConfig+0x196>
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <UART_SetConfig+0x1a0>
 80037a4:	e04b      	b.n	800383e <UART_SetConfig+0x22e>
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d025      	beq.n	80037f6 <UART_SetConfig+0x1e6>
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d037      	beq.n	800381e <UART_SetConfig+0x20e>
 80037ae:	e046      	b.n	800383e <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037b0:	f7ff fb64 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 80037b4:	0003      	movs	r3, r0
 80037b6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	005a      	lsls	r2, r3, #1
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	085b      	lsrs	r3, r3, #1
 80037c2:	18d2      	adds	r2, r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	0019      	movs	r1, r3
 80037ca:	0010      	movs	r0, r2
 80037cc:	f7fc fc9c 	bl	8000108 <__udivsi3>
 80037d0:	0003      	movs	r3, r0
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	61bb      	str	r3, [r7, #24]
        break;
 80037d6:	e037      	b.n	8003848 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	085b      	lsrs	r3, r3, #1
 80037de:	4a66      	ldr	r2, [pc, #408]	; (8003978 <UART_SetConfig+0x368>)
 80037e0:	189a      	adds	r2, r3, r2
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	0019      	movs	r1, r3
 80037e8:	0010      	movs	r0, r2
 80037ea:	f7fc fc8d 	bl	8000108 <__udivsi3>
 80037ee:	0003      	movs	r3, r0
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	61bb      	str	r3, [r7, #24]
        break;
 80037f4:	e028      	b.n	8003848 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037f6:	f7ff fab9 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 80037fa:	0003      	movs	r3, r0
 80037fc:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	005a      	lsls	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	085b      	lsrs	r3, r3, #1
 8003808:	18d2      	adds	r2, r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	0019      	movs	r1, r3
 8003810:	0010      	movs	r0, r2
 8003812:	f7fc fc79 	bl	8000108 <__udivsi3>
 8003816:	0003      	movs	r3, r0
 8003818:	b29b      	uxth	r3, r3
 800381a:	61bb      	str	r3, [r7, #24]
        break;
 800381c:	e014      	b.n	8003848 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	085b      	lsrs	r3, r3, #1
 8003824:	2280      	movs	r2, #128	; 0x80
 8003826:	0252      	lsls	r2, r2, #9
 8003828:	189a      	adds	r2, r3, r2
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	0019      	movs	r1, r3
 8003830:	0010      	movs	r0, r2
 8003832:	f7fc fc69 	bl	8000108 <__udivsi3>
 8003836:	0003      	movs	r3, r0
 8003838:	b29b      	uxth	r3, r3
 800383a:	61bb      	str	r3, [r7, #24]
        break;
 800383c:	e004      	b.n	8003848 <UART_SetConfig+0x238>
      default:
        ret = HAL_ERROR;
 800383e:	2317      	movs	r3, #23
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	2201      	movs	r2, #1
 8003844:	701a      	strb	r2, [r3, #0]
        break;
 8003846:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	2b0f      	cmp	r3, #15
 800384c:	d91b      	bls.n	8003886 <UART_SetConfig+0x276>
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	4a4a      	ldr	r2, [pc, #296]	; (800397c <UART_SetConfig+0x36c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d817      	bhi.n	8003886 <UART_SetConfig+0x276>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	b29a      	uxth	r2, r3
 800385a:	200a      	movs	r0, #10
 800385c:	183b      	adds	r3, r7, r0
 800385e:	210f      	movs	r1, #15
 8003860:	438a      	bics	r2, r1
 8003862:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	085b      	lsrs	r3, r3, #1
 8003868:	b29b      	uxth	r3, r3
 800386a:	2207      	movs	r2, #7
 800386c:	4013      	ands	r3, r2
 800386e:	b299      	uxth	r1, r3
 8003870:	183b      	adds	r3, r7, r0
 8003872:	183a      	adds	r2, r7, r0
 8003874:	8812      	ldrh	r2, [r2, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	183a      	adds	r2, r7, r0
 8003880:	8812      	ldrh	r2, [r2, #0]
 8003882:	60da      	str	r2, [r3, #12]
 8003884:	e082      	b.n	800398c <UART_SetConfig+0x37c>
    }
    else
    {
      ret = HAL_ERROR;
 8003886:	2317      	movs	r3, #23
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	2201      	movs	r2, #1
 800388c:	701a      	strb	r2, [r3, #0]
 800388e:	e07d      	b.n	800398c <UART_SetConfig+0x37c>
    }
  }
  else
  {
    switch (clocksource)
 8003890:	231f      	movs	r3, #31
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d01b      	beq.n	80038d2 <UART_SetConfig+0x2c2>
 800389a:	dc02      	bgt.n	80038a2 <UART_SetConfig+0x292>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <UART_SetConfig+0x29c>
 80038a0:	e049      	b.n	8003936 <UART_SetConfig+0x326>
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d024      	beq.n	80038f0 <UART_SetConfig+0x2e0>
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d035      	beq.n	8003916 <UART_SetConfig+0x306>
 80038aa:	e044      	b.n	8003936 <UART_SetConfig+0x326>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ac:	f7ff fae6 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 80038b0:	0003      	movs	r3, r0
 80038b2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	085a      	lsrs	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	18d2      	adds	r2, r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	0019      	movs	r1, r3
 80038c4:	0010      	movs	r0, r2
 80038c6:	f7fc fc1f 	bl	8000108 <__udivsi3>
 80038ca:	0003      	movs	r3, r0
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	61bb      	str	r3, [r7, #24]
        break;
 80038d0:	e036      	b.n	8003940 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	085b      	lsrs	r3, r3, #1
 80038d8:	4a29      	ldr	r2, [pc, #164]	; (8003980 <UART_SetConfig+0x370>)
 80038da:	189a      	adds	r2, r3, r2
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	0019      	movs	r1, r3
 80038e2:	0010      	movs	r0, r2
 80038e4:	f7fc fc10 	bl	8000108 <__udivsi3>
 80038e8:	0003      	movs	r3, r0
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	61bb      	str	r3, [r7, #24]
        break;
 80038ee:	e027      	b.n	8003940 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038f0:	f7ff fa3c 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 80038f4:	0003      	movs	r3, r0
 80038f6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	085a      	lsrs	r2, r3, #1
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	18d2      	adds	r2, r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	0019      	movs	r1, r3
 8003908:	0010      	movs	r0, r2
 800390a:	f7fc fbfd 	bl	8000108 <__udivsi3>
 800390e:	0003      	movs	r3, r0
 8003910:	b29b      	uxth	r3, r3
 8003912:	61bb      	str	r3, [r7, #24]
        break;
 8003914:	e014      	b.n	8003940 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	085b      	lsrs	r3, r3, #1
 800391c:	2280      	movs	r2, #128	; 0x80
 800391e:	0212      	lsls	r2, r2, #8
 8003920:	189a      	adds	r2, r3, r2
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	0019      	movs	r1, r3
 8003928:	0010      	movs	r0, r2
 800392a:	f7fc fbed 	bl	8000108 <__udivsi3>
 800392e:	0003      	movs	r3, r0
 8003930:	b29b      	uxth	r3, r3
 8003932:	61bb      	str	r3, [r7, #24]
        break;
 8003934:	e004      	b.n	8003940 <UART_SetConfig+0x330>
      default:
        ret = HAL_ERROR;
 8003936:	2317      	movs	r3, #23
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	2201      	movs	r2, #1
 800393c:	701a      	strb	r2, [r3, #0]
        break;
 800393e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b0f      	cmp	r3, #15
 8003944:	d91e      	bls.n	8003984 <UART_SetConfig+0x374>
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	4a0c      	ldr	r2, [pc, #48]	; (800397c <UART_SetConfig+0x36c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d81a      	bhi.n	8003984 <UART_SetConfig+0x374>
    {
      huart->Instance->BRR = usartdiv;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	e019      	b.n	800398c <UART_SetConfig+0x37c>
 8003958:	efff69f3 	.word	0xefff69f3
 800395c:	ffffcfff 	.word	0xffffcfff
 8003960:	fffff4ff 	.word	0xfffff4ff
 8003964:	40013800 	.word	0x40013800
 8003968:	40021000 	.word	0x40021000
 800396c:	40004400 	.word	0x40004400
 8003970:	40004800 	.word	0x40004800
 8003974:	40004c00 	.word	0x40004c00
 8003978:	00f42400 	.word	0x00f42400
 800397c:	0000ffff 	.word	0x0000ffff
 8003980:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 8003984:	2317      	movs	r3, #23
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	2201      	movs	r2, #1
 800398a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003998:	2317      	movs	r3, #23
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	781b      	ldrb	r3, [r3, #0]
}
 800399e:	0018      	movs	r0, r3
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b008      	add	sp, #32
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	46c0      	nop			; (mov r8, r8)

080039a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	2201      	movs	r2, #1
 80039b6:	4013      	ands	r3, r2
 80039b8:	d00b      	beq.n	80039d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	4a4a      	ldr	r2, [pc, #296]	; (8003aec <UART_AdvFeatureConfig+0x144>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	0019      	movs	r1, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	2202      	movs	r2, #2
 80039d8:	4013      	ands	r3, r2
 80039da:	d00b      	beq.n	80039f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4a43      	ldr	r2, [pc, #268]	; (8003af0 <UART_AdvFeatureConfig+0x148>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	0019      	movs	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	2204      	movs	r2, #4
 80039fa:	4013      	ands	r3, r2
 80039fc:	d00b      	beq.n	8003a16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	4a3b      	ldr	r2, [pc, #236]	; (8003af4 <UART_AdvFeatureConfig+0x14c>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	0019      	movs	r1, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d00b      	beq.n	8003a38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4a34      	ldr	r2, [pc, #208]	; (8003af8 <UART_AdvFeatureConfig+0x150>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	0019      	movs	r1, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	2210      	movs	r2, #16
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d00b      	beq.n	8003a5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	4a2c      	ldr	r2, [pc, #176]	; (8003afc <UART_AdvFeatureConfig+0x154>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	0019      	movs	r1, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	2220      	movs	r2, #32
 8003a60:	4013      	ands	r3, r2
 8003a62:	d00b      	beq.n	8003a7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	4a25      	ldr	r2, [pc, #148]	; (8003b00 <UART_AdvFeatureConfig+0x158>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	0019      	movs	r1, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	2240      	movs	r2, #64	; 0x40
 8003a82:	4013      	ands	r3, r2
 8003a84:	d01d      	beq.n	8003ac2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4a1d      	ldr	r2, [pc, #116]	; (8003b04 <UART_AdvFeatureConfig+0x15c>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	0019      	movs	r1, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa2:	2380      	movs	r3, #128	; 0x80
 8003aa4:	035b      	lsls	r3, r3, #13
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d10b      	bne.n	8003ac2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4a15      	ldr	r2, [pc, #84]	; (8003b08 <UART_AdvFeatureConfig+0x160>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	0019      	movs	r1, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	2280      	movs	r2, #128	; 0x80
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d00b      	beq.n	8003ae4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4a0e      	ldr	r2, [pc, #56]	; (8003b0c <UART_AdvFeatureConfig+0x164>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	0019      	movs	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	605a      	str	r2, [r3, #4]
  }
}
 8003ae4:	46c0      	nop			; (mov r8, r8)
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b002      	add	sp, #8
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	fffdffff 	.word	0xfffdffff
 8003af0:	fffeffff 	.word	0xfffeffff
 8003af4:	fffbffff 	.word	0xfffbffff
 8003af8:	ffff7fff 	.word	0xffff7fff
 8003afc:	ffffefff 	.word	0xffffefff
 8003b00:	ffffdfff 	.word	0xffffdfff
 8003b04:	ffefffff 	.word	0xffefffff
 8003b08:	ff9fffff 	.word	0xff9fffff
 8003b0c:	fff7ffff 	.word	0xfff7ffff

08003b10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003b1e:	f7fd f9d1 	bl	8000ec4 <HAL_GetTick>
 8003b22:	0003      	movs	r3, r0
 8003b24:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	4013      	ands	r3, r2
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d10d      	bne.n	8003b50 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	0399      	lsls	r1, r3, #14
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	4b16      	ldr	r3, [pc, #88]	; (8003b98 <UART_CheckIdleState+0x88>)
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	0013      	movs	r3, r2
 8003b42:	2200      	movs	r2, #0
 8003b44:	f000 f82a 	bl	8003b9c <UART_WaitOnFlagUntilTimeout>
 8003b48:	1e03      	subs	r3, r0, #0
 8003b4a:	d001      	beq.n	8003b50 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e01f      	b.n	8003b90 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2204      	movs	r2, #4
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d10d      	bne.n	8003b7a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	03d9      	lsls	r1, r3, #15
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <UART_CheckIdleState+0x88>)
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	0013      	movs	r3, r2
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f000 f815 	bl	8003b9c <UART_WaitOnFlagUntilTimeout>
 8003b72:	1e03      	subs	r3, r0, #0
 8003b74:	d001      	beq.n	8003b7a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e00a      	b.n	8003b90 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2270      	movs	r2, #112	; 0x70
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	0018      	movs	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b004      	add	sp, #16
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	01ffffff 	.word	0x01ffffff

08003b9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	603b      	str	r3, [r7, #0]
 8003ba8:	1dfb      	adds	r3, r7, #7
 8003baa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bac:	e05d      	b.n	8003c6a <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	d05a      	beq.n	8003c6a <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb4:	f7fd f986 	bl	8000ec4 <HAL_GetTick>
 8003bb8:	0002      	movs	r2, r0
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d302      	bcc.n	8003bca <UART_WaitOnFlagUntilTimeout+0x2e>
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d11b      	bne.n	8003c02 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	492f      	ldr	r1, [pc, #188]	; (8003c94 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003bd6:	400a      	ands	r2, r1
 8003bd8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2101      	movs	r1, #1
 8003be6:	438a      	bics	r2, r1
 8003be8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2220      	movs	r2, #32
 8003bee:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2270      	movs	r2, #112	; 0x70
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e043      	b.n	8003c8a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2204      	movs	r2, #4
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d02d      	beq.n	8003c6a <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69da      	ldr	r2, [r3, #28]
 8003c14:	2380      	movs	r3, #128	; 0x80
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	401a      	ands	r2, r3
 8003c1a:	2380      	movs	r3, #128	; 0x80
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d123      	bne.n	8003c6a <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2280      	movs	r2, #128	; 0x80
 8003c28:	0112      	lsls	r2, r2, #4
 8003c2a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4917      	ldr	r1, [pc, #92]	; (8003c94 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003c38:	400a      	ands	r2, r1
 8003c3a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2101      	movs	r1, #1
 8003c48:	438a      	bics	r2, r1
 8003c4a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2220      	movs	r2, #32
 8003c56:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2270      	movs	r2, #112	; 0x70
 8003c62:	2100      	movs	r1, #0
 8003c64:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e00f      	b.n	8003c8a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	4013      	ands	r3, r2
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	425a      	negs	r2, r3
 8003c7a:	4153      	adcs	r3, r2
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	001a      	movs	r2, r3
 8003c80:	1dfb      	adds	r3, r7, #7
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d092      	beq.n	8003bae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b004      	add	sp, #16
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	fffffe5f 	.word	0xfffffe5f

08003c98 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c9e:	f3ef 8305 	mrs	r3, IPSR
 8003ca2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d109      	bne.n	8003cbe <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003caa:	f3ef 8310 	mrs	r3, PRIMASK
 8003cae:	607b      	str	r3, [r7, #4]
  return(result);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <osKernelInitialize+0x2e>
 8003cb6:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <osKernelInitialize+0x54>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d103      	bne.n	8003cc6 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8003cbe:	2306      	movs	r3, #6
 8003cc0:	425b      	negs	r3, r3
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	e00c      	b.n	8003ce0 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003cc6:	4b09      	ldr	r3, [pc, #36]	; (8003cec <osKernelInitialize+0x54>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d105      	bne.n	8003cda <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003cce:	4b07      	ldr	r3, [pc, #28]	; (8003cec <osKernelInitialize+0x54>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	e002      	b.n	8003ce0 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	425b      	negs	r3, r3
 8003cde:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
}
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b004      	add	sp, #16
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	46c0      	nop			; (mov r8, r8)
 8003cec:	20000068 	.word	0x20000068

08003cf0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cf6:	f3ef 8305 	mrs	r3, IPSR
 8003cfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cfc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d02:	f3ef 8310 	mrs	r3, PRIMASK
 8003d06:	607b      	str	r3, [r7, #4]
  return(result);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d007      	beq.n	8003d1e <osKernelStart+0x2e>
 8003d0e:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <osKernelStart+0x58>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d103      	bne.n	8003d1e <osKernelStart+0x2e>
    stat = osErrorISR;
 8003d16:	2306      	movs	r3, #6
 8003d18:	425b      	negs	r3, r3
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	e00e      	b.n	8003d3c <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003d1e:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <osKernelStart+0x58>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d107      	bne.n	8003d36 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8003d26:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <osKernelStart+0x58>)
 8003d28:	2202      	movs	r2, #2
 8003d2a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003d2c:	f000 ff7e 	bl	8004c2c <vTaskStartScheduler>
      stat = osOK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	e002      	b.n	8003d3c <osKernelStart+0x4c>
    } else {
      stat = osError;
 8003d36:	2301      	movs	r3, #1
 8003d38:	425b      	negs	r3, r3
 8003d3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
}
 8003d3e:	0018      	movs	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b004      	add	sp, #16
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	20000068 	.word	0x20000068

08003d4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d4c:	b5b0      	push	{r4, r5, r7, lr}
 8003d4e:	b090      	sub	sp, #64	; 0x40
 8003d50:	af04      	add	r7, sp, #16
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d5c:	f3ef 8305 	mrs	r3, IPSR
 8003d60:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d62:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d000      	beq.n	8003d6a <osThreadNew+0x1e>
 8003d68:	e090      	b.n	8003e8c <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d004      	beq.n	8003d80 <osThreadNew+0x34>
 8003d76:	4b48      	ldr	r3, [pc, #288]	; (8003e98 <osThreadNew+0x14c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d100      	bne.n	8003d80 <osThreadNew+0x34>
 8003d7e:	e085      	b.n	8003e8c <osThreadNew+0x140>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d100      	bne.n	8003d88 <osThreadNew+0x3c>
 8003d86:	e081      	b.n	8003e8c <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003d8c:	2318      	movs	r3, #24
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8003d90:	2117      	movs	r1, #23
 8003d92:	187b      	adds	r3, r7, r1
 8003d94:	2200      	movs	r2, #0
 8003d96:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8003d98:	187b      	adds	r3, r7, r1
 8003d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	425b      	negs	r3, r3
 8003da0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d044      	beq.n	8003e32 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <osThreadNew+0x6a>
        name = attr->name;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d007      	beq.n	8003dda <osThreadNew+0x8e>
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	2b38      	cmp	r3, #56	; 0x38
 8003dce:	d804      	bhi.n	8003dda <osThreadNew+0x8e>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d001      	beq.n	8003dde <osThreadNew+0x92>
        return (NULL);
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e057      	b.n	8003e8e <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	089b      	lsrs	r3, r3, #2
 8003dec:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00e      	beq.n	8003e14 <osThreadNew+0xc8>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	2b5b      	cmp	r3, #91	; 0x5b
 8003dfc:	d90a      	bls.n	8003e14 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d006      	beq.n	8003e14 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <osThreadNew+0xc8>
        mem = 1;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	623b      	str	r3, [r7, #32]
 8003e12:	e010      	b.n	8003e36 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10c      	bne.n	8003e36 <osThreadNew+0xea>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d108      	bne.n	8003e36 <osThreadNew+0xea>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d104      	bne.n	8003e36 <osThreadNew+0xea>
          mem = 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	623b      	str	r3, [r7, #32]
 8003e30:	e001      	b.n	8003e36 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d112      	bne.n	8003e62 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e44:	68bd      	ldr	r5, [r7, #8]
 8003e46:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003e48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	9302      	str	r3, [sp, #8]
 8003e4e:	9201      	str	r2, [sp, #4]
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	002b      	movs	r3, r5
 8003e56:	0022      	movs	r2, r4
 8003e58:	f000 fd49 	bl	80048ee <xTaskCreateStatic>
 8003e5c:	0003      	movs	r3, r0
 8003e5e:	613b      	str	r3, [r7, #16]
 8003e60:	e014      	b.n	8003e8c <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d111      	bne.n	8003e8c <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68bc      	ldr	r4, [r7, #8]
 8003e6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	2310      	movs	r3, #16
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	9301      	str	r3, [sp, #4]
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	0023      	movs	r3, r4
 8003e7e:	f000 fd79 	bl	8004974 <xTaskCreate>
 8003e82:	0003      	movs	r3, r0
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d001      	beq.n	8003e8c <osThreadNew+0x140>
          hTask = NULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003e8c:	693b      	ldr	r3, [r7, #16]
}
 8003e8e:	0018      	movs	r0, r3
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b00c      	add	sp, #48	; 0x30
 8003e94:	bdb0      	pop	{r4, r5, r7, pc}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	20000068 	.word	0x20000068

08003e9c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ea4:	f3ef 8305 	mrs	r3, IPSR
 8003ea8:	613b      	str	r3, [r7, #16]
  return(result);
 8003eaa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d109      	bne.n	8003ec4 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d007      	beq.n	8003ecc <osDelay+0x30>
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <osDelay+0x4c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d103      	bne.n	8003ecc <osDelay+0x30>
    stat = osErrorISR;
 8003ec4:	2306      	movs	r3, #6
 8003ec6:	425b      	negs	r3, r3
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	e008      	b.n	8003ede <osDelay+0x42>
  }
  else {
    stat = osOK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <osDelay+0x42>
      vTaskDelay(ticks);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	0018      	movs	r0, r3
 8003eda:	f000 fe81 	bl	8004be0 <vTaskDelay>
    }
  }

  return (stat);
 8003ede:	697b      	ldr	r3, [r7, #20]
}
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b006      	add	sp, #24
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20000068 	.word	0x20000068

08003eec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4a06      	ldr	r2, [pc, #24]	; (8003f14 <vApplicationGetIdleTaskMemory+0x28>)
 8003efc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	4a05      	ldr	r2, [pc, #20]	; (8003f18 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2280      	movs	r2, #128	; 0x80
 8003f08:	601a      	str	r2, [r3, #0]
}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b004      	add	sp, #16
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	2000006c 	.word	0x2000006c
 8003f18:	200000c8 	.word	0x200000c8

08003f1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4a06      	ldr	r2, [pc, #24]	; (8003f44 <vApplicationGetTimerTaskMemory+0x28>)
 8003f2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	4a05      	ldr	r2, [pc, #20]	; (8003f48 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2280      	movs	r2, #128	; 0x80
 8003f38:	0052      	lsls	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
}
 8003f3c:	46c0      	nop			; (mov r8, r8)
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b004      	add	sp, #16
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	200002c8 	.word	0x200002c8
 8003f48:	20000324 	.word	0x20000324

08003f4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3308      	adds	r3, #8
 8003f58:	001a      	movs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	4252      	negs	r2, r2
 8003f64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3308      	adds	r3, #8
 8003f6a:	001a      	movs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3308      	adds	r3, #8
 8003f74:	001a      	movs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f80:	46c0      	nop			; (mov r8, r8)
 8003f82:	46bd      	mov	sp, r7
 8003f84:	b002      	add	sp, #8
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	b002      	add	sp, #8
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	601a      	str	r2, [r3, #0]
}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b004      	add	sp, #16
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	d103      	bne.n	8004000 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	e00c      	b.n	800401a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3308      	adds	r3, #8
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	e002      	b.n	800400e <vListInsert+0x2c>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	429a      	cmp	r2, r3
 8004018:	d2f6      	bcs.n	8004008 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	601a      	str	r2, [r3, #0]
}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	46bd      	mov	sp, r7
 800404a:	b004      	add	sp, #16
 800404c:	bd80      	pop	{r7, pc}

0800404e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6892      	ldr	r2, [r2, #8]
 8004064:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6852      	ldr	r2, [r2, #4]
 800406e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	429a      	cmp	r2, r3
 8004078:	d103      	bne.n	8004082 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	1e5a      	subs	r2, r3, #1
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
}
 8004096:	0018      	movs	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	b004      	add	sp, #16
 800409c:	bd80      	pop	{r7, pc}

0800409e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <xQueueGenericReset+0x18>
 80040b2:	b672      	cpsid	i
 80040b4:	e7fe      	b.n	80040b4 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80040b6:	f001 fdd3 	bl	8005c60 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	434b      	muls	r3, r1
 80040c8:	18d2      	adds	r2, r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e4:	1e59      	subs	r1, r3, #1
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	434b      	muls	r3, r1
 80040ec:	18d2      	adds	r2, r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2244      	movs	r2, #68	; 0x44
 80040f6:	21ff      	movs	r1, #255	; 0xff
 80040f8:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2245      	movs	r2, #69	; 0x45
 80040fe:	21ff      	movs	r1, #255	; 0xff
 8004100:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10d      	bne.n	8004124 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d013      	beq.n	8004138 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3310      	adds	r3, #16
 8004114:	0018      	movs	r0, r3
 8004116:	f000 ffcd 	bl	80050b4 <xTaskRemoveFromEventList>
 800411a:	1e03      	subs	r3, r0, #0
 800411c:	d00c      	beq.n	8004138 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800411e:	f001 fd8f 	bl	8005c40 <vPortYield>
 8004122:	e009      	b.n	8004138 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	3310      	adds	r3, #16
 8004128:	0018      	movs	r0, r3
 800412a:	f7ff ff0f 	bl	8003f4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3324      	adds	r3, #36	; 0x24
 8004132:	0018      	movs	r0, r3
 8004134:	f7ff ff0a 	bl	8003f4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004138:	f001 fda4 	bl	8005c84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800413c:	2301      	movs	r3, #1
}
 800413e:	0018      	movs	r0, r3
 8004140:	46bd      	mov	sp, r7
 8004142:	b004      	add	sp, #16
 8004144:	bd80      	pop	{r7, pc}

08004146 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004146:	b590      	push	{r4, r7, lr}
 8004148:	b089      	sub	sp, #36	; 0x24
 800414a:	af02      	add	r7, sp, #8
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <xQueueGenericCreateStatic+0x18>
 800415a:	b672      	cpsid	i
 800415c:	e7fe      	b.n	800415c <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <xQueueGenericCreateStatic+0x22>
 8004164:	b672      	cpsid	i
 8004166:	e7fe      	b.n	8004166 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <xQueueGenericCreateStatic+0x2e>
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <xQueueGenericCreateStatic+0x32>
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <xQueueGenericCreateStatic+0x34>
 8004178:	2300      	movs	r3, #0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <xQueueGenericCreateStatic+0x3c>
 800417e:	b672      	cpsid	i
 8004180:	e7fe      	b.n	8004180 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d102      	bne.n	800418e <xQueueGenericCreateStatic+0x48>
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <xQueueGenericCreateStatic+0x4c>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <xQueueGenericCreateStatic+0x4e>
 8004192:	2300      	movs	r3, #0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <xQueueGenericCreateStatic+0x56>
 8004198:	b672      	cpsid	i
 800419a:	e7fe      	b.n	800419a <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800419c:	2350      	movs	r3, #80	; 0x50
 800419e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	2b50      	cmp	r3, #80	; 0x50
 80041a4:	d001      	beq.n	80041aa <xQueueGenericCreateStatic+0x64>
 80041a6:	b672      	cpsid	i
 80041a8:	e7fe      	b.n	80041a8 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00e      	beq.n	80041d2 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	2246      	movs	r2, #70	; 0x46
 80041b8:	2101      	movs	r1, #1
 80041ba:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041bc:	2328      	movs	r3, #40	; 0x28
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	781c      	ldrb	r4, [r3, #0]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	0023      	movs	r3, r4
 80041ce:	f000 f805 	bl	80041dc <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80041d2:	697b      	ldr	r3, [r7, #20]
	}
 80041d4:	0018      	movs	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b007      	add	sp, #28
 80041da:	bd90      	pop	{r4, r7, pc}

080041dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	001a      	movs	r2, r3
 80041ea:	1cfb      	adds	r3, r7, #3
 80041ec:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d103      	bne.n	80041fc <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	e002      	b.n	8004202 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	2101      	movs	r1, #1
 8004212:	0018      	movs	r0, r3
 8004214:	f7ff ff43 	bl	800409e <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	1cfa      	adds	r2, r7, #3
 800421c:	214c      	movs	r1, #76	; 0x4c
 800421e:	7812      	ldrb	r2, [r2, #0]
 8004220:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	46bd      	mov	sp, r7
 8004226:	b004      	add	sp, #16
 8004228:	bd80      	pop	{r7, pc}

0800422a <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b08a      	sub	sp, #40	; 0x28
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]
 8004236:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004238:	2300      	movs	r3, #0
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <xQueueGenericSend+0x20>
 8004246:	b672      	cpsid	i
 8004248:	e7fe      	b.n	8004248 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d103      	bne.n	8004258 <xQueueGenericSend+0x2e>
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <xQueueGenericSend+0x32>
 8004258:	2301      	movs	r3, #1
 800425a:	e000      	b.n	800425e <xQueueGenericSend+0x34>
 800425c:	2300      	movs	r3, #0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <xQueueGenericSend+0x3c>
 8004262:	b672      	cpsid	i
 8004264:	e7fe      	b.n	8004264 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b02      	cmp	r3, #2
 800426a:	d103      	bne.n	8004274 <xQueueGenericSend+0x4a>
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <xQueueGenericSend+0x4e>
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <xQueueGenericSend+0x50>
 8004278:	2300      	movs	r3, #0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <xQueueGenericSend+0x58>
 800427e:	b672      	cpsid	i
 8004280:	e7fe      	b.n	8004280 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004282:	f001 f8af 	bl	80053e4 <xTaskGetSchedulerState>
 8004286:	1e03      	subs	r3, r0, #0
 8004288:	d102      	bne.n	8004290 <xQueueGenericSend+0x66>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <xQueueGenericSend+0x6a>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <xQueueGenericSend+0x6c>
 8004294:	2300      	movs	r3, #0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <xQueueGenericSend+0x74>
 800429a:	b672      	cpsid	i
 800429c:	e7fe      	b.n	800429c <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800429e:	f001 fcdf 	bl	8005c60 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d302      	bcc.n	80042b4 <xQueueGenericSend+0x8a>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d11e      	bne.n	80042f2 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	68b9      	ldr	r1, [r7, #8]
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	0018      	movs	r0, r3
 80042bc:	f000 f99f 	bl	80045fe <prvCopyDataToQueue>
 80042c0:	0003      	movs	r3, r0
 80042c2:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d009      	beq.n	80042e0 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	3324      	adds	r3, #36	; 0x24
 80042d0:	0018      	movs	r0, r3
 80042d2:	f000 feef 	bl	80050b4 <xTaskRemoveFromEventList>
 80042d6:	1e03      	subs	r3, r0, #0
 80042d8:	d007      	beq.n	80042ea <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042da:	f001 fcb1 	bl	8005c40 <vPortYield>
 80042de:	e004      	b.n	80042ea <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80042e6:	f001 fcab 	bl	8005c40 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80042ea:	f001 fccb 	bl	8005c84 <vPortExitCritical>
				return pdPASS;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e05b      	b.n	80043aa <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d103      	bne.n	8004300 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042f8:	f001 fcc4 	bl	8005c84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	e054      	b.n	80043aa <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004306:	2314      	movs	r3, #20
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	0018      	movs	r0, r3
 800430c:	f000 ff2e 	bl	800516c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004310:	2301      	movs	r3, #1
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004314:	f001 fcb6 	bl	8005c84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004318:	f000 fcdc 	bl	8004cd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800431c:	f001 fca0 	bl	8005c60 <vPortEnterCritical>
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	2244      	movs	r2, #68	; 0x44
 8004324:	5c9b      	ldrb	r3, [r3, r2]
 8004326:	b25b      	sxtb	r3, r3
 8004328:	3301      	adds	r3, #1
 800432a:	d103      	bne.n	8004334 <xQueueGenericSend+0x10a>
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	2244      	movs	r2, #68	; 0x44
 8004330:	2100      	movs	r1, #0
 8004332:	5499      	strb	r1, [r3, r2]
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	2245      	movs	r2, #69	; 0x45
 8004338:	5c9b      	ldrb	r3, [r3, r2]
 800433a:	b25b      	sxtb	r3, r3
 800433c:	3301      	adds	r3, #1
 800433e:	d103      	bne.n	8004348 <xQueueGenericSend+0x11e>
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	2245      	movs	r2, #69	; 0x45
 8004344:	2100      	movs	r1, #0
 8004346:	5499      	strb	r1, [r3, r2]
 8004348:	f001 fc9c 	bl	8005c84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800434c:	1d3a      	adds	r2, r7, #4
 800434e:	2314      	movs	r3, #20
 8004350:	18fb      	adds	r3, r7, r3
 8004352:	0011      	movs	r1, r2
 8004354:	0018      	movs	r0, r3
 8004356:	f000 ff1d 	bl	8005194 <xTaskCheckForTimeOut>
 800435a:	1e03      	subs	r3, r0, #0
 800435c:	d11e      	bne.n	800439c <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	0018      	movs	r0, r3
 8004362:	f000 fa51 	bl	8004808 <prvIsQueueFull>
 8004366:	1e03      	subs	r3, r0, #0
 8004368:	d011      	beq.n	800438e <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	3310      	adds	r3, #16
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	0011      	movs	r1, r2
 8004372:	0018      	movs	r0, r3
 8004374:	f000 fe5a 	bl	800502c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	0018      	movs	r0, r3
 800437c:	f000 f9d0 	bl	8004720 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004380:	f000 fcb4 	bl	8004cec <xTaskResumeAll>
 8004384:	1e03      	subs	r3, r0, #0
 8004386:	d18a      	bne.n	800429e <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8004388:	f001 fc5a 	bl	8005c40 <vPortYield>
 800438c:	e787      	b.n	800429e <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	0018      	movs	r0, r3
 8004392:	f000 f9c5 	bl	8004720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004396:	f000 fca9 	bl	8004cec <xTaskResumeAll>
 800439a:	e780      	b.n	800429e <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	0018      	movs	r0, r3
 80043a0:	f000 f9be 	bl	8004720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043a4:	f000 fca2 	bl	8004cec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80043a8:	2300      	movs	r3, #0
		}
	}
}
 80043aa:	0018      	movs	r0, r3
 80043ac:	46bd      	mov	sp, r7
 80043ae:	b00a      	add	sp, #40	; 0x28
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043b2:	b590      	push	{r4, r7, lr}
 80043b4:	b089      	sub	sp, #36	; 0x24
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	607a      	str	r2, [r7, #4]
 80043be:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <xQueueGenericSendFromISR+0x1c>
 80043ca:	b672      	cpsid	i
 80043cc:	e7fe      	b.n	80043cc <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d103      	bne.n	80043dc <xQueueGenericSendFromISR+0x2a>
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <xQueueGenericSendFromISR+0x2e>
 80043dc:	2301      	movs	r3, #1
 80043de:	e000      	b.n	80043e2 <xQueueGenericSendFromISR+0x30>
 80043e0:	2300      	movs	r3, #0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <xQueueGenericSendFromISR+0x38>
 80043e6:	b672      	cpsid	i
 80043e8:	e7fe      	b.n	80043e8 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d103      	bne.n	80043f8 <xQueueGenericSendFromISR+0x46>
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <xQueueGenericSendFromISR+0x4a>
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <xQueueGenericSendFromISR+0x4c>
 80043fc:	2300      	movs	r3, #0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <xQueueGenericSendFromISR+0x54>
 8004402:	b672      	cpsid	i
 8004404:	e7fe      	b.n	8004404 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004406:	f001 fc55 	bl	8005cb4 <ulSetInterruptMaskFromISR>
 800440a:	0003      	movs	r3, r0
 800440c:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004416:	429a      	cmp	r2, r3
 8004418:	d302      	bcc.n	8004420 <xQueueGenericSendFromISR+0x6e>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d12e      	bne.n	800447e <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004420:	2413      	movs	r4, #19
 8004422:	193b      	adds	r3, r7, r4
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	2145      	movs	r1, #69	; 0x45
 8004428:	5c52      	ldrb	r2, [r2, r1]
 800442a:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	68b9      	ldr	r1, [r7, #8]
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	0018      	movs	r0, r3
 8004434:	f000 f8e3 	bl	80045fe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004438:	193b      	adds	r3, r7, r4
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	b25b      	sxtb	r3, r3
 800443e:	3301      	adds	r3, #1
 8004440:	d111      	bne.n	8004466 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	2b00      	cmp	r3, #0
 8004448:	d016      	beq.n	8004478 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	3324      	adds	r3, #36	; 0x24
 800444e:	0018      	movs	r0, r3
 8004450:	f000 fe30 	bl	80050b4 <xTaskRemoveFromEventList>
 8004454:	1e03      	subs	r3, r0, #0
 8004456:	d00f      	beq.n	8004478 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00c      	beq.n	8004478 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	e008      	b.n	8004478 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004466:	2313      	movs	r3, #19
 8004468:	18fb      	adds	r3, r7, r3
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	3301      	adds	r3, #1
 800446e:	b2db      	uxtb	r3, r3
 8004470:	b259      	sxtb	r1, r3
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2245      	movs	r2, #69	; 0x45
 8004476:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8004478:	2301      	movs	r3, #1
 800447a:	61fb      	str	r3, [r7, #28]
		{
 800447c:	e001      	b.n	8004482 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	0018      	movs	r0, r3
 8004486:	f001 fc1b 	bl	8005cc0 <vClearInterruptMaskFromISR>

	return xReturn;
 800448a:	69fb      	ldr	r3, [r7, #28]
}
 800448c:	0018      	movs	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	b009      	add	sp, #36	; 0x24
 8004492:	bd90      	pop	{r4, r7, pc}

08004494 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08a      	sub	sp, #40	; 0x28
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044a0:	2300      	movs	r3, #0
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <xQueueReceive+0x1e>
 80044ae:	b672      	cpsid	i
 80044b0:	e7fe      	b.n	80044b0 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d103      	bne.n	80044c0 <xQueueReceive+0x2c>
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <xQueueReceive+0x30>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <xQueueReceive+0x32>
 80044c4:	2300      	movs	r3, #0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <xQueueReceive+0x3a>
 80044ca:	b672      	cpsid	i
 80044cc:	e7fe      	b.n	80044cc <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044ce:	f000 ff89 	bl	80053e4 <xTaskGetSchedulerState>
 80044d2:	1e03      	subs	r3, r0, #0
 80044d4:	d102      	bne.n	80044dc <xQueueReceive+0x48>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <xQueueReceive+0x4c>
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <xQueueReceive+0x4e>
 80044e0:	2300      	movs	r3, #0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <xQueueReceive+0x56>
 80044e6:	b672      	cpsid	i
 80044e8:	e7fe      	b.n	80044e8 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80044ea:	f001 fbb9 	bl	8005c60 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d01a      	beq.n	8004530 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	0011      	movs	r1, r2
 8004500:	0018      	movs	r0, r3
 8004502:	f000 f8e7 	bl	80046d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	1e5a      	subs	r2, r3, #1
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d008      	beq.n	8004528 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	3310      	adds	r3, #16
 800451a:	0018      	movs	r0, r3
 800451c:	f000 fdca 	bl	80050b4 <xTaskRemoveFromEventList>
 8004520:	1e03      	subs	r3, r0, #0
 8004522:	d001      	beq.n	8004528 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004524:	f001 fb8c 	bl	8005c40 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004528:	f001 fbac 	bl	8005c84 <vPortExitCritical>
				return pdPASS;
 800452c:	2301      	movs	r3, #1
 800452e:	e062      	b.n	80045f6 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d103      	bne.n	800453e <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004536:	f001 fba5 	bl	8005c84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800453a:	2300      	movs	r3, #0
 800453c:	e05b      	b.n	80045f6 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	2b00      	cmp	r3, #0
 8004542:	d106      	bne.n	8004552 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004544:	2314      	movs	r3, #20
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	0018      	movs	r0, r3
 800454a:	f000 fe0f 	bl	800516c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800454e:	2301      	movs	r3, #1
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004552:	f001 fb97 	bl	8005c84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004556:	f000 fbbd 	bl	8004cd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800455a:	f001 fb81 	bl	8005c60 <vPortEnterCritical>
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	2244      	movs	r2, #68	; 0x44
 8004562:	5c9b      	ldrb	r3, [r3, r2]
 8004564:	b25b      	sxtb	r3, r3
 8004566:	3301      	adds	r3, #1
 8004568:	d103      	bne.n	8004572 <xQueueReceive+0xde>
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	2244      	movs	r2, #68	; 0x44
 800456e:	2100      	movs	r1, #0
 8004570:	5499      	strb	r1, [r3, r2]
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	2245      	movs	r2, #69	; 0x45
 8004576:	5c9b      	ldrb	r3, [r3, r2]
 8004578:	b25b      	sxtb	r3, r3
 800457a:	3301      	adds	r3, #1
 800457c:	d103      	bne.n	8004586 <xQueueReceive+0xf2>
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	2245      	movs	r2, #69	; 0x45
 8004582:	2100      	movs	r1, #0
 8004584:	5499      	strb	r1, [r3, r2]
 8004586:	f001 fb7d 	bl	8005c84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800458a:	1d3a      	adds	r2, r7, #4
 800458c:	2314      	movs	r3, #20
 800458e:	18fb      	adds	r3, r7, r3
 8004590:	0011      	movs	r1, r2
 8004592:	0018      	movs	r0, r3
 8004594:	f000 fdfe 	bl	8005194 <xTaskCheckForTimeOut>
 8004598:	1e03      	subs	r3, r0, #0
 800459a:	d11e      	bne.n	80045da <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	0018      	movs	r0, r3
 80045a0:	f000 f91c 	bl	80047dc <prvIsQueueEmpty>
 80045a4:	1e03      	subs	r3, r0, #0
 80045a6:	d011      	beq.n	80045cc <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	3324      	adds	r3, #36	; 0x24
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	0011      	movs	r1, r2
 80045b0:	0018      	movs	r0, r3
 80045b2:	f000 fd3b 	bl	800502c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	0018      	movs	r0, r3
 80045ba:	f000 f8b1 	bl	8004720 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045be:	f000 fb95 	bl	8004cec <xTaskResumeAll>
 80045c2:	1e03      	subs	r3, r0, #0
 80045c4:	d191      	bne.n	80044ea <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 80045c6:	f001 fb3b 	bl	8005c40 <vPortYield>
 80045ca:	e78e      	b.n	80044ea <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	0018      	movs	r0, r3
 80045d0:	f000 f8a6 	bl	8004720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045d4:	f000 fb8a 	bl	8004cec <xTaskResumeAll>
 80045d8:	e787      	b.n	80044ea <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	0018      	movs	r0, r3
 80045de:	f000 f89f 	bl	8004720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045e2:	f000 fb83 	bl	8004cec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	0018      	movs	r0, r3
 80045ea:	f000 f8f7 	bl	80047dc <prvIsQueueEmpty>
 80045ee:	1e03      	subs	r3, r0, #0
 80045f0:	d100      	bne.n	80045f4 <xQueueReceive+0x160>
 80045f2:	e77a      	b.n	80044ea <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80045f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80045f6:	0018      	movs	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b00a      	add	sp, #40	; 0x28
 80045fc:	bd80      	pop	{r7, pc}

080045fe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b086      	sub	sp, #24
 8004602:	af00      	add	r7, sp, #0
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004612:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10e      	bne.n	800463a <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d14e      	bne.n	80046c2 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	0018      	movs	r0, r3
 800462a:	f000 fef7 	bl	800541c <xTaskPriorityDisinherit>
 800462e:	0003      	movs	r3, r0
 8004630:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	605a      	str	r2, [r3, #4]
 8004638:	e043      	b.n	80046c2 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d119      	bne.n	8004674 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6898      	ldr	r0, [r3, #8]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	0019      	movs	r1, r3
 800464c:	f001 fd6a 	bl	8006124 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	18d2      	adds	r2, r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	429a      	cmp	r2, r3
 8004668:	d32b      	bcc.n	80046c2 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	609a      	str	r2, [r3, #8]
 8004672:	e026      	b.n	80046c2 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	68d8      	ldr	r0, [r3, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	0019      	movs	r1, r3
 8004680:	f001 fd50 	bl	8006124 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	425b      	negs	r3, r3
 800468e:	18d2      	adds	r2, r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d207      	bcs.n	80046b0 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	425b      	negs	r3, r3
 80046aa:	18d2      	adds	r2, r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d105      	bne.n	80046c2 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	3b01      	subs	r3, #1
 80046c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80046ca:	697b      	ldr	r3, [r7, #20]
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b006      	add	sp, #24
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d018      	beq.n	8004718 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	18d2      	adds	r2, r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d303      	bcc.n	8004708 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68d9      	ldr	r1, [r3, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	0018      	movs	r0, r3
 8004714:	f001 fd06 	bl	8006124 <memcpy>
	}
}
 8004718:	46c0      	nop			; (mov r8, r8)
 800471a:	46bd      	mov	sp, r7
 800471c:	b002      	add	sp, #8
 800471e:	bd80      	pop	{r7, pc}

08004720 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004728:	f001 fa9a 	bl	8005c60 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800472c:	230f      	movs	r3, #15
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	2145      	movs	r1, #69	; 0x45
 8004734:	5c52      	ldrb	r2, [r2, r1]
 8004736:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004738:	e013      	b.n	8004762 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	2b00      	cmp	r3, #0
 8004740:	d016      	beq.n	8004770 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3324      	adds	r3, #36	; 0x24
 8004746:	0018      	movs	r0, r3
 8004748:	f000 fcb4 	bl	80050b4 <xTaskRemoveFromEventList>
 800474c:	1e03      	subs	r3, r0, #0
 800474e:	d001      	beq.n	8004754 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004750:	f000 fd70 	bl	8005234 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004754:	210f      	movs	r1, #15
 8004756:	187b      	adds	r3, r7, r1
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	3b01      	subs	r3, #1
 800475c:	b2da      	uxtb	r2, r3
 800475e:	187b      	adds	r3, r7, r1
 8004760:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004762:	230f      	movs	r3, #15
 8004764:	18fb      	adds	r3, r7, r3
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	b25b      	sxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	dce5      	bgt.n	800473a <prvUnlockQueue+0x1a>
 800476e:	e000      	b.n	8004772 <prvUnlockQueue+0x52>
					break;
 8004770:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2245      	movs	r2, #69	; 0x45
 8004776:	21ff      	movs	r1, #255	; 0xff
 8004778:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800477a:	f001 fa83 	bl	8005c84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800477e:	f001 fa6f 	bl	8005c60 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004782:	230e      	movs	r3, #14
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	2144      	movs	r1, #68	; 0x44
 800478a:	5c52      	ldrb	r2, [r2, r1]
 800478c:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800478e:	e013      	b.n	80047b8 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d016      	beq.n	80047c6 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3310      	adds	r3, #16
 800479c:	0018      	movs	r0, r3
 800479e:	f000 fc89 	bl	80050b4 <xTaskRemoveFromEventList>
 80047a2:	1e03      	subs	r3, r0, #0
 80047a4:	d001      	beq.n	80047aa <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80047a6:	f000 fd45 	bl	8005234 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047aa:	210e      	movs	r1, #14
 80047ac:	187b      	adds	r3, r7, r1
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	187b      	adds	r3, r7, r1
 80047b6:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047b8:	230e      	movs	r3, #14
 80047ba:	18fb      	adds	r3, r7, r3
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	b25b      	sxtb	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	dce5      	bgt.n	8004790 <prvUnlockQueue+0x70>
 80047c4:	e000      	b.n	80047c8 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80047c6:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2244      	movs	r2, #68	; 0x44
 80047cc:	21ff      	movs	r1, #255	; 0xff
 80047ce:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80047d0:	f001 fa58 	bl	8005c84 <vPortExitCritical>
}
 80047d4:	46c0      	nop			; (mov r8, r8)
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b004      	add	sp, #16
 80047da:	bd80      	pop	{r7, pc}

080047dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047e4:	f001 fa3c 	bl	8005c60 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d102      	bne.n	80047f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80047f0:	2301      	movs	r3, #1
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	e001      	b.n	80047fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047fa:	f001 fa43 	bl	8005c84 <vPortExitCritical>

	return xReturn;
 80047fe:	68fb      	ldr	r3, [r7, #12]
}
 8004800:	0018      	movs	r0, r3
 8004802:	46bd      	mov	sp, r7
 8004804:	b004      	add	sp, #16
 8004806:	bd80      	pop	{r7, pc}

08004808 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004810:	f001 fa26 	bl	8005c60 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481c:	429a      	cmp	r2, r3
 800481e:	d102      	bne.n	8004826 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004820:	2301      	movs	r3, #1
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	e001      	b.n	800482a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004826:	2300      	movs	r3, #0
 8004828:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800482a:	f001 fa2b 	bl	8005c84 <vPortExitCritical>

	return xReturn;
 800482e:	68fb      	ldr	r3, [r7, #12]
}
 8004830:	0018      	movs	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	b004      	add	sp, #16
 8004836:	bd80      	pop	{r7, pc}

08004838 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	e015      	b.n	8004874 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004848:	4b0e      	ldr	r3, [pc, #56]	; (8004884 <vQueueAddToRegistry+0x4c>)
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	00d2      	lsls	r2, r2, #3
 800484e:	58d3      	ldr	r3, [r2, r3]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10c      	bne.n	800486e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004854:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <vQueueAddToRegistry+0x4c>)
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	00d2      	lsls	r2, r2, #3
 800485a:	6839      	ldr	r1, [r7, #0]
 800485c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800485e:	4a09      	ldr	r2, [pc, #36]	; (8004884 <vQueueAddToRegistry+0x4c>)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	18d3      	adds	r3, r2, r3
 8004866:	3304      	adds	r3, #4
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800486c:	e005      	b.n	800487a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3301      	adds	r3, #1
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b07      	cmp	r3, #7
 8004878:	d9e6      	bls.n	8004848 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	46bd      	mov	sp, r7
 800487e:	b004      	add	sp, #16
 8004880:	bd80      	pop	{r7, pc}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	20001b60 	.word	0x20001b60

08004888 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004898:	f001 f9e2 	bl	8005c60 <vPortEnterCritical>
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2244      	movs	r2, #68	; 0x44
 80048a0:	5c9b      	ldrb	r3, [r3, r2]
 80048a2:	b25b      	sxtb	r3, r3
 80048a4:	3301      	adds	r3, #1
 80048a6:	d103      	bne.n	80048b0 <vQueueWaitForMessageRestricted+0x28>
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2244      	movs	r2, #68	; 0x44
 80048ac:	2100      	movs	r1, #0
 80048ae:	5499      	strb	r1, [r3, r2]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2245      	movs	r2, #69	; 0x45
 80048b4:	5c9b      	ldrb	r3, [r3, r2]
 80048b6:	b25b      	sxtb	r3, r3
 80048b8:	3301      	adds	r3, #1
 80048ba:	d103      	bne.n	80048c4 <vQueueWaitForMessageRestricted+0x3c>
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2245      	movs	r2, #69	; 0x45
 80048c0:	2100      	movs	r1, #0
 80048c2:	5499      	strb	r1, [r3, r2]
 80048c4:	f001 f9de 	bl	8005c84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d106      	bne.n	80048de <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	3324      	adds	r3, #36	; 0x24
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	0018      	movs	r0, r3
 80048da:	f000 fbc5 	bl	8005068 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	0018      	movs	r0, r3
 80048e2:	f7ff ff1d 	bl	8004720 <prvUnlockQueue>
	}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	46bd      	mov	sp, r7
 80048ea:	b006      	add	sp, #24
 80048ec:	bd80      	pop	{r7, pc}

080048ee <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048ee:	b590      	push	{r4, r7, lr}
 80048f0:	b08d      	sub	sp, #52	; 0x34
 80048f2:	af04      	add	r7, sp, #16
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	607a      	str	r2, [r7, #4]
 80048fa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <xTaskCreateStatic+0x18>
 8004902:	b672      	cpsid	i
 8004904:	e7fe      	b.n	8004904 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8004906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <xTaskCreateStatic+0x22>
 800490c:	b672      	cpsid	i
 800490e:	e7fe      	b.n	800490e <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004910:	235c      	movs	r3, #92	; 0x5c
 8004912:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2b5c      	cmp	r3, #92	; 0x5c
 8004918:	d001      	beq.n	800491e <xTaskCreateStatic+0x30>
 800491a:	b672      	cpsid	i
 800491c:	e7fe      	b.n	800491c <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800491e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004920:	2b00      	cmp	r3, #0
 8004922:	d020      	beq.n	8004966 <xTaskCreateStatic+0x78>
 8004924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004926:	2b00      	cmp	r3, #0
 8004928:	d01d      	beq.n	8004966 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800492a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492c:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004932:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	2259      	movs	r2, #89	; 0x59
 8004938:	2102      	movs	r1, #2
 800493a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800493c:	683c      	ldr	r4, [r7, #0]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	68b9      	ldr	r1, [r7, #8]
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	2300      	movs	r3, #0
 8004946:	9303      	str	r3, [sp, #12]
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	9302      	str	r3, [sp, #8]
 800494c:	2318      	movs	r3, #24
 800494e:	18fb      	adds	r3, r7, r3
 8004950:	9301      	str	r3, [sp, #4]
 8004952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	0023      	movs	r3, r4
 8004958:	f000 f858 	bl	8004a0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	0018      	movs	r0, r3
 8004960:	f000 f8d6 	bl	8004b10 <prvAddNewTaskToReadyList>
 8004964:	e001      	b.n	800496a <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8004966:	2300      	movs	r3, #0
 8004968:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800496a:	69bb      	ldr	r3, [r7, #24]
	}
 800496c:	0018      	movs	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	b009      	add	sp, #36	; 0x24
 8004972:	bd90      	pop	{r4, r7, pc}

08004974 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004974:	b590      	push	{r4, r7, lr}
 8004976:	b08d      	sub	sp, #52	; 0x34
 8004978:	af04      	add	r7, sp, #16
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	1dbb      	adds	r3, r7, #6
 8004982:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004984:	1dbb      	adds	r3, r7, #6
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	0018      	movs	r0, r3
 800498c:	f001 fa00 	bl	8005d90 <pvPortMalloc>
 8004990:	0003      	movs	r3, r0
 8004992:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d010      	beq.n	80049bc <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800499a:	205c      	movs	r0, #92	; 0x5c
 800499c:	f001 f9f8 	bl	8005d90 <pvPortMalloc>
 80049a0:	0003      	movs	r3, r0
 80049a2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	631a      	str	r2, [r3, #48]	; 0x30
 80049b0:	e006      	b.n	80049c0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	0018      	movs	r0, r3
 80049b6:	f001 fa91 	bl	8005edc <vPortFree>
 80049ba:	e001      	b.n	80049c0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049bc:	2300      	movs	r3, #0
 80049be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d01a      	beq.n	80049fc <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	2259      	movs	r2, #89	; 0x59
 80049ca:	2100      	movs	r1, #0
 80049cc:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049ce:	1dbb      	adds	r3, r7, #6
 80049d0:	881a      	ldrh	r2, [r3, #0]
 80049d2:	683c      	ldr	r4, [r7, #0]
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	2300      	movs	r3, #0
 80049da:	9303      	str	r3, [sp, #12]
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	9302      	str	r3, [sp, #8]
 80049e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	0023      	movs	r3, r4
 80049ea:	f000 f80f 	bl	8004a0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	0018      	movs	r0, r3
 80049f2:	f000 f88d 	bl	8004b10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049f6:	2301      	movs	r3, #1
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	e002      	b.n	8004a02 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049fc:	2301      	movs	r3, #1
 80049fe:	425b      	negs	r3, r3
 8004a00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a02:	69bb      	ldr	r3, [r7, #24]
	}
 8004a04:	0018      	movs	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	b009      	add	sp, #36	; 0x24
 8004a0a:	bd90      	pop	{r4, r7, pc}

08004a0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	001a      	movs	r2, r3
 8004a24:	21a5      	movs	r1, #165	; 0xa5
 8004a26:	f001 fb86 	bl	8006136 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4936      	ldr	r1, [pc, #216]	; (8004b0c <prvInitialiseNewTask+0x100>)
 8004a32:	468c      	mov	ip, r1
 8004a34:	4463      	add	r3, ip
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	18d3      	adds	r3, r2, r3
 8004a3a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	2207      	movs	r2, #7
 8004a40:	4393      	bics	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	2207      	movs	r2, #7
 8004a48:	4013      	ands	r3, r2
 8004a4a:	d001      	beq.n	8004a50 <prvInitialiseNewTask+0x44>
 8004a4c:	b672      	cpsid	i
 8004a4e:	e7fe      	b.n	8004a4e <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a50:	2300      	movs	r3, #0
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	e013      	b.n	8004a7e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	18d3      	adds	r3, r2, r3
 8004a5c:	7818      	ldrb	r0, [r3, #0]
 8004a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a60:	2134      	movs	r1, #52	; 0x34
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	18d3      	adds	r3, r2, r3
 8004a66:	185b      	adds	r3, r3, r1
 8004a68:	1c02      	adds	r2, r0, #0
 8004a6a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	18d3      	adds	r3, r2, r3
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d006      	beq.n	8004a86 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b0f      	cmp	r3, #15
 8004a82:	d9e8      	bls.n	8004a56 <prvInitialiseNewTask+0x4a>
 8004a84:	e000      	b.n	8004a88 <prvInitialiseNewTask+0x7c>
		{
			break;
 8004a86:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	2243      	movs	r2, #67	; 0x43
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	2b37      	cmp	r3, #55	; 0x37
 8004a94:	d901      	bls.n	8004a9a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a96:	2337      	movs	r3, #55	; 0x37
 8004a98:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9c:	6a3a      	ldr	r2, [r7, #32]
 8004a9e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa2:	6a3a      	ldr	r2, [r7, #32]
 8004aa4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aae:	3304      	adds	r3, #4
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f7ff fa69 	bl	8003f88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab8:	3318      	adds	r3, #24
 8004aba:	0018      	movs	r0, r3
 8004abc:	f7ff fa64 	bl	8003f88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ac4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	2238      	movs	r2, #56	; 0x38
 8004aca:	1ad2      	subs	r2, r2, r3
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ad4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	2200      	movs	r2, #0
 8004ada:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	2258      	movs	r2, #88	; 0x58
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	68f9      	ldr	r1, [r7, #12]
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	0018      	movs	r0, r3
 8004aec:	f001 f81c 	bl	8005b28 <pxPortInitialiseStack>
 8004af0:	0002      	movs	r2, r0
 8004af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b006      	add	sp, #24
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	3fffffff 	.word	0x3fffffff

08004b10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b18:	f001 f8a2 	bl	8005c60 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b1c:	4b2a      	ldr	r3, [pc, #168]	; (8004bc8 <prvAddNewTaskToReadyList+0xb8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	4b29      	ldr	r3, [pc, #164]	; (8004bc8 <prvAddNewTaskToReadyList+0xb8>)
 8004b24:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004b26:	4b29      	ldr	r3, [pc, #164]	; (8004bcc <prvAddNewTaskToReadyList+0xbc>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d109      	bne.n	8004b42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b2e:	4b27      	ldr	r3, [pc, #156]	; (8004bcc <prvAddNewTaskToReadyList+0xbc>)
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b34:	4b24      	ldr	r3, [pc, #144]	; (8004bc8 <prvAddNewTaskToReadyList+0xb8>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d110      	bne.n	8004b5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b3c:	f000 fb94 	bl	8005268 <prvInitialiseTaskLists>
 8004b40:	e00d      	b.n	8004b5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b42:	4b23      	ldr	r3, [pc, #140]	; (8004bd0 <prvAddNewTaskToReadyList+0xc0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d109      	bne.n	8004b5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b4a:	4b20      	ldr	r3, [pc, #128]	; (8004bcc <prvAddNewTaskToReadyList+0xbc>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d802      	bhi.n	8004b5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b58:	4b1c      	ldr	r3, [pc, #112]	; (8004bcc <prvAddNewTaskToReadyList+0xbc>)
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b5e:	4b1d      	ldr	r3, [pc, #116]	; (8004bd4 <prvAddNewTaskToReadyList+0xc4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	4b1b      	ldr	r3, [pc, #108]	; (8004bd4 <prvAddNewTaskToReadyList+0xc4>)
 8004b66:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b68:	4b1a      	ldr	r3, [pc, #104]	; (8004bd4 <prvAddNewTaskToReadyList+0xc4>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b74:	4b18      	ldr	r3, [pc, #96]	; (8004bd8 <prvAddNewTaskToReadyList+0xc8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d903      	bls.n	8004b84 <prvAddNewTaskToReadyList+0x74>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b80:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <prvAddNewTaskToReadyList+0xc8>)
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b88:	0013      	movs	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	189b      	adds	r3, r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4a12      	ldr	r2, [pc, #72]	; (8004bdc <prvAddNewTaskToReadyList+0xcc>)
 8004b92:	189a      	adds	r2, r3, r2
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3304      	adds	r3, #4
 8004b98:	0019      	movs	r1, r3
 8004b9a:	0010      	movs	r0, r2
 8004b9c:	f7ff f9ff 	bl	8003f9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ba0:	f001 f870 	bl	8005c84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ba4:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <prvAddNewTaskToReadyList+0xc0>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d008      	beq.n	8004bbe <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004bac:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <prvAddNewTaskToReadyList+0xbc>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d201      	bcs.n	8004bbe <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004bba:	f001 f841 	bl	8005c40 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b002      	add	sp, #8
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	20000bf8 	.word	0x20000bf8
 8004bcc:	20000724 	.word	0x20000724
 8004bd0:	20000c04 	.word	0x20000c04
 8004bd4:	20000c14 	.word	0x20000c14
 8004bd8:	20000c00 	.word	0x20000c00
 8004bdc:	20000728 	.word	0x20000728

08004be0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d010      	beq.n	8004c14 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <vTaskDelay+0x48>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <vTaskDelay+0x1e>
 8004bfa:	b672      	cpsid	i
 8004bfc:	e7fe      	b.n	8004bfc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004bfe:	f000 f869 	bl	8004cd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2100      	movs	r1, #0
 8004c06:	0018      	movs	r0, r3
 8004c08:	f000 fc64 	bl	80054d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c0c:	f000 f86e 	bl	8004cec <xTaskResumeAll>
 8004c10:	0003      	movs	r3, r0
 8004c12:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8004c1a:	f001 f811 	bl	8005c40 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	46bd      	mov	sp, r7
 8004c22:	b004      	add	sp, #16
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	20000c20 	.word	0x20000c20

08004c2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c2c:	b590      	push	{r4, r7, lr}
 8004c2e:	b089      	sub	sp, #36	; 0x24
 8004c30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c3a:	003a      	movs	r2, r7
 8004c3c:	1d39      	adds	r1, r7, #4
 8004c3e:	2308      	movs	r3, #8
 8004c40:	18fb      	adds	r3, r7, r3
 8004c42:	0018      	movs	r0, r3
 8004c44:	f7ff f952 	bl	8003eec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c48:	683c      	ldr	r4, [r7, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	491b      	ldr	r1, [pc, #108]	; (8004cbc <vTaskStartScheduler+0x90>)
 8004c50:	481b      	ldr	r0, [pc, #108]	; (8004cc0 <vTaskStartScheduler+0x94>)
 8004c52:	9202      	str	r2, [sp, #8]
 8004c54:	9301      	str	r3, [sp, #4]
 8004c56:	2300      	movs	r3, #0
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	0022      	movs	r2, r4
 8004c5e:	f7ff fe46 	bl	80048ee <xTaskCreateStatic>
 8004c62:	0002      	movs	r2, r0
 8004c64:	4b17      	ldr	r3, [pc, #92]	; (8004cc4 <vTaskStartScheduler+0x98>)
 8004c66:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c68:	4b16      	ldr	r3, [pc, #88]	; (8004cc4 <vTaskStartScheduler+0x98>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c70:	2301      	movs	r3, #1
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	e001      	b.n	8004c7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d103      	bne.n	8004c88 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8004c80:	f000 fc7c 	bl	800557c <xTimerCreateTimerTask>
 8004c84:	0003      	movs	r3, r0
 8004c86:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d10d      	bne.n	8004caa <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004c8e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c90:	4b0d      	ldr	r3, [pc, #52]	; (8004cc8 <vTaskStartScheduler+0x9c>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	4252      	negs	r2, r2
 8004c96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c98:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <vTaskStartScheduler+0xa0>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004c9e:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <vTaskStartScheduler+0xa4>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ca4:	f000 ffa8 	bl	8005bf8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ca8:	e004      	b.n	8004cb4 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3301      	adds	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <vTaskStartScheduler+0x88>
 8004cb0:	b672      	cpsid	i
 8004cb2:	e7fe      	b.n	8004cb2 <vTaskStartScheduler+0x86>
}
 8004cb4:	46c0      	nop			; (mov r8, r8)
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b005      	add	sp, #20
 8004cba:	bd90      	pop	{r4, r7, pc}
 8004cbc:	0800619c 	.word	0x0800619c
 8004cc0:	08005249 	.word	0x08005249
 8004cc4:	20000c1c 	.word	0x20000c1c
 8004cc8:	20000c18 	.word	0x20000c18
 8004ccc:	20000c04 	.word	0x20000c04
 8004cd0:	20000bfc 	.word	0x20000bfc

08004cd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004cd8:	4b03      	ldr	r3, [pc, #12]	; (8004ce8 <vTaskSuspendAll+0x14>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	4b02      	ldr	r3, [pc, #8]	; (8004ce8 <vTaskSuspendAll+0x14>)
 8004ce0:	601a      	str	r2, [r3, #0]
}
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000c20 	.word	0x20000c20

08004cec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cfa:	4b3a      	ldr	r3, [pc, #232]	; (8004de4 <xTaskResumeAll+0xf8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <xTaskResumeAll+0x1a>
 8004d02:	b672      	cpsid	i
 8004d04:	e7fe      	b.n	8004d04 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d06:	f000 ffab 	bl	8005c60 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d0a:	4b36      	ldr	r3, [pc, #216]	; (8004de4 <xTaskResumeAll+0xf8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	1e5a      	subs	r2, r3, #1
 8004d10:	4b34      	ldr	r3, [pc, #208]	; (8004de4 <xTaskResumeAll+0xf8>)
 8004d12:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d14:	4b33      	ldr	r3, [pc, #204]	; (8004de4 <xTaskResumeAll+0xf8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d15b      	bne.n	8004dd4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d1c:	4b32      	ldr	r3, [pc, #200]	; (8004de8 <xTaskResumeAll+0xfc>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d057      	beq.n	8004dd4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d24:	e02f      	b.n	8004d86 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004d26:	4b31      	ldr	r3, [pc, #196]	; (8004dec <xTaskResumeAll+0x100>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3318      	adds	r3, #24
 8004d32:	0018      	movs	r0, r3
 8004d34:	f7ff f98b 	bl	800404e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f7ff f986 	bl	800404e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d46:	4b2a      	ldr	r3, [pc, #168]	; (8004df0 <xTaskResumeAll+0x104>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d903      	bls.n	8004d56 <xTaskResumeAll+0x6a>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d52:	4b27      	ldr	r3, [pc, #156]	; (8004df0 <xTaskResumeAll+0x104>)
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d5a:	0013      	movs	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	189b      	adds	r3, r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4a24      	ldr	r2, [pc, #144]	; (8004df4 <xTaskResumeAll+0x108>)
 8004d64:	189a      	adds	r2, r3, r2
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	0019      	movs	r1, r3
 8004d6c:	0010      	movs	r0, r2
 8004d6e:	f7ff f916 	bl	8003f9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d76:	4b20      	ldr	r3, [pc, #128]	; (8004df8 <xTaskResumeAll+0x10c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d302      	bcc.n	8004d86 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004d80:	4b1e      	ldr	r3, [pc, #120]	; (8004dfc <xTaskResumeAll+0x110>)
 8004d82:	2201      	movs	r2, #1
 8004d84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d86:	4b19      	ldr	r3, [pc, #100]	; (8004dec <xTaskResumeAll+0x100>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1cb      	bne.n	8004d26 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d94:	f000 fb02 	bl	800539c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004d98:	4b19      	ldr	r3, [pc, #100]	; (8004e00 <xTaskResumeAll+0x114>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00f      	beq.n	8004dc4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004da4:	f000 f83c 	bl	8004e20 <xTaskIncrementTick>
 8004da8:	1e03      	subs	r3, r0, #0
 8004daa:	d002      	beq.n	8004db2 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004dac:	4b13      	ldr	r3, [pc, #76]	; (8004dfc <xTaskResumeAll+0x110>)
 8004dae:	2201      	movs	r2, #1
 8004db0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1f2      	bne.n	8004da4 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8004dbe:	4b10      	ldr	r3, [pc, #64]	; (8004e00 <xTaskResumeAll+0x114>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004dc4:	4b0d      	ldr	r3, [pc, #52]	; (8004dfc <xTaskResumeAll+0x110>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004dd0:	f000 ff36 	bl	8005c40 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dd4:	f000 ff56 	bl	8005c84 <vPortExitCritical>

	return xAlreadyYielded;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
}
 8004dda:	0018      	movs	r0, r3
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b004      	add	sp, #16
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	20000c20 	.word	0x20000c20
 8004de8:	20000bf8 	.word	0x20000bf8
 8004dec:	20000bb8 	.word	0x20000bb8
 8004df0:	20000c00 	.word	0x20000c00
 8004df4:	20000728 	.word	0x20000728
 8004df8:	20000724 	.word	0x20000724
 8004dfc:	20000c0c 	.word	0x20000c0c
 8004e00:	20000c08 	.word	0x20000c08

08004e04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e0a:	4b04      	ldr	r3, [pc, #16]	; (8004e1c <xTaskGetTickCount+0x18>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e10:	687b      	ldr	r3, [r7, #4]
}
 8004e12:	0018      	movs	r0, r3
 8004e14:	46bd      	mov	sp, r7
 8004e16:	b002      	add	sp, #8
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	20000bfc 	.word	0x20000bfc

08004e20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e2a:	4b4c      	ldr	r3, [pc, #304]	; (8004f5c <xTaskIncrementTick+0x13c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d000      	beq.n	8004e34 <xTaskIncrementTick+0x14>
 8004e32:	e083      	b.n	8004f3c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e34:	4b4a      	ldr	r3, [pc, #296]	; (8004f60 <xTaskIncrementTick+0x140>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e3c:	4b48      	ldr	r3, [pc, #288]	; (8004f60 <xTaskIncrementTick+0x140>)
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d117      	bne.n	8004e78 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e48:	4b46      	ldr	r3, [pc, #280]	; (8004f64 <xTaskIncrementTick+0x144>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <xTaskIncrementTick+0x36>
 8004e52:	b672      	cpsid	i
 8004e54:	e7fe      	b.n	8004e54 <xTaskIncrementTick+0x34>
 8004e56:	4b43      	ldr	r3, [pc, #268]	; (8004f64 <xTaskIncrementTick+0x144>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	4b42      	ldr	r3, [pc, #264]	; (8004f68 <xTaskIncrementTick+0x148>)
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	4b40      	ldr	r3, [pc, #256]	; (8004f64 <xTaskIncrementTick+0x144>)
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	4b40      	ldr	r3, [pc, #256]	; (8004f68 <xTaskIncrementTick+0x148>)
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	4b40      	ldr	r3, [pc, #256]	; (8004f6c <xTaskIncrementTick+0x14c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	4b3e      	ldr	r3, [pc, #248]	; (8004f6c <xTaskIncrementTick+0x14c>)
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	f000 fa92 	bl	800539c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e78:	4b3d      	ldr	r3, [pc, #244]	; (8004f70 <xTaskIncrementTick+0x150>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d34e      	bcc.n	8004f20 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e82:	4b38      	ldr	r3, [pc, #224]	; (8004f64 <xTaskIncrementTick+0x144>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <xTaskIncrementTick+0x70>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <xTaskIncrementTick+0x72>
 8004e90:	2300      	movs	r3, #0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d004      	beq.n	8004ea0 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e96:	4b36      	ldr	r3, [pc, #216]	; (8004f70 <xTaskIncrementTick+0x150>)
 8004e98:	2201      	movs	r2, #1
 8004e9a:	4252      	negs	r2, r2
 8004e9c:	601a      	str	r2, [r3, #0]
					break;
 8004e9e:	e03f      	b.n	8004f20 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ea0:	4b30      	ldr	r3, [pc, #192]	; (8004f64 <xTaskIncrementTick+0x144>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d203      	bcs.n	8004ec0 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004eb8:	4b2d      	ldr	r3, [pc, #180]	; (8004f70 <xTaskIncrementTick+0x150>)
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	601a      	str	r2, [r3, #0]
						break;
 8004ebe:	e02f      	b.n	8004f20 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f7ff f8c2 	bl	800404e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d004      	beq.n	8004edc <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	3318      	adds	r3, #24
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	f7ff f8b9 	bl	800404e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee0:	4b24      	ldr	r3, [pc, #144]	; (8004f74 <xTaskIncrementTick+0x154>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d903      	bls.n	8004ef0 <xTaskIncrementTick+0xd0>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eec:	4b21      	ldr	r3, [pc, #132]	; (8004f74 <xTaskIncrementTick+0x154>)
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef4:	0013      	movs	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	189b      	adds	r3, r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4a1e      	ldr	r2, [pc, #120]	; (8004f78 <xTaskIncrementTick+0x158>)
 8004efe:	189a      	adds	r2, r3, r2
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	3304      	adds	r3, #4
 8004f04:	0019      	movs	r1, r3
 8004f06:	0010      	movs	r0, r2
 8004f08:	f7ff f849 	bl	8003f9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f10:	4b1a      	ldr	r3, [pc, #104]	; (8004f7c <xTaskIncrementTick+0x15c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d3b3      	bcc.n	8004e82 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f1e:	e7b0      	b.n	8004e82 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f20:	4b16      	ldr	r3, [pc, #88]	; (8004f7c <xTaskIncrementTick+0x15c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f26:	4914      	ldr	r1, [pc, #80]	; (8004f78 <xTaskIncrementTick+0x158>)
 8004f28:	0013      	movs	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	189b      	adds	r3, r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	585b      	ldr	r3, [r3, r1]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d907      	bls.n	8004f46 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004f36:	2301      	movs	r3, #1
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	e004      	b.n	8004f46 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004f3c:	4b10      	ldr	r3, [pc, #64]	; (8004f80 <xTaskIncrementTick+0x160>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	1c5a      	adds	r2, r3, #1
 8004f42:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <xTaskIncrementTick+0x160>)
 8004f44:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004f46:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <xTaskIncrementTick+0x164>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004f52:	697b      	ldr	r3, [r7, #20]
}
 8004f54:	0018      	movs	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b006      	add	sp, #24
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	20000c20 	.word	0x20000c20
 8004f60:	20000bfc 	.word	0x20000bfc
 8004f64:	20000bb0 	.word	0x20000bb0
 8004f68:	20000bb4 	.word	0x20000bb4
 8004f6c:	20000c10 	.word	0x20000c10
 8004f70:	20000c18 	.word	0x20000c18
 8004f74:	20000c00 	.word	0x20000c00
 8004f78:	20000728 	.word	0x20000728
 8004f7c:	20000724 	.word	0x20000724
 8004f80:	20000c08 	.word	0x20000c08
 8004f84:	20000c0c 	.word	0x20000c0c

08004f88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f8e:	4b22      	ldr	r3, [pc, #136]	; (8005018 <vTaskSwitchContext+0x90>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f96:	4b21      	ldr	r3, [pc, #132]	; (800501c <vTaskSwitchContext+0x94>)
 8004f98:	2201      	movs	r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f9c:	e037      	b.n	800500e <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004f9e:	4b1f      	ldr	r3, [pc, #124]	; (800501c <vTaskSwitchContext+0x94>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004fa4:	4b1e      	ldr	r3, [pc, #120]	; (8005020 <vTaskSwitchContext+0x98>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	607b      	str	r3, [r7, #4]
 8004faa:	e007      	b.n	8004fbc <vTaskSwitchContext+0x34>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <vTaskSwitchContext+0x2e>
 8004fb2:	b672      	cpsid	i
 8004fb4:	e7fe      	b.n	8004fb4 <vTaskSwitchContext+0x2c>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	607b      	str	r3, [r7, #4]
 8004fbc:	4919      	ldr	r1, [pc, #100]	; (8005024 <vTaskSwitchContext+0x9c>)
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	0013      	movs	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	189b      	adds	r3, r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	585b      	ldr	r3, [r3, r1]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0ee      	beq.n	8004fac <vTaskSwitchContext+0x24>
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	0013      	movs	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	189b      	adds	r3, r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4a12      	ldr	r2, [pc, #72]	; (8005024 <vTaskSwitchContext+0x9c>)
 8004fda:	189b      	adds	r3, r3, r2
 8004fdc:	603b      	str	r3, [r7, #0]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	605a      	str	r2, [r3, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	3308      	adds	r3, #8
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d104      	bne.n	8004ffe <vTaskSwitchContext+0x76>
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	605a      	str	r2, [r3, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	4b08      	ldr	r3, [pc, #32]	; (8005028 <vTaskSwitchContext+0xa0>)
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	4b05      	ldr	r3, [pc, #20]	; (8005020 <vTaskSwitchContext+0x98>)
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	601a      	str	r2, [r3, #0]
}
 800500e:	46c0      	nop			; (mov r8, r8)
 8005010:	46bd      	mov	sp, r7
 8005012:	b002      	add	sp, #8
 8005014:	bd80      	pop	{r7, pc}
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	20000c20 	.word	0x20000c20
 800501c:	20000c0c 	.word	0x20000c0c
 8005020:	20000c00 	.word	0x20000c00
 8005024:	20000728 	.word	0x20000728
 8005028:	20000724 	.word	0x20000724

0800502c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <vTaskPlaceOnEventList+0x14>
 800503c:	b672      	cpsid	i
 800503e:	e7fe      	b.n	800503e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005040:	4b08      	ldr	r3, [pc, #32]	; (8005064 <vTaskPlaceOnEventList+0x38>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3318      	adds	r3, #24
 8005046:	001a      	movs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	0011      	movs	r1, r2
 800504c:	0018      	movs	r0, r3
 800504e:	f7fe ffc8 	bl	8003fe2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2101      	movs	r1, #1
 8005056:	0018      	movs	r0, r3
 8005058:	f000 fa3c 	bl	80054d4 <prvAddCurrentTaskToDelayedList>
}
 800505c:	46c0      	nop			; (mov r8, r8)
 800505e:	46bd      	mov	sp, r7
 8005060:	b002      	add	sp, #8
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20000724 	.word	0x20000724

08005068 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <vTaskPlaceOnEventListRestricted+0x16>
 800507a:	b672      	cpsid	i
 800507c:	e7fe      	b.n	800507c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800507e:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <vTaskPlaceOnEventListRestricted+0x48>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3318      	adds	r3, #24
 8005084:	001a      	movs	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	0011      	movs	r1, r2
 800508a:	0018      	movs	r0, r3
 800508c:	f7fe ff87 	bl	8003f9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8005096:	2301      	movs	r3, #1
 8005098:	425b      	negs	r3, r3
 800509a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	0011      	movs	r1, r2
 80050a2:	0018      	movs	r0, r3
 80050a4:	f000 fa16 	bl	80054d4 <prvAddCurrentTaskToDelayedList>
	}
 80050a8:	46c0      	nop			; (mov r8, r8)
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b004      	add	sp, #16
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	20000724 	.word	0x20000724

080050b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <xTaskRemoveFromEventList+0x1a>
 80050ca:	b672      	cpsid	i
 80050cc:	e7fe      	b.n	80050cc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	3318      	adds	r3, #24
 80050d2:	0018      	movs	r0, r3
 80050d4:	f7fe ffbb 	bl	800404e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050d8:	4b1e      	ldr	r3, [pc, #120]	; (8005154 <xTaskRemoveFromEventList+0xa0>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d11d      	bne.n	800511c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	3304      	adds	r3, #4
 80050e4:	0018      	movs	r0, r3
 80050e6:	f7fe ffb2 	bl	800404e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ee:	4b1a      	ldr	r3, [pc, #104]	; (8005158 <xTaskRemoveFromEventList+0xa4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d903      	bls.n	80050fe <xTaskRemoveFromEventList+0x4a>
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fa:	4b17      	ldr	r3, [pc, #92]	; (8005158 <xTaskRemoveFromEventList+0xa4>)
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005102:	0013      	movs	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	189b      	adds	r3, r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4a14      	ldr	r2, [pc, #80]	; (800515c <xTaskRemoveFromEventList+0xa8>)
 800510c:	189a      	adds	r2, r3, r2
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	3304      	adds	r3, #4
 8005112:	0019      	movs	r1, r3
 8005114:	0010      	movs	r0, r2
 8005116:	f7fe ff42 	bl	8003f9e <vListInsertEnd>
 800511a:	e007      	b.n	800512c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	3318      	adds	r3, #24
 8005120:	001a      	movs	r2, r3
 8005122:	4b0f      	ldr	r3, [pc, #60]	; (8005160 <xTaskRemoveFromEventList+0xac>)
 8005124:	0011      	movs	r1, r2
 8005126:	0018      	movs	r0, r3
 8005128:	f7fe ff39 	bl	8003f9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005130:	4b0c      	ldr	r3, [pc, #48]	; (8005164 <xTaskRemoveFromEventList+0xb0>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	429a      	cmp	r2, r3
 8005138:	d905      	bls.n	8005146 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800513a:	2301      	movs	r3, #1
 800513c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800513e:	4b0a      	ldr	r3, [pc, #40]	; (8005168 <xTaskRemoveFromEventList+0xb4>)
 8005140:	2201      	movs	r2, #1
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	e001      	b.n	800514a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800514a:	68fb      	ldr	r3, [r7, #12]
}
 800514c:	0018      	movs	r0, r3
 800514e:	46bd      	mov	sp, r7
 8005150:	b004      	add	sp, #16
 8005152:	bd80      	pop	{r7, pc}
 8005154:	20000c20 	.word	0x20000c20
 8005158:	20000c00 	.word	0x20000c00
 800515c:	20000728 	.word	0x20000728
 8005160:	20000bb8 	.word	0x20000bb8
 8005164:	20000724 	.word	0x20000724
 8005168:	20000c0c 	.word	0x20000c0c

0800516c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005174:	4b05      	ldr	r3, [pc, #20]	; (800518c <vTaskInternalSetTimeOutState+0x20>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800517c:	4b04      	ldr	r3, [pc, #16]	; (8005190 <vTaskInternalSetTimeOutState+0x24>)
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	605a      	str	r2, [r3, #4]
}
 8005184:	46c0      	nop			; (mov r8, r8)
 8005186:	46bd      	mov	sp, r7
 8005188:	b002      	add	sp, #8
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20000c10 	.word	0x20000c10
 8005190:	20000bfc 	.word	0x20000bfc

08005194 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <xTaskCheckForTimeOut+0x14>
 80051a4:	b672      	cpsid	i
 80051a6:	e7fe      	b.n	80051a6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <xTaskCheckForTimeOut+0x1e>
 80051ae:	b672      	cpsid	i
 80051b0:	e7fe      	b.n	80051b0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80051b2:	f000 fd55 	bl	8005c60 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80051b6:	4b1d      	ldr	r3, [pc, #116]	; (800522c <xTaskCheckForTimeOut+0x98>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3301      	adds	r3, #1
 80051cc:	d102      	bne.n	80051d4 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	e024      	b.n	800521e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	4b15      	ldr	r3, [pc, #84]	; (8005230 <xTaskCheckForTimeOut+0x9c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d007      	beq.n	80051f0 <xTaskCheckForTimeOut+0x5c>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d302      	bcc.n	80051f0 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80051ea:	2301      	movs	r3, #1
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	e016      	b.n	800521e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d20c      	bcs.n	8005214 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1ad2      	subs	r2, r2, r3
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	0018      	movs	r0, r3
 800520a:	f7ff ffaf 	bl	800516c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800520e:	2300      	movs	r3, #0
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	e004      	b.n	800521e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800521a:	2301      	movs	r3, #1
 800521c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800521e:	f000 fd31 	bl	8005c84 <vPortExitCritical>

	return xReturn;
 8005222:	697b      	ldr	r3, [r7, #20]
}
 8005224:	0018      	movs	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	b006      	add	sp, #24
 800522a:	bd80      	pop	{r7, pc}
 800522c:	20000bfc 	.word	0x20000bfc
 8005230:	20000c10 	.word	0x20000c10

08005234 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005238:	4b02      	ldr	r3, [pc, #8]	; (8005244 <vTaskMissedYield+0x10>)
 800523a:	2201      	movs	r2, #1
 800523c:	601a      	str	r2, [r3, #0]
}
 800523e:	46c0      	nop			; (mov r8, r8)
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	20000c0c 	.word	0x20000c0c

08005248 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005250:	f000 f84e 	bl	80052f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005254:	4b03      	ldr	r3, [pc, #12]	; (8005264 <prvIdleTask+0x1c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d9f9      	bls.n	8005250 <prvIdleTask+0x8>
			{
				taskYIELD();
 800525c:	f000 fcf0 	bl	8005c40 <vPortYield>
		prvCheckTasksWaitingTermination();
 8005260:	e7f6      	b.n	8005250 <prvIdleTask+0x8>
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	20000728 	.word	0x20000728

08005268 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800526e:	2300      	movs	r3, #0
 8005270:	607b      	str	r3, [r7, #4]
 8005272:	e00c      	b.n	800528e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	0013      	movs	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	189b      	adds	r3, r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4a14      	ldr	r2, [pc, #80]	; (80052d0 <prvInitialiseTaskLists+0x68>)
 8005280:	189b      	adds	r3, r3, r2
 8005282:	0018      	movs	r0, r3
 8005284:	f7fe fe62 	bl	8003f4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3301      	adds	r3, #1
 800528c:	607b      	str	r3, [r7, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b37      	cmp	r3, #55	; 0x37
 8005292:	d9ef      	bls.n	8005274 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005294:	4b0f      	ldr	r3, [pc, #60]	; (80052d4 <prvInitialiseTaskLists+0x6c>)
 8005296:	0018      	movs	r0, r3
 8005298:	f7fe fe58 	bl	8003f4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800529c:	4b0e      	ldr	r3, [pc, #56]	; (80052d8 <prvInitialiseTaskLists+0x70>)
 800529e:	0018      	movs	r0, r3
 80052a0:	f7fe fe54 	bl	8003f4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80052a4:	4b0d      	ldr	r3, [pc, #52]	; (80052dc <prvInitialiseTaskLists+0x74>)
 80052a6:	0018      	movs	r0, r3
 80052a8:	f7fe fe50 	bl	8003f4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80052ac:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <prvInitialiseTaskLists+0x78>)
 80052ae:	0018      	movs	r0, r3
 80052b0:	f7fe fe4c 	bl	8003f4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80052b4:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <prvInitialiseTaskLists+0x7c>)
 80052b6:	0018      	movs	r0, r3
 80052b8:	f7fe fe48 	bl	8003f4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80052bc:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <prvInitialiseTaskLists+0x80>)
 80052be:	4a05      	ldr	r2, [pc, #20]	; (80052d4 <prvInitialiseTaskLists+0x6c>)
 80052c0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052c2:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <prvInitialiseTaskLists+0x84>)
 80052c4:	4a04      	ldr	r2, [pc, #16]	; (80052d8 <prvInitialiseTaskLists+0x70>)
 80052c6:	601a      	str	r2, [r3, #0]
}
 80052c8:	46c0      	nop			; (mov r8, r8)
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b002      	add	sp, #8
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	20000728 	.word	0x20000728
 80052d4:	20000b88 	.word	0x20000b88
 80052d8:	20000b9c 	.word	0x20000b9c
 80052dc:	20000bb8 	.word	0x20000bb8
 80052e0:	20000bcc 	.word	0x20000bcc
 80052e4:	20000be4 	.word	0x20000be4
 80052e8:	20000bb0 	.word	0x20000bb0
 80052ec:	20000bb4 	.word	0x20000bb4

080052f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052f6:	e01a      	b.n	800532e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80052f8:	f000 fcb2 	bl	8005c60 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80052fc:	4b10      	ldr	r3, [pc, #64]	; (8005340 <prvCheckTasksWaitingTermination+0x50>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3304      	adds	r3, #4
 8005308:	0018      	movs	r0, r3
 800530a:	f7fe fea0 	bl	800404e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800530e:	4b0d      	ldr	r3, [pc, #52]	; (8005344 <prvCheckTasksWaitingTermination+0x54>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	1e5a      	subs	r2, r3, #1
 8005314:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <prvCheckTasksWaitingTermination+0x54>)
 8005316:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005318:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <prvCheckTasksWaitingTermination+0x58>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	1e5a      	subs	r2, r3, #1
 800531e:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <prvCheckTasksWaitingTermination+0x58>)
 8005320:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8005322:	f000 fcaf 	bl	8005c84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	0018      	movs	r0, r3
 800532a:	f000 f80f 	bl	800534c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800532e:	4b06      	ldr	r3, [pc, #24]	; (8005348 <prvCheckTasksWaitingTermination+0x58>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e0      	bne.n	80052f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	46bd      	mov	sp, r7
 800533a:	b002      	add	sp, #8
 800533c:	bd80      	pop	{r7, pc}
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	20000bcc 	.word	0x20000bcc
 8005344:	20000bf8 	.word	0x20000bf8
 8005348:	20000be0 	.word	0x20000be0

0800534c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2259      	movs	r2, #89	; 0x59
 8005358:	5c9b      	ldrb	r3, [r3, r2]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d109      	bne.n	8005372 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005362:	0018      	movs	r0, r3
 8005364:	f000 fdba 	bl	8005edc <vPortFree>
				vPortFree( pxTCB );
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	0018      	movs	r0, r3
 800536c:	f000 fdb6 	bl	8005edc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005370:	e010      	b.n	8005394 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2259      	movs	r2, #89	; 0x59
 8005376:	5c9b      	ldrb	r3, [r3, r2]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d104      	bne.n	8005386 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	0018      	movs	r0, r3
 8005380:	f000 fdac 	bl	8005edc <vPortFree>
	}
 8005384:	e006      	b.n	8005394 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2259      	movs	r2, #89	; 0x59
 800538a:	5c9b      	ldrb	r3, [r3, r2]
 800538c:	2b02      	cmp	r3, #2
 800538e:	d001      	beq.n	8005394 <prvDeleteTCB+0x48>
 8005390:	b672      	cpsid	i
 8005392:	e7fe      	b.n	8005392 <prvDeleteTCB+0x46>
	}
 8005394:	46c0      	nop			; (mov r8, r8)
 8005396:	46bd      	mov	sp, r7
 8005398:	b002      	add	sp, #8
 800539a:	bd80      	pop	{r7, pc}

0800539c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053a2:	4b0e      	ldr	r3, [pc, #56]	; (80053dc <prvResetNextTaskUnblockTime+0x40>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <prvResetNextTaskUnblockTime+0x14>
 80053ac:	2301      	movs	r3, #1
 80053ae:	e000      	b.n	80053b2 <prvResetNextTaskUnblockTime+0x16>
 80053b0:	2300      	movs	r3, #0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d004      	beq.n	80053c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80053b6:	4b0a      	ldr	r3, [pc, #40]	; (80053e0 <prvResetNextTaskUnblockTime+0x44>)
 80053b8:	2201      	movs	r2, #1
 80053ba:	4252      	negs	r2, r2
 80053bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80053be:	e008      	b.n	80053d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80053c0:	4b06      	ldr	r3, [pc, #24]	; (80053dc <prvResetNextTaskUnblockTime+0x40>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	4b04      	ldr	r3, [pc, #16]	; (80053e0 <prvResetNextTaskUnblockTime+0x44>)
 80053d0:	601a      	str	r2, [r3, #0]
}
 80053d2:	46c0      	nop			; (mov r8, r8)
 80053d4:	46bd      	mov	sp, r7
 80053d6:	b002      	add	sp, #8
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	46c0      	nop			; (mov r8, r8)
 80053dc:	20000bb0 	.word	0x20000bb0
 80053e0:	20000c18 	.word	0x20000c18

080053e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80053ea:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <xTaskGetSchedulerState+0x30>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d102      	bne.n	80053f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80053f2:	2301      	movs	r3, #1
 80053f4:	607b      	str	r3, [r7, #4]
 80053f6:	e008      	b.n	800540a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053f8:	4b07      	ldr	r3, [pc, #28]	; (8005418 <xTaskGetSchedulerState+0x34>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d102      	bne.n	8005406 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005400:	2302      	movs	r3, #2
 8005402:	607b      	str	r3, [r7, #4]
 8005404:	e001      	b.n	800540a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005406:	2300      	movs	r3, #0
 8005408:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800540a:	687b      	ldr	r3, [r7, #4]
	}
 800540c:	0018      	movs	r0, r3
 800540e:	46bd      	mov	sp, r7
 8005410:	b002      	add	sp, #8
 8005412:	bd80      	pop	{r7, pc}
 8005414:	20000c04 	.word	0x20000c04
 8005418:	20000c20 	.word	0x20000c20

0800541c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005428:	2300      	movs	r3, #0
 800542a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d044      	beq.n	80054bc <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005432:	4b25      	ldr	r3, [pc, #148]	; (80054c8 <xTaskPriorityDisinherit+0xac>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	429a      	cmp	r2, r3
 800543a:	d001      	beq.n	8005440 <xTaskPriorityDisinherit+0x24>
 800543c:	b672      	cpsid	i
 800543e:	e7fe      	b.n	800543e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <xTaskPriorityDisinherit+0x30>
 8005448:	b672      	cpsid	i
 800544a:	e7fe      	b.n	800544a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005450:	1e5a      	subs	r2, r3, #1
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800545e:	429a      	cmp	r2, r3
 8005460:	d02c      	beq.n	80054bc <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005466:	2b00      	cmp	r3, #0
 8005468:	d128      	bne.n	80054bc <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	3304      	adds	r3, #4
 800546e:	0018      	movs	r0, r3
 8005470:	f7fe fded 	bl	800404e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	2238      	movs	r2, #56	; 0x38
 8005482:	1ad2      	subs	r2, r2, r3
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548c:	4b0f      	ldr	r3, [pc, #60]	; (80054cc <xTaskPriorityDisinherit+0xb0>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d903      	bls.n	800549c <xTaskPriorityDisinherit+0x80>
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005498:	4b0c      	ldr	r3, [pc, #48]	; (80054cc <xTaskPriorityDisinherit+0xb0>)
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a0:	0013      	movs	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	189b      	adds	r3, r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4a09      	ldr	r2, [pc, #36]	; (80054d0 <xTaskPriorityDisinherit+0xb4>)
 80054aa:	189a      	adds	r2, r3, r2
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	3304      	adds	r3, #4
 80054b0:	0019      	movs	r1, r3
 80054b2:	0010      	movs	r0, r2
 80054b4:	f7fe fd73 	bl	8003f9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80054b8:	2301      	movs	r3, #1
 80054ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80054bc:	68fb      	ldr	r3, [r7, #12]
	}
 80054be:	0018      	movs	r0, r3
 80054c0:	46bd      	mov	sp, r7
 80054c2:	b004      	add	sp, #16
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	46c0      	nop			; (mov r8, r8)
 80054c8:	20000724 	.word	0x20000724
 80054cc:	20000c00 	.word	0x20000c00
 80054d0:	20000728 	.word	0x20000728

080054d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80054de:	4b21      	ldr	r3, [pc, #132]	; (8005564 <prvAddCurrentTaskToDelayedList+0x90>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054e4:	4b20      	ldr	r3, [pc, #128]	; (8005568 <prvAddCurrentTaskToDelayedList+0x94>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3304      	adds	r3, #4
 80054ea:	0018      	movs	r0, r3
 80054ec:	f7fe fdaf 	bl	800404e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3301      	adds	r3, #1
 80054f4:	d10b      	bne.n	800550e <prvAddCurrentTaskToDelayedList+0x3a>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d008      	beq.n	800550e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054fc:	4b1a      	ldr	r3, [pc, #104]	; (8005568 <prvAddCurrentTaskToDelayedList+0x94>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	1d1a      	adds	r2, r3, #4
 8005502:	4b1a      	ldr	r3, [pc, #104]	; (800556c <prvAddCurrentTaskToDelayedList+0x98>)
 8005504:	0011      	movs	r1, r2
 8005506:	0018      	movs	r0, r3
 8005508:	f7fe fd49 	bl	8003f9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800550c:	e026      	b.n	800555c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	18d3      	adds	r3, r2, r3
 8005514:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005516:	4b14      	ldr	r3, [pc, #80]	; (8005568 <prvAddCurrentTaskToDelayedList+0x94>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	429a      	cmp	r2, r3
 8005524:	d209      	bcs.n	800553a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005526:	4b12      	ldr	r3, [pc, #72]	; (8005570 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	4b0f      	ldr	r3, [pc, #60]	; (8005568 <prvAddCurrentTaskToDelayedList+0x94>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3304      	adds	r3, #4
 8005530:	0019      	movs	r1, r3
 8005532:	0010      	movs	r0, r2
 8005534:	f7fe fd55 	bl	8003fe2 <vListInsert>
}
 8005538:	e010      	b.n	800555c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800553a:	4b0e      	ldr	r3, [pc, #56]	; (8005574 <prvAddCurrentTaskToDelayedList+0xa0>)
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <prvAddCurrentTaskToDelayedList+0x94>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3304      	adds	r3, #4
 8005544:	0019      	movs	r1, r3
 8005546:	0010      	movs	r0, r2
 8005548:	f7fe fd4b 	bl	8003fe2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800554c:	4b0a      	ldr	r3, [pc, #40]	; (8005578 <prvAddCurrentTaskToDelayedList+0xa4>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	429a      	cmp	r2, r3
 8005554:	d202      	bcs.n	800555c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005556:	4b08      	ldr	r3, [pc, #32]	; (8005578 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	601a      	str	r2, [r3, #0]
}
 800555c:	46c0      	nop			; (mov r8, r8)
 800555e:	46bd      	mov	sp, r7
 8005560:	b004      	add	sp, #16
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20000bfc 	.word	0x20000bfc
 8005568:	20000724 	.word	0x20000724
 800556c:	20000be4 	.word	0x20000be4
 8005570:	20000bb4 	.word	0x20000bb4
 8005574:	20000bb0 	.word	0x20000bb0
 8005578:	20000c18 	.word	0x20000c18

0800557c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800557c:	b590      	push	{r4, r7, lr}
 800557e:	b089      	sub	sp, #36	; 0x24
 8005580:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005586:	f000 fa8b 	bl	8005aa0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800558a:	4b17      	ldr	r3, [pc, #92]	; (80055e8 <xTimerCreateTimerTask+0x6c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d020      	beq.n	80055d4 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005592:	2300      	movs	r3, #0
 8005594:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005596:	2300      	movs	r3, #0
 8005598:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800559a:	003a      	movs	r2, r7
 800559c:	1d39      	adds	r1, r7, #4
 800559e:	2308      	movs	r3, #8
 80055a0:	18fb      	adds	r3, r7, r3
 80055a2:	0018      	movs	r0, r3
 80055a4:	f7fe fcba 	bl	8003f1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80055a8:	683c      	ldr	r4, [r7, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	490f      	ldr	r1, [pc, #60]	; (80055ec <xTimerCreateTimerTask+0x70>)
 80055b0:	480f      	ldr	r0, [pc, #60]	; (80055f0 <xTimerCreateTimerTask+0x74>)
 80055b2:	9202      	str	r2, [sp, #8]
 80055b4:	9301      	str	r3, [sp, #4]
 80055b6:	2302      	movs	r3, #2
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	2300      	movs	r3, #0
 80055bc:	0022      	movs	r2, r4
 80055be:	f7ff f996 	bl	80048ee <xTaskCreateStatic>
 80055c2:	0002      	movs	r2, r0
 80055c4:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <xTimerCreateTimerTask+0x78>)
 80055c6:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80055c8:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <xTimerCreateTimerTask+0x78>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80055d0:	2301      	movs	r3, #1
 80055d2:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <xTimerCreateTimerTask+0x62>
 80055da:	b672      	cpsid	i
 80055dc:	e7fe      	b.n	80055dc <xTimerCreateTimerTask+0x60>
	return xReturn;
 80055de:	68fb      	ldr	r3, [r7, #12]
}
 80055e0:	0018      	movs	r0, r3
 80055e2:	46bd      	mov	sp, r7
 80055e4:	b005      	add	sp, #20
 80055e6:	bd90      	pop	{r4, r7, pc}
 80055e8:	20000c54 	.word	0x20000c54
 80055ec:	080061a4 	.word	0x080061a4
 80055f0:	08005701 	.word	0x08005701
 80055f4:	20000c58 	.word	0x20000c58

080055f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08a      	sub	sp, #40	; 0x28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005606:	2300      	movs	r3, #0
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <xTimerGenericCommand+0x1c>
 8005610:	b672      	cpsid	i
 8005612:	e7fe      	b.n	8005612 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005614:	4b1d      	ldr	r3, [pc, #116]	; (800568c <xTimerGenericCommand+0x94>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d031      	beq.n	8005680 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800561c:	2114      	movs	r1, #20
 800561e:	187b      	adds	r3, r7, r1
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005624:	187b      	adds	r3, r7, r1
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800562a:	187b      	adds	r3, r7, r1
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b05      	cmp	r3, #5
 8005634:	dc1a      	bgt.n	800566c <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005636:	f7ff fed5 	bl	80053e4 <xTaskGetSchedulerState>
 800563a:	0003      	movs	r3, r0
 800563c:	2b02      	cmp	r3, #2
 800563e:	d10a      	bne.n	8005656 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005640:	4b12      	ldr	r3, [pc, #72]	; (800568c <xTimerGenericCommand+0x94>)
 8005642:	6818      	ldr	r0, [r3, #0]
 8005644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005646:	2314      	movs	r3, #20
 8005648:	18f9      	adds	r1, r7, r3
 800564a:	2300      	movs	r3, #0
 800564c:	f7fe fded 	bl	800422a <xQueueGenericSend>
 8005650:	0003      	movs	r3, r0
 8005652:	627b      	str	r3, [r7, #36]	; 0x24
 8005654:	e014      	b.n	8005680 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005656:	4b0d      	ldr	r3, [pc, #52]	; (800568c <xTimerGenericCommand+0x94>)
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	2314      	movs	r3, #20
 800565c:	18f9      	adds	r1, r7, r3
 800565e:	2300      	movs	r3, #0
 8005660:	2200      	movs	r2, #0
 8005662:	f7fe fde2 	bl	800422a <xQueueGenericSend>
 8005666:	0003      	movs	r3, r0
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
 800566a:	e009      	b.n	8005680 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800566c:	4b07      	ldr	r3, [pc, #28]	; (800568c <xTimerGenericCommand+0x94>)
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	2314      	movs	r3, #20
 8005674:	18f9      	adds	r1, r7, r3
 8005676:	2300      	movs	r3, #0
 8005678:	f7fe fe9b 	bl	80043b2 <xQueueGenericSendFromISR>
 800567c:	0003      	movs	r3, r0
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005682:	0018      	movs	r0, r3
 8005684:	46bd      	mov	sp, r7
 8005686:	b00a      	add	sp, #40	; 0x28
 8005688:	bd80      	pop	{r7, pc}
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	20000c54 	.word	0x20000c54

08005690 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af02      	add	r7, sp, #8
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800569a:	4b18      	ldr	r3, [pc, #96]	; (80056fc <prvProcessExpiredTimer+0x6c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	3304      	adds	r3, #4
 80056a8:	0018      	movs	r0, r3
 80056aa:	f7fe fcd0 	bl	800404e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d119      	bne.n	80056ea <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	18d1      	adds	r1, r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 f8b6 	bl	8005834 <prvInsertTimerInActiveList>
 80056c8:	1e03      	subs	r3, r0, #0
 80056ca:	d00e      	beq.n	80056ea <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	2300      	movs	r3, #0
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	2300      	movs	r3, #0
 80056d6:	2100      	movs	r1, #0
 80056d8:	f7ff ff8e 	bl	80055f8 <xTimerGenericCommand>
 80056dc:	0003      	movs	r3, r0
 80056de:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <prvProcessExpiredTimer+0x5a>
 80056e6:	b672      	cpsid	i
 80056e8:	e7fe      	b.n	80056e8 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	0010      	movs	r0, r2
 80056f2:	4798      	blx	r3
}
 80056f4:	46c0      	nop			; (mov r8, r8)
 80056f6:	46bd      	mov	sp, r7
 80056f8:	b004      	add	sp, #16
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	20000c4c 	.word	0x20000c4c

08005700 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005708:	2308      	movs	r3, #8
 800570a:	18fb      	adds	r3, r7, r3
 800570c:	0018      	movs	r0, r3
 800570e:	f000 f851 	bl	80057b4 <prvGetNextExpireTime>
 8005712:	0003      	movs	r3, r0
 8005714:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	0011      	movs	r1, r2
 800571c:	0018      	movs	r0, r3
 800571e:	f000 f803 	bl	8005728 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005722:	f000 f8c9 	bl	80058b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005726:	e7ef      	b.n	8005708 <prvTimerTask+0x8>

08005728 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005732:	f7ff facf 	bl	8004cd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005736:	2308      	movs	r3, #8
 8005738:	18fb      	adds	r3, r7, r3
 800573a:	0018      	movs	r0, r3
 800573c:	f000 f85a 	bl	80057f4 <prvSampleTimeNow>
 8005740:	0003      	movs	r3, r0
 8005742:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d129      	bne.n	800579e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10c      	bne.n	800576a <prvProcessTimerOrBlockTask+0x42>
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	429a      	cmp	r2, r3
 8005756:	d808      	bhi.n	800576a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8005758:	f7ff fac8 	bl	8004cec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	0011      	movs	r1, r2
 8005762:	0018      	movs	r0, r3
 8005764:	f7ff ff94 	bl	8005690 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005768:	e01b      	b.n	80057a2 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d006      	beq.n	800577e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005770:	4b0e      	ldr	r3, [pc, #56]	; (80057ac <prvProcessTimerOrBlockTask+0x84>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	425a      	negs	r2, r3
 8005778:	4153      	adcs	r3, r2
 800577a:	b2db      	uxtb	r3, r3
 800577c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800577e:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <prvProcessTimerOrBlockTask+0x88>)
 8005780:	6818      	ldr	r0, [r3, #0]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	0019      	movs	r1, r3
 800578c:	f7ff f87c 	bl	8004888 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005790:	f7ff faac 	bl	8004cec <xTaskResumeAll>
 8005794:	1e03      	subs	r3, r0, #0
 8005796:	d104      	bne.n	80057a2 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8005798:	f000 fa52 	bl	8005c40 <vPortYield>
}
 800579c:	e001      	b.n	80057a2 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800579e:	f7ff faa5 	bl	8004cec <xTaskResumeAll>
}
 80057a2:	46c0      	nop			; (mov r8, r8)
 80057a4:	46bd      	mov	sp, r7
 80057a6:	b004      	add	sp, #16
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	46c0      	nop			; (mov r8, r8)
 80057ac:	20000c50 	.word	0x20000c50
 80057b0:	20000c54 	.word	0x20000c54

080057b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80057bc:	4b0c      	ldr	r3, [pc, #48]	; (80057f0 <prvGetNextExpireTime+0x3c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	425a      	negs	r2, r3
 80057c4:	4153      	adcs	r3, r2
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	001a      	movs	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d105      	bne.n	80057e2 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057d6:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <prvGetNextExpireTime+0x3c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	e001      	b.n	80057e6 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80057e6:	68fb      	ldr	r3, [r7, #12]
}
 80057e8:	0018      	movs	r0, r3
 80057ea:	46bd      	mov	sp, r7
 80057ec:	b004      	add	sp, #16
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	20000c4c 	.word	0x20000c4c

080057f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80057fc:	f7ff fb02 	bl	8004e04 <xTaskGetTickCount>
 8005800:	0003      	movs	r3, r0
 8005802:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8005804:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <prvSampleTimeNow+0x3c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	429a      	cmp	r2, r3
 800580c:	d205      	bcs.n	800581a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800580e:	f000 f8ed 	bl	80059ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	e002      	b.n	8005820 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005820:	4b03      	ldr	r3, [pc, #12]	; (8005830 <prvSampleTimeNow+0x3c>)
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8005826:	68fb      	ldr	r3, [r7, #12]
}
 8005828:	0018      	movs	r0, r3
 800582a:	46bd      	mov	sp, r7
 800582c:	b004      	add	sp, #16
 800582e:	bd80      	pop	{r7, pc}
 8005830:	20000c5c 	.word	0x20000c5c

08005834 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005842:	2300      	movs	r3, #0
 8005844:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	429a      	cmp	r2, r3
 8005858:	d812      	bhi.n	8005880 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	1ad2      	subs	r2, r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	429a      	cmp	r2, r3
 8005866:	d302      	bcc.n	800586e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005868:	2301      	movs	r3, #1
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	e01b      	b.n	80058a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800586e:	4b10      	ldr	r3, [pc, #64]	; (80058b0 <prvInsertTimerInActiveList+0x7c>)
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3304      	adds	r3, #4
 8005876:	0019      	movs	r1, r3
 8005878:	0010      	movs	r0, r2
 800587a:	f7fe fbb2 	bl	8003fe2 <vListInsert>
 800587e:	e012      	b.n	80058a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	429a      	cmp	r2, r3
 8005886:	d206      	bcs.n	8005896 <prvInsertTimerInActiveList+0x62>
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d302      	bcc.n	8005896 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005890:	2301      	movs	r3, #1
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	e007      	b.n	80058a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005896:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <prvInsertTimerInActiveList+0x80>)
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3304      	adds	r3, #4
 800589e:	0019      	movs	r1, r3
 80058a0:	0010      	movs	r0, r2
 80058a2:	f7fe fb9e 	bl	8003fe2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80058a6:	697b      	ldr	r3, [r7, #20]
}
 80058a8:	0018      	movs	r0, r3
 80058aa:	46bd      	mov	sp, r7
 80058ac:	b006      	add	sp, #24
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	20000c50 	.word	0x20000c50
 80058b4:	20000c4c 	.word	0x20000c4c

080058b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b08c      	sub	sp, #48	; 0x30
 80058bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058be:	e082      	b.n	80059c6 <prvProcessReceivedCommands+0x10e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80058c0:	2308      	movs	r3, #8
 80058c2:	18fb      	adds	r3, r7, r3
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	da10      	bge.n	80058ec <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80058ca:	2308      	movs	r3, #8
 80058cc:	18fb      	adds	r3, r7, r3
 80058ce:	3304      	adds	r3, #4
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <prvProcessReceivedCommands+0x24>
 80058d8:	b672      	cpsid	i
 80058da:	e7fe      	b.n	80058da <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	6858      	ldr	r0, [r3, #4]
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	0019      	movs	r1, r3
 80058ea:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80058ec:	2308      	movs	r3, #8
 80058ee:	18fb      	adds	r3, r7, r3
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	db66      	blt.n	80059c4 <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80058f6:	2308      	movs	r3, #8
 80058f8:	18fb      	adds	r3, r7, r3
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d004      	beq.n	8005910 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	3304      	adds	r3, #4
 800590a:	0018      	movs	r0, r3
 800590c:	f7fe fb9f 	bl	800404e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005910:	1d3b      	adds	r3, r7, #4
 8005912:	0018      	movs	r0, r3
 8005914:	f7ff ff6e 	bl	80057f4 <prvSampleTimeNow>
 8005918:	0003      	movs	r3, r0
 800591a:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800591c:	2308      	movs	r3, #8
 800591e:	18fb      	adds	r3, r7, r3
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b09      	cmp	r3, #9
 8005924:	d84f      	bhi.n	80059c6 <prvProcessReceivedCommands+0x10e>
 8005926:	009a      	lsls	r2, r3, #2
 8005928:	4b2e      	ldr	r3, [pc, #184]	; (80059e4 <prvProcessReceivedCommands+0x12c>)
 800592a:	18d3      	adds	r3, r2, r3
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005930:	2008      	movs	r0, #8
 8005932:	183b      	adds	r3, r7, r0
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	18d1      	adds	r1, r2, r3
 800593c:	183b      	adds	r3, r7, r0
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	6a38      	ldr	r0, [r7, #32]
 8005944:	f7ff ff76 	bl	8005834 <prvInsertTimerInActiveList>
 8005948:	1e03      	subs	r3, r0, #0
 800594a:	d03c      	beq.n	80059c6 <prvProcessReceivedCommands+0x10e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	6a3a      	ldr	r2, [r7, #32]
 8005952:	0010      	movs	r0, r2
 8005954:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d133      	bne.n	80059c6 <prvProcessReceivedCommands+0x10e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800595e:	2308      	movs	r3, #8
 8005960:	18fb      	adds	r3, r7, r3
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	18d2      	adds	r2, r2, r3
 800596a:	6a38      	ldr	r0, [r7, #32]
 800596c:	2300      	movs	r3, #0
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	2300      	movs	r3, #0
 8005972:	2100      	movs	r1, #0
 8005974:	f7ff fe40 	bl	80055f8 <xTimerGenericCommand>
 8005978:	0003      	movs	r3, r0
 800597a:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d121      	bne.n	80059c6 <prvProcessReceivedCommands+0x10e>
 8005982:	b672      	cpsid	i
 8005984:	e7fe      	b.n	8005984 <prvProcessReceivedCommands+0xcc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005986:	2308      	movs	r3, #8
 8005988:	18fb      	adds	r3, r7, r3
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <prvProcessReceivedCommands+0xe4>
 8005998:	b672      	cpsid	i
 800599a:	e7fe      	b.n	800599a <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	699a      	ldr	r2, [r3, #24]
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	18d1      	adds	r1, r2, r3
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	6a38      	ldr	r0, [r7, #32]
 80059aa:	f7ff ff43 	bl	8005834 <prvInsertTimerInActiveList>
					break;
 80059ae:	e00a      	b.n	80059c6 <prvProcessReceivedCommands+0x10e>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	222c      	movs	r2, #44	; 0x2c
 80059b4:	5c9b      	ldrb	r3, [r3, r2]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d105      	bne.n	80059c6 <prvProcessReceivedCommands+0x10e>
						{
							vPortFree( pxTimer );
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	0018      	movs	r0, r3
 80059be:	f000 fa8d 	bl	8005edc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80059c2:	e000      	b.n	80059c6 <prvProcessReceivedCommands+0x10e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80059c4:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059c6:	4b08      	ldr	r3, [pc, #32]	; (80059e8 <prvProcessReceivedCommands+0x130>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2208      	movs	r2, #8
 80059cc:	18b9      	adds	r1, r7, r2
 80059ce:	2200      	movs	r2, #0
 80059d0:	0018      	movs	r0, r3
 80059d2:	f7fe fd5f 	bl	8004494 <xQueueReceive>
 80059d6:	1e03      	subs	r3, r0, #0
 80059d8:	d000      	beq.n	80059dc <prvProcessReceivedCommands+0x124>
 80059da:	e771      	b.n	80058c0 <prvProcessReceivedCommands+0x8>
	}
}
 80059dc:	46c0      	nop			; (mov r8, r8)
 80059de:	46bd      	mov	sp, r7
 80059e0:	b00a      	add	sp, #40	; 0x28
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	08006214 	.word	0x08006214
 80059e8:	20000c54 	.word	0x20000c54

080059ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059f2:	e03e      	b.n	8005a72 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059f4:	4b28      	ldr	r3, [pc, #160]	; (8005a98 <prvSwitchTimerLists+0xac>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059fe:	4b26      	ldr	r3, [pc, #152]	; (8005a98 <prvSwitchTimerLists+0xac>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	3304      	adds	r3, #4
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	f7fe fb1e 	bl	800404e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	0010      	movs	r0, r2
 8005a1a:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d126      	bne.n	8005a72 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	18d3      	adds	r3, r2, r3
 8005a2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d90e      	bls.n	8005a54 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a42:	4b15      	ldr	r3, [pc, #84]	; (8005a98 <prvSwitchTimerLists+0xac>)
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3304      	adds	r3, #4
 8005a4a:	0019      	movs	r1, r3
 8005a4c:	0010      	movs	r0, r2
 8005a4e:	f7fe fac8 	bl	8003fe2 <vListInsert>
 8005a52:	e00e      	b.n	8005a72 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	2100      	movs	r1, #0
 8005a60:	f7ff fdca 	bl	80055f8 <xTimerGenericCommand>
 8005a64:	0003      	movs	r3, r0
 8005a66:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <prvSwitchTimerLists+0x86>
 8005a6e:	b672      	cpsid	i
 8005a70:	e7fe      	b.n	8005a70 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a72:	4b09      	ldr	r3, [pc, #36]	; (8005a98 <prvSwitchTimerLists+0xac>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1bb      	bne.n	80059f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a7c:	4b06      	ldr	r3, [pc, #24]	; (8005a98 <prvSwitchTimerLists+0xac>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a82:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <prvSwitchTimerLists+0xb0>)
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	4b04      	ldr	r3, [pc, #16]	; (8005a98 <prvSwitchTimerLists+0xac>)
 8005a88:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8005a8a:	4b04      	ldr	r3, [pc, #16]	; (8005a9c <prvSwitchTimerLists+0xb0>)
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	601a      	str	r2, [r3, #0]
}
 8005a90:	46c0      	nop			; (mov r8, r8)
 8005a92:	46bd      	mov	sp, r7
 8005a94:	b006      	add	sp, #24
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20000c4c 	.word	0x20000c4c
 8005a9c:	20000c50 	.word	0x20000c50

08005aa0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005aa6:	f000 f8db 	bl	8005c60 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005aaa:	4b17      	ldr	r3, [pc, #92]	; (8005b08 <prvCheckForValidListAndQueue+0x68>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d124      	bne.n	8005afc <prvCheckForValidListAndQueue+0x5c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ab2:	4b16      	ldr	r3, [pc, #88]	; (8005b0c <prvCheckForValidListAndQueue+0x6c>)
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	f7fe fa49 	bl	8003f4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005aba:	4b15      	ldr	r3, [pc, #84]	; (8005b10 <prvCheckForValidListAndQueue+0x70>)
 8005abc:	0018      	movs	r0, r3
 8005abe:	f7fe fa45 	bl	8003f4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ac2:	4b14      	ldr	r3, [pc, #80]	; (8005b14 <prvCheckForValidListAndQueue+0x74>)
 8005ac4:	4a11      	ldr	r2, [pc, #68]	; (8005b0c <prvCheckForValidListAndQueue+0x6c>)
 8005ac6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ac8:	4b13      	ldr	r3, [pc, #76]	; (8005b18 <prvCheckForValidListAndQueue+0x78>)
 8005aca:	4a11      	ldr	r2, [pc, #68]	; (8005b10 <prvCheckForValidListAndQueue+0x70>)
 8005acc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ace:	4913      	ldr	r1, [pc, #76]	; (8005b1c <prvCheckForValidListAndQueue+0x7c>)
 8005ad0:	4a13      	ldr	r2, [pc, #76]	; (8005b20 <prvCheckForValidListAndQueue+0x80>)
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	000b      	movs	r3, r1
 8005ad8:	2110      	movs	r1, #16
 8005ada:	200a      	movs	r0, #10
 8005adc:	f7fe fb33 	bl	8004146 <xQueueGenericCreateStatic>
 8005ae0:	0002      	movs	r2, r0
 8005ae2:	4b09      	ldr	r3, [pc, #36]	; (8005b08 <prvCheckForValidListAndQueue+0x68>)
 8005ae4:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ae6:	4b08      	ldr	r3, [pc, #32]	; (8005b08 <prvCheckForValidListAndQueue+0x68>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d006      	beq.n	8005afc <prvCheckForValidListAndQueue+0x5c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005aee:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <prvCheckForValidListAndQueue+0x68>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a0c      	ldr	r2, [pc, #48]	; (8005b24 <prvCheckForValidListAndQueue+0x84>)
 8005af4:	0011      	movs	r1, r2
 8005af6:	0018      	movs	r0, r3
 8005af8:	f7fe fe9e 	bl	8004838 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005afc:	f000 f8c2 	bl	8005c84 <vPortExitCritical>
}
 8005b00:	46c0      	nop			; (mov r8, r8)
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	46c0      	nop			; (mov r8, r8)
 8005b08:	20000c54 	.word	0x20000c54
 8005b0c:	20000c24 	.word	0x20000c24
 8005b10:	20000c38 	.word	0x20000c38
 8005b14:	20000c4c 	.word	0x20000c4c
 8005b18:	20000c50 	.word	0x20000c50
 8005b1c:	20000d00 	.word	0x20000d00
 8005b20:	20000c60 	.word	0x20000c60
 8005b24:	080061ac 	.word	0x080061ac

08005b28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3b04      	subs	r3, #4
 8005b38:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2280      	movs	r2, #128	; 0x80
 8005b3e:	0452      	lsls	r2, r2, #17
 8005b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	3b04      	subs	r3, #4
 8005b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3b04      	subs	r3, #4
 8005b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b54:	4a08      	ldr	r2, [pc, #32]	; (8005b78 <pxPortInitialiseStack+0x50>)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3b14      	subs	r3, #20
 8005b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3b20      	subs	r3, #32
 8005b6a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
}
 8005b6e:	0018      	movs	r0, r3
 8005b70:	46bd      	mov	sp, r7
 8005b72:	b004      	add	sp, #16
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	08005b7d 	.word	0x08005b7d

08005b7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005b82:	2300      	movs	r3, #0
 8005b84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b86:	4b07      	ldr	r3, [pc, #28]	; (8005ba4 <prvTaskExitError+0x28>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	d001      	beq.n	8005b92 <prvTaskExitError+0x16>
 8005b8e:	b672      	cpsid	i
 8005b90:	e7fe      	b.n	8005b90 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005b92:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005b94:	46c0      	nop			; (mov r8, r8)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0fc      	beq.n	8005b96 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b9c:	46c0      	nop			; (mov r8, r8)
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b002      	add	sp, #8
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	2000002c 	.word	0x2000002c

08005ba8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005bac:	46c0      	nop			; (mov r8, r8)
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
	...

08005bc0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005bc0:	4a0b      	ldr	r2, [pc, #44]	; (8005bf0 <pxCurrentTCBConst2>)
 8005bc2:	6813      	ldr	r3, [r2, #0]
 8005bc4:	6818      	ldr	r0, [r3, #0]
 8005bc6:	3020      	adds	r0, #32
 8005bc8:	f380 8809 	msr	PSP, r0
 8005bcc:	2002      	movs	r0, #2
 8005bce:	f380 8814 	msr	CONTROL, r0
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005bd8:	46ae      	mov	lr, r5
 8005bda:	bc08      	pop	{r3}
 8005bdc:	bc04      	pop	{r2}
 8005bde:	b662      	cpsie	i
 8005be0:	4718      	bx	r3
 8005be2:	46c0      	nop			; (mov r8, r8)
 8005be4:	46c0      	nop			; (mov r8, r8)
 8005be6:	46c0      	nop			; (mov r8, r8)
 8005be8:	46c0      	nop			; (mov r8, r8)
 8005bea:	46c0      	nop			; (mov r8, r8)
 8005bec:	46c0      	nop			; (mov r8, r8)
 8005bee:	46c0      	nop			; (mov r8, r8)

08005bf0 <pxCurrentTCBConst2>:
 8005bf0:	20000724 	.word	0x20000724
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005bf4:	46c0      	nop			; (mov r8, r8)
 8005bf6:	46c0      	nop			; (mov r8, r8)

08005bf8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8005bfc:	4b0e      	ldr	r3, [pc, #56]	; (8005c38 <xPortStartScheduler+0x40>)
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	4b0d      	ldr	r3, [pc, #52]	; (8005c38 <xPortStartScheduler+0x40>)
 8005c02:	21ff      	movs	r1, #255	; 0xff
 8005c04:	0409      	lsls	r1, r1, #16
 8005c06:	430a      	orrs	r2, r1
 8005c08:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8005c0a:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <xPortStartScheduler+0x40>)
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <xPortStartScheduler+0x40>)
 8005c10:	21ff      	movs	r1, #255	; 0xff
 8005c12:	0609      	lsls	r1, r1, #24
 8005c14:	430a      	orrs	r2, r1
 8005c16:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005c18:	f000 f898 	bl	8005d4c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c1c:	4b07      	ldr	r3, [pc, #28]	; (8005c3c <xPortStartScheduler+0x44>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005c22:	f7ff ffcd 	bl	8005bc0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c26:	f7ff f9af 	bl	8004f88 <vTaskSwitchContext>
	prvTaskExitError();
 8005c2a:	f7ff ffa7 	bl	8005b7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	0018      	movs	r0, r3
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	46c0      	nop			; (mov r8, r8)
 8005c38:	e000ed20 	.word	0xe000ed20
 8005c3c:	2000002c 	.word	0x2000002c

08005c40 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005c44:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <vPortYield+0x1c>)
 8005c46:	2280      	movs	r2, #128	; 0x80
 8005c48:	0552      	lsls	r2, r2, #21
 8005c4a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8005c4c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005c50:	f3bf 8f6f 	isb	sy
}
 8005c54:	46c0      	nop			; (mov r8, r8)
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	46c0      	nop			; (mov r8, r8)
 8005c5c:	e000ed04 	.word	0xe000ed04

08005c60 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005c64:	b672      	cpsid	i
    uxCriticalNesting++;
 8005c66:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <vPortEnterCritical+0x20>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	4b04      	ldr	r3, [pc, #16]	; (8005c80 <vPortEnterCritical+0x20>)
 8005c6e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005c70:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005c74:	f3bf 8f6f 	isb	sy
}
 8005c78:	46c0      	nop			; (mov r8, r8)
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	46c0      	nop			; (mov r8, r8)
 8005c80:	2000002c 	.word	0x2000002c

08005c84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c88:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <vPortExitCritical+0x2c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <vPortExitCritical+0x10>
 8005c90:	b672      	cpsid	i
 8005c92:	e7fe      	b.n	8005c92 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005c94:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <vPortExitCritical+0x2c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	1e5a      	subs	r2, r3, #1
 8005c9a:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <vPortExitCritical+0x2c>)
 8005c9c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8005c9e:	4b04      	ldr	r3, [pc, #16]	; (8005cb0 <vPortExitCritical+0x2c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d100      	bne.n	8005ca8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005ca6:	b662      	cpsie	i
    }
}
 8005ca8:	46c0      	nop			; (mov r8, r8)
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	2000002c 	.word	0x2000002c

08005cb4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005cb4:	f3ef 8010 	mrs	r0, PRIMASK
 8005cb8:	b672      	cpsid	i
 8005cba:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8005cbc:	46c0      	nop			; (mov r8, r8)
 8005cbe:	0018      	movs	r0, r3

08005cc0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005cc0:	f380 8810 	msr	PRIMASK, r0
 8005cc4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005cc6:	46c0      	nop			; (mov r8, r8)
	...

08005cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005cd0:	f3ef 8009 	mrs	r0, PSP
 8005cd4:	4b0e      	ldr	r3, [pc, #56]	; (8005d10 <pxCurrentTCBConst>)
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	3820      	subs	r0, #32
 8005cda:	6010      	str	r0, [r2, #0]
 8005cdc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005cde:	4644      	mov	r4, r8
 8005ce0:	464d      	mov	r5, r9
 8005ce2:	4656      	mov	r6, sl
 8005ce4:	465f      	mov	r7, fp
 8005ce6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005ce8:	b508      	push	{r3, lr}
 8005cea:	b672      	cpsid	i
 8005cec:	f7ff f94c 	bl	8004f88 <vTaskSwitchContext>
 8005cf0:	b662      	cpsie	i
 8005cf2:	bc0c      	pop	{r2, r3}
 8005cf4:	6811      	ldr	r1, [r2, #0]
 8005cf6:	6808      	ldr	r0, [r1, #0]
 8005cf8:	3010      	adds	r0, #16
 8005cfa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005cfc:	46a0      	mov	r8, r4
 8005cfe:	46a9      	mov	r9, r5
 8005d00:	46b2      	mov	sl, r6
 8005d02:	46bb      	mov	fp, r7
 8005d04:	f380 8809 	msr	PSP, r0
 8005d08:	3820      	subs	r0, #32
 8005d0a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005d0c:	4718      	bx	r3
 8005d0e:	46c0      	nop			; (mov r8, r8)

08005d10 <pxCurrentTCBConst>:
 8005d10:	20000724 	.word	0x20000724
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005d14:	46c0      	nop			; (mov r8, r8)
 8005d16:	46c0      	nop			; (mov r8, r8)

08005d18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d1e:	f7ff ffc9 	bl	8005cb4 <ulSetInterruptMaskFromISR>
 8005d22:	0003      	movs	r3, r0
 8005d24:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d26:	f7ff f87b 	bl	8004e20 <xTaskIncrementTick>
 8005d2a:	1e03      	subs	r3, r0, #0
 8005d2c:	d003      	beq.n	8005d36 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8005d2e:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <SysTick_Handler+0x30>)
 8005d30:	2280      	movs	r2, #128	; 0x80
 8005d32:	0552      	lsls	r2, r2, #21
 8005d34:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	0018      	movs	r0, r3
 8005d3a:	f7ff ffc1 	bl	8005cc0 <vClearInterruptMaskFromISR>
}
 8005d3e:	46c0      	nop			; (mov r8, r8)
 8005d40:	46bd      	mov	sp, r7
 8005d42:	b002      	add	sp, #8
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	46c0      	nop			; (mov r8, r8)
 8005d48:	e000ed04 	.word	0xe000ed04

08005d4c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005d50:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <prvSetupTimerInterrupt+0x34>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005d56:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <prvSetupTimerInterrupt+0x38>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d5c:	4b0a      	ldr	r3, [pc, #40]	; (8005d88 <prvSetupTimerInterrupt+0x3c>)
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	23fa      	movs	r3, #250	; 0xfa
 8005d62:	0099      	lsls	r1, r3, #2
 8005d64:	0010      	movs	r0, r2
 8005d66:	f7fa f9cf 	bl	8000108 <__udivsi3>
 8005d6a:	0003      	movs	r3, r0
 8005d6c:	001a      	movs	r2, r3
 8005d6e:	4b07      	ldr	r3, [pc, #28]	; (8005d8c <prvSetupTimerInterrupt+0x40>)
 8005d70:	3a01      	subs	r2, #1
 8005d72:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005d74:	4b02      	ldr	r3, [pc, #8]	; (8005d80 <prvSetupTimerInterrupt+0x34>)
 8005d76:	2207      	movs	r2, #7
 8005d78:	601a      	str	r2, [r3, #0]
}
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	e000e010 	.word	0xe000e010
 8005d84:	e000e018 	.word	0xe000e018
 8005d88:	20000024 	.word	0x20000024
 8005d8c:	e000e014 	.word	0xe000e014

08005d90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005d9c:	f7fe ff9a 	bl	8004cd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005da0:	4b49      	ldr	r3, [pc, #292]	; (8005ec8 <pvPortMalloc+0x138>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d101      	bne.n	8005dac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005da8:	f000 f8e0 	bl	8005f6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005dac:	4b47      	ldr	r3, [pc, #284]	; (8005ecc <pvPortMalloc+0x13c>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	4013      	ands	r3, r2
 8005db4:	d000      	beq.n	8005db8 <pvPortMalloc+0x28>
 8005db6:	e079      	b.n	8005eac <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d012      	beq.n	8005de4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8005dbe:	2208      	movs	r2, #8
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	189b      	adds	r3, r3, r2
 8005dc4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2207      	movs	r2, #7
 8005dca:	4013      	ands	r3, r2
 8005dcc:	d00a      	beq.n	8005de4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2207      	movs	r2, #7
 8005dd2:	4393      	bics	r3, r2
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2207      	movs	r2, #7
 8005ddc:	4013      	ands	r3, r2
 8005dde:	d001      	beq.n	8005de4 <pvPortMalloc+0x54>
 8005de0:	b672      	cpsid	i
 8005de2:	e7fe      	b.n	8005de2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d060      	beq.n	8005eac <pvPortMalloc+0x11c>
 8005dea:	4b39      	ldr	r3, [pc, #228]	; (8005ed0 <pvPortMalloc+0x140>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d85b      	bhi.n	8005eac <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005df4:	4b37      	ldr	r3, [pc, #220]	; (8005ed4 <pvPortMalloc+0x144>)
 8005df6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005df8:	4b36      	ldr	r3, [pc, #216]	; (8005ed4 <pvPortMalloc+0x144>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dfe:	e004      	b.n	8005e0a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d903      	bls.n	8005e1c <pvPortMalloc+0x8c>
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1f1      	bne.n	8005e00 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e1c:	4b2a      	ldr	r3, [pc, #168]	; (8005ec8 <pvPortMalloc+0x138>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d042      	beq.n	8005eac <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2208      	movs	r2, #8
 8005e2c:	189b      	adds	r3, r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	1ad2      	subs	r2, r2, r3
 8005e40:	2308      	movs	r3, #8
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d916      	bls.n	8005e76 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	18d3      	adds	r3, r2, r3
 8005e4e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2207      	movs	r2, #7
 8005e54:	4013      	ands	r3, r2
 8005e56:	d001      	beq.n	8005e5c <pvPortMalloc+0xcc>
 8005e58:	b672      	cpsid	i
 8005e5a:	e7fe      	b.n	8005e5a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	1ad2      	subs	r2, r2, r3
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	0018      	movs	r0, r3
 8005e72:	f000 f8db 	bl	800602c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e76:	4b16      	ldr	r3, [pc, #88]	; (8005ed0 <pvPortMalloc+0x140>)
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	1ad2      	subs	r2, r2, r3
 8005e80:	4b13      	ldr	r3, [pc, #76]	; (8005ed0 <pvPortMalloc+0x140>)
 8005e82:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e84:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <pvPortMalloc+0x140>)
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	4b13      	ldr	r3, [pc, #76]	; (8005ed8 <pvPortMalloc+0x148>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d203      	bcs.n	8005e98 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e90:	4b0f      	ldr	r3, [pc, #60]	; (8005ed0 <pvPortMalloc+0x140>)
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <pvPortMalloc+0x148>)
 8005e96:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	4b0b      	ldr	r3, [pc, #44]	; (8005ecc <pvPortMalloc+0x13c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005eac:	f7fe ff1e 	bl	8004cec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2207      	movs	r2, #7
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	d001      	beq.n	8005ebc <pvPortMalloc+0x12c>
 8005eb8:	b672      	cpsid	i
 8005eba:	e7fe      	b.n	8005eba <pvPortMalloc+0x12a>
	return pvReturn;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
}
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	b006      	add	sp, #24
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	46c0      	nop			; (mov r8, r8)
 8005ec8:	20001958 	.word	0x20001958
 8005ecc:	20001964 	.word	0x20001964
 8005ed0:	2000195c 	.word	0x2000195c
 8005ed4:	20001950 	.word	0x20001950
 8005ed8:	20001960 	.word	0x20001960

08005edc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d035      	beq.n	8005f5a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005eee:	2308      	movs	r3, #8
 8005ef0:	425b      	negs	r3, r3
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	18d3      	adds	r3, r2, r3
 8005ef6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	4b18      	ldr	r3, [pc, #96]	; (8005f64 <vPortFree+0x88>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4013      	ands	r3, r2
 8005f06:	d101      	bne.n	8005f0c <vPortFree+0x30>
 8005f08:	b672      	cpsid	i
 8005f0a:	e7fe      	b.n	8005f0a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <vPortFree+0x3c>
 8005f14:	b672      	cpsid	i
 8005f16:	e7fe      	b.n	8005f16 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <vPortFree+0x88>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4013      	ands	r3, r2
 8005f22:	d01a      	beq.n	8005f5a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d116      	bne.n	8005f5a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	4b0c      	ldr	r3, [pc, #48]	; (8005f64 <vPortFree+0x88>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	43db      	mvns	r3, r3
 8005f36:	401a      	ands	r2, r3
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f3c:	f7fe feca 	bl	8004cd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	4b08      	ldr	r3, [pc, #32]	; (8005f68 <vPortFree+0x8c>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	18d2      	adds	r2, r2, r3
 8005f4a:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <vPortFree+0x8c>)
 8005f4c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	0018      	movs	r0, r3
 8005f52:	f000 f86b 	bl	800602c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005f56:	f7fe fec9 	bl	8004cec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f5a:	46c0      	nop			; (mov r8, r8)
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	b004      	add	sp, #16
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	20001964 	.word	0x20001964
 8005f68:	2000195c 	.word	0x2000195c

08005f6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f72:	23c0      	movs	r3, #192	; 0xc0
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f78:	4b26      	ldr	r3, [pc, #152]	; (8006014 <prvHeapInit+0xa8>)
 8005f7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2207      	movs	r2, #7
 8005f80:	4013      	ands	r3, r2
 8005f82:	d00c      	beq.n	8005f9e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3307      	adds	r3, #7
 8005f88:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2207      	movs	r2, #7
 8005f8e:	4393      	bics	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	1ad2      	subs	r2, r2, r3
 8005f98:	4b1e      	ldr	r3, [pc, #120]	; (8006014 <prvHeapInit+0xa8>)
 8005f9a:	18d3      	adds	r3, r2, r3
 8005f9c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fa2:	4b1d      	ldr	r3, [pc, #116]	; (8006018 <prvHeapInit+0xac>)
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005fa8:	4b1b      	ldr	r3, [pc, #108]	; (8006018 <prvHeapInit+0xac>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	18d3      	adds	r3, r2, r3
 8005fb4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005fb6:	2208      	movs	r2, #8
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	1a9b      	subs	r3, r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2207      	movs	r2, #7
 8005fc2:	4393      	bics	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4b14      	ldr	r3, [pc, #80]	; (800601c <prvHeapInit+0xb0>)
 8005fca:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005fcc:	4b13      	ldr	r3, [pc, #76]	; (800601c <prvHeapInit+0xb0>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005fd4:	4b11      	ldr	r3, [pc, #68]	; (800601c <prvHeapInit+0xb0>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	1ad2      	subs	r2, r2, r3
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005fea:	4b0c      	ldr	r3, [pc, #48]	; (800601c <prvHeapInit+0xb0>)
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	4b0a      	ldr	r3, [pc, #40]	; (8006020 <prvHeapInit+0xb4>)
 8005ff8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	4b09      	ldr	r3, [pc, #36]	; (8006024 <prvHeapInit+0xb8>)
 8006000:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006002:	4b09      	ldr	r3, [pc, #36]	; (8006028 <prvHeapInit+0xbc>)
 8006004:	2280      	movs	r2, #128	; 0x80
 8006006:	0612      	lsls	r2, r2, #24
 8006008:	601a      	str	r2, [r3, #0]
}
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	46bd      	mov	sp, r7
 800600e:	b004      	add	sp, #16
 8006010:	bd80      	pop	{r7, pc}
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	20000d50 	.word	0x20000d50
 8006018:	20001950 	.word	0x20001950
 800601c:	20001958 	.word	0x20001958
 8006020:	20001960 	.word	0x20001960
 8006024:	2000195c 	.word	0x2000195c
 8006028:	20001964 	.word	0x20001964

0800602c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006034:	4b27      	ldr	r3, [pc, #156]	; (80060d4 <prvInsertBlockIntoFreeList+0xa8>)
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	e002      	b.n	8006040 <prvInsertBlockIntoFreeList+0x14>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	429a      	cmp	r2, r3
 8006048:	d8f7      	bhi.n	800603a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	18d3      	adds	r3, r2, r3
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	429a      	cmp	r2, r3
 800605a:	d108      	bne.n	800606e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	18d2      	adds	r2, r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	18d2      	adds	r2, r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d118      	bne.n	80060b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	4b14      	ldr	r3, [pc, #80]	; (80060d8 <prvInsertBlockIntoFreeList+0xac>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	429a      	cmp	r2, r3
 800608c:	d00d      	beq.n	80060aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	18d2      	adds	r2, r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	e008      	b.n	80060bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060aa:	4b0b      	ldr	r3, [pc, #44]	; (80060d8 <prvInsertBlockIntoFreeList+0xac>)
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	e003      	b.n	80060bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d002      	beq.n	80060ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060ca:	46c0      	nop			; (mov r8, r8)
 80060cc:	46bd      	mov	sp, r7
 80060ce:	b004      	add	sp, #16
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	46c0      	nop			; (mov r8, r8)
 80060d4:	20001950 	.word	0x20001950
 80060d8:	20001958 	.word	0x20001958

080060dc <__libc_init_array>:
 80060dc:	b570      	push	{r4, r5, r6, lr}
 80060de:	2600      	movs	r6, #0
 80060e0:	4d0c      	ldr	r5, [pc, #48]	; (8006114 <__libc_init_array+0x38>)
 80060e2:	4c0d      	ldr	r4, [pc, #52]	; (8006118 <__libc_init_array+0x3c>)
 80060e4:	1b64      	subs	r4, r4, r5
 80060e6:	10a4      	asrs	r4, r4, #2
 80060e8:	42a6      	cmp	r6, r4
 80060ea:	d109      	bne.n	8006100 <__libc_init_array+0x24>
 80060ec:	2600      	movs	r6, #0
 80060ee:	f000 f82b 	bl	8006148 <_init>
 80060f2:	4d0a      	ldr	r5, [pc, #40]	; (800611c <__libc_init_array+0x40>)
 80060f4:	4c0a      	ldr	r4, [pc, #40]	; (8006120 <__libc_init_array+0x44>)
 80060f6:	1b64      	subs	r4, r4, r5
 80060f8:	10a4      	asrs	r4, r4, #2
 80060fa:	42a6      	cmp	r6, r4
 80060fc:	d105      	bne.n	800610a <__libc_init_array+0x2e>
 80060fe:	bd70      	pop	{r4, r5, r6, pc}
 8006100:	00b3      	lsls	r3, r6, #2
 8006102:	58eb      	ldr	r3, [r5, r3]
 8006104:	4798      	blx	r3
 8006106:	3601      	adds	r6, #1
 8006108:	e7ee      	b.n	80060e8 <__libc_init_array+0xc>
 800610a:	00b3      	lsls	r3, r6, #2
 800610c:	58eb      	ldr	r3, [r5, r3]
 800610e:	4798      	blx	r3
 8006110:	3601      	adds	r6, #1
 8006112:	e7f2      	b.n	80060fa <__libc_init_array+0x1e>
 8006114:	0800623c 	.word	0x0800623c
 8006118:	0800623c 	.word	0x0800623c
 800611c:	0800623c 	.word	0x0800623c
 8006120:	08006240 	.word	0x08006240

08006124 <memcpy>:
 8006124:	2300      	movs	r3, #0
 8006126:	b510      	push	{r4, lr}
 8006128:	429a      	cmp	r2, r3
 800612a:	d100      	bne.n	800612e <memcpy+0xa>
 800612c:	bd10      	pop	{r4, pc}
 800612e:	5ccc      	ldrb	r4, [r1, r3]
 8006130:	54c4      	strb	r4, [r0, r3]
 8006132:	3301      	adds	r3, #1
 8006134:	e7f8      	b.n	8006128 <memcpy+0x4>

08006136 <memset>:
 8006136:	0003      	movs	r3, r0
 8006138:	1812      	adds	r2, r2, r0
 800613a:	4293      	cmp	r3, r2
 800613c:	d100      	bne.n	8006140 <memset+0xa>
 800613e:	4770      	bx	lr
 8006140:	7019      	strb	r1, [r3, #0]
 8006142:	3301      	adds	r3, #1
 8006144:	e7f9      	b.n	800613a <memset+0x4>
	...

08006148 <_init>:
 8006148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614a:	46c0      	nop			; (mov r8, r8)
 800614c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800614e:	bc08      	pop	{r3}
 8006150:	469e      	mov	lr, r3
 8006152:	4770      	bx	lr

08006154 <_fini>:
 8006154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006156:	46c0      	nop			; (mov r8, r8)
 8006158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800615a:	bc08      	pop	{r3}
 800615c:	469e      	mov	lr, r3
 800615e:	4770      	bx	lr
